
04_F407_EmbeddedServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a768  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a0  0800a8f8  0800a8f8  0000b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd98  0800bd98  0000da24  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd98  0800bd98  0000cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda0  0800bda0  0000da24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda0  0800bda0  0000cda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bda4  0800bda4  0000cda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a24  20000000  0800bda8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000da24  2**0
                  CONTENTS
 10 .bss          00000550  20000a24  20000a24  0000da24  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f74  20000f74  0000da24  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000da24  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158c1  00000000  00000000  0000da54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004462  00000000  00000000  00023315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00027778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d94  00000000  00000000  000288f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e62  00000000  00000000  0002968c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a164  00000000  00000000  0004f4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc98  00000000  00000000  00069652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001392ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005238  00000000  00000000  00139330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a24 	.word	0x20000a24
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8e0 	.word	0x0800a8e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a28 	.word	0x20000a28
 80001cc:	0800a8e0 	.word	0x0800a8e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <EXTI15_10_IRQHandler>:
 * \brief Interrupt handler for WiFi EXTI GPIO 2. Call callback API.
 *
 * \param[in] None.
 * \retval    None.
 */
void EXTI15_10_IRQHandler(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint16_t GPIO_Pin;

	/* Get GPIO_Pin */
	if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN)) {
 8000596:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <EXTI15_10_IRQHandler+0x28>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <EXTI15_10_IRQHandler+0x18>
		GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 80005a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a6:	80fb      	strh	r3, [r7, #6]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f9bc 	bl	8001928 <HAL_GPIO_EXTI_IRQHandler>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40013c00 	.word	0x40013c00

080005bc <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CONF_WINC_SPI_INT_PIN) {
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005cc:	d101      	bne.n	80005d2 <HAL_GPIO_EXTI_Callback+0x16>
		isr();
 80005ce:	f005 fa43 	bl	8005a58 <isr>
	}
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <socket_cb>:
 *  - tstrSocketListenMsg
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	603a      	str	r2, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	460b      	mov	r3, r1
 80005ea:	71bb      	strb	r3, [r7, #6]
	switch (u8Msg) {
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	f200 808f 	bhi.w	8000714 <socket_cb+0x138>
 80005f6:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <socket_cb+0x20>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	08000619 	.word	0x08000619
 8000600:	08000643 	.word	0x08000643
 8000604:	08000715 	.word	0x08000715
 8000608:	08000689 	.word	0x08000689
 800060c:	08000715 	.word	0x08000715
 8000610:	08000715 	.word	0x08000715
 8000614:	08000715 	.word	0x08000715
	/* Socket bind */
	case SOCKET_MSG_BIND: {
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg*) pvMsg;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	60bb      	str	r3, [r7, #8]
		if (pstrBind && pstrBind->status == 0) {
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d07a      	beq.n	8000718 <socket_cb+0x13c>
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	f993 3000 	ldrsb.w	r3, [r3]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d175      	bne.n	8000718 <socket_cb+0x13c>
			printf("socket_cb: bind success!\r\n");
 800062c:	4841      	ldr	r0, [pc, #260]	@ (8000734 <socket_cb+0x158>)
 800062e:	f008 fbdf 	bl	8008df0 <puts>
			listen(tcp_server_socket, 0);
 8000632:	4b41      	ldr	r3, [pc, #260]	@ (8000738 <socket_cb+0x15c>)
 8000634:	f993 3000 	ldrsb.w	r3, [r3]
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f007 ff58 	bl	80084f0 <listen>
		} else {
			//Handle bind error
		}
	}
		break;
 8000640:	e06a      	b.n	8000718 <socket_cb+0x13c>

		/* Socket listen */
	case SOCKET_MSG_LISTEN: {
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg*) pvMsg;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	60fb      	str	r3, [r7, #12]
		if (pstrListen && pstrListen->status == 0) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d010      	beq.n	800066e <socket_cb+0x92>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f993 3000 	ldrsb.w	r3, [r3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10b      	bne.n	800066e <socket_cb+0x92>
			printf("socket_cb: listen success!\r\n");
 8000656:	4839      	ldr	r0, [pc, #228]	@ (800073c <socket_cb+0x160>)
 8000658:	f008 fbca 	bl	8008df0 <puts>
			accept(tcp_server_socket, NULL, NULL);
 800065c:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <socket_cb+0x15c>)
 800065e:	f993 3000 	ldrsb.w	r3, [r3]
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 ff84 	bl	8008574 <accept>
			printf("socket_cb: listen error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
		break;
 800066c:	e057      	b.n	800071e <socket_cb+0x142>
			printf("socket_cb: listen error!\r\n");
 800066e:	4834      	ldr	r0, [pc, #208]	@ (8000740 <socket_cb+0x164>)
 8000670:	f008 fbbe 	bl	8008df0 <puts>
			close(tcp_server_socket);
 8000674:	4b30      	ldr	r3, [pc, #192]	@ (8000738 <socket_cb+0x15c>)
 8000676:	f993 3000 	ldrsb.w	r3, [r3]
 800067a:	4618      	mov	r0, r3
 800067c:	f008 f89a 	bl	80087b4 <close>
			tcp_server_socket = -1;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <socket_cb+0x15c>)
 8000682:	22ff      	movs	r2, #255	@ 0xff
 8000684:	701a      	strb	r2, [r3, #0]
		break;
 8000686:	e04a      	b.n	800071e <socket_cb+0x142>

		/* Connect accept */
	case SOCKET_MSG_ACCEPT: {
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg*) pvMsg;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	617b      	str	r3, [r7, #20]
		if (pstrAccept) {
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d033      	beq.n	80006fa <socket_cb+0x11e>
			printf("socket_cb: accept success!\r\n");
 8000692:	482c      	ldr	r0, [pc, #176]	@ (8000744 <socket_cb+0x168>)
 8000694:	f008 fbac 	bl	8008df0 <puts>
			accept(tcp_server_socket, NULL, NULL);
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <socket_cb+0x15c>)
 800069a:	f993 3000 	ldrsb.w	r3, [r3]
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 ff66 	bl	8008574 <accept>
			tcp_client_socket = pstrAccept->sock;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	f993 2000 	ldrsb.w	r2, [r3]
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <socket_cb+0x16c>)
 80006b0:	701a      	strb	r2, [r3, #0]
			//TODO: Check and report retval
			printf("accepted conection. Calling HTTP_Server\r\n");
 80006b2:	4826      	ldr	r0, [pc, #152]	@ (800074c <socket_cb+0x170>)
 80006b4:	f008 fb9c 	bl	8008df0 <puts>
			int ret = http_server(tcp_client_socket, httpNetops);
 80006b8:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <socket_cb+0x16c>)
 80006ba:	f993 3000 	ldrsb.w	r3, [r3]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <socket_cb+0x174>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4610      	mov	r0, r2
 80006c8:	f003 fe7e 	bl	80043c8 <http_server>
 80006cc:	6138      	str	r0, [r7, #16]
			if (ret != 0) {
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <socket_cb+0x140>
				printf("http_server failed!\n");
 80006d4:	481f      	ldr	r0, [pc, #124]	@ (8000754 <socket_cb+0x178>)
 80006d6:	f008 fb8b 	bl	8008df0 <puts>
				close(pstrAccept->sock);
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	f993 3000 	ldrsb.w	r3, [r3]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 f867 	bl	80087b4 <close>
				close(tcp_client_socket);
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <socket_cb+0x16c>)
 80006e8:	f993 3000 	ldrsb.w	r3, [r3]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f008 f861 	bl	80087b4 <close>
				tcp_client_socket = -1; // Reset socket variable
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <socket_cb+0x16c>)
 80006f4:	22ff      	movs	r2, #255	@ 0xff
 80006f6:	701a      	strb	r2, [r3, #0]
			printf("socket_cb: accept error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
		break;
 80006f8:	e010      	b.n	800071c <socket_cb+0x140>
			printf("socket_cb: accept error!\r\n");
 80006fa:	4817      	ldr	r0, [pc, #92]	@ (8000758 <socket_cb+0x17c>)
 80006fc:	f008 fb78 	bl	8008df0 <puts>
			close(tcp_server_socket);
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <socket_cb+0x15c>)
 8000702:	f993 3000 	ldrsb.w	r3, [r3]
 8000706:	4618      	mov	r0, r3
 8000708:	f008 f854 	bl	80087b4 <close>
			tcp_server_socket = -1;
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <socket_cb+0x15c>)
 800070e:	22ff      	movs	r2, #255	@ 0xff
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e003      	b.n	800071c <socket_cb+0x140>
	case SOCKET_MSG_RECV: {
	}
		break;

	default:
		break;
 8000714:	bf00      	nop
 8000716:	e002      	b.n	800071e <socket_cb+0x142>
		break;
 8000718:	bf00      	nop
 800071a:	e000      	b.n	800071e <socket_cb+0x142>
		break;
 800071c:	bf00      	nop
	}
	tcpServerSocketEventHandler(sock, u8Msg, pvMsg);
 800071e:	79b9      	ldrb	r1, [r7, #6]
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fcd4 	bl	80050d4 <tcpServerSocketEventHandler>
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800a8f8 	.word	0x0800a8f8
 8000738:	20000000 	.word	0x20000000
 800073c:	0800a914 	.word	0x0800a914
 8000740:	0800a930 	.word	0x0800a930
 8000744:	0800a94c 	.word	0x0800a94c
 8000748:	20000001 	.word	0x20000001
 800074c:	0800a968 	.word	0x0800a968
 8000750:	20000b98 	.word	0x20000b98
 8000754:	0800a994 	.word	0x0800a994
 8000758:	0800a9a8 	.word	0x0800a9a8

0800075c <wifi_cb>:
 *  - [M2M_WIFI_REQ_DHCP_CONF](@ref M2M_WIFI_REQ_DHCP_CONF)
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af02      	add	r7, sp, #8
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b2c      	cmp	r3, #44	@ 0x2c
 800076c:	d002      	beq.n	8000774 <wifi_cb+0x18>
 800076e:	2b32      	cmp	r3, #50	@ 0x32
 8000770:	d00e      	beq.n	8000790 <wifi_cb+0x34>
		wifi_connected = M2M_WIFI_CONNECTED;
		break;
	}

	default: {
		break;
 8000772:	e02a      	b.n	80007ca <wifi_cb+0x6e>
		tstrM2mWifiStateChanged *pstrWifiState =
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	60bb      	str	r3, [r7, #8]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d023      	beq.n	80007c8 <wifi_cb+0x6c>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d11f      	bne.n	80007c8 <wifi_cb+0x6c>
			printf("Station disconnected\r\n");
 8000788:	4812      	ldr	r0, [pc, #72]	@ (80007d4 <wifi_cb+0x78>)
 800078a:	f008 fb31 	bl	8008df0 <puts>
		break;
 800078e:	e01b      	b.n	80007c8 <wifi_cb+0x6c>
		uint8_t *pu8IPAddress = (uint8_t*) pvMsg;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	60fb      	str	r3, [r7, #12]
		printf("Station connected\r\n");
 8000794:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <wifi_cb+0x7c>)
 8000796:	f008 fb2b 	bl	8008df0 <puts>
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4619      	mov	r1, r3
				pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	781b      	ldrb	r3, [r3, #0]
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 80007a6:	461a      	mov	r2, r3
				pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3302      	adds	r3, #2
 80007ac:	781b      	ldrb	r3, [r3, #0]
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 80007ae:	4618      	mov	r0, r3
				pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3303      	adds	r3, #3
 80007b4:	781b      	ldrb	r3, [r3, #0]
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	4603      	mov	r3, r0
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <wifi_cb+0x80>)
 80007bc:	f008 fab0 	bl	8008d20 <iprintf>
		wifi_connected = M2M_WIFI_CONNECTED;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <wifi_cb+0x84>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
		break;
 80007c6:	e000      	b.n	80007ca <wifi_cb+0x6e>
		break;
 80007c8:	bf00      	nop
	}
	}
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	0800a9c4 	.word	0x0800a9c4
 80007d8:	0800a9dc 	.word	0x0800a9dc
 80007dc:	0800a9f0 	.word	0x0800a9f0
 80007e0:	20000a98 	.word	0x20000a98

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0b0      	sub	sp, #192	@ 0xc0
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fcdb 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f8bb 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f957 	bl	8000aa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007f6:	f000 f91f 	bl	8000a38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	/* Initialize the BSP. */
	nm_bsp_init();
 80007fa:	f004 ff2b 	bl	8005654 <nm_bsp_init>

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
 8000804:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000808:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	addr.sin_addr.s_addr = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t*) &param, 0, sizeof(tstrWifiInitParam));
 8000812:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000816:	2218      	movs	r2, #24
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f008 fc48 	bl	80090b0 <memset>

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
 8000820:	4b47      	ldr	r3, [pc, #284]	@ (8000940 <main+0x15c>)
 8000822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	ret = m2m_wifi_init(&param);
 8000826:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800082a:	4618      	mov	r0, r3
 800082c:	f005 ff0c 	bl	8006648 <m2m_wifi_init>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	if ((M2M_SUCCESS != ret) && (ret != M2M_ERR_FW_VER_MISMATCH)) {
 8000836:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00c      	beq.n	8000858 <main+0x74>
 800083e:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 8000842:	f113 0f0d 	cmn.w	r3, #13
 8000846:	d007      	beq.n	8000858 <main+0x74>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 8000848:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 800084c:	4619      	mov	r1, r3
 800084e:	483d      	ldr	r0, [pc, #244]	@ (8000944 <main+0x160>)
 8000850:	f008 fa66 	bl	8008d20 <iprintf>
		while (1) {
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <main+0x70>
		}
	}

	/* Initialize socket module */
	socketInit();
 8000858:	f007 fcf8 	bl	800824c <socketInit>
	registerSocketCallback(socket_cb, NULL);
 800085c:	2100      	movs	r1, #0
 800085e:	483a      	ldr	r0, [pc, #232]	@ (8000948 <main+0x164>)
 8000860:	f007 fd14 	bl	800828c <registerSocketCallback>

	/* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
	memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2288      	movs	r2, #136	@ 0x88
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f008 fc1f 	bl	80090b0 <memset>
	strcpy((char*) &strM2MAPConfig.au8SSID, MAIN_WLAN_SSID);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4a35      	ldr	r2, [pc, #212]	@ (800094c <main+0x168>)
 8000878:	ca07      	ldmia	r2, {r0, r1, r2}
 800087a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strM2MAPConfig.u8ListenChannel = MAIN_WLAN_CHANNEL;
 800087e:	2306      	movs	r3, #6
 8000880:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	strM2MAPConfig.u8SecType = MAIN_WLAN_AUTH;
 8000884:	2303      	movs	r3, #3
 8000886:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	strM2MAPConfig.au8DHCPServerIP[0] = 192;
 800088a:	23c0      	movs	r3, #192	@ 0xc0
 800088c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	strM2MAPConfig.au8DHCPServerIP[1] = 168;
 8000890:	23a8      	movs	r3, #168	@ 0xa8
 8000892:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	strM2MAPConfig.au8DHCPServerIP[2] = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	strM2MAPConfig.au8DHCPServerIP[3] = 9;
 800089c:	2309      	movs	r3, #9
 800089e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

#if USE_WEP
	strcpy((char*) &strM2MAPConfig.au8WepKey, MAIN_WLAN_WEP_KEY);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	3324      	adds	r3, #36	@ 0x24
 80008a8:	4a29      	ldr	r2, [pc, #164]	@ (8000950 <main+0x16c>)
 80008aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ac:	c303      	stmia	r3!, {r0, r1}
 80008ae:	801a      	strh	r2, [r3, #0]
 80008b0:	3302      	adds	r3, #2
 80008b2:	0c12      	lsrs	r2, r2, #16
 80008b4:	701a      	strb	r2, [r3, #0]
	strM2MAPConfig.u8KeySz = strlen(MAIN_WLAN_WEP_KEY);
 80008b6:	230a      	movs	r3, #10
 80008b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	strM2MAPConfig.u8KeyIndx = MAIN_WLAN_WEP_KEY_INDEX;
 80008bc:	2301      	movs	r3, #1
 80008be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
#endif

	/* Bring up AP mode with parameters structure. */
	ret = m2m_wifi_enable_ap(&strM2MAPConfig);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 ff4d 	bl	8006766 <m2m_wifi_enable_ap>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	if (M2M_SUCCESS != ret) {
 80008d2:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d004      	beq.n	80008e4 <main+0x100>
		printf("main: m2m_wifi_enable_ap call error!\r\n");
 80008da:	481e      	ldr	r0, [pc, #120]	@ (8000954 <main+0x170>)
 80008dc:	f008 fa88 	bl	8008df0 <puts>
		while (1) {
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <main+0xfc>
		}
	}

	printf("AP mode started. You can connect to %s.\r\n",
 80008e4:	4919      	ldr	r1, [pc, #100]	@ (800094c <main+0x168>)
 80008e6:	481c      	ldr	r0, [pc, #112]	@ (8000958 <main+0x174>)
 80008e8:	f008 fa1a 	bl	8008d20 <iprintf>
//		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
//		while (1) {
//		}
//	}
	//inint web server
	http_server_WINC15x0_init();
 80008ec:	f004 fd98 	bl	8005420 <http_server_WINC15x0_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		m2m_wifi_handle_events(NULL);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f005 ff2d 	bl	8006750 <m2m_wifi_handle_events>

		if (wifi_connected == M2M_WIFI_CONNECTED) {
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <main+0x178>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d1f8      	bne.n	80008f0 <main+0x10c>
			if (tcp_server_socket < 0) {
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <main+0x17c>)
 8000900:	f993 3000 	ldrsb.w	r3, [r3]
 8000904:	2b00      	cmp	r3, #0
 8000906:	daf3      	bge.n	80008f0 <main+0x10c>
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
 8000908:	2200      	movs	r2, #0
 800090a:	2101      	movs	r1, #1
 800090c:	2002      	movs	r0, #2
 800090e:	f007 fcd3 	bl	80082b8 <socket>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <main+0x17c>)
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <main+0x17c>)
 800091c:	f993 3000 	ldrsb.w	r3, [r3]
 8000920:	2b00      	cmp	r3, #0
 8000922:	da03      	bge.n	800092c <main+0x148>
					printf(
 8000924:	480f      	ldr	r0, [pc, #60]	@ (8000964 <main+0x180>)
 8000926:	f008 fa63 	bl	8008df0 <puts>
							"main: failed to create TCP server socket error!\r\n");
					continue;
 800092a:	e008      	b.n	800093e <main+0x15a>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr*) &addr,
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <main+0x17c>)
 800092e:	f993 3000 	ldrsb.w	r3, [r3]
 8000932:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000936:	2210      	movs	r2, #16
 8000938:	4618      	mov	r0, r3
 800093a:	f007 fd7b 	bl	8008434 <bind>
		m2m_wifi_handle_events(NULL);
 800093e:	e7d7      	b.n	80008f0 <main+0x10c>
 8000940:	0800075d 	.word	0x0800075d
 8000944:	0800aa0c 	.word	0x0800aa0c
 8000948:	080005dd 	.word	0x080005dd
 800094c:	0800aa34 	.word	0x0800aa34
 8000950:	0800aa40 	.word	0x0800aa40
 8000954:	0800aa4c 	.word	0x0800aa4c
 8000958:	0800aa74 	.word	0x0800aa74
 800095c:	20000a98 	.word	0x20000a98
 8000960:	20000000 	.word	0x20000000
 8000964:	0800aaa0 	.word	0x0800aaa0

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	@ 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	@ 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f008 fb9a 	bl	80090b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <SystemClock_Config+0xc8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	4a26      	ldr	r2, [pc, #152]	@ (8000a30 <SystemClock_Config+0xc8>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	@ 0x40
 800099c:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <SystemClock_Config+0xc8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <SystemClock_Config+0xcc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a20      	ldr	r2, [pc, #128]	@ (8000a34 <SystemClock_Config+0xcc>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <SystemClock_Config+0xcc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2310      	movs	r3, #16
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d8:	2308      	movs	r3, #8
 80009da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009dc:	2348      	movs	r3, #72	@ 0x48
 80009de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80009e0:	2306      	movs	r3, #6
 80009e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009e4:	2307      	movs	r3, #7
 80009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 ffb3 	bl	8001958 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f8:	f000 f9a2 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2302      	movs	r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa15 	bl	8001e48 <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a24:	f000 f98c 	bl	8000d40 <Error_Handler>
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3750      	adds	r7, #80	@ 0x50
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <MX_SPI1_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_SPI1_Init+0x64>)
 8000a8a:	f001 fbc9 	bl	8002220 <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 f954 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000a40 	.word	0x20000a40
 8000aa0:	40013000 	.word	0x40013000

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	@ 0x30
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	4b9a      	ldr	r3, [pc, #616]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a99      	ldr	r2, [pc, #612]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	4b93      	ldr	r3, [pc, #588]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a92      	ldr	r2, [pc, #584]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b90      	ldr	r3, [pc, #576]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b8c      	ldr	r3, [pc, #560]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a8b      	ldr	r2, [pc, #556]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b89      	ldr	r3, [pc, #548]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b85      	ldr	r3, [pc, #532]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a84      	ldr	r2, [pc, #528]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b82      	ldr	r3, [pc, #520]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a7d      	ldr	r2, [pc, #500]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b77      	ldr	r3, [pc, #476]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a76      	ldr	r2, [pc, #472]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b74      	ldr	r3, [pc, #464]	@ (8000d28 <MX_GPIO_Init+0x284>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2108      	movs	r1, #8
 8000b66:	4871      	ldr	r0, [pc, #452]	@ (8000d2c <MX_GPIO_Init+0x288>)
 8000b68:	f000 feaa 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2101      	movs	r1, #1
 8000b70:	486f      	ldr	r0, [pc, #444]	@ (8000d30 <MX_GPIO_Init+0x28c>)
 8000b72:	f000 fea5 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b76:	2200      	movs	r2, #0
 8000b78:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b7c:	486d      	ldr	r0, [pc, #436]	@ (8000d34 <MX_GPIO_Init+0x290>)
 8000b7e:	f000 fe9f 	bl	80018c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4864      	ldr	r0, [pc, #400]	@ (8000d2c <MX_GPIO_Init+0x288>)
 8000b9a:	f000 fcdd 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	485e      	ldr	r0, [pc, #376]	@ (8000d30 <MX_GPIO_Init+0x28c>)
 8000bb6:	f000 fccf 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4856      	ldr	r0, [pc, #344]	@ (8000d30 <MX_GPIO_Init+0x28c>)
 8000bd6:	f000 fcbf 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4852      	ldr	r0, [pc, #328]	@ (8000d38 <MX_GPIO_Init+0x294>)
 8000bf0:	f000 fcb2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c04:	2306      	movs	r3, #6
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	484a      	ldr	r0, [pc, #296]	@ (8000d38 <MX_GPIO_Init+0x294>)
 8000c10:	f000 fca2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4845      	ldr	r0, [pc, #276]	@ (8000d3c <MX_GPIO_Init+0x298>)
 8000c28:	f000 fc96 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	483c      	ldr	r0, [pc, #240]	@ (8000d3c <MX_GPIO_Init+0x298>)
 8000c4a:	f000 fc85 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c4e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000c52:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4833      	ldr	r0, [pc, #204]	@ (8000d34 <MX_GPIO_Init+0x290>)
 8000c68:	f000 fc76 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c6c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c7e:	2306      	movs	r3, #6
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4829      	ldr	r0, [pc, #164]	@ (8000d30 <MX_GPIO_Init+0x28c>)
 8000c8a:	f000 fc65 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4825      	ldr	r0, [pc, #148]	@ (8000d38 <MX_GPIO_Init+0x294>)
 8000ca4:	f000 fc58 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ca8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cba:	230a      	movs	r3, #10
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481c      	ldr	r0, [pc, #112]	@ (8000d38 <MX_GPIO_Init+0x294>)
 8000cc6:	f000 fc47 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4815      	ldr	r0, [pc, #84]	@ (8000d34 <MX_GPIO_Init+0x290>)
 8000cde:	f000 fc3b 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ce2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480f      	ldr	r0, [pc, #60]	@ (8000d3c <MX_GPIO_Init+0x298>)
 8000d00:	f000 fc2a 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d08:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <MX_GPIO_Init+0x288>)
 8000d1a:	f000 fc1d 	bl	8001558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020400 	.word	0x40020400

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f000 fb94 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a23      	ldr	r2, [pc, #140]	@ (8000e48 <HAL_SPI_MspInit+0xac>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d13f      	bne.n	8000e3e <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <HAL_SPI_MspInit+0xb0>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <HAL_SPI_MspInit+0xb0>)
 8000dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <HAL_SPI_MspInit+0xb0>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <HAL_SPI_MspInit+0xb0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e4c <HAL_SPI_MspInit+0xb0>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <HAL_SPI_MspInit+0xb0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000df6:	23e0      	movs	r3, #224	@ 0xe0
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e06:	2305      	movs	r3, #5
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480f      	ldr	r0, [pc, #60]	@ (8000e50 <HAL_SPI_MspInit+0xb4>)
 8000e12:	f000 fba1 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <HAL_SPI_MspInit+0xb4>)
 8000e34:	f000 fb90 	bl	8001558 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
		  extern void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi);
		  nm_bus_wifi_spi_init(hspi);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f004 fd05 	bl	8005848 <nm_bus_wifi_spi_init>
  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <NMI_Handler+0x4>

08000e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eaa:	f000 f9cd 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <ITM_SendChar+0x48>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8000efc <ITM_SendChar+0x48>)
 8000ec4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <ITM_SendChar+0x4c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <ITM_SendChar+0x4c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ed6:	bf00      	nop
 8000ed8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f8      	beq.n	8000ed8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ee6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	6013      	str	r3, [r2, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000edfc 	.word	0xe000edfc
 8000f00:	e0000e00 	.word	0xe0000e00

08000f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_kill>:

int _kill(int pid, int sig)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f1e:	f008 f9cd 	bl	80092bc <__errno>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2216      	movs	r2, #22
 8000f26:	601a      	str	r2, [r3, #0]
  return -1;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_exit>:

void _exit (int status)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffe7 	bl	8000f14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f46:	bf00      	nop
 8000f48:	e7fd      	b.n	8000f46 <_exit+0x12>

08000f4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e00a      	b.n	8000f72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5c:	f3af 8000 	nop.w
 8000f60:	4601      	mov	r1, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	60ba      	str	r2, [r7, #8]
 8000f68:	b2ca      	uxtb	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbf0      	blt.n	8000f5c <_read+0x12>
  }

  return len;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e009      	b.n	8000faa <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	60ba      	str	r2, [r7, #8]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff88 	bl	8000eb4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbf1      	blt.n	8000f96 <_write+0x12>
  }
  return len;
 8000fb2:	687b      	ldr	r3, [r7, #4]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_close>:

int _close(int file)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_isatty>:

int _isatty(int file)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	@ (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f008 f932 	bl	80092bc <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <_sbrk+0x64>)
 8001074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20020000 	.word	0x20020000
 8001084:	00000400 	.word	0x00000400
 8001088:	20000a9c 	.word	0x20000a9c
 800108c:	20000f78 	.word	0x20000f78

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f008 f8f1 	bl	80092c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fb7d 	bl	80007e4 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000a24 	.word	0x20000a24
  ldr r2, =_sidata
 80010f8:	0800bda8 	.word	0x0800bda8
  ldr r2, =_sbss
 80010fc:	20000a24 	.word	0x20000a24
  ldr r4, =_ebss
 8001100:	20000f74 	.word	0x20000f74

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>
	...

08001108 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <BSP_LED_On+0x2c>)
 8001116:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <BSP_LED_On+0x30>)
 800111e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	f000 fbcb 	bl	80018c0 <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	0800b8e8 	.word	0x0800b8e8

0800113c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <BSP_LED_Off+0x2c>)
 800114a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4a06      	ldr	r2, [pc, #24]	@ (800116c <BSP_LED_Off+0x30>)
 8001152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	f000 fbb1 	bl	80018c0 <HAL_GPIO_WritePin>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	0800b8e8 	.word	0x0800b8e8

08001170 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3 
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a07      	ldr	r2, [pc, #28]	@ (800119c <BSP_LED_Toggle+0x2c>)
 800117e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4906      	ldr	r1, [pc, #24]	@ (80011a0 <BSP_LED_Toggle+0x30>)
 8001186:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f000 fbb0 	bl	80018f2 <HAL_GPIO_TogglePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	0800b8e8 	.word	0x0800b8e8

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f973 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fdb8 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f999 	bl	800153e <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f953 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000004 	.word	0x20000004
 8001240:	2000001c 	.word	0x2000001c
 8001244:	20000018 	.word	0x20000018

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000001c 	.word	0x2000001c
 800126c:	20000aa0 	.word	0x20000aa0

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000aa0 	.word	0x20000aa0

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000001c 	.word	0x2000001c

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	@ (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db12      	blt.n	80013a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	490a      	ldr	r1, [pc, #40]	@ (80013b4 <__NVIC_DisableIRQ+0x44>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	3320      	adds	r3, #32
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800139c:	f3bf 8f4f 	dsb	sy
}
 80013a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a2:	f3bf 8f6f 	isb	sy
}
 80013a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff05 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff1a 	bl	8001318 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff0d 	bl	8001334 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff1d 	bl	8001370 <__NVIC_DisableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff94 	bl	8001474 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e16b      	b.n	800184c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 815a 	bne.w	8001846 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d005      	beq.n	80015aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d130      	bne.n	800160c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80b4 	beq.w	8001846 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <HAL_GPIO_Init+0x30c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001864 <HAL_GPIO_Init+0x30c>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001864 <HAL_GPIO_Init+0x30c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001868 <HAL_GPIO_Init+0x310>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a52      	ldr	r2, [pc, #328]	@ (800186c <HAL_GPIO_Init+0x314>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02b      	beq.n	800177e <HAL_GPIO_Init+0x226>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a51      	ldr	r2, [pc, #324]	@ (8001870 <HAL_GPIO_Init+0x318>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x222>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a50      	ldr	r2, [pc, #320]	@ (8001874 <HAL_GPIO_Init+0x31c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x21e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4f      	ldr	r2, [pc, #316]	@ (8001878 <HAL_GPIO_Init+0x320>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x21a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4e      	ldr	r2, [pc, #312]	@ (800187c <HAL_GPIO_Init+0x324>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x216>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4d      	ldr	r2, [pc, #308]	@ (8001880 <HAL_GPIO_Init+0x328>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x212>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4c      	ldr	r2, [pc, #304]	@ (8001884 <HAL_GPIO_Init+0x32c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4b      	ldr	r2, [pc, #300]	@ (8001888 <HAL_GPIO_Init+0x330>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x20a>
 800175e:	2307      	movs	r3, #7
 8001760:	e00e      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001762:	2308      	movs	r3, #8
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001766:	2306      	movs	r3, #6
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800177e:	2300      	movs	r3, #0
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	@ (8001868 <HAL_GPIO_Init+0x310>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a32      	ldr	r2, [pc, #200]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a27      	ldr	r2, [pc, #156]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001816:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_GPIO_Init+0x334>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_GPIO_Init+0x334>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001840:	4a12      	ldr	r2, [pc, #72]	@ (800188c <HAL_GPIO_Init+0x334>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	f67f ae90 	bls.w	8001574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40013800 	.word	0x40013800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40021400 	.word	0x40021400
 8001884:	40021800 	.word	0x40021800
 8001888:	40021c00 	.word	0x40021c00
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e001      	b.n	80018b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018dc:	e003      	b.n	80018e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	041a      	lsls	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	619a      	str	r2, [r3, #24]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001904:	887a      	ldrh	r2, [r7, #2]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	041a      	lsls	r2, r3, #16
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43d9      	mvns	r1, r3
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	400b      	ands	r3, r1
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	619a      	str	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe38 	bl	80005bc <HAL_GPIO_EXTI_Callback>
  }
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40013c00 	.word	0x40013c00

08001958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e267      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d075      	beq.n	8001a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001976:	4b88      	ldr	r3, [pc, #544]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b04      	cmp	r3, #4
 8001980:	d00c      	beq.n	800199c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	4b85      	ldr	r3, [pc, #532]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d112      	bne.n	80019b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198e:	4b82      	ldr	r3, [pc, #520]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800199a:	d10b      	bne.n	80019b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d05b      	beq.n	8001a60 <HAL_RCC_OscConfig+0x108>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d157      	bne.n	8001a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e242      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_OscConfig+0x74>
 80019be:	4b76      	ldr	r3, [pc, #472]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a75      	ldr	r2, [pc, #468]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e01d      	b.n	8001a08 <HAL_RCC_OscConfig+0xb0>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x98>
 80019d6:	4b70      	ldr	r3, [pc, #448]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6f      	ldr	r2, [pc, #444]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0xb0>
 80019f0:	4b69      	ldr	r3, [pc, #420]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a68      	ldr	r2, [pc, #416]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b66      	ldr	r3, [pc, #408]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a65      	ldr	r2, [pc, #404]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fc2e 	bl	8001270 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fc2a 	bl	8001270 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	@ 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e207      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0xc0>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fc1a 	bl	8001270 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fc16 	bl	8001270 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1f3      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	4b51      	ldr	r3, [pc, #324]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0xe8>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d063      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d11c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_RCC_OscConfig+0x152>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1c7      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4937      	ldr	r1, [pc, #220]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	e03a      	b.n	8001b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <HAL_RCC_OscConfig+0x244>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff fbcf 	bl	8001270 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fbcb 	bl	8001270 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1a8      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4925      	ldr	r1, [pc, #148]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_RCC_OscConfig+0x244>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fbae 	bl	8001270 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff fbaa 	bl	8001270 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e187      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d036      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_RCC_OscConfig+0x248>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff fb8e 	bl	8001270 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff fb8a 	bl	8001270 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e167      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x200>
 8001b76:	e01b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_OscConfig+0x248>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fb77 	bl	8001270 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	e00e      	b.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff fb73 	bl	8001270 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d907      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e150      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	42470000 	.word	0x42470000
 8001ba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	4b88      	ldr	r3, [pc, #544]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ea      	bne.n	8001b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8097 	beq.w	8001cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc2:	4b81      	ldr	r3, [pc, #516]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bea:	2301      	movs	r3, #1
 8001bec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b77      	ldr	r3, [pc, #476]	@ (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d118      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4b74      	ldr	r3, [pc, #464]	@ (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a73      	ldr	r2, [pc, #460]	@ (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c06:	f7ff fb33 	bl	8001270 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7ff fb2f 	bl	8001270 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e10c      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	4b6a      	ldr	r3, [pc, #424]	@ (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2ea>
 8001c34:	4b64      	ldr	r3, [pc, #400]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c38:	4a63      	ldr	r2, [pc, #396]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c40:	e01c      	b.n	8001c7c <HAL_RCC_OscConfig+0x324>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x30c>
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c56:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0x324>
 8001c64:	4b58      	ldr	r3, [pc, #352]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c68:	4a57      	ldr	r2, [pc, #348]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c70:	4b55      	ldr	r3, [pc, #340]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c74:	4a54      	ldr	r2, [pc, #336]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c76:	f023 0304 	bic.w	r3, r3, #4
 8001c7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff faf4 	bl	8001270 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff faf0 	bl	8001270 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0cb      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	4b49      	ldr	r3, [pc, #292]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ee      	beq.n	8001c8c <HAL_RCC_OscConfig+0x334>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fade 	bl	8001270 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fada 	bl	8001270 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0b5      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cce:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ee      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	4a38      	ldr	r2, [pc, #224]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a1 	beq.w	8001e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf6:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d05c      	beq.n	8001dbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d141      	bne.n	8001d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_RCC_OscConfig+0x478>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff faae 	bl	8001270 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff faaa 	bl	8001270 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e087      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	019b      	lsls	r3, r3, #6
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	491b      	ldr	r1, [pc, #108]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <HAL_RCC_OscConfig+0x478>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fa83 	bl	8001270 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fa7f 	bl	8001270 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e05c      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x416>
 8001d8c:	e054      	b.n	8001e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_RCC_OscConfig+0x478>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fa6c 	bl	8001270 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff fa68 	bl	8001270 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e045      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x444>
 8001dba:	e03d      	b.n	8001e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e038      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x4ec>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d028      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d121      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11a      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d111      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0cc      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b68      	ldr	r3, [pc, #416]	@ (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d90c      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b65      	ldr	r3, [pc, #404]	@ (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b63      	ldr	r3, [pc, #396]	@ (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b8      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e9c:	4b59      	ldr	r3, [pc, #356]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4a58      	ldr	r2, [pc, #352]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb4:	4b53      	ldr	r3, [pc, #332]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a52      	ldr	r2, [pc, #328]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b50      	ldr	r3, [pc, #320]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	494d      	ldr	r1, [pc, #308]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d044      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b47      	ldr	r3, [pc, #284]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d119      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e07f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	4b3f      	ldr	r3, [pc, #252]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f16:	4b3b      	ldr	r3, [pc, #236]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e067      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	4b37      	ldr	r3, [pc, #220]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f023 0203 	bic.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4934      	ldr	r1, [pc, #208]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f38:	f7ff f99a 	bl	8001270 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7ff f996 	bl	8001270 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e04f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	4b2b      	ldr	r3, [pc, #172]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 020c 	and.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d1eb      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f68:	4b25      	ldr	r3, [pc, #148]	@ (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d20c      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b22      	ldr	r3, [pc, #136]	@ (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e032      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4916      	ldr	r1, [pc, #88]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fba:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	490e      	ldr	r1, [pc, #56]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fce:	f000 f821 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	490a      	ldr	r1, [pc, #40]	@ (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	5ccb      	ldrb	r3, [r1, r3]
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	4a09      	ldr	r2, [pc, #36]	@ (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f8fa 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00
 8002004:	40023800 	.word	0x40023800
 8002008:	0800b8d8 	.word	0x0800b8d8
 800200c:	20000004 	.word	0x20000004
 8002010:	20000018 	.word	0x20000018

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002018:	b094      	sub	sp, #80	@ 0x50
 800201a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002020:	2300      	movs	r3, #0
 8002022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002024:	2300      	movs	r3, #0
 8002026:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202c:	4b79      	ldr	r3, [pc, #484]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x200>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d00d      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x40>
 8002038:	2b08      	cmp	r3, #8
 800203a:	f200 80e1 	bhi.w	8002200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x34>
 8002042:	2b04      	cmp	r3, #4
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x3a>
 8002046:	e0db      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002048:	4b73      	ldr	r3, [pc, #460]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x204>)
 800204a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800204c:	e0db      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800204e:	4b73      	ldr	r3, [pc, #460]	@ (800221c <HAL_RCC_GetSysClockFreq+0x208>)
 8002050:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002052:	e0d8      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002054:	4b6f      	ldr	r3, [pc, #444]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x200>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800205c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205e:	4b6d      	ldr	r3, [pc, #436]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x200>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206a:	4b6a      	ldr	r3, [pc, #424]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x200>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	2200      	movs	r2, #0
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002074:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
 800207e:	2300      	movs	r3, #0
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
 8002082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002086:	4622      	mov	r2, r4
 8002088:	462b      	mov	r3, r5
 800208a:	f04f 0000 	mov.w	r0, #0
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	0159      	lsls	r1, r3, #5
 8002094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002098:	0150      	lsls	r0, r2, #5
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4621      	mov	r1, r4
 80020a0:	1a51      	subs	r1, r2, r1
 80020a2:	6139      	str	r1, [r7, #16]
 80020a4:	4629      	mov	r1, r5
 80020a6:	eb63 0301 	sbc.w	r3, r3, r1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020b8:	4659      	mov	r1, fp
 80020ba:	018b      	lsls	r3, r1, #6
 80020bc:	4651      	mov	r1, sl
 80020be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020c2:	4651      	mov	r1, sl
 80020c4:	018a      	lsls	r2, r1, #6
 80020c6:	4651      	mov	r1, sl
 80020c8:	ebb2 0801 	subs.w	r8, r2, r1
 80020cc:	4659      	mov	r1, fp
 80020ce:	eb63 0901 	sbc.w	r9, r3, r1
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020e6:	4690      	mov	r8, r2
 80020e8:	4699      	mov	r9, r3
 80020ea:	4623      	mov	r3, r4
 80020ec:	eb18 0303 	adds.w	r3, r8, r3
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	462b      	mov	r3, r5
 80020f4:	eb49 0303 	adc.w	r3, r9, r3
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002106:	4629      	mov	r1, r5
 8002108:	024b      	lsls	r3, r1, #9
 800210a:	4621      	mov	r1, r4
 800210c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002110:	4621      	mov	r1, r4
 8002112:	024a      	lsls	r2, r1, #9
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800211a:	2200      	movs	r2, #0
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800211e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002124:	f7fe f8bc 	bl	80002a0 <__aeabi_uldivmod>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4613      	mov	r3, r2
 800212e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002130:	e058      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002132:	4b38      	ldr	r3, [pc, #224]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x200>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	099b      	lsrs	r3, r3, #6
 8002138:	2200      	movs	r2, #0
 800213a:	4618      	mov	r0, r3
 800213c:	4611      	mov	r1, r2
 800213e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
 8002148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800214c:	4642      	mov	r2, r8
 800214e:	464b      	mov	r3, r9
 8002150:	f04f 0000 	mov.w	r0, #0
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	0159      	lsls	r1, r3, #5
 800215a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800215e:	0150      	lsls	r0, r2, #5
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4641      	mov	r1, r8
 8002166:	ebb2 0a01 	subs.w	sl, r2, r1
 800216a:	4649      	mov	r1, r9
 800216c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800217c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002184:	ebb2 040a 	subs.w	r4, r2, sl
 8002188:	eb63 050b 	sbc.w	r5, r3, fp
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	00eb      	lsls	r3, r5, #3
 8002196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800219a:	00e2      	lsls	r2, r4, #3
 800219c:	4614      	mov	r4, r2
 800219e:	461d      	mov	r5, r3
 80021a0:	4643      	mov	r3, r8
 80021a2:	18e3      	adds	r3, r4, r3
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	464b      	mov	r3, r9
 80021a8:	eb45 0303 	adc.w	r3, r5, r3
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ba:	4629      	mov	r1, r5
 80021bc:	028b      	lsls	r3, r1, #10
 80021be:	4621      	mov	r1, r4
 80021c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021c4:	4621      	mov	r1, r4
 80021c6:	028a      	lsls	r2, r1, #10
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ce:	2200      	movs	r2, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	61fa      	str	r2, [r7, #28]
 80021d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d8:	f7fe f862 	bl	80002a0 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4613      	mov	r3, r2
 80021e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	3301      	adds	r3, #1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80021f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021fe:	e002      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x204>)
 8002202:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002208:	4618      	mov	r0, r3
 800220a:	3750      	adds	r7, #80	@ 0x50
 800220c:	46bd      	mov	sp, r7
 800220e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	00f42400 	.word	0x00f42400
 800221c:	007a1200 	.word	0x007a1200

08002220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07b      	b.n	800232a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002242:	d009      	beq.n	8002258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
 800224a:	e005      	b.n	8002258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fd92 	bl	8000d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800228e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0104 	and.w	r1, r3, #4
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	f003 0210 	and.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002318:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08c      	sub	sp, #48	@ 0x30
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002340:	2301      	movs	r3, #1
 8002342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x26>
 8002354:	2302      	movs	r3, #2
 8002356:	e198      	b.n	800268a <HAL_SPI_TransmitReceive+0x358>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002360:	f7fe ff86 	bl	8001270 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800236c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800237a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800237e:	2b01      	cmp	r3, #1
 8002380:	d00f      	beq.n	80023a2 <HAL_SPI_TransmitReceive+0x70>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002388:	d107      	bne.n	800239a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_SPI_TransmitReceive+0x68>
 8002392:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002396:	2b04      	cmp	r3, #4
 8002398:	d003      	beq.n	80023a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80023a0:	e16d      	b.n	800267e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x82>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x82>
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80023ba:	e160      	b.n	800267e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d003      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2205      	movs	r2, #5
 80023cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002410:	2b40      	cmp	r3, #64	@ 0x40
 8002412:	d007      	beq.n	8002424 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800242c:	d17c      	bne.n	8002528 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_SPI_TransmitReceive+0x10a>
 8002436:	8b7b      	ldrh	r3, [r7, #26]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d16a      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	1c9a      	adds	r2, r3, #2
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002460:	e057      	b.n	8002512 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d11b      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x176>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_SPI_TransmitReceive+0x176>
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d113      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	1c9a      	adds	r2, r3, #2
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d119      	bne.n	80024ea <HAL_SPI_TransmitReceive+0x1b8>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d014      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	b292      	uxth	r2, r2
 80024cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d2:	1c9a      	adds	r2, r3, #2
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024e6:	2301      	movs	r3, #1
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024ea:	f7fe fec1 	bl	8001270 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d80b      	bhi.n	8002512 <HAL_SPI_TransmitReceive+0x1e0>
 80024fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d007      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002510:	e0b5      	b.n	800267e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1a2      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x130>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d19d      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x130>
 8002526:	e080      	b.n	800262a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x204>
 8002530:	8b7b      	ldrh	r3, [r7, #26]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d16f      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800255c:	e05b      	b.n	8002616 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d11c      	bne.n	80025a6 <HAL_SPI_TransmitReceive+0x274>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d017      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x274>
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d114      	bne.n	80025a6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d119      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x2b6>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d014      	beq.n	80025e8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025e8:	f7fe fe42 	bl	8001270 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d803      	bhi.n	8002600 <HAL_SPI_TransmitReceive+0x2ce>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d102      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x2d4>
 8002600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002602:	2b00      	cmp	r3, #0
 8002604:	d107      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002614:	e033      	b.n	800267e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d19e      	bne.n	800255e <HAL_SPI_TransmitReceive+0x22c>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d199      	bne.n	800255e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8b8 	bl	80027a4 <SPI_EndRxTxTransaction>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002646:	e01a      	b.n	800267e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002674:	e003      	b.n	800267e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002686:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800268a:	4618      	mov	r0, r3
 800268c:	3730      	adds	r7, #48	@ 0x30
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026a4:	f7fe fde4 	bl	8001270 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026b4:	f7fe fddc 	bl	8001270 <HAL_GetTick>
 80026b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ba:	4b39      	ldr	r3, [pc, #228]	@ (80027a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	015b      	lsls	r3, r3, #5
 80026c0:	0d1b      	lsrs	r3, r3, #20
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ca:	e054      	b.n	8002776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d050      	beq.n	8002776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026d4:	f7fe fdcc 	bl	8001270 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d902      	bls.n	80026ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d13d      	bne.n	8002766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002702:	d111      	bne.n	8002728 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800270c:	d004      	beq.n	8002718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002716:	d107      	bne.n	8002728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002730:	d10f      	bne.n	8002752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e017      	b.n	8002796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3b01      	subs	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4013      	ands	r3, r2
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	429a      	cmp	r2, r3
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	429a      	cmp	r2, r3
 8002792:	d19b      	bne.n	80026cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000004 	.word	0x20000004

080027a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2201      	movs	r2, #1
 80027b8:	2102      	movs	r1, #2
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff ff6a 	bl	8002694 <SPI_WaitFlagStateUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e032      	b.n	800283c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <SPI_EndRxTxTransaction+0xa0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <SPI_EndRxTxTransaction+0xa4>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	0d5b      	lsrs	r3, r3, #21
 80027e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027f4:	d112      	bne.n	800281c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2180      	movs	r1, #128	@ 0x80
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff ff47 	bl	8002694 <SPI_WaitFlagStateUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d016      	beq.n	800283a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e00f      	b.n	800283c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3b01      	subs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	2b80      	cmp	r3, #128	@ 0x80
 8002834:	d0f2      	beq.n	800281c <SPI_EndRxTxTransaction+0x78>
 8002836:	e000      	b.n	800283a <SPI_EndRxTxTransaction+0x96>
        break;
 8002838:	bf00      	nop
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000004 	.word	0x20000004
 8002848:	165e9f81 	.word	0x165e9f81

0800284c <ishex>:
#include "http_config.h"
#include "http_common.h"

// for URL decoding function
static inline int ishex(int x)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return (x >= '0' && x <= '9') ||
         (x >= 'a' && x <= 'f') ||
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b2f      	cmp	r3, #47	@ 0x2f
 8002858:	dd02      	ble.n	8002860 <ishex+0x14>
  return (x >= '0' && x <= '9') ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b39      	cmp	r3, #57	@ 0x39
 800285e:	dd0b      	ble.n	8002878 <ishex+0x2c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b60      	cmp	r3, #96	@ 0x60
 8002864:	dd02      	ble.n	800286c <ishex+0x20>
         (x >= 'a' && x <= 'f') ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b66      	cmp	r3, #102	@ 0x66
 800286a:	dd05      	ble.n	8002878 <ishex+0x2c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b40      	cmp	r3, #64	@ 0x40
 8002870:	dd04      	ble.n	800287c <ishex+0x30>
         (x >= 'A' && x <= 'F');
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b46      	cmp	r3, #70	@ 0x46
 8002876:	dc01      	bgt.n	800287c <ishex+0x30>
         (x >= 'a' && x <= 'f') ||
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <ishex+0x32>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <url_decode>:

//URL decoding function
int url_decode(const char *s, char *dec)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  char *o;
  const char *end = s + strlen(s);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fd fca4 	bl	80001e4 <strlen>
 800289c:	4602      	mov	r2, r0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
  int c;

  for (o = dec; s <= end; o++)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e039      	b.n	800291e <url_decode+0x92>
  {
    c = *s++;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]
    if (c == '+')
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80028b8:	d102      	bne.n	80028c0 <url_decode+0x34>
      c = ' ';
 80028ba:	2320      	movs	r3, #32
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e024      	b.n	800290a <url_decode+0x7e>
    else if (c == '%' && (!ishex(*s++) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b25      	cmp	r3, #37	@ 0x25
 80028c4:	d121      	bne.n	800290a <url_decode+0x7e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ffbc 	bl	800284c <ishex>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d014      	beq.n	8002904 <url_decode+0x78>
                          !ishex(*s++) ||
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ffb2 	bl	800284c <ishex>
 80028e8:	4603      	mov	r3, r0
    else if (c == '%' && (!ishex(*s++) ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <url_decode+0x78>
                          !sscanf(s - 2, "%2x", (unsigned int *)&c)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3b02      	subs	r3, #2
 80028f2:	f107 020c 	add.w	r2, r7, #12
 80028f6:	490f      	ldr	r1, [pc, #60]	@ (8002934 <url_decode+0xa8>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f006 fad5 	bl	8008ea8 <siscanf>
 80028fe:	4603      	mov	r3, r0
                          !ishex(*s++) ||
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <url_decode+0x7e>
      return -1;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e010      	b.n	800292c <url_decode+0xa0>

    if (dec)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <url_decode+0x8c>
      *o = c;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	701a      	strb	r2, [r3, #0]
  for (o = dec; s <= end; o++)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	429a      	cmp	r2, r3
 8002924:	d9c1      	bls.n	80028aa <url_decode+0x1e>
  }

  return o - dec;
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	1ad3      	subs	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	0800aaec 	.word	0x0800aaec

08002938 <http_SSI_get_replacer_string>:
2) configuration is static and fixed at compile time. This can be adjusted in http_config.h 
*/
http_SSI_replacer_t http_SSI_replacer[HTTP_MAX_SSI_COUNT]; //hoping compiler to do its job and init to 0

int http_SSI_get_replacer_string(char *SSIString, char *replacerBuffer, unsigned int bufferLength)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e01e      	b.n	8002988 <http_SSI_get_replacer_string+0x50>
    { //find an empty slot and fill in the registration
        if (NULL != http_SSI_replacer[i].SSI_String)
 800294a:	4a14      	ldr	r2, [pc, #80]	@ (800299c <http_SSI_get_replacer_string+0x64>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <http_SSI_get_replacer_string+0x4a>
        {
            if (0 == strcmp(SSIString, http_SSI_replacer[i].SSI_String))
 8002956:	4a11      	ldr	r2, [pc, #68]	@ (800299c <http_SSI_get_replacer_string+0x64>)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800295e:	4619      	mov	r1, r3
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7fd fc35 	bl	80001d0 <strcmp>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <http_SSI_get_replacer_string+0x4a>
            {
                return http_SSI_replacer[i].SSI_stringReplacer(SSIString, replacerBuffer, bufferLength);
 800296c:	4a0b      	ldr	r2, [pc, #44]	@ (800299c <http_SSI_get_replacer_string+0x64>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	4798      	blx	r3
 800297e:	4603      	mov	r3, r0
 8002980:	e007      	b.n	8002992 <http_SSI_get_replacer_string+0x5a>
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3301      	adds	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b04      	cmp	r3, #4
 800298c:	dddd      	ble.n	800294a <http_SSI_get_replacer_string+0x12>
            }
        }
    }
    return -1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000aa4 	.word	0x20000aa4

080029a0 <http_SSI_register_replacer>:

http_SSI_replacerHandle_t http_SSI_register_replacer(const char *SSIString, http_SSI_replacer_cb SSIReplacerCb)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    //find a uninitialized array element
    if ((NULL == SSIString) || (NULL == SSIReplacerCb))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <http_SSI_register_replacer+0x16>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <http_SSI_register_replacer+0x32>
    {
        PRINT_ERROR("NULL SSIString or CB (%p) \r\n", (void *)SSIString);
 80029b6:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <http_SSI_register_replacer+0xd8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68d8      	ldr	r0, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a7c <http_SSI_register_replacer+0xdc>)
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2347      	movs	r3, #71	@ 0x47
 80029c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002a80 <http_SSI_register_replacer+0xe0>)
 80029c8:	492e      	ldr	r1, [pc, #184]	@ (8002a84 <http_SSI_register_replacer+0xe4>)
 80029ca:	f006 f979 	bl	8008cc0 <fiprintf>
        return 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e04e      	b.n	8002a70 <http_SSI_register_replacer+0xd0>
    }
    else
    {
        int i = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e039      	b.n	8002a50 <http_SSI_register_replacer+0xb0>
        { //find an empty slot and fill in the registration
            if (NULL == http_SSI_replacer[i].SSI_String)
 80029dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a88 <http_SSI_register_replacer+0xe8>)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d130      	bne.n	8002a4a <http_SSI_register_replacer+0xaa>
            {
                //allocate memory and copy string to it.
                http_SSI_replacer[i].SSI_String = (char *)malloc((size_t)strlen(SSIString) + 1);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fd fbfb 	bl	80001e4 <strlen>
 80029ee:	4603      	mov	r3, r0
 80029f0:	3301      	adds	r3, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f006 f802 	bl	80089fc <malloc>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4619      	mov	r1, r3
 80029fc:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <http_SSI_register_replacer+0xe8>)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                strncpy(http_SSI_replacer[i].SSI_String, SSIString, strlen(SSIString));
 8002a04:	4a20      	ldr	r2, [pc, #128]	@ (8002a88 <http_SSI_register_replacer+0xe8>)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7fd fbe9 	bl	80001e4 <strlen>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f006 fb5e 	bl	80090da <strncpy>
                http_SSI_replacer[i].SSI_String[strlen(SSIString)] = 0;
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a88 <http_SSI_register_replacer+0xe8>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fd fbdc 	bl	80001e4 <strlen>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4423      	add	r3, r4
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]

                http_SSI_replacer[i].SSI_stringReplacer = SSIReplacerCb;
 8002a34:	4a14      	ldr	r2, [pc, #80]	@ (8002a88 <http_SSI_register_replacer+0xe8>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
                return &http_SSI_replacer[i];
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4a10      	ldr	r2, [pc, #64]	@ (8002a88 <http_SSI_register_replacer+0xe8>)
 8002a46:	4413      	add	r3, r2
 8002a48:	e012      	b.n	8002a70 <http_SSI_register_replacer+0xd0>
        for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	ddc2      	ble.n	80029dc <http_SSI_register_replacer+0x3c>
            }
        }
        PRINT_ERROR("no more slots to register(%d)\r\n", i);
 8002a56:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <http_SSI_register_replacer+0xd8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68d8      	ldr	r0, [r3, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <http_SSI_register_replacer+0xdc>)
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	235a      	movs	r3, #90	@ 0x5a
 8002a66:	4a06      	ldr	r2, [pc, #24]	@ (8002a80 <http_SSI_register_replacer+0xe0>)
 8002a68:	4908      	ldr	r1, [pc, #32]	@ (8002a8c <http_SSI_register_replacer+0xec>)
 8002a6a:	f006 f929 	bl	8008cc0 <fiprintf>
        return NULL;
 8002a6e:	2300      	movs	r3, #0
    }
    return NULL; //Just a safety net.
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd90      	pop	{r4, r7, pc}
 8002a78:	200009d4 	.word	0x200009d4
 8002a7c:	0800b8f0 	.word	0x0800b8f0
 8002a80:	0800aaf0 	.word	0x0800aaf0
 8002a84:	0800ab1c 	.word	0x0800ab1c
 8002a88:	20000aa4 	.word	0x20000aa4
 8002a8c:	0800ab4c 	.word	0x0800ab4c

08002a90 <http_SSI_deRegister_all>:
    deregisterHandle = NULL;
}

//deregister all registrations in one-go. Useful to implement a shutdown function
void http_SSI_deRegister_all(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
    int i = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	e01a      	b.n	8002ad6 <http_SSI_deRegister_all+0x46>
    { //find an empty slot and fill in the registration
        if (0 != http_SSI_replacer[i].SSI_String)
 8002aa0:	4a11      	ldr	r2, [pc, #68]	@ (8002ae8 <http_SSI_deRegister_all+0x58>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <http_SSI_deRegister_all+0x40>
        {
            //free the string memory from heap
            free(http_SSI_replacer[i].SSI_String);
 8002aac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <http_SSI_deRegister_all+0x58>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 ffa9 	bl	8008a0c <free>
            http_SSI_replacer[i].SSI_String = NULL;
 8002aba:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae8 <http_SSI_deRegister_all+0x58>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            http_SSI_replacer[i].SSI_stringReplacer = NULL;
 8002ac4:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <http_SSI_deRegister_all+0x58>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	dde1      	ble.n	8002aa0 <http_SSI_deRegister_all+0x10>
        }
    }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000aa4 	.word	0x20000aa4

08002aec <http_CGI_exec_pathFunction>:
return actual buffer content length on success. -1 on failure
*/
http_CGI_pathFunction_t CGI_path[HTTP_MAX_CGI_SIZE]; //hoping compiler to do its job and init to 0

int http_CGI_exec_pathFunction(char *CGIPath, char *replacerBuffer, unsigned int bufferLength)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e02a      	b.n	8002b54 <http_CGI_exec_pathFunction+0x68>
    {
        if (NULL != CGI_path[i].CGI_path)
 8002afe:	491a      	ldr	r1, [pc, #104]	@ (8002b68 <http_CGI_exec_pathFunction+0x7c>)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01d      	beq.n	8002b4e <http_CGI_exec_pathFunction+0x62>
        {
            if (0 == strcmp(CGIPath, CGI_path[i].CGI_path))
 8002b12:	4915      	ldr	r1, [pc, #84]	@ (8002b68 <http_CGI_exec_pathFunction+0x7c>)
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4619      	mov	r1, r3
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7fd fb53 	bl	80001d0 <strcmp>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10e      	bne.n	8002b4e <http_CGI_exec_pathFunction+0x62>
            {
                return CGI_path[i].CGI_pathFunction(CGIPath, replacerBuffer, bufferLength);
 8002b30:	490d      	ldr	r1, [pc, #52]	@ (8002b68 <http_CGI_exec_pathFunction+0x7c>)
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	4798      	blx	r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	e007      	b.n	8002b5e <http_CGI_exec_pathFunction+0x72>
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3301      	adds	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	ddd1      	ble.n	8002afe <http_CGI_exec_pathFunction+0x12>
            }
        }
    }
    return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000acc 	.word	0x20000acc

08002b6c <http_CGI_register_pathFunction>:

http_CGI_pathFunctionHandle_t http_CGI_register_pathFunction(const char *CGIPath, http_CGI_pathFunction_cb CGIPathFunctionCb, http_response_contenttype_t contentType)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b089      	sub	sp, #36	@ 0x24
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
    //find a uninitialized array element
    if ((NULL == CGIPath) || (NULL == CGIPathFunctionCb) )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <http_CGI_register_pathFunction+0x1a>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <http_CGI_register_pathFunction+0x36>
    {
        PRINT_ERROR("ERROR: http_CGI_register_pathFunction - NULL CGIPath or CB (%p)\r\n", (void *)CGIPath);
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <http_CGI_register_pathFunction+0x120>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68d8      	ldr	r0, [r3, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	4b3f      	ldr	r3, [pc, #252]	@ (8002c90 <http_CGI_register_pathFunction+0x124>)
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2349      	movs	r3, #73	@ 0x49
 8002b96:	4a3f      	ldr	r2, [pc, #252]	@ (8002c94 <http_CGI_register_pathFunction+0x128>)
 8002b98:	493f      	ldr	r1, [pc, #252]	@ (8002c98 <http_CGI_register_pathFunction+0x12c>)
 8002b9a:	f006 f891 	bl	8008cc0 <fiprintf>
        return 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e06f      	b.n	8002c82 <http_CGI_register_pathFunction+0x116>
    }
    else
    {
        int i = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
        for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e05a      	b.n	8002c62 <http_CGI_register_pathFunction+0xf6>
        { //find an empty slot and fill in the registration
            if (NULL == CGI_path[i].CGI_path)
 8002bac:	493b      	ldr	r1, [pc, #236]	@ (8002c9c <http_CGI_register_pathFunction+0x130>)
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d14d      	bne.n	8002c5c <http_CGI_register_pathFunction+0xf0>
            {
                //allocate memory and copy string to it.
                CGI_path[i].CGI_path = (char *)malloc((size_t)strlen(CGIPath) + 1);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7fd fb0f 	bl	80001e4 <strlen>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f005 ff16 	bl	80089fc <malloc>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	4931      	ldr	r1, [pc, #196]	@ (8002c9c <http_CGI_register_pathFunction+0x130>)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	6018      	str	r0, [r3, #0]
                strncpy(CGI_path[i].CGI_path, CGIPath, strlen(CGIPath));
 8002be4:	492d      	ldr	r1, [pc, #180]	@ (8002c9c <http_CGI_register_pathFunction+0x130>)
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	681c      	ldr	r4, [r3, #0]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7fd faf5 	bl	80001e4 <strlen>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	4620      	mov	r0, r4
 8002c02:	f006 fa6a 	bl	80090da <strncpy>
                CGI_path[i].CGI_path[strlen(CGIPath)] = 0;
 8002c06:	4925      	ldr	r1, [pc, #148]	@ (8002c9c <http_CGI_register_pathFunction+0x130>)
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	681c      	ldr	r4, [r3, #0]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7fd fae4 	bl	80001e4 <strlen>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4423      	add	r3, r4
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

                CGI_path[i].CGI_pathFunction = CGIPathFunctionCb;
 8002c24:	491d      	ldr	r1, [pc, #116]	@ (8002c9c <http_CGI_register_pathFunction+0x130>)
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3304      	adds	r3, #4
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	601a      	str	r2, [r3, #0]
                CGI_path[i].contentType = contentType;
 8002c38:	4918      	ldr	r1, [pc, #96]	@ (8002c9c <http_CGI_register_pathFunction+0x130>)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3308      	adds	r3, #8
 8002c48:	79fa      	ldrb	r2, [r7, #7]
 8002c4a:	701a      	strb	r2, [r3, #0]
                return &CGI_path[i];
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4a11      	ldr	r2, [pc, #68]	@ (8002c9c <http_CGI_register_pathFunction+0x130>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	e012      	b.n	8002c82 <http_CGI_register_pathFunction+0x116>
        for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	dda1      	ble.n	8002bac <http_CGI_register_pathFunction+0x40>
            }
        }
        PRINT_ERROR("ERROR: http_CGI_register_pathFunction - no more slots to register(%d)\r\n", i);
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <http_CGI_register_pathFunction+0x120>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68d8      	ldr	r0, [r3, #12]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <http_CGI_register_pathFunction+0x124>)
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	235d      	movs	r3, #93	@ 0x5d
 8002c78:	4a06      	ldr	r2, [pc, #24]	@ (8002c94 <http_CGI_register_pathFunction+0x128>)
 8002c7a:	4909      	ldr	r1, [pc, #36]	@ (8002ca0 <http_CGI_register_pathFunction+0x134>)
 8002c7c:	f006 f820 	bl	8008cc0 <fiprintf>
        return NULL;
 8002c80:	2300      	movs	r3, #0
    }
    return NULL; //Just a safety net.
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200009d4 	.word	0x200009d4
 8002c90:	0800b90c 	.word	0x0800b90c
 8002c94:	0800ab80 	.word	0x0800ab80
 8002c98:	0800aba4 	.word	0x0800aba4
 8002c9c:	20000acc 	.word	0x20000acc
 8002ca0:	0800abfc 	.word	0x0800abfc

08002ca4 <http_cgi_get_contentType>:
    }
}

//function to get contentType form a pathFunction handle
http_response_contenttype_t http_cgi_get_contentType(http_CGI_pathFunctionHandle_t pathFunctionHandle)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    if (NULL != pathFunctionHandle)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <http_cgi_get_contentType+0x14>
    {
        return pathFunctionHandle->contentType;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7a1b      	ldrb	r3, [r3, #8]
 8002cb6:	e000      	b.n	8002cba <http_cgi_get_contentType+0x16>
    }
    return 0; //no content type registered
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <http_CGI_get_pathFunctionHandle>:

//function to get pathFunction handle of a path
http_CGI_pathFunctionHandle_t http_CGI_get_pathFunctionHandle(char *CGIPath)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e023      	b.n	8002d1e <http_CGI_get_pathFunctionHandle+0x56>
    {
        if (NULL != CGI_path[i].CGI_path)
 8002cd6:	4916      	ldr	r1, [pc, #88]	@ (8002d30 <http_CGI_get_pathFunctionHandle+0x68>)
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <http_CGI_get_pathFunctionHandle+0x50>
        {
            if (0 == strcmp(CGIPath, CGI_path[i].CGI_path))
 8002cea:	4911      	ldr	r1, [pc, #68]	@ (8002d30 <http_CGI_get_pathFunctionHandle+0x68>)
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fd fa67 	bl	80001d0 <strcmp>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <http_CGI_get_pathFunctionHandle+0x50>
            {
                return &CGI_path[i];
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <http_CGI_get_pathFunctionHandle+0x68>)
 8002d14:	4413      	add	r3, r2
 8002d16:	e006      	b.n	8002d26 <http_CGI_get_pathFunctionHandle+0x5e>
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	ddd8      	ble.n	8002cd6 <http_CGI_get_pathFunctionHandle+0xe>
            }
        }
    }
    return NULL;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000acc 	.word	0x20000acc

08002d34 <http_file_init_fopsStruct>:
/*currently supporting only one file system at a time - should this go into http_server.c?*/
http_file_fops_t http_file_fops;

/*init a plain fops structure*/
void http_file_init_fopsStruct(http_file_fops_t *fops)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
    memset(fops, 0, sizeof(http_file_fops_t));
 8002d3c:	2218      	movs	r2, #24
 8002d3e:	2100      	movs	r1, #0
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f006 f9b5 	bl	80090b0 <memset>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <http_file_register_fops>:
/*function to register fops to http server*/
int http_file_register_fops(http_file_fops_t fops)
{
 8002d50:	b084      	sub	sp, #16
 8002d52:	b4b0      	push	{r4, r5, r7}
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	f107 040c 	add.w	r4, r7, #12
 8002d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy((void*)&http_file_fops,(void*)&fops, sizeof(http_file_fops_t));
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <http_file_register_fops+0x30>)
 8002d60:	461d      	mov	r5, r3
 8002d62:	f107 040c 	add.w	r4, r7, #12
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d6e:	e885 0003 	stmia.w	r5, {r0, r1}
    return HTTP_SUCCESS;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bcb0      	pop	{r4, r5, r7}
 8002d7a:	b004      	add	sp, #16
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000b08 	.word	0x20000b08

08002d84 <http_localfs_init>:

/*initialize filesystem . increase array size and populate details below to add it to FS
  this is like mounting the fs. to be called only once. To call again, close all open files, deinit and then init.
*/
int http_localfs_init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
    //init filesystem table to 0. Not necessary since it is a global array. implemented for future scalability
    memset(&http_local_filesystem, 0, HTTP_LOCAL_FILESYSTEM_NUMFILES * sizeof(http_localfs_filesystem_file_t));
 8002d88:	2264      	movs	r2, #100	@ 0x64
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <http_localfs_init+0x14>)
 8002d8e:	f006 f98f 	bl	80090b0 <memset>
#ifdef HTTP_LOCALFS_INDEX
    //register default index file into the local file system.
    http_localfs_registerFile(path_index_html, (char *)&index_html, index_html_len, 0);
#endif
    return HTTP_SUCCESS;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000b20 	.word	0x20000b20

08002d9c <http_localfs_registerFile>:

//file path should be static string.
int http_localfs_registerFile(const char *filePath, char *file, unsigned int fileLength, http_response_fileType_t optFileType)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	70fb      	strb	r3, [r7, #3]
    if (fileIndex != (HTTP_LOCAL_FILESYSTEM_NUMFILES))
 8002daa:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d03d      	beq.n	8002e2e <http_localfs_registerFile+0x92>
    {
        http_local_filesystem[fileIndex].fileNumber = fileIndex;
 8002db2:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	4827      	ldr	r0, [pc, #156]	@ (8002e58 <http_localfs_registerFile+0xbc>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4403      	add	r3, r0
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	6019      	str	r1, [r3, #0]
        http_local_filesystem[fileIndex].filePath = filePath;
 8002dca:	4b22      	ldr	r3, [pc, #136]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4922      	ldr	r1, [pc, #136]	@ (8002e58 <http_localfs_registerFile+0xbc>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	601a      	str	r2, [r3, #0]
        http_local_filesystem[fileIndex].file = (char *)file;
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	491d      	ldr	r1, [pc, #116]	@ (8002e58 <http_localfs_registerFile+0xbc>)
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3308      	adds	r3, #8
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	601a      	str	r2, [r3, #0]
        http_local_filesystem[fileIndex].fileLength = fileLength;
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4817      	ldr	r0, [pc, #92]	@ (8002e58 <http_localfs_registerFile+0xbc>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4403      	add	r3, r0
 8002e06:	330c      	adds	r3, #12
 8002e08:	6019      	str	r1, [r3, #0]
        http_local_filesystem[fileIndex].optFileType = optFileType;
 8002e0a:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4912      	ldr	r1, [pc, #72]	@ (8002e58 <http_localfs_registerFile+0xbc>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3310      	adds	r3, #16
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	701a      	strb	r2, [r3, #0]

        fileIndex++;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002e28:	6013      	str	r3, [r2, #0]
        return HTTP_SUCCESS;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e00e      	b.n	8002e4c <http_localfs_registerFile+0xb0>
    }
    else
    {
        PRINT_ERROR("fileSystem Full(%d)\r\n", fileIndex);
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <http_localfs_registerFile+0xc0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68d8      	ldr	r0, [r3, #12]
 8002e34:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <http_localfs_registerFile+0xb8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <http_localfs_registerFile+0xc4>)
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	235e      	movs	r3, #94	@ 0x5e
 8002e40:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <http_localfs_registerFile+0xc8>)
 8002e42:	4909      	ldr	r1, [pc, #36]	@ (8002e68 <http_localfs_registerFile+0xcc>)
 8002e44:	f005 ff3c 	bl	8008cc0 <fiprintf>
        return HTTP_FAILURE;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000b84 	.word	0x20000b84
 8002e58:	20000b20 	.word	0x20000b20
 8002e5c:	200009d4 	.word	0x200009d4
 8002e60:	0800b92c 	.word	0x0800b92c
 8002e64:	0800ac58 	.word	0x0800ac58
 8002e68:	0800ac88 	.word	0x0800ac88

08002e6c <http_localfs_fopen>:

//returns a file pointer
http_localfs_filesystem_fp_t http_localfs_fopen(const char *fileName)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < fileIndex; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e01e      	b.n	8002eb8 <http_localfs_fopen+0x4c>
    {
        if (0 == strcmp(http_local_filesystem[i].filePath, fileName))
 8002e7a:	4914      	ldr	r1, [pc, #80]	@ (8002ecc <http_localfs_fopen+0x60>)
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd f99f 	bl	80001d0 <strcmp>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10c      	bne.n	8002eb2 <http_localfs_fopen+0x46>
        {
            http_localfs_filesystem_fp_t fp;
            fp = (http_localfs_filesystem_fp_t)malloc(sizeof(http_localfs_filesystem_fpRoot_t));
 8002e98:	2008      	movs	r0, #8
 8002e9a:	f005 fdaf 	bl	80089fc <malloc>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	60bb      	str	r3, [r7, #8]
            fp->fileNumber = i; //this can very well be pointer to that array address. but fileno is a standard convention
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]
            fp->filePosition = 0;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	605a      	str	r2, [r3, #4]
            return fp;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	e008      	b.n	8002ec4 <http_localfs_fopen+0x58>
    for (i = 0; i < fileIndex; i++)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <http_localfs_fopen+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3db      	bcc.n	8002e7a <http_localfs_fopen+0xe>
        }
    }
    return NULL;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000b20 	.word	0x20000b20
 8002ed0:	20000b84 	.word	0x20000b84

08002ed4 <http_localfs_fclose>:

//function to close a file pointer after fops are done.
int http_localfs_fclose(http_localfs_filesystem_fp_t fp) //free the fp
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
    if (NULL == fp)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <http_localfs_fclose+0x14>
    {
        return HTTP_FAILURE;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	e003      	b.n	8002ef0 <http_localfs_fclose+0x1c>
    }

    free(fp);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f005 fd8f 	bl	8008a0c <free>
    return HTTP_SUCCESS;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <http_localfs_deinit>:

//function to unmount the local file system. all FPs should be closed before calling this to avoid memory leaks
int http_localfs_deinit(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
    //but how to track and handle all fps that where malloced without much overhead?
    memset(&http_local_filesystem, 0, HTTP_LOCAL_FILESYSTEM_NUMFILES * sizeof(http_localfs_filesystem_file_t));
 8002efc:	2264      	movs	r2, #100	@ 0x64
 8002efe:	2100      	movs	r1, #0
 8002f00:	4804      	ldr	r0, [pc, #16]	@ (8002f14 <http_localfs_deinit+0x1c>)
 8002f02:	f006 f8d5 	bl	80090b0 <memset>
    fileIndex=0;
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <http_localfs_deinit+0x20>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
    return HTTP_SUCCESS;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000b20 	.word	0x20000b20
 8002f18:	20000b84 	.word	0x20000b84

08002f1c <http_localfs_fgetc>:

/*regular fgetc implementation for the local file system. 
 reads the next character from stream and returns it as an unsigned char cast to an int, or EOF (-1) on end of file or error.
*/
int http_localfs_fgetc(http_localfs_filesystem_fp_t fp)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
    //input checking
    if (NULL == fp)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <http_localfs_fgetc+0x14>
    {
        return HTTP_FAILURE;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e026      	b.n	8002f7e <http_localfs_fgetc+0x62>
    }
    //end of file
    if ((fp->filePosition + 1) == (unsigned int)http_local_filesystem[fp->fileNumber].fileLength)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	1c59      	adds	r1, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4814      	ldr	r0, [pc, #80]	@ (8002f8c <http_localfs_fgetc+0x70>)
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4403      	add	r3, r0
 8002f46:	330c      	adds	r3, #12
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4299      	cmp	r1, r3
 8002f4c:	d102      	bne.n	8002f54 <http_localfs_fgetc+0x38>
    {
        return -1; //EOF
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	e014      	b.n	8002f7e <http_localfs_fgetc+0x62>
    }
    else
    { //regular file read
        unsigned char retChar = http_local_filesystem[fp->fileNumber].file[fp->filePosition];
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	490c      	ldr	r1, [pc, #48]	@ (8002f8c <http_localfs_fgetc+0x70>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3308      	adds	r3, #8
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	73fb      	strb	r3, [r7, #15]
        fp->filePosition++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	605a      	str	r2, [r3, #4]
        return (int)retChar;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000b20 	.word	0x20000b20

08002f90 <http_localfs_feof>:

//generic feof function. returns -1 if EOF
int http_localfs_feof(http_localfs_filesystem_fp_t fp)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    //end of file
    if (fp->filePosition == (unsigned int)(http_local_filesystem[fp->fileNumber].fileLength - 1))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	480a      	ldr	r0, [pc, #40]	@ (8002fcc <http_localfs_feof+0x3c>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4403      	add	r3, r0
 8002fac:	330c      	adds	r3, #12
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	4299      	cmp	r1, r3
 8002fb4:	d102      	bne.n	8002fbc <http_localfs_feof+0x2c>
    {
        return -1; //EOF
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	e000      	b.n	8002fbe <http_localfs_feof+0x2e>
    }
    return 0;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000b20 	.word	0x20000b20

08002fd0 <http_localfs_fread>:

size_t http_localfs_fread(void *ptr, size_t size, size_t nmemb, http_localfs_filesystem_fp_t fp)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
    if (NULL == ptr)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <http_localfs_fread+0x1a>
    {
        return HTTP_FAILURE;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe8:	e05f      	b.n	80030aa <http_localfs_fread+0xda>
    }
    //end of file
    if ((fp->filePosition + 1) == (unsigned int)http_local_filesystem[fp->fileNumber].fileLength)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	482f      	ldr	r0, [pc, #188]	@ (80030b4 <http_localfs_fread+0xe4>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4403      	add	r3, r0
 8003000:	330c      	adds	r3, #12
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4299      	cmp	r1, r3
 8003006:	d102      	bne.n	800300e <http_localfs_fread+0x3e>
    {
        return -1; //EOF
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	e04d      	b.n	80030aa <http_localfs_fread+0xda>
    }
    else
    {
        //calculate actual amount of data remaining in the file.
        unsigned int remainingLen = http_local_filesystem[fp->fileNumber].fileLength - (fp->filePosition + 1);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4928      	ldr	r1, [pc, #160]	@ (80030b4 <http_localfs_fread+0xe4>)
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	330c      	adds	r3, #12
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
        //calculate requested data quantity
        unsigned int totalReadLength = (size * nmemb);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	613b      	str	r3, [r7, #16]

        if (remainingLen <= totalReadLength)
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	429a      	cmp	r2, r3
 800303e:	d81b      	bhi.n	8003078 <http_localfs_fread+0xa8>
        { //when size is smaller than actual file size
            memcpy(ptr, (void *)&http_local_filesystem[fp->fileNumber].file[fp->filePosition], remainingLen+1);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	491b      	ldr	r1, [pc, #108]	@ (80030b4 <http_localfs_fread+0xe4>)
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3308      	adds	r3, #8
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	18d1      	adds	r1, r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	461a      	mov	r2, r3
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f006 f958 	bl	8009316 <memcpy>
            fp->filePosition += remainingLen;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	441a      	add	r2, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	605a      	str	r2, [r3, #4]
            return (size_t)remainingLen+1;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	e018      	b.n	80030aa <http_localfs_fread+0xda>
        }
        else
        {
            memcpy(ptr, (void *)&http_local_filesystem[fp->fileNumber].file[fp->filePosition], totalReadLength);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	490d      	ldr	r1, [pc, #52]	@ (80030b4 <http_localfs_fread+0xe4>)
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3308      	adds	r3, #8
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4413      	add	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4619      	mov	r1, r3
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f006 f93d 	bl	8009316 <memcpy>
            fp->filePosition += totalReadLength;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	441a      	add	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	605a      	str	r2, [r3, #4]
            return (size_t)totalReadLength;
 80030a8:	693b      	ldr	r3, [r7, #16]
        }
    }
    return -1;
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000b20 	.word	0x20000b20

080030b8 <http_localfs_fseek>:
}

//Generic fseek function
// TODO: reusing  SEEK_SET, SEEK_CUR, and SEEK_END from stdio. need to see if this will work on embedded platforms
int http_localfs_fseek(http_localfs_filesystem_fp_t fp, long offset, int whence)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
    if (NULL == fp)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <http_localfs_fseek+0x18>
    {
        return -1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e062      	b.n	8003196 <http_localfs_fseek+0xde>
    }
    switch (whence)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d04f      	beq.n	8003176 <http_localfs_fseek+0xbe>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	dc5a      	bgt.n	8003192 <http_localfs_fseek+0xda>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <http_localfs_fseek+0x32>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d02b      	beq.n	8003140 <http_localfs_fseek+0x88>
 80030e8:	e053      	b.n	8003192 <http_localfs_fseek+0xda>
    {
    case SEEK_SET:
    {
        if (offset >= 0 && offset <= (http_local_filesystem[fp->fileNumber].fileLength - 1))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db11      	blt.n	8003114 <http_localfs_fseek+0x5c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	492b      	ldr	r1, [pc, #172]	@ (80031a4 <http_localfs_fseek+0xec>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	330c      	adds	r3, #12
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	da04      	bge.n	8003114 <http_localfs_fseek+0x5c>
        {
            fp->filePosition = offset;
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	605a      	str	r2, [r3, #4]
            return 0;
 8003110:	2300      	movs	r3, #0
 8003112:	e040      	b.n	8003196 <http_localfs_fseek+0xde>
        }
        else if (offset >= 0)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db0f      	blt.n	800313a <http_localfs_fseek+0x82>
        {
            fp->filePosition = http_local_filesystem[fp->fileNumber].fileLength - 1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4921      	ldr	r1, [pc, #132]	@ (80031a4 <http_localfs_fseek+0xec>)
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	330c      	adds	r3, #12
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3b01      	subs	r3, #1
 8003130:	461a      	mov	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]
            return 0;
 8003136:	2300      	movs	r3, #0
 8003138:	e02d      	b.n	8003196 <http_localfs_fseek+0xde>
        }
        else
        {
            return -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
 800313e:	e02a      	b.n	8003196 <http_localfs_fseek+0xde>
        }
        break;
    }
    case SEEK_CUR:
    {
        if (((fp->filePosition + offset) >= 0) && ((fp->filePosition + offset) < (unsigned int)http_local_filesystem[fp->fileNumber].fileLength))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	18d1      	adds	r1, r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4815      	ldr	r0, [pc, #84]	@ (80031a4 <http_localfs_fseek+0xec>)
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4403      	add	r3, r0
 8003158:	330c      	adds	r3, #12
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4299      	cmp	r1, r3
 800315e:	d207      	bcs.n	8003170 <http_localfs_fseek+0xb8>
        {
            fp->filePosition += offset;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
            return 0;
 800316c:	2300      	movs	r3, #0
 800316e:	e012      	b.n	8003196 <http_localfs_fseek+0xde>
        }
        else
        {
            return -1;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	e00f      	b.n	8003196 <http_localfs_fseek+0xde>
        }
        break;
    }
    case SEEK_END:
    {
        if (offset > 0)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	dd02      	ble.n	8003182 <http_localfs_fseek+0xca>
        {
            return -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	e009      	b.n	8003196 <http_localfs_fseek+0xde>
        }
        else if ((fp->filePosition + offset) >= 0)
        {
            fp->filePosition += offset;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
            return 0;
 800318e:	2300      	movs	r3, #0
 8003190:	e001      	b.n	8003196 <http_localfs_fseek+0xde>
            return 0;
        }
        break;
    }
    default:
        return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
        break;
    }
    return -1;
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000b20 	.word	0x20000b20

080031a8 <http_net_init_netopsStruct>:
*/
static http_net_netops_t http_net_netops;

/*init a plain fops structure*/
void http_net_init_netopsStruct(http_net_netops_t *netops)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    if (NULL != netops)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <http_net_init_netopsStruct+0x18>
    {
        memset(netops, 0, sizeof(http_net_netops_t));
 80031b6:	220c      	movs	r2, #12
 80031b8:	2100      	movs	r1, #0
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f005 ff78 	bl	80090b0 <memset>
    }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <http_net_register_netops>:
/*function to register fops to http server*/
http_net_netops_t *http_net_register_netops(http_net_netops_t netops)
{
 80031c8:	b490      	push	{r4, r7}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy((void *)&http_net_netops, (void *)&netops, sizeof(http_net_netops_t));
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <http_net_register_netops+0x28>)
 80031d6:	461c      	mov	r4, r3
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return &http_net_netops;
 80031e2:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <http_net_register_netops+0x28>)
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc90      	pop	{r4, r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000b88 	.word	0x20000b88

080031f4 <parseRequest_mapMethodToEnum>:
//list of file types supporting CGI
unsigned int httpFileType_CGIList_size = 3;
const char *const httpFileType_CGIList[] = {"cgi", "sh", "exe"};

static httpRequest_method_t parseRequest_mapMethodToEnum(char *method)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
    /*since most requesters send method in caps, toUpper is not applied */
    if (0 == strcmp(method, "GET"))
 80031fc:	492b      	ldr	r1, [pc, #172]	@ (80032ac <parseRequest_mapMethodToEnum+0xb8>)
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fc ffe6 	bl	80001d0 <strcmp>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <parseRequest_mapMethodToEnum+0x1a>
        return GET;
 800320a:	2301      	movs	r3, #1
 800320c:	e049      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "POST"))
 800320e:	4928      	ldr	r1, [pc, #160]	@ (80032b0 <parseRequest_mapMethodToEnum+0xbc>)
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fc ffdd 	bl	80001d0 <strcmp>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <parseRequest_mapMethodToEnum+0x2c>
        return POST;
 800321c:	2302      	movs	r3, #2
 800321e:	e040      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "PUT"))
 8003220:	4924      	ldr	r1, [pc, #144]	@ (80032b4 <parseRequest_mapMethodToEnum+0xc0>)
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fc ffd4 	bl	80001d0 <strcmp>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <parseRequest_mapMethodToEnum+0x3e>
        return PUT;
 800322e:	2304      	movs	r3, #4
 8003230:	e037      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "HEAD"))
 8003232:	4921      	ldr	r1, [pc, #132]	@ (80032b8 <parseRequest_mapMethodToEnum+0xc4>)
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fc ffcb 	bl	80001d0 <strcmp>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <parseRequest_mapMethodToEnum+0x50>
        return HEAD;
 8003240:	2303      	movs	r3, #3
 8003242:	e02e      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "DELETE"))
 8003244:	491d      	ldr	r1, [pc, #116]	@ (80032bc <parseRequest_mapMethodToEnum+0xc8>)
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fc ffc2 	bl	80001d0 <strcmp>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <parseRequest_mapMethodToEnum+0x62>
        return DELETE;
 8003252:	2305      	movs	r3, #5
 8003254:	e025      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "OPTIONS"))
 8003256:	491a      	ldr	r1, [pc, #104]	@ (80032c0 <parseRequest_mapMethodToEnum+0xcc>)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fc ffb9 	bl	80001d0 <strcmp>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <parseRequest_mapMethodToEnum+0x74>
        return OPTIONS;
 8003264:	2306      	movs	r3, #6
 8003266:	e01c      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "CONNECT"))
 8003268:	4916      	ldr	r1, [pc, #88]	@ (80032c4 <parseRequest_mapMethodToEnum+0xd0>)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fc ffb0 	bl	80001d0 <strcmp>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <parseRequest_mapMethodToEnum+0x86>
        return CONNECT;
 8003276:	2307      	movs	r3, #7
 8003278:	e013      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "TRACE"))
 800327a:	4913      	ldr	r1, [pc, #76]	@ (80032c8 <parseRequest_mapMethodToEnum+0xd4>)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fc ffa7 	bl	80001d0 <strcmp>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <parseRequest_mapMethodToEnum+0x98>
        return TRACE;
 8003288:	2308      	movs	r3, #8
 800328a:	e00a      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "PATCH"))
 800328c:	490f      	ldr	r1, [pc, #60]	@ (80032cc <parseRequest_mapMethodToEnum+0xd8>)
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fc ff9e 	bl	80001d0 <strcmp>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <parseRequest_mapMethodToEnum+0xaa>
        return PATCH;
 800329a:	2309      	movs	r3, #9
 800329c:	e001      	b.n	80032a2 <parseRequest_mapMethodToEnum+0xae>
    else
        return NONE;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	0800acd8 	.word	0x0800acd8
 80032b0:	0800acdc 	.word	0x0800acdc
 80032b4:	0800ace4 	.word	0x0800ace4
 80032b8:	0800ace8 	.word	0x0800ace8
 80032bc:	0800acf0 	.word	0x0800acf0
 80032c0:	0800acf8 	.word	0x0800acf8
 80032c4:	0800ad00 	.word	0x0800ad00
 80032c8:	0800ad08 	.word	0x0800ad08
 80032cc:	0800ad10 	.word	0x0800ad10

080032d0 <parseRequest_identifyFileClass>:

//identify whether the requested file is CGI/SSI or just for regular contents.
static httpRequest_fileClass_t parseRequest_identifyFileClass(char *path)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    char *fileType = strrchr(path, '.'); //can hit some real corner case where there is no extension and thre is a . in path
 80032d8:	212e      	movs	r1, #46	@ 0x2e
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f005 ff10 	bl	8009100 <strrchr>
 80032e0:	60b8      	str	r0, [r7, #8]
    if (0 == fileType)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <parseRequest_identifyFileClass+0x1c>
    {
        return httpFileClass_none;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e035      	b.n	8003358 <parseRequest_identifyFileClass+0x88>
    }
    else
    {
        fileType += 1; //to remove the .
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
    }

    unsigned int i = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < httpFileType_SSIList_size; i++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e00f      	b.n	800331c <parseRequest_identifyFileClass+0x4c>
    {
        if (0 == strcmp(httpFileType_SSIList[i], fileType))
 80032fc:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <parseRequest_identifyFileClass+0x90>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fc ff62 	bl	80001d0 <strcmp>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <parseRequest_identifyFileClass+0x46>
            return httpFileClass_SSI;
 8003312:	2301      	movs	r3, #1
 8003314:	e020      	b.n	8003358 <parseRequest_identifyFileClass+0x88>
    for (i = 0; i < httpFileType_SSIList_size; i++)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <parseRequest_identifyFileClass+0x94>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	429a      	cmp	r2, r3
 8003324:	d3ea      	bcc.n	80032fc <parseRequest_identifyFileClass+0x2c>
    }

    for (i = 0; i < httpFileType_CGIList_size; i++)
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e00f      	b.n	800334c <parseRequest_identifyFileClass+0x7c>
    {
        if (0 == strcmp(httpFileType_CGIList[i], fileType))
 800332c:	4a0e      	ldr	r2, [pc, #56]	@ (8003368 <parseRequest_identifyFileClass+0x98>)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fc ff4a 	bl	80001d0 <strcmp>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <parseRequest_identifyFileClass+0x76>
            return httpFileClass_CGI;
 8003342:	2302      	movs	r3, #2
 8003344:	e008      	b.n	8003358 <parseRequest_identifyFileClass+0x88>
    for (i = 0; i < httpFileType_CGIList_size; i++)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3301      	adds	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	4b07      	ldr	r3, [pc, #28]	@ (800336c <parseRequest_identifyFileClass+0x9c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3ea      	bcc.n	800332c <parseRequest_identifyFileClass+0x5c>
    }

    return httpFileClass_none;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	0800b948 	.word	0x0800b948
 8003364:	200009b8 	.word	0x200009b8
 8003368:	0800b958 	.word	0x0800b958
 800336c:	200009bc 	.word	0x200009bc

08003370 <parseRquest_identifyRequest>:
int parseRquest_identifyRequest(unsigned char *requestBuffer, http_request_t *httpRequest)
{
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	b095      	sub	sp, #84	@ 0x54
 8003376:	af00      	add	r7, sp, #0
 8003378:	6278      	str	r0, [r7, #36]	@ 0x24
 800337a:	6239      	str	r1, [r7, #32]
 800337c:	466b      	mov	r3, sp
 800337e:	461e      	mov	r6, r3
    /*TODO: suppot Query parsing*/
	printf("Request Buffer : %s",requestBuffer);
 8003380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003382:	487e      	ldr	r0, [pc, #504]	@ (800357c <parseRquest_identifyRequest+0x20c>)
 8003384:	f005 fccc 	bl	8008d20 <iprintf>
    const char *startOfPath = strchr((char*)requestBuffer, ' ') + 1;
 8003388:	2120      	movs	r1, #32
 800338a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800338c:	f005 fe98 	bl	80090c0 <strchr>
 8003390:	4603      	mov	r3, r0
 8003392:	3301      	adds	r3, #1
 8003394:	64bb      	str	r3, [r7, #72]	@ 0x48
    const char *endOfPath;

    if (strstr((char*)requestBuffer, "?"))
 8003396:	213f      	movs	r1, #63	@ 0x3f
 8003398:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800339a:	f005 fe91 	bl	80090c0 <strchr>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <parseRquest_identifyRequest+0x40>
    { //if there is a query string, path ends at the start of query
        endOfPath = strchr(startOfPath, '?');
 80033a4:	213f      	movs	r1, #63	@ 0x3f
 80033a6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80033a8:	f005 fe8a 	bl	80090c0 <strchr>
 80033ac:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80033ae:	e011      	b.n	80033d4 <parseRquest_identifyRequest+0x64>
    }
    else if (strstr((char*)requestBuffer, "HTTP/1."))
 80033b0:	4973      	ldr	r1, [pc, #460]	@ (8003580 <parseRquest_identifyRequest+0x210>)
 80033b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033b4:	f005 ff16 	bl	80091e4 <strstr>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <parseRquest_identifyRequest+0x5a>
    { //if there is a HTTP version mentioned, path ends there
        endOfPath = strchr(startOfPath, ' ');
 80033be:	2120      	movs	r1, #32
 80033c0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80033c2:	f005 fe7d 	bl	80090c0 <strchr>
 80033c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80033c8:	e004      	b.n	80033d4 <parseRquest_identifyRequest+0x64>
    }
    else
    {
        endOfPath = strchr(startOfPath, '\n'); //if none of the above, path ends at newline
 80033ca:	210a      	movs	r1, #10
 80033cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80033ce:	f005 fe77 	bl	80090c0 <strchr>
 80033d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
    }
    //getting enough memory
    //TODO: will this work in embedded?
    char *methordToken = strtok((char*)requestBuffer, " ");
 80033d4:	496b      	ldr	r1, [pc, #428]	@ (8003584 <parseRquest_identifyRequest+0x214>)
 80033d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033d8:	f005 fea8 	bl	800912c <strtok>
 80033dc:	6478      	str	r0, [r7, #68]	@ 0x44
    char method[strlen(methordToken) + 1];
 80033de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80033e0:	f7fc ff00 	bl	80001e4 <strlen>
 80033e4:	4603      	mov	r3, r0
 80033e6:	1c5d      	adds	r5, r3, #1
 80033e8:	462b      	mov	r3, r5
 80033ea:	3b01      	subs	r3, #1
 80033ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80033ee:	2300      	movs	r3, #0
 80033f0:	46a8      	mov	r8, r5
 80033f2:	4699      	mov	r9, r3
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003400:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003404:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003408:	2300      	movs	r3, #0
 800340a:	61bd      	str	r5, [r7, #24]
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800341a:	4649      	mov	r1, r9
 800341c:	00cb      	lsls	r3, r1, #3
 800341e:	4641      	mov	r1, r8
 8003420:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003424:	4641      	mov	r1, r8
 8003426:	00ca      	lsls	r2, r1, #3
 8003428:	1deb      	adds	r3, r5, #7
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	ebad 0d03 	sub.w	sp, sp, r3
 8003432:	466b      	mov	r3, sp
 8003434:	3300      	adds	r3, #0
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char path[endOfPath - startOfPath];
 8003438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800343a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800343c:	1ad4      	subs	r4, r2, r3
 800343e:	1e63      	subs	r3, r4, #1
 8003440:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003442:	4622      	mov	r2, r4
 8003444:	2300      	movs	r3, #0
 8003446:	613a      	str	r2, [r7, #16]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003456:	4649      	mov	r1, r9
 8003458:	00cb      	lsls	r3, r1, #3
 800345a:	4641      	mov	r1, r8
 800345c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003460:	4641      	mov	r1, r8
 8003462:	00ca      	lsls	r2, r1, #3
 8003464:	4622      	mov	r2, r4
 8003466:	2300      	movs	r3, #0
 8003468:	60ba      	str	r2, [r7, #8]
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003478:	4649      	mov	r1, r9
 800347a:	00cb      	lsls	r3, r1, #3
 800347c:	4641      	mov	r1, r8
 800347e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003482:	4641      	mov	r1, r8
 8003484:	00ca      	lsls	r2, r1, #3
 8003486:	4623      	mov	r3, r4
 8003488:	3307      	adds	r3, #7
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	ebad 0d03 	sub.w	sp, sp, r3
 8003492:	466b      	mov	r3, sp
 8003494:	3300      	adds	r3, #0
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34

    //copying internally
    strncpy(method, methordToken, strlen(methordToken));
 8003498:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800349a:	f7fc fea3 	bl	80001e4 <strlen>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80034a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034a6:	f005 fe18 	bl	80090da <strncpy>
    strncpy(path, startOfPath, endOfPath - startOfPath);
 80034aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80034b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80034b6:	f005 fe10 	bl	80090da <strncpy>
	
    //null termination
	method[sizeof(method)-1] = 0; //-1 to delete trailing space
 80034ba:	1e6b      	subs	r3, r5, #1
 80034bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034be:	2100      	movs	r1, #0
 80034c0:	54d1      	strb	r1, [r2, r3]
    path[sizeof(path)] = 0; 
 80034c2:	4622      	mov	r2, r4
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]
	//parse and copy method for returning.
    httpRequest->method = parseRequest_mapMethodToEnum(method);
 80034ca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034cc:	f7ff fe92 	bl	80031f4 <parseRequest_mapMethodToEnum>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	705a      	strb	r2, [r3, #1]

    //decode URL and copy path for returning.
    char decodedURL[sizeof(path)];
 80034d8:	4621      	mov	r1, r4
 80034da:	460b      	mov	r3, r1
 80034dc:	3b01      	subs	r3, #1
 80034de:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e0:	2300      	movs	r3, #0
 80034e2:	6039      	str	r1, [r7, #0]
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034f2:	4628      	mov	r0, r5
 80034f4:	00c3      	lsls	r3, r0, #3
 80034f6:	4620      	mov	r0, r4
 80034f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80034fc:	4620      	mov	r0, r4
 80034fe:	00c2      	lsls	r2, r0, #3
 8003500:	2300      	movs	r3, #0
 8003502:	468a      	mov	sl, r1
 8003504:	469b      	mov	fp, r3
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800351a:	1dcb      	adds	r3, r1, #7
 800351c:	08db      	lsrs	r3, r3, #3
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	ebad 0d03 	sub.w	sp, sp, r3
 8003524:	466b      	mov	r3, sp
 8003526:	3300      	adds	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    url_decode(path, decodedURL);
 800352a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800352e:	f7ff f9ad 	bl	800288c <url_decode>
    
	if(0==strcmp(decodedURL,"/")){ //redirect / to configured ROOT page.
 8003532:	4915      	ldr	r1, [pc, #84]	@ (8003588 <parseRquest_identifyRequest+0x218>)
 8003534:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003536:	f7fc fe4b 	bl	80001d0 <strcmp>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <parseRquest_identifyRequest+0x1e0>
		strncpy(httpRequest->httpFilePath, HTTP_SERVER_ROOT_PAGE, HTTP_MAX_PATH_LENGTH);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	3302      	adds	r3, #2
 8003544:	2264      	movs	r2, #100	@ 0x64
 8003546:	4911      	ldr	r1, [pc, #68]	@ (800358c <parseRquest_identifyRequest+0x21c>)
 8003548:	4618      	mov	r0, r3
 800354a:	f005 fdc6 	bl	80090da <strncpy>
 800354e:	e006      	b.n	800355e <parseRquest_identifyRequest+0x1ee>
	}
	else{
		strncpy(httpRequest->httpFilePath, decodedURL, HTTP_MAX_PATH_LENGTH);
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	3302      	adds	r3, #2
 8003554:	2264      	movs	r2, #100	@ 0x64
 8003556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003558:	4618      	mov	r0, r3
 800355a:	f005 fdbe 	bl	80090da <strncpy>
	}

    //decode file type and add copy it for returning
    httpRequest->fileClass = parseRequest_identifyFileClass(path);
 800355e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003560:	f7ff feb6 	bl	80032d0 <parseRequest_identifyFileClass>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	701a      	strb	r2, [r3, #0]

    //return success
    return HTTP_SUCCESS;
 800356c:	2300      	movs	r3, #0
 800356e:	46b5      	mov	sp, r6
}
 8003570:	4618      	mov	r0, r3
 8003572:	3754      	adds	r7, #84	@ 0x54
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357a:	bf00      	nop
 800357c:	0800ad18 	.word	0x0800ad18
 8003580:	0800ad2c 	.word	0x0800ad2c
 8003584:	0800ad34 	.word	0x0800ad34
 8003588:	0800ad38 	.word	0x0800ad38
 800358c:	0800ad3c 	.word	0x0800ad3c

08003590 <http_response_getFileType>:
#include "http_config.h"
#include <stdio.h>
#include <string.h>

http_response_fileType_t http_response_getFileType(char *requestPath)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
    char *fileType;
    fileType = strrchr(requestPath, '.');
 8003598:	212e      	movs	r1, #46	@ 0x2e
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f005 fdb0 	bl	8009100 <strrchr>
 80035a0:	60f8      	str	r0, [r7, #12]
    if (0 == fileType)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10d      	bne.n	80035c4 <http_response_getFileType+0x34>
    {
        PRINT_ERROR("File type  unknown(%s)\r\n", requestPath);
 80035a8:	4b69      	ldr	r3, [pc, #420]	@ (8003750 <http_response_getFileType+0x1c0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68d8      	ldr	r0, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	4b68      	ldr	r3, [pc, #416]	@ (8003754 <http_response_getFileType+0x1c4>)
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2332      	movs	r3, #50	@ 0x32
 80035b8:	4a67      	ldr	r2, [pc, #412]	@ (8003758 <http_response_getFileType+0x1c8>)
 80035ba:	4968      	ldr	r1, [pc, #416]	@ (800375c <http_response_getFileType+0x1cc>)
 80035bc:	f005 fb80 	bl	8008cc0 <fiprintf>
        return HTTP_fileType_unknown;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e0c0      	b.n	8003746 <http_response_getFileType+0x1b6>
    }

    fileType += 1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3301      	adds	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]

    if (0 == strcmp(fileType, "shtml"))
 80035ca:	4965      	ldr	r1, [pc, #404]	@ (8003760 <http_response_getFileType+0x1d0>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7fc fdff 	bl	80001d0 <strcmp>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <http_response_getFileType+0x4c>
        return HTTP_fileType_SHTML;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b4      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "shtm"))
 80035dc:	4961      	ldr	r1, [pc, #388]	@ (8003764 <http_response_getFileType+0x1d4>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7fc fdf6 	bl	80001d0 <strcmp>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <http_response_getFileType+0x5e>
        return HTTP_fileType_SHTM;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0ab      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "ssi"))
 80035ee:	495e      	ldr	r1, [pc, #376]	@ (8003768 <http_response_getFileType+0x1d8>)
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7fc fded 	bl	80001d0 <strcmp>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <http_response_getFileType+0x70>
        return HTTP_fileType_SSI;
 80035fc:	2304      	movs	r3, #4
 80035fe:	e0a2      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "xml"))
 8003600:	495a      	ldr	r1, [pc, #360]	@ (800376c <http_response_getFileType+0x1dc>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7fc fde4 	bl	80001d0 <strcmp>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <http_response_getFileType+0x82>
        return HTTP_fileType_XML;
 800360e:	2305      	movs	r3, #5
 8003610:	e099      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "cgi"))
 8003612:	4957      	ldr	r1, [pc, #348]	@ (8003770 <http_response_getFileType+0x1e0>)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7fc fddb 	bl	80001d0 <strcmp>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <http_response_getFileType+0x94>
        return HTTP_fileType_CGI;
 8003620:	2306      	movs	r3, #6
 8003622:	e090      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "sh"))
 8003624:	4953      	ldr	r1, [pc, #332]	@ (8003774 <http_response_getFileType+0x1e4>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7fc fdd2 	bl	80001d0 <strcmp>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <http_response_getFileType+0xa6>
        return HTTP_fileType_SH;
 8003632:	2307      	movs	r3, #7
 8003634:	e087      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "exe"))
 8003636:	4950      	ldr	r1, [pc, #320]	@ (8003778 <http_response_getFileType+0x1e8>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7fc fdc9 	bl	80001d0 <strcmp>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <http_response_getFileType+0xb8>
        return HTTP_fileType_EXE;
 8003644:	2308      	movs	r3, #8
 8003646:	e07e      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "html"))
 8003648:	494c      	ldr	r1, [pc, #304]	@ (800377c <http_response_getFileType+0x1ec>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7fc fdc0 	bl	80001d0 <strcmp>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <http_response_getFileType+0xca>
        return HTTP_fileType_HTML;
 8003656:	2309      	movs	r3, #9
 8003658:	e075      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "htm"))
 800365a:	4949      	ldr	r1, [pc, #292]	@ (8003780 <http_response_getFileType+0x1f0>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7fc fdb7 	bl	80001d0 <strcmp>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <http_response_getFileType+0xdc>
        return HTTP_fileType_HTM;
 8003668:	230a      	movs	r3, #10
 800366a:	e06c      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "txt"))
 800366c:	4945      	ldr	r1, [pc, #276]	@ (8003784 <http_response_getFileType+0x1f4>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7fc fdae 	bl	80001d0 <strcmp>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <http_response_getFileType+0xee>
        return HTTP_fileType_TXT;
 800367a:	2302      	movs	r3, #2
 800367c:	e063      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "css"))
 800367e:	4942      	ldr	r1, [pc, #264]	@ (8003788 <http_response_getFileType+0x1f8>)
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7fc fda5 	bl	80001d0 <strcmp>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <http_response_getFileType+0x100>
        return HTTP_fileType_CSS;
 800368c:	230b      	movs	r3, #11
 800368e:	e05a      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "js"))
 8003690:	493e      	ldr	r1, [pc, #248]	@ (800378c <http_response_getFileType+0x1fc>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7fc fd9c 	bl	80001d0 <strcmp>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <http_response_getFileType+0x112>
        return HTTP_fileType_JS;
 800369e:	230c      	movs	r3, #12
 80036a0:	e051      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "json"))
 80036a2:	493b      	ldr	r1, [pc, #236]	@ (8003790 <http_response_getFileType+0x200>)
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7fc fd93 	bl	80001d0 <strcmp>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <http_response_getFileType+0x124>
        return HTTP_fileType_JSON;
 80036b0:	230d      	movs	r3, #13
 80036b2:	e048      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "jpeg"))
 80036b4:	4937      	ldr	r1, [pc, #220]	@ (8003794 <http_response_getFileType+0x204>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7fc fd8a 	bl	80001d0 <strcmp>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <http_response_getFileType+0x136>
        return HTTP_fileType_JPEG;
 80036c2:	230e      	movs	r3, #14
 80036c4:	e03f      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "jpg"))
 80036c6:	4934      	ldr	r1, [pc, #208]	@ (8003798 <http_response_getFileType+0x208>)
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7fc fd81 	bl	80001d0 <strcmp>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <http_response_getFileType+0x148>
        return HTTP_fileType_JPEG;
 80036d4:	230e      	movs	r3, #14
 80036d6:	e036      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "png"))
 80036d8:	4930      	ldr	r1, [pc, #192]	@ (800379c <http_response_getFileType+0x20c>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7fc fd78 	bl	80001d0 <strcmp>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <http_response_getFileType+0x15a>
        return HTTP_fileType_PNG;
 80036e6:	230f      	movs	r3, #15
 80036e8:	e02d      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "bin"))
 80036ea:	492d      	ldr	r1, [pc, #180]	@ (80037a0 <http_response_getFileType+0x210>)
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7fc fd6f 	bl	80001d0 <strcmp>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <http_response_getFileType+0x16c>
        return HTTP_fileType_BIN;
 80036f8:	2310      	movs	r3, #16
 80036fa:	e024      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "csv"))
 80036fc:	4929      	ldr	r1, [pc, #164]	@ (80037a4 <http_response_getFileType+0x214>)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7fc fd66 	bl	80001d0 <strcmp>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <http_response_getFileType+0x17e>
        return HTTP_fileType_CSV;
 800370a:	2311      	movs	r3, #17
 800370c:	e01b      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "gif"))
 800370e:	4926      	ldr	r1, [pc, #152]	@ (80037a8 <http_response_getFileType+0x218>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7fc fd5d 	bl	80001d0 <strcmp>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <http_response_getFileType+0x190>
        return HTTP_fileType_GIF;
 800371c:	2312      	movs	r3, #18
 800371e:	e012      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "ico"))
 8003720:	4922      	ldr	r1, [pc, #136]	@ (80037ac <http_response_getFileType+0x21c>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7fc fd54 	bl	80001d0 <strcmp>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <http_response_getFileType+0x1a2>
        return HTTP_fileType_ICO;
 800372e:	2313      	movs	r3, #19
 8003730:	e009      	b.n	8003746 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "zip"))
 8003732:	491f      	ldr	r1, [pc, #124]	@ (80037b0 <http_response_getFileType+0x220>)
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7fc fd4b 	bl	80001d0 <strcmp>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <http_response_getFileType+0x1b4>
        return HTTP_fileType_ZIP;
 8003740:	2314      	movs	r3, #20
 8003742:	e000      	b.n	8003746 <http_response_getFileType+0x1b6>
    else
        return HTTP_fileType_unknown;
 8003744:	2300      	movs	r3, #0

    PRINT_ERROR("unhandled condition(%s)\r\n", requestPath);
    return HTTP_FAILURE;
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200009d4 	.word	0x200009d4
 8003754:	0800b964 	.word	0x0800b964
 8003758:	0800ad48 	.word	0x0800ad48
 800375c:	0800ad70 	.word	0x0800ad70
 8003760:	0800ad9c 	.word	0x0800ad9c
 8003764:	0800ada4 	.word	0x0800ada4
 8003768:	0800adac 	.word	0x0800adac
 800376c:	0800adb0 	.word	0x0800adb0
 8003770:	0800adb4 	.word	0x0800adb4
 8003774:	0800adb8 	.word	0x0800adb8
 8003778:	0800adbc 	.word	0x0800adbc
 800377c:	0800adc0 	.word	0x0800adc0
 8003780:	0800adc8 	.word	0x0800adc8
 8003784:	0800adcc 	.word	0x0800adcc
 8003788:	0800add0 	.word	0x0800add0
 800378c:	0800add4 	.word	0x0800add4
 8003790:	0800add8 	.word	0x0800add8
 8003794:	0800ade0 	.word	0x0800ade0
 8003798:	0800ade8 	.word	0x0800ade8
 800379c:	0800adec 	.word	0x0800adec
 80037a0:	0800adf0 	.word	0x0800adf0
 80037a4:	0800adf4 	.word	0x0800adf4
 80037a8:	0800adf8 	.word	0x0800adf8
 80037ac:	0800adfc 	.word	0x0800adfc
 80037b0:	0800ae00 	.word	0x0800ae00

080037b4 <http_response_get_contentType_string>:

http_response_contenttype_t http_response_get_contentType_string(http_response_fileType_t fileType, char *buffer, unsigned int bufferLength)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	4603      	mov	r3, r0
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	73fb      	strb	r3, [r7, #15]
    if ((NULL == buffer) || (bufferLength <= 0))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <http_response_get_contentType_string+0x1a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10d      	bne.n	80037ea <http_response_get_contentType_string+0x36>
    {
        PRINT_ERROR("NULL buffer or zero length(%d)\r\n", bufferLength);
 80037ce:	4b7d      	ldr	r3, [pc, #500]	@ (80039c4 <http_response_get_contentType_string+0x210>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68d8      	ldr	r0, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	4b7b      	ldr	r3, [pc, #492]	@ (80039c8 <http_response_get_contentType_string+0x214>)
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	236d      	movs	r3, #109	@ 0x6d
 80037de:	4a7b      	ldr	r2, [pc, #492]	@ (80039cc <http_response_get_contentType_string+0x218>)
 80037e0:	497b      	ldr	r1, [pc, #492]	@ (80039d0 <http_response_get_contentType_string+0x21c>)
 80037e2:	f005 fa6d 	bl	8008cc0 <fiprintf>
        return HTTP_FAILURE;
 80037e6:	23ff      	movs	r3, #255	@ 0xff
 80037e8:	e0e7      	b.n	80039ba <http_response_get_contentType_string+0x206>
    }
    else
    {
        if ((fileType == HTTP_fileType_SHTML) || (fileType == HTTP_fileType_SHTM) ||
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d017      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d014      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d011      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
            (fileType == HTTP_fileType_SSI) || (fileType == HTTP_fileType_XML) ||
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d00e      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b07      	cmp	r3, #7
 8003806:	d00b      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
            (fileType == HTTP_fileType_SH) || (fileType == HTTP_fileType_EXE) ||
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d008      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b09      	cmp	r3, #9
 8003812:	d005      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
            (fileType == HTTP_fileType_HTML) || (fileType == HTTP_fileType_HTM) ||
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b0a      	cmp	r3, #10
 8003818:	d002      	beq.n	8003820 <http_response_get_contentType_string+0x6c>
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d10b      	bne.n	8003838 <http_response_get_contentType_string+0x84>
            (fileType == HTTP_fileType_SHTM))
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_HTML, bufferLength);
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	496c      	ldr	r1, [pc, #432]	@ (80039d4 <http_response_get_contentType_string+0x220>)
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f005 fc58 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_html;
 8003834:	2302      	movs	r3, #2
 8003836:	e0c0      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_TXT)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d10b      	bne.n	8003856 <http_response_get_contentType_string+0xa2>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, bufferLength);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4965      	ldr	r1, [pc, #404]	@ (80039d8 <http_response_get_contentType_string+0x224>)
 8003842:	68b8      	ldr	r0, [r7, #8]
 8003844:	f005 fc49 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_plaintext;
 8003852:	2301      	movs	r3, #1
 8003854:	e0b1      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_CSS)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d10b      	bne.n	8003874 <http_response_get_contentType_string+0xc0>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSS, bufferLength);
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	495f      	ldr	r1, [pc, #380]	@ (80039dc <http_response_get_contentType_string+0x228>)
 8003860:	68b8      	ldr	r0, [r7, #8]
 8003862:	f005 fc3a 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4413      	add	r3, r2
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_css;
 8003870:	2303      	movs	r3, #3
 8003872:	e0a2      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_JS)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d10b      	bne.n	8003892 <http_response_get_contentType_string+0xde>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_JS, bufferLength);
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4958      	ldr	r1, [pc, #352]	@ (80039e0 <http_response_get_contentType_string+0x22c>)
 800387e:	68b8      	ldr	r0, [r7, #8]
 8003880:	f005 fc2b 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_js;
 800388e:	2309      	movs	r3, #9
 8003890:	e093      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_JSON)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2b0d      	cmp	r3, #13
 8003896:	d10b      	bne.n	80038b0 <http_response_get_contentType_string+0xfc>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_JSON, bufferLength);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4952      	ldr	r1, [pc, #328]	@ (80039e4 <http_response_get_contentType_string+0x230>)
 800389c:	68b8      	ldr	r0, [r7, #8]
 800389e:	f005 fc1c 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_json;
 80038ac:	2308      	movs	r3, #8
 80038ae:	e084      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_JPEG)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b0e      	cmp	r3, #14
 80038b4:	d10b      	bne.n	80038ce <http_response_get_contentType_string+0x11a>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_JPEG, bufferLength);
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	494b      	ldr	r1, [pc, #300]	@ (80039e8 <http_response_get_contentType_string+0x234>)
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f005 fc0d 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_jpeg;
 80038ca:	2305      	movs	r3, #5
 80038cc:	e075      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_PNG)
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d10b      	bne.n	80038ec <http_response_get_contentType_string+0x138>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_PNG, bufferLength);
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4945      	ldr	r1, [pc, #276]	@ (80039ec <http_response_get_contentType_string+0x238>)
 80038d8:	68b8      	ldr	r0, [r7, #8]
 80038da:	f005 fbfe 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_png;
 80038e8:	2306      	movs	r3, #6
 80038ea:	e066      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_BIN)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d10b      	bne.n	800390a <http_response_get_contentType_string+0x156>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_BIN, bufferLength);
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	493e      	ldr	r1, [pc, #248]	@ (80039f0 <http_response_get_contentType_string+0x23c>)
 80038f6:	68b8      	ldr	r0, [r7, #8]
 80038f8:	f005 fbef 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_bin;
 8003906:	230b      	movs	r3, #11
 8003908:	e057      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_CSV)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b11      	cmp	r3, #17
 800390e:	d10b      	bne.n	8003928 <http_response_get_contentType_string+0x174>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSV, bufferLength);
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4938      	ldr	r1, [pc, #224]	@ (80039f4 <http_response_get_contentType_string+0x240>)
 8003914:	68b8      	ldr	r0, [r7, #8]
 8003916:	f005 fbe0 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_csv;
 8003924:	2304      	movs	r3, #4
 8003926:	e048      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_GIF)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b12      	cmp	r3, #18
 800392c:	d10b      	bne.n	8003946 <http_response_get_contentType_string+0x192>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_GIF, bufferLength);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4931      	ldr	r1, [pc, #196]	@ (80039f8 <http_response_get_contentType_string+0x244>)
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f005 fbd1 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_gif;
 8003942:	2307      	movs	r3, #7
 8003944:	e039      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_ICO)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b13      	cmp	r3, #19
 800394a:	d10b      	bne.n	8003964 <http_response_get_contentType_string+0x1b0>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_ICO, bufferLength);
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	492b      	ldr	r1, [pc, #172]	@ (80039fc <http_response_get_contentType_string+0x248>)
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f005 fbc2 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_ico;
 8003960:	230c      	movs	r3, #12
 8003962:	e02a      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_ZIP)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b14      	cmp	r3, #20
 8003968:	d10b      	bne.n	8003982 <http_response_get_contentType_string+0x1ce>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_ZIP, bufferLength);
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4924      	ldr	r1, [pc, #144]	@ (8003a00 <http_response_get_contentType_string+0x24c>)
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f005 fbb3 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_zip;
 800397e:	230a      	movs	r3, #10
 8003980:	e01b      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_unknown)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <http_response_get_contentType_string+0x1ec>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, bufferLength);
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4913      	ldr	r1, [pc, #76]	@ (80039d8 <http_response_get_contentType_string+0x224>)
 800398c:	68b8      	ldr	r0, [r7, #8]
 800398e:	f005 fba4 	bl	80090da <strncpy>
            buffer[bufferLength] = 0;
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_plaintext;
 800399c:	2301      	movs	r3, #1
 800399e:	e00c      	b.n	80039ba <http_response_get_contentType_string+0x206>
        }
    }

    PRINT_ERROR("unhandled condition(%d)\r\n", fileType);
 80039a0:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <http_response_get_contentType_string+0x210>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68d8      	ldr	r0, [r3, #12]
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <http_response_get_contentType_string+0x214>)
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	23c6      	movs	r3, #198	@ 0xc6
 80039b0:	4a06      	ldr	r2, [pc, #24]	@ (80039cc <http_response_get_contentType_string+0x218>)
 80039b2:	4914      	ldr	r1, [pc, #80]	@ (8003a04 <http_response_get_contentType_string+0x250>)
 80039b4:	f005 f984 	bl	8008cc0 <fiprintf>
    return HTTP_FAILURE;
 80039b8:	23ff      	movs	r3, #255	@ 0xff
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200009d4 	.word	0x200009d4
 80039c8:	0800b980 	.word	0x0800b980
 80039cc:	0800ad48 	.word	0x0800ad48
 80039d0:	0800ae04 	.word	0x0800ae04
 80039d4:	0800ae38 	.word	0x0800ae38
 80039d8:	0800ae44 	.word	0x0800ae44
 80039dc:	0800ae50 	.word	0x0800ae50
 80039e0:	0800ae5c 	.word	0x0800ae5c
 80039e4:	0800ae74 	.word	0x0800ae74
 80039e8:	0800ae88 	.word	0x0800ae88
 80039ec:	0800ae94 	.word	0x0800ae94
 80039f0:	0800aea0 	.word	0x0800aea0
 80039f4:	0800aebc 	.word	0x0800aebc
 80039f8:	0800aec8 	.word	0x0800aec8
 80039fc:	0800aed4 	.word	0x0800aed4
 8003a00:	0800aee4 	.word	0x0800aee4
 8003a04:	0800aef4 	.word	0x0800aef4

08003a08 <http_response_contentTypeToString>:

int http_response_contentTypeToString(http_response_contenttype_t contentType, char *buffer, unsigned int length)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	4603      	mov	r3, r0
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	73fb      	strb	r3, [r7, #15]
    if ((NULL == buffer) || (0 == length))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <http_response_contentTypeToString+0x1a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10e      	bne.n	8003a40 <http_response_contentTypeToString+0x38>
    {
        PRINT_ERROR("NULL buffer or 0 length(%d)\r\n", length);
 8003a22:	4b4a      	ldr	r3, [pc, #296]	@ (8003b4c <http_response_contentTypeToString+0x144>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68d8      	ldr	r0, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	4b48      	ldr	r3, [pc, #288]	@ (8003b50 <http_response_contentTypeToString+0x148>)
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	23ce      	movs	r3, #206	@ 0xce
 8003a32:	4a48      	ldr	r2, [pc, #288]	@ (8003b54 <http_response_contentTypeToString+0x14c>)
 8003a34:	4948      	ldr	r1, [pc, #288]	@ (8003b58 <http_response_contentTypeToString+0x150>)
 8003a36:	f005 f943 	bl	8008cc0 <fiprintf>
        return HTTP_FAILURE;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	e080      	b.n	8003b42 <http_response_contentTypeToString+0x13a>
    }

    switch (contentType)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d86a      	bhi.n	8003b1c <http_response_contentTypeToString+0x114>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <http_response_contentTypeToString+0x44>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003a8d 	.word	0x08003a8d
 8003a54:	08003a99 	.word	0x08003a99
 8003a58:	08003aa5 	.word	0x08003aa5
 8003a5c:	08003ab1 	.word	0x08003ab1
 8003a60:	08003abd 	.word	0x08003abd
 8003a64:	08003ac9 	.word	0x08003ac9
 8003a68:	08003ad5 	.word	0x08003ad5
 8003a6c:	08003ae1 	.word	0x08003ae1
 8003a70:	08003aed 	.word	0x08003aed
 8003a74:	08003af9 	.word	0x08003af9
 8003a78:	08003b05 	.word	0x08003b05
 8003a7c:	08003b11 	.word	0x08003b11
    {
    case HTTP_contentType_unknown:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, length);
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4936      	ldr	r1, [pc, #216]	@ (8003b5c <http_response_contentTypeToString+0x154>)
 8003a84:	68b8      	ldr	r0, [r7, #8]
 8003a86:	f005 fb28 	bl	80090da <strncpy>
        break;
 8003a8a:	e059      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_plaintext:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, length);
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4933      	ldr	r1, [pc, #204]	@ (8003b5c <http_response_contentTypeToString+0x154>)
 8003a90:	68b8      	ldr	r0, [r7, #8]
 8003a92:	f005 fb22 	bl	80090da <strncpy>
        break;
 8003a96:	e053      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_html:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_HTML, length);
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4931      	ldr	r1, [pc, #196]	@ (8003b60 <http_response_contentTypeToString+0x158>)
 8003a9c:	68b8      	ldr	r0, [r7, #8]
 8003a9e:	f005 fb1c 	bl	80090da <strncpy>
        break;
 8003aa2:	e04d      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_css:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSS, length);
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	492f      	ldr	r1, [pc, #188]	@ (8003b64 <http_response_contentTypeToString+0x15c>)
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f005 fb16 	bl	80090da <strncpy>
        break;
 8003aae:	e047      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_csv:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSV, length);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	492d      	ldr	r1, [pc, #180]	@ (8003b68 <http_response_contentTypeToString+0x160>)
 8003ab4:	68b8      	ldr	r0, [r7, #8]
 8003ab6:	f005 fb10 	bl	80090da <strncpy>
        break;
 8003aba:	e041      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_jpeg:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_JPEG, length);
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	492b      	ldr	r1, [pc, #172]	@ (8003b6c <http_response_contentTypeToString+0x164>)
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f005 fb0a 	bl	80090da <strncpy>
        break;
 8003ac6:	e03b      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_png:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PNG, length);
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4929      	ldr	r1, [pc, #164]	@ (8003b70 <http_response_contentTypeToString+0x168>)
 8003acc:	68b8      	ldr	r0, [r7, #8]
 8003ace:	f005 fb04 	bl	80090da <strncpy>
        break;
 8003ad2:	e035      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_gif:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_GIF, length);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4927      	ldr	r1, [pc, #156]	@ (8003b74 <http_response_contentTypeToString+0x16c>)
 8003ad8:	68b8      	ldr	r0, [r7, #8]
 8003ada:	f005 fafe 	bl	80090da <strncpy>
        break;
 8003ade:	e02f      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_json:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_JSON, length);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4925      	ldr	r1, [pc, #148]	@ (8003b78 <http_response_contentTypeToString+0x170>)
 8003ae4:	68b8      	ldr	r0, [r7, #8]
 8003ae6:	f005 faf8 	bl	80090da <strncpy>
        break;
 8003aea:	e029      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_js:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_JS, length);
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4923      	ldr	r1, [pc, #140]	@ (8003b7c <http_response_contentTypeToString+0x174>)
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f005 faf2 	bl	80090da <strncpy>
        break;
 8003af6:	e023      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_zip:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_ZIP, length);
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4921      	ldr	r1, [pc, #132]	@ (8003b80 <http_response_contentTypeToString+0x178>)
 8003afc:	68b8      	ldr	r0, [r7, #8]
 8003afe:	f005 faec 	bl	80090da <strncpy>
        break;
 8003b02:	e01d      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_bin:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_BIN, length);
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	491f      	ldr	r1, [pc, #124]	@ (8003b84 <http_response_contentTypeToString+0x17c>)
 8003b08:	68b8      	ldr	r0, [r7, #8]
 8003b0a:	f005 fae6 	bl	80090da <strncpy>
        break;
 8003b0e:	e017      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_ico:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_ICO, length);
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	491d      	ldr	r1, [pc, #116]	@ (8003b88 <http_response_contentTypeToString+0x180>)
 8003b14:	68b8      	ldr	r0, [r7, #8]
 8003b16:	f005 fae0 	bl	80090da <strncpy>
        break;
 8003b1a:	e011      	b.n	8003b40 <http_response_contentTypeToString+0x138>
    }
    default:
    {
        PRINT_ERROR("unhandled case. passing default(%d)\r\n", contentType);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <http_response_contentTypeToString+0x144>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68d8      	ldr	r0, [r3, #12]
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <http_response_contentTypeToString+0x148>)
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	f240 1317 	movw	r3, #279	@ 0x117
 8003b2e:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <http_response_contentTypeToString+0x14c>)
 8003b30:	4916      	ldr	r1, [pc, #88]	@ (8003b8c <http_response_contentTypeToString+0x184>)
 8003b32:	f005 f8c5 	bl	8008cc0 <fiprintf>
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, length);
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4908      	ldr	r1, [pc, #32]	@ (8003b5c <http_response_contentTypeToString+0x154>)
 8003b3a:	68b8      	ldr	r0, [r7, #8]
 8003b3c:	f005 facd 	bl	80090da <strncpy>
    }
    }

    //PRINT_ERROR("unhandled case(%d)\r\n", contentType);
    return HTTP_SUCCESS;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200009d4 	.word	0x200009d4
 8003b50:	0800b9a8 	.word	0x0800b9a8
 8003b54:	0800ad48 	.word	0x0800ad48
 8003b58:	0800af24 	.word	0x0800af24
 8003b5c:	0800ae44 	.word	0x0800ae44
 8003b60:	0800ae38 	.word	0x0800ae38
 8003b64:	0800ae50 	.word	0x0800ae50
 8003b68:	0800aebc 	.word	0x0800aebc
 8003b6c:	0800ae88 	.word	0x0800ae88
 8003b70:	0800ae94 	.word	0x0800ae94
 8003b74:	0800aec8 	.word	0x0800aec8
 8003b78:	0800ae74 	.word	0x0800ae74
 8003b7c:	0800ae5c 	.word	0x0800ae5c
 8003b80:	0800aee4 	.word	0x0800aee4
 8003b84:	0800aea0 	.word	0x0800aea0
 8003b88:	0800aed4 	.word	0x0800aed4
 8003b8c:	0800af58 	.word	0x0800af58

08003b90 <http_response_response_header>:
    - if path is null, response content type will be used. 
    - if response content type is also null, then no content type will be included in the response. 
*/

int http_response_response_header(HTTP_response_headerRequest_t headerRequest)
{
 8003b90:	b084      	sub	sp, #16
 8003b92:	b5b0      	push	{r4, r5, r7, lr}
 8003b94:	b0bc      	sub	sp, #240	@ 0xf0
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	f107 04f8 	add.w	r4, r7, #248	@ 0xf8
 8003b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if ((NULL == headerRequest.headerBuffer) || (headerRequest.bufferLength <= 0))
 8003ba0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <http_response_response_header+0x20>
 8003ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d110      	bne.n	8003bd2 <http_response_response_header+0x42>
    {
        PRINT_ERROR(" null buffer or 0 length(%d)\r\n", (int)headerRequest.bufferLength);
 8003bb0:	4bcb      	ldr	r3, [pc, #812]	@ (8003ee0 <http_response_response_header+0x350>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68d8      	ldr	r0, [r3, #12]
 8003bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	4bc9      	ldr	r3, [pc, #804]	@ (8003ee4 <http_response_response_header+0x354>)
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	f240 132d 	movw	r3, #301	@ 0x12d
 8003bc4:	4ac8      	ldr	r2, [pc, #800]	@ (8003ee8 <http_response_response_header+0x358>)
 8003bc6:	49c9      	ldr	r1, [pc, #804]	@ (8003eec <http_response_response_header+0x35c>)
 8003bc8:	f005 f87a 	bl	8008cc0 <fiprintf>
        return HTTP_FAILURE;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd0:	e208      	b.n	8003fe4 <http_response_response_header+0x454>
    }

    char responseLine[HTTP_RESPONSE_LINE1_LENGTH];
    char contentTypeLine[HTTP_RESPONSE_CONTTYPE_LENGTH];
    char contentLengthLine[HTTP_RESPONSE_CONLEN_LENGTH];
    char contentTypeLineDone = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    char contentLengthLineDone = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6

    responseLine[0] = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    contentTypeLine[0] = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    contentLengthLine[0] = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    headerRequest.headerBuffer[0] = 0;
 8003bf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]

    //sprint response line 1
    //TODO: handle all responses
    switch (headerRequest.responseCode)
 8003bf8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8003bfc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c00:	f000 809a 	beq.w	8003d38 <http_response_response_header+0x1a8>
 8003c04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c08:	f300 809e 	bgt.w	8003d48 <http_response_response_header+0x1b8>
 8003c0c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8003c10:	f280 809a 	bge.w	8003d48 <http_response_response_header+0x1b8>
 8003c14:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 8003c18:	dc0b      	bgt.n	8003c32 <http_response_response_header+0xa2>
 8003c1a:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8003c1e:	d05b      	beq.n	8003cd8 <http_response_response_header+0x148>
 8003c20:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8003c24:	f300 8090 	bgt.w	8003d48 <http_response_response_header+0x1b8>
 8003c28:	2bc8      	cmp	r3, #200	@ 0xc8
 8003c2a:	d045      	beq.n	8003cb8 <http_response_response_header+0x128>
 8003c2c:	2bcc      	cmp	r3, #204	@ 0xcc
 8003c2e:	d04b      	beq.n	8003cc8 <http_response_response_header+0x138>
 8003c30:	e08a      	b.n	8003d48 <http_response_response_header+0x1b8>
 8003c32:	f2a3 1393 	subw	r3, r3, #403	@ 0x193
 8003c36:	2b1c      	cmp	r3, #28
 8003c38:	f200 8086 	bhi.w	8003d48 <http_response_response_header+0x1b8>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <http_response_response_header+0xb4>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003ce9 	.word	0x08003ce9
 8003c48:	08003cf9 	.word	0x08003cf9
 8003c4c:	08003d49 	.word	0x08003d49
 8003c50:	08003d49 	.word	0x08003d49
 8003c54:	08003d49 	.word	0x08003d49
 8003c58:	08003d49 	.word	0x08003d49
 8003c5c:	08003d49 	.word	0x08003d49
 8003c60:	08003d49 	.word	0x08003d49
 8003c64:	08003d49 	.word	0x08003d49
 8003c68:	08003d49 	.word	0x08003d49
 8003c6c:	08003d09 	.word	0x08003d09
 8003c70:	08003d19 	.word	0x08003d19
 8003c74:	08003d49 	.word	0x08003d49
 8003c78:	08003d49 	.word	0x08003d49
 8003c7c:	08003d49 	.word	0x08003d49
 8003c80:	08003d49 	.word	0x08003d49
 8003c84:	08003d49 	.word	0x08003d49
 8003c88:	08003d49 	.word	0x08003d49
 8003c8c:	08003d49 	.word	0x08003d49
 8003c90:	08003d49 	.word	0x08003d49
 8003c94:	08003d49 	.word	0x08003d49
 8003c98:	08003d49 	.word	0x08003d49
 8003c9c:	08003d49 	.word	0x08003d49
 8003ca0:	08003d49 	.word	0x08003d49
 8003ca4:	08003d49 	.word	0x08003d49
 8003ca8:	08003d49 	.word	0x08003d49
 8003cac:	08003d49 	.word	0x08003d49
 8003cb0:	08003d49 	.word	0x08003d49
 8003cb4:	08003d29 	.word	0x08003d29
    {
    case HTTP_RESCODE_successSuccess: //200 OK
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SUCCESS_SUCCESS);
 8003cb8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003cbc:	4a8c      	ldr	r2, [pc, #560]	@ (8003ef0 <http_response_response_header+0x360>)
 8003cbe:	2132      	movs	r1, #50	@ 0x32
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f005 f89d 	bl	8008e00 <sniprintf>
        break;
 8003cc6:	e055      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_successNocontent: //204
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SUCCESS_NOCONTENT);
 8003cc8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003ccc:	4a89      	ldr	r2, [pc, #548]	@ (8003ef4 <http_response_response_header+0x364>)
 8003cce:	2132      	movs	r1, #50	@ 0x32
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f005 f895 	bl	8008e00 <sniprintf>
        break;
 8003cd6:	e04d      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_redirectNotmodified: //304
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_REDIRECT_NOTMODIFIED);
 8003cd8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003cdc:	4a86      	ldr	r2, [pc, #536]	@ (8003ef8 <http_response_response_header+0x368>)
 8003cde:	2132      	movs	r1, #50	@ 0x32
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f005 f88d 	bl	8008e00 <sniprintf>
        break;
 8003ce6:	e045      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorForbidden: // 403
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_FORBIDDEN);
 8003ce8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003cec:	4a83      	ldr	r2, [pc, #524]	@ (8003efc <http_response_response_header+0x36c>)
 8003cee:	2132      	movs	r1, #50	@ 0x32
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f005 f885 	bl	8008e00 <sniprintf>
        break;
 8003cf6:	e03d      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorNotfound: // 401
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_NOTFOUND);
 8003cf8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003cfc:	4a80      	ldr	r2, [pc, #512]	@ (8003f00 <http_response_response_header+0x370>)
 8003cfe:	2132      	movs	r1, #50	@ 0x32
 8003d00:	4618      	mov	r0, r3
 8003d02:	f005 f87d 	bl	8008e00 <sniprintf>
        break;
 8003d06:	e035      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorPayloadlarge: //413
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_PAYLOADLARGE);
 8003d08:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003d0c:	4a7d      	ldr	r2, [pc, #500]	@ (8003f04 <http_response_response_header+0x374>)
 8003d0e:	2132      	movs	r1, #50	@ 0x32
 8003d10:	4618      	mov	r0, r3
 8003d12:	f005 f875 	bl	8008e00 <sniprintf>
        break;
 8003d16:	e02d      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorUritoolong: //414
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_URITOOLONG);
 8003d18:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003f08 <http_response_response_header+0x378>)
 8003d1e:	2132      	movs	r1, #50	@ 0x32
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 f86d 	bl	8008e00 <sniprintf>
        break;
 8003d26:	e025      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorHeadertoolarge: ///431
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_HEADERTOOLARGE);
 8003d28:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003d2c:	4a77      	ldr	r2, [pc, #476]	@ (8003f0c <http_response_response_header+0x37c>)
 8003d2e:	2132      	movs	r1, #50	@ 0x32
 8003d30:	4618      	mov	r0, r3
 8003d32:	f005 f865 	bl	8008e00 <sniprintf>
        break;
 8003d36:	e01d      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_serrorInternalerror: //500
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SERROR_INTERNALERROR);
 8003d38:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003d3c:	4a74      	ldr	r2, [pc, #464]	@ (8003f10 <http_response_response_header+0x380>)
 8003d3e:	2132      	movs	r1, #50	@ 0x32
 8003d40:	4618      	mov	r0, r3
 8003d42:	f005 f85d 	bl	8008e00 <sniprintf>
        break;
 8003d46:	e015      	b.n	8003d74 <http_response_response_header+0x1e4>
    }
    default:
    {
        PRINT_ERROR("default case. passing default\r\n(%d)", (int)headerRequest.responseCode);
 8003d48:	4b65      	ldr	r3, [pc, #404]	@ (8003ee0 <http_response_response_header+0x350>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68d8      	ldr	r0, [r3, #12]
 8003d4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	4b63      	ldr	r3, [pc, #396]	@ (8003ee4 <http_response_response_header+0x354>)
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	f240 136f 	movw	r3, #367	@ 0x16f
 8003d5c:	4a62      	ldr	r2, [pc, #392]	@ (8003ee8 <http_response_response_header+0x358>)
 8003d5e:	496d      	ldr	r1, [pc, #436]	@ (8003f14 <http_response_response_header+0x384>)
 8003d60:	f004 ffae 	bl	8008cc0 <fiprintf>
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SERROR_NOTIMPLEMENTED);
 8003d64:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003d68:	4a6b      	ldr	r2, [pc, #428]	@ (8003f18 <http_response_response_header+0x388>)
 8003d6a:	2132      	movs	r1, #50	@ 0x32
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f005 f847 	bl	8008e00 <sniprintf>
        break;
 8003d72:	bf00      	nop
    }
    }

    //handle content type here
    if (0 != headerRequest.contentType)
 8003d74:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d025      	beq.n	8003dc8 <http_response_response_header+0x238>
    {
        char lcontentTypeLine[HTTP_RESPONSE_CONTTYPE_LENGTH];
        int retVal;
        retVal = http_response_contentTypeToString(headerRequest.contentType, lcontentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH);
 8003d7c:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8003d80:	1d39      	adds	r1, r7, #4
 8003d82:	2232      	movs	r2, #50	@ 0x32
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fe3f 	bl	8003a08 <http_response_contentTypeToString>
 8003d8a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        if (retVal < 0)
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0d      	bge.n	8003db2 <http_response_response_header+0x222>
        {
            PRINT_ERROR("error converting contentType to string(%d)\r\n", (int)headerRequest.contentType);
 8003d96:	4b52      	ldr	r3, [pc, #328]	@ (8003ee0 <http_response_response_header+0x350>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68d8      	ldr	r0, [r3, #12]
 8003d9c:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	4b50      	ldr	r3, [pc, #320]	@ (8003ee4 <http_response_response_header+0x354>)
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	f240 137d 	movw	r3, #381	@ 0x17d
 8003daa:	4a4f      	ldr	r2, [pc, #316]	@ (8003ee8 <http_response_response_header+0x358>)
 8003dac:	495b      	ldr	r1, [pc, #364]	@ (8003f1c <http_response_response_header+0x38c>)
 8003dae:	f004 ff87 	bl	8008cc0 <fiprintf>
        }
        snprintf(contentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH, HTTP_RESHEADER_CONTENT_TYPE ": %s", lcontentTypeLine);
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8003db8:	4a59      	ldr	r2, [pc, #356]	@ (8003f20 <http_response_response_header+0x390>)
 8003dba:	2132      	movs	r1, #50	@ 0x32
 8003dbc:	f005 f820 	bl	8008e00 <sniprintf>
        contentTypeLineDone = 1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8003dc6:	e031      	b.n	8003e2c <http_response_response_header+0x29c>
    }
    else if (NULL != headerRequest.filePath)
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d02d      	beq.n	8003e2c <http_response_response_header+0x29c>
    {
        http_response_fileType_t fileType;
        char lcontentTypeLine[HTTP_RESPONSE_CONTTYPE_LENGTH];

        fileType = http_response_getFileType(headerRequest.filePath);
 8003dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fbdb 	bl	8003590 <http_response_getFileType>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
        int retval;
        retval = http_response_get_contentType_string(fileType, lcontentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH);
 8003de0:	1d39      	adds	r1, r7, #4
 8003de2:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8003de6:	2232      	movs	r2, #50	@ 0x32
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fce3 	bl	80037b4 <http_response_get_contentType_string>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        if (retval < 0)
 8003df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	da0d      	bge.n	8003e18 <http_response_response_header+0x288>
        {
            PRINT_ERROR("error converting contentType to string(%d)\r\n", (int)fileType);
 8003dfc:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <http_response_response_header+0x350>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68d8      	ldr	r0, [r3, #12]
 8003e02:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <http_response_response_header+0x354>)
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8003e10:	4a35      	ldr	r2, [pc, #212]	@ (8003ee8 <http_response_response_header+0x358>)
 8003e12:	4942      	ldr	r1, [pc, #264]	@ (8003f1c <http_response_response_header+0x38c>)
 8003e14:	f004 ff54 	bl	8008cc0 <fiprintf>
        }
        snprintf(contentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH, HTTP_RESHEADER_CONTENT_TYPE ": %s", lcontentTypeLine);
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8003e1e:	4a40      	ldr	r2, [pc, #256]	@ (8003f20 <http_response_response_header+0x390>)
 8003e20:	2132      	movs	r1, #50	@ 0x32
 8003e22:	f004 ffed 	bl	8008e00 <sniprintf>
        contentTypeLineDone = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    }

    //handle content length and transfer encoding.

    if (transferEnc_chunked == headerRequest.transferEncoding)
 8003e2c:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10a      	bne.n	8003e4a <http_response_response_header+0x2ba>
    {
        snprintf(contentLengthLine, HTTP_RESPONSE_CONLEN_LENGTH, HTTP_RESHEADER_TRANSFER_ENCODING ": chunked");
 8003e34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e38:	4a3a      	ldr	r2, [pc, #232]	@ (8003f24 <http_response_response_header+0x394>)
 8003e3a:	2132      	movs	r1, #50	@ 0x32
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f004 ffdf 	bl	8008e00 <sniprintf>
        contentLengthLineDone = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8003e48:	e00e      	b.n	8003e68 <http_response_response_header+0x2d8>
    }
    else if (0 != headerRequest.bodyLength) //content length is applicable only when there is content
 8003e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <http_response_response_header+0x2d8>
    {
        snprintf(contentLengthLine, HTTP_RESPONSE_CONLEN_LENGTH, HTTP_RESHEADER_CONTENT_LENGTH ": %d", headerRequest.bodyLength);
 8003e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e56:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003e5a:	4a33      	ldr	r2, [pc, #204]	@ (8003f28 <http_response_response_header+0x398>)
 8003e5c:	2132      	movs	r1, #50	@ 0x32
 8003e5e:	f004 ffcf 	bl	8008e00 <sniprintf>
        contentLengthLineDone = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
    }

    //final Assembly
    if (headerRequest.bufferLength < (strlen(responseLine) + strlen(contentTypeLine) + strlen(contentLengthLine)))
 8003e68:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 8003e6c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc f9b7 	bl	80001e4 <strlen>
 8003e76:	4605      	mov	r5, r0
 8003e78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc f9b1 	bl	80001e4 <strlen>
 8003e82:	4603      	mov	r3, r0
 8003e84:	441d      	add	r5, r3
 8003e86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc f9aa 	bl	80001e4 <strlen>
 8003e90:	4603      	mov	r3, r0
 8003e92:	442b      	add	r3, r5
 8003e94:	429c      	cmp	r4, r3
 8003e96:	d24b      	bcs.n	8003f30 <http_response_response_header+0x3a0>
    {
        PRINT_ERROR("total header length > provided buffer(%d)\r\n", (int)(strlen(responseLine) + strlen(contentTypeLine) + strlen(contentLengthLine)));
 8003e98:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <http_response_response_header+0x350>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68dd      	ldr	r5, [r3, #12]
 8003e9e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc f99e 	bl	80001e4 <strlen>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc f998 	bl	80001e4 <strlen>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	441c      	add	r4, r3
 8003eb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc f991 	bl	80001e4 <strlen>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4423      	add	r3, r4
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <http_response_response_header+0x354>)
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	f44f 73d1 	mov.w	r3, #418	@ 0x1a2
 8003ed0:	4a05      	ldr	r2, [pc, #20]	@ (8003ee8 <http_response_response_header+0x358>)
 8003ed2:	4916      	ldr	r1, [pc, #88]	@ (8003f2c <http_response_response_header+0x39c>)
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f004 fef3 	bl	8008cc0 <fiprintf>
        return HTTP_FAILURE;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e081      	b.n	8003fe4 <http_response_response_header+0x454>
 8003ee0:	200009d4 	.word	0x200009d4
 8003ee4:	0800b9cc 	.word	0x0800b9cc
 8003ee8:	0800ad48 	.word	0x0800ad48
 8003eec:	0800af94 	.word	0x0800af94
 8003ef0:	0800afc8 	.word	0x0800afc8
 8003ef4:	0800afd8 	.word	0x0800afd8
 8003ef8:	0800aff0 	.word	0x0800aff0
 8003efc:	0800b00c 	.word	0x0800b00c
 8003f00:	0800b024 	.word	0x0800b024
 8003f04:	0800b03c 	.word	0x0800b03c
 8003f08:	0800b05c 	.word	0x0800b05c
 8003f0c:	0800b078 	.word	0x0800b078
 8003f10:	0800b0a8 	.word	0x0800b0a8
 8003f14:	0800b0cc 	.word	0x0800b0cc
 8003f18:	0800b104 	.word	0x0800b104
 8003f1c:	0800b124 	.word	0x0800b124
 8003f20:	0800b164 	.word	0x0800b164
 8003f24:	0800b178 	.word	0x0800b178
 8003f28:	0800b194 	.word	0x0800b194
 8003f2c:	0800b1a8 	.word	0x0800b1a8
    }

    int printedChar;
    printedChar = snprintf(headerRequest.headerBuffer, headerRequest.bufferLength, "%s\r\n", responseLine);
 8003f30:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8003f34:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8003f38:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff4 <http_response_response_header+0x464>)
 8003f3e:	f004 ff5f 	bl	8008e00 <sniprintf>
 8003f42:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
    if (0 != contentTypeLineDone)
 8003f46:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d019      	beq.n	8003f82 <http_response_response_header+0x3f2>
    {
        headerRequest.bufferLength -= printedChar + 1;
 8003f4e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        printedChar += snprintf((headerRequest.headerBuffer + printedChar), headerRequest.bufferLength, "%s\r\n", contentTypeLine);
 8003f5e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f66:	18d0      	adds	r0, r2, r3
 8003f68:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8003f6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003f70:	4a20      	ldr	r2, [pc, #128]	@ (8003ff4 <http_response_response_header+0x464>)
 8003f72:	f004 ff45 	bl	8008e00 <sniprintf>
 8003f76:	4602      	mov	r2, r0
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    }
    if (0 != contentLengthLineDone)
 8003f82:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d019      	beq.n	8003fbe <http_response_response_header+0x42e>
    {
        headerRequest.bufferLength -= printedChar + 1;
 8003f8a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        printedChar += snprintf((headerRequest.headerBuffer + printedChar), headerRequest.bufferLength, "%s\r\n", contentLengthLine);
 8003f9a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa2:	18d0      	adds	r0, r2, r3
 8003fa4:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8003fa8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003fac:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <http_response_response_header+0x464>)
 8003fae:	f004 ff27 	bl	8008e00 <sniprintf>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb8:	4413      	add	r3, r2
 8003fba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    }

    printedChar += snprintf((headerRequest.headerBuffer + printedChar), headerRequest.bufferLength, "\r\n");
 8003fbe:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff8 <http_response_response_header+0x468>)
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f004 ff16 	bl	8008e00 <sniprintf>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fda:	4413      	add	r3, r2
 8003fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return printedChar; //to return actual buffer length
 8003fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	37e8      	adds	r7, #232	@ 0xe8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003fee:	b004      	add	sp, #16
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	0800b1e8 	.word	0x0800b1e8
 8003ff8:	0800b1f0 	.word	0x0800b1f0

08003ffc <http_response_initReponseStruct>:

void http_response_initReponseStruct(HTTP_response_headerRequest_t *responseHeader)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

    if (NULL != responseHeader)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <http_response_initReponseStruct+0x18>
    {
        memset(responseHeader, 0, sizeof(HTTP_response_headerRequest_t));
 800400a:	221c      	movs	r2, #28
 800400c:	2100      	movs	r1, #0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f005 f84e 	bl	80090b0 <memset>
    }
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <http_server_send404>:
        - netops and fops should have been registered
        - file system should be mounted and files should be registered
*/

static int http_server_send404(HTTP_response_headerRequest_t *httpResponse, int socket, http_net_netops_t *netops)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b08b      	sub	sp, #44	@ 0x2c
 8004020:	af04      	add	r7, sp, #16
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
    httpResponse->responseCode = HTTP_RESCODE_cerrorNotfound;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 800402e:	801a      	strh	r2, [r3, #0]
    int retBufLen = http_response_response_header(*httpResponse);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	466c      	mov	r4, sp
 8004034:	f103 0210 	add.w	r2, r3, #16
 8004038:	ca07      	ldmia	r2, {r0, r1, r2}
 800403a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800403e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004040:	f7ff fda6 	bl	8003b90 <http_response_response_header>
 8004044:	6178      	str	r0, [r7, #20]

    //check retval write and disconnect
    if (retBufLen <= 0)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	dc0e      	bgt.n	800406a <http_server_send404+0x4e>
    {
        PRINT_ERROR("error forming 404 header (%d)\r\n", retBufLen);
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <http_server_send404+0x70>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68d8      	ldr	r0, [r3, #12]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <http_server_send404+0x74>)
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	233f      	movs	r3, #63	@ 0x3f
 800405c:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <http_server_send404+0x78>)
 800405e:	490e      	ldr	r1, [pc, #56]	@ (8004098 <http_server_send404+0x7c>)
 8004060:	f004 fe2e 	bl	8008cc0 <fiprintf>
        return -1;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	e00c      	b.n	8004084 <http_server_send404+0x68>
    }
    netops->http_net_write(socket, (unsigned char *)httpResponse->headerBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685c      	ldr	r4, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6899      	ldr	r1, [r3, #8]
 8004072:	2364      	movs	r3, #100	@ 0x64
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	47a0      	blx	r4
    netops->http_net_disconnect(socket);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	68b8      	ldr	r0, [r7, #8]
 8004080:	4798      	blx	r3
    return 0;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}
 800408c:	200009d4 	.word	0x200009d4
 8004090:	0800b9ec 	.word	0x0800b9ec
 8004094:	0800b1f4 	.word	0x0800b1f4
 8004098:	0800b218 	.word	0x0800b218

0800409c <http_server_send501>:

static int http_server_send501(HTTP_response_headerRequest_t *httpResponse, int socket, http_net_netops_t *netops)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b08b      	sub	sp, #44	@ 0x2c
 80040a0:	af04      	add	r7, sp, #16
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
	httpResponse->responseCode = HTTP_RESCODE_serrorNotimplemented;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80040ae:	801a      	strh	r2, [r3, #0]
	int retBufLen = http_response_response_header(*httpResponse);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	466c      	mov	r4, sp
 80040b4:	f103 0210 	add.w	r2, r3, #16
 80040b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80040ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040c0:	f7ff fd66 	bl	8003b90 <http_response_response_header>
 80040c4:	6178      	str	r0, [r7, #20]

	//check retval write and disconnect
	if (retBufLen <= 0)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	dc0e      	bgt.n	80040ea <http_server_send501+0x4e>
	{
		PRINT_ERROR("error forming 501 header (%d)\r\n", retBufLen);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <http_server_send501+0x70>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68d8      	ldr	r0, [r3, #12]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <http_server_send501+0x74>)
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	234f      	movs	r3, #79	@ 0x4f
 80040dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004114 <http_server_send501+0x78>)
 80040de:	490e      	ldr	r1, [pc, #56]	@ (8004118 <http_server_send501+0x7c>)
 80040e0:	f004 fdee 	bl	8008cc0 <fiprintf>
		return -1;
 80040e4:	f04f 33ff 	mov.w	r3, #4294967295
 80040e8:	e00c      	b.n	8004104 <http_server_send501+0x68>
	}
	netops->http_net_write(socket, (unsigned char *)httpResponse->headerBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685c      	ldr	r4, [r3, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	2364      	movs	r3, #100	@ 0x64
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68b8      	ldr	r0, [r7, #8]
 80040f8:	47a0      	blx	r4
	netops->http_net_disconnect(socket);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	68b8      	ldr	r0, [r7, #8]
 8004100:	4798      	blx	r3
	return 0;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}
 800410c:	200009d4 	.word	0x200009d4
 8004110:	0800ba00 	.word	0x0800ba00
 8004114:	0800b1f4 	.word	0x0800b1f4
 8004118:	0800b24c 	.word	0x0800b24c

0800411c <http_server_send_serverError500>:

static int http_server_send_serverError500(HTTP_response_headerRequest_t *httpResponse, int socket, http_net_netops_t *netops)
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b08b      	sub	sp, #44	@ 0x2c
 8004120:	af04      	add	r7, sp, #16
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
    httpResponse->responseCode = HTTP_RESCODE_serrorInternalerror;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800412e:	801a      	strh	r2, [r3, #0]
    int retBufLen = http_response_response_header(*httpResponse);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	466c      	mov	r4, sp
 8004134:	f103 0210 	add.w	r2, r3, #16
 8004138:	ca07      	ldmia	r2, {r0, r1, r2}
 800413a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800413e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004140:	f7ff fd26 	bl	8003b90 <http_response_response_header>
 8004144:	6178      	str	r0, [r7, #20]

    //check retval write and disconnect
    if (retBufLen <= 0)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	dc0e      	bgt.n	800416a <http_server_send_serverError500+0x4e>
    {
        PRINT_ERROR("error forming 500 header (%d)\r\n", retBufLen);
 800414c:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <http_server_send_serverError500+0x70>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68d8      	ldr	r0, [r3, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <http_server_send_serverError500+0x74>)
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	235f      	movs	r3, #95	@ 0x5f
 800415c:	4a0d      	ldr	r2, [pc, #52]	@ (8004194 <http_server_send_serverError500+0x78>)
 800415e:	490e      	ldr	r1, [pc, #56]	@ (8004198 <http_server_send_serverError500+0x7c>)
 8004160:	f004 fdae 	bl	8008cc0 <fiprintf>
        return -1;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295
 8004168:	e00c      	b.n	8004184 <http_server_send_serverError500+0x68>
    }
    netops->http_net_write(socket, (unsigned char *)httpResponse->headerBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685c      	ldr	r4, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	2364      	movs	r3, #100	@ 0x64
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	68b8      	ldr	r0, [r7, #8]
 8004178:	47a0      	blx	r4
    netops->http_net_disconnect(socket);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	68b8      	ldr	r0, [r7, #8]
 8004180:	4798      	blx	r3
    return 0;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	200009d4 	.word	0x200009d4
 8004190:	0800ba14 	.word	0x0800ba14
 8004194:	0800b1f4 	.word	0x0800b1f4
 8004198:	0800b280 	.word	0x0800b280

0800419c <http_server_findNreplace>:

//helper function to find and replace a string . This function will overwrite contents of the original input buffer.
//So, make sure there is enough space left to process the replacement.
//returns number of replacements done.
static int http_server_findNreplace(char *buffer, int bufferLen, char *find, char *replace)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
    int count = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]

    //null terminate the buffer before proceeding. This should have been done at the source as well.
    buffer[bufferLen] = 0;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
    unsigned int replaceLen = strlen(replace);
 80041b8:	6838      	ldr	r0, [r7, #0]
 80041ba:	f7fc f813 	bl	80001e4 <strlen>
 80041be:	61b8      	str	r0, [r7, #24]
    unsigned int findLen = strlen(find);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fc f80f 	bl	80001e4 <strlen>
 80041c6:	6178      	str	r0, [r7, #20]

    char *position = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]
    do
    {
        //find occurrance of the string
        position = strstr(buffer, find);
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f005 f808 	bl	80091e4 <strstr>
 80041d4:	6138      	str	r0, [r7, #16]
        if (NULL == position)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <http_server_findNreplace+0x44>
            return count;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	e016      	b.n	800420e <http_server_findNreplace+0x72>
        sprintf(position, "%s%s", replace, (position + findLen));
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	490b      	ldr	r1, [pc, #44]	@ (8004218 <http_server_findNreplace+0x7c>)
 80041ea:	6938      	ldr	r0, [r7, #16]
 80041ec:	f004 fe3c 	bl	8008e68 <siprintf>
        position += replaceLen; //to avoid recurssive replace
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4413      	add	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        count++;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3301      	adds	r3, #1
 80041fc:	61fb      	str	r3, [r7, #28]
    } while (strlen(position) > findLen); //do while there is still more content left in the buffer
 80041fe:	6938      	ldr	r0, [r7, #16]
 8004200:	f7fb fff0 	bl	80001e4 <strlen>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4293      	cmp	r3, r2
 800420a:	d3df      	bcc.n	80041cc <http_server_findNreplace+0x30>

    return count;
 800420c:	69fb      	ldr	r3, [r7, #28]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	0800b2b4 	.word	0x0800b2b4

0800421c <http_server_writeChunkedBody>:

static int http_server_writeChunkedBody(int socket, char *buffer, int length, http_net_netops_t *netops)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b08b      	sub	sp, #44	@ 0x2c
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
    char chunkedHeader[20];
    sprintf(chunkedHeader, "%04X\r\n", length);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4912      	ldr	r1, [pc, #72]	@ (800427c <http_server_writeChunkedBody+0x60>)
 8004232:	4618      	mov	r0, r3
 8004234:	f004 fe18 	bl	8008e68 <siprintf>
    //write size
    netops->http_net_write(socket, (unsigned char *)chunkedHeader, strlen(chunkedHeader), HTTP_SERVER_TIMOUT_MS);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685c      	ldr	r4, [r3, #4]
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4618      	mov	r0, r3
 8004242:	f7fb ffcf 	bl	80001e4 <strlen>
 8004246:	4603      	mov	r3, r0
 8004248:	461a      	mov	r2, r3
 800424a:	f107 0114 	add.w	r1, r7, #20
 800424e:	2364      	movs	r3, #100	@ 0x64
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	47a0      	blx	r4
    //write contents
    netops->http_net_write(socket, (unsigned char *)buffer, length, HTTP_SERVER_TIMOUT_MS);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685c      	ldr	r4, [r3, #4]
 8004258:	2364      	movs	r3, #100	@ 0x64
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	47a0      	blx	r4
    netops->http_net_write(socket, (unsigned char *)"\r\n", 2, HTTP_SERVER_TIMOUT_MS);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685c      	ldr	r4, [r3, #4]
 8004266:	2364      	movs	r3, #100	@ 0x64
 8004268:	2202      	movs	r2, #2
 800426a:	4905      	ldr	r1, [pc, #20]	@ (8004280 <http_server_writeChunkedBody+0x64>)
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	47a0      	blx	r4
    return 0;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	372c      	adds	r7, #44	@ 0x2c
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	0800b2bc 	.word	0x0800b2bc
 8004280:	0800b2c4 	.word	0x0800b2c4

08004284 <http_server_findNseekBack>:

static int http_server_findNseekBack(char *buffer, void *fp)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
    int bufferLen = strlen(buffer) - 1; //0 indexed buffer length
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fb ffa8 	bl	80001e4 <strlen>
 8004294:	4603      	mov	r3, r0
 8004296:	3b01      	subs	r3, #1
 8004298:	613b      	str	r3, [r7, #16]
    if (buffer[bufferLen] == '<')
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b3c      	cmp	r3, #60	@ 0x3c
 80042a4:	d10c      	bne.n	80042c0 <http_server_findNseekBack+0x3c>
    {
        http_file_fops.fseek(fp, -1, SEEK_END);
 80042a6:	4b42      	ldr	r3, [pc, #264]	@ (80043b0 <http_server_findNseekBack+0x12c>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f04f 31ff 	mov.w	r1, #4294967295
 80042b0:	6838      	ldr	r0, [r7, #0]
 80042b2:	4798      	blx	r3
        buffer[bufferLen] = '\0';
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e072      	b.n	80043a6 <http_server_findNseekBack+0x122>
    }
    else if (strcmp(&(buffer[bufferLen - 1]), "<-"))
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	493a      	ldr	r1, [pc, #232]	@ (80043b4 <http_server_findNseekBack+0x130>)
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fb ff80 	bl	80001d0 <strcmp>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <http_server_findNseekBack+0x6e>
    {
        http_file_fops.fseek(fp, -2, SEEK_END);
 80042d6:	4b36      	ldr	r3, [pc, #216]	@ (80043b0 <http_server_findNseekBack+0x12c>)
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2202      	movs	r2, #2
 80042dc:	f06f 0101 	mvn.w	r1, #1
 80042e0:	6838      	ldr	r0, [r7, #0]
 80042e2:	4798      	blx	r3
        buffer[bufferLen - 1] = '\0';
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e059      	b.n	80043a6 <http_server_findNseekBack+0x122>
    }
    else if (strcmp(&(buffer[bufferLen - 2]), "<--"))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3b02      	subs	r3, #2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	492f      	ldr	r1, [pc, #188]	@ (80043b8 <http_server_findNseekBack+0x134>)
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fb ff67 	bl	80001d0 <strcmp>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <http_server_findNseekBack+0xa0>
    {
        http_file_fops.fseek(fp, -3, SEEK_END);
 8004308:	4b29      	ldr	r3, [pc, #164]	@ (80043b0 <http_server_findNseekBack+0x12c>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2202      	movs	r2, #2
 800430e:	f06f 0102 	mvn.w	r1, #2
 8004312:	6838      	ldr	r0, [r7, #0]
 8004314:	4798      	blx	r3
        buffer[bufferLen - 2] = '\0';
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3b02      	subs	r3, #2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e040      	b.n	80043a6 <http_server_findNseekBack+0x122>
    }
    else if (strcmp(&(buffer[bufferLen - 3]), "<--#"))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	3b03      	subs	r3, #3
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	4923      	ldr	r1, [pc, #140]	@ (80043bc <http_server_findNseekBack+0x138>)
 800432e:	4618      	mov	r0, r3
 8004330:	f7fb ff4e 	bl	80001d0 <strcmp>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <http_server_findNseekBack+0xd2>
    {
        http_file_fops.fseek(fp, -4, SEEK_END);
 800433a:	4b1d      	ldr	r3, [pc, #116]	@ (80043b0 <http_server_findNseekBack+0x12c>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2202      	movs	r2, #2
 8004340:	f06f 0103 	mvn.w	r1, #3
 8004344:	6838      	ldr	r0, [r7, #0]
 8004346:	4798      	blx	r3
        buffer[bufferLen - 3] = '\0';
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	3b03      	subs	r3, #3
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e027      	b.n	80043a6 <http_server_findNseekBack+0x122>
    }
    else
    {
        char *position = 0, *pPosition = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
        do
        {
            pPosition = position;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	60fb      	str	r3, [r7, #12]
            position = strstr(buffer, "<!--#");
 8004362:	4917      	ldr	r1, [pc, #92]	@ (80043c0 <http_server_findNseekBack+0x13c>)
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f004 ff3d 	bl	80091e4 <strstr>
 800436a:	6178      	str	r0, [r7, #20]
        } while (NULL != position);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f5      	bne.n	800435e <http_server_findNseekBack+0xda>

        if (NULL != pPosition)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d016      	beq.n	80043a6 <http_server_findNseekBack+0x122>
        {
            unsigned int pPositionIndex=(buffer-pPosition);
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	60bb      	str	r3, [r7, #8]
            if(NULL!=strstr(pPosition+5,"#-->")){
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3305      	adds	r3, #5
 8004384:	490f      	ldr	r1, [pc, #60]	@ (80043c4 <http_server_findNseekBack+0x140>)
 8004386:	4618      	mov	r0, r3
 8004388:	f004 ff2c 	bl	80091e4 <strstr>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <http_server_findNseekBack+0x112>
                return 0;
 8004392:	2300      	movs	r3, #0
 8004394:	e008      	b.n	80043a8 <http_server_findNseekBack+0x124>
            }
            else{
                http_file_fops.fseek(fp, (0 - pPositionIndex), SEEK_END);
 8004396:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <http_server_findNseekBack+0x12c>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4252      	negs	r2, r2
 800439e:	4611      	mov	r1, r2
 80043a0:	2202      	movs	r2, #2
 80043a2:	6838      	ldr	r0, [r7, #0]
 80043a4:	4798      	blx	r3
            }
        }
    }
    return 0;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000b08 	.word	0x20000b08
 80043b4:	0800b2c8 	.word	0x0800b2c8
 80043b8:	0800b2cc 	.word	0x0800b2cc
 80043bc:	0800b2d0 	.word	0x0800b2d0
 80043c0:	0800b2d8 	.word	0x0800b2d8
 80043c4:	0800b2e0 	.word	0x0800b2e0

080043c8 <http_server>:

int http_server(int socket, http_net_netops_t *netops)
{
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	f6ad 5d5c 	subw	sp, sp, #3420	@ 0xd5c
 80043ce:	af04      	add	r7, sp, #16
 80043d0:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80043d4:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 80043d8:	6018      	str	r0, [r3, #0]
 80043da:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80043de:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 80043e2:	6019      	str	r1, [r3, #0]
    unsigned char httpReadBuffer[HTTP_SERVER_READ_BUFFER_SIZE];
    char httpHeaderBuffer[HTTP_SERVER_HEADER_BUFFER_SIZE];
    if ((NULL == netops->http_net_read) || (NULL == netops->http_net_write))
 80043e4:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80043e8:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <http_server+0x3c>
 80043f4:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80043f8:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10f      	bne.n	8004424 <http_server+0x5c>
    {
        PRINT_ERROR("netops read not initialized(%s)\r\n", "nullNetops");
 8004404:	4bc0      	ldr	r3, [pc, #768]	@ (8004708 <http_server+0x340>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68d8      	ldr	r0, [r3, #12]
 800440a:	4bc0      	ldr	r3, [pc, #768]	@ (800470c <http_server+0x344>)
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	4bc0      	ldr	r3, [pc, #768]	@ (8004710 <http_server+0x348>)
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	23c2      	movs	r3, #194	@ 0xc2
 8004414:	4abf      	ldr	r2, [pc, #764]	@ (8004714 <http_server+0x34c>)
 8004416:	49c0      	ldr	r1, [pc, #768]	@ (8004718 <http_server+0x350>)
 8004418:	f004 fc52 	bl	8008cc0 <fiprintf>
        return -1;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	f000 bdf0 	b.w	8005004 <http_server+0xc3c>
    }
	//read one byte less to null terminate and make a string out of it.
    int byteCount = netops->http_net_read(socket, (unsigned char *)&httpReadBuffer, HTTP_SERVER_READ_BUFFER_SIZE-1, HTTP_SERVER_TIMOUT_MS);
 8004424:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004428:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681c      	ldr	r4, [r3, #0]
 8004430:	f607 1104 	addw	r1, r7, #2308	@ 0x904
 8004434:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004438:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 800443c:	2364      	movs	r3, #100	@ 0x64
 800443e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8004442:	6800      	ldr	r0, [r0, #0]
 8004444:	47a0      	blx	r4
 8004446:	f8c7 0d38 	str.w	r0, [r7, #3384]	@ 0xd38
    if (byteCount <= 0)
 800444a:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800444e:	2b00      	cmp	r3, #0
 8004450:	dc10      	bgt.n	8004474 <http_server+0xac>
    {
        PRINT_ERROR("netops read timedout(%d)\r\n", byteCount);
 8004452:	4bad      	ldr	r3, [pc, #692]	@ (8004708 <http_server+0x340>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68d8      	ldr	r0, [r3, #12]
 8004458:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	4bac      	ldr	r3, [pc, #688]	@ (8004710 <http_server+0x348>)
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	23c9      	movs	r3, #201	@ 0xc9
 8004464:	4aab      	ldr	r2, [pc, #684]	@ (8004714 <http_server+0x34c>)
 8004466:	49ad      	ldr	r1, [pc, #692]	@ (800471c <http_server+0x354>)
 8004468:	f004 fc2a 	bl	8008cc0 <fiprintf>
        return -1; //most probably a timeout error to read from client
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	f000 bdc8 	b.w	8005004 <http_server+0xc3c>
    }
	httpReadBuffer[byteCount]=0;
 8004474:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004478:	f2a3 4244 	subw	r2, r3, #1092	@ 0x444
 800447c:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 8004480:	4413      	add	r3, r2
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
    //now the request headers are in buffer. time to parse the request
    http_request_t http_request;
    parseRquest_identifyRequest(httpReadBuffer, &http_request);
 8004486:	f207 729c 	addw	r2, r7, #1948	@ 0x79c
 800448a:	f607 1304 	addw	r3, r7, #2308	@ 0x904
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe ff6d 	bl	8003370 <parseRquest_identifyRequest>
    void *fp;
    int retBufLen = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
    HTTP_response_headerRequest_t httpResponse;
    http_response_initReponseStruct(&httpResponse);
 800449c:	f507 63f0 	add.w	r3, r7, #1920	@ 0x780
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fdab 	bl	8003ffc <http_response_initReponseStruct>
    httpResponse.headerBuffer = (char *)&httpHeaderBuffer;
 80044a6:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80044aa:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80044ae:	f607 0204 	addw	r2, r7, #2052	@ 0x804
 80044b2:	609a      	str	r2, [r3, #8]
    httpResponse.bufferLength = HTTP_SERVER_HEADER_BUFFER_SIZE;
 80044b4:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80044b8:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80044bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044c0:	60da      	str	r2, [r3, #12]

    switch (http_request.method)
 80044c2:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80044c6:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 80044ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	f040 8571 	bne.w	8004fb6 <http_server+0xbee>
    {
    case GET:
        switch (http_request.fileClass)
 80044d4:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80044d8:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	f000 8435 	beq.w	8004d4e <http_server+0x986>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f300 853f 	bgt.w	8004f68 <http_server+0xba0>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <http_server+0x130>
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f000 8180 	beq.w	80047f4 <http_server+0x42c>
 80044f4:	f000 bd38 	b.w	8004f68 <http_server+0xba0>
        {
        case httpFileClass_none: //regular File processing flow
            if (NULL != http_file_fops.fopen)
 80044f8:	4b89      	ldr	r3, [pc, #548]	@ (8004720 <http_server+0x358>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <http_server+0x14c>
            { //else FS is not mounted
                fp = http_file_fops.fopen(http_request.httpFilePath);
 8004500:	4b87      	ldr	r3, [pc, #540]	@ (8004720 <http_server+0x358>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f207 729c 	addw	r2, r7, #1948	@ 0x79c
 8004508:	3202      	adds	r2, #2
 800450a:	4610      	mov	r0, r2
 800450c:	4798      	blx	r3
 800450e:	f8c7 0d44 	str.w	r0, [r7, #3396]	@ 0xd44
 8004512:	e00e      	b.n	8004532 <http_server+0x16a>
            }
            else
            {
                PRINT_ERROR("fops not mounted(%d)\r\n", httpFileClass_none);
 8004514:	4b7c      	ldr	r3, [pc, #496]	@ (8004708 <http_server+0x340>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68d8      	ldr	r0, [r3, #12]
 800451a:	2300      	movs	r3, #0
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	4b7c      	ldr	r3, [pc, #496]	@ (8004710 <http_server+0x348>)
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	23e3      	movs	r3, #227	@ 0xe3
 8004524:	4a7b      	ldr	r2, [pc, #492]	@ (8004714 <http_server+0x34c>)
 8004526:	497f      	ldr	r1, [pc, #508]	@ (8004724 <http_server+0x35c>)
 8004528:	f004 fbca 	bl	8008cc0 <fiprintf>
                fp = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 3d44 	str.w	r3, [r7, #3396]	@ 0xd44
            }
            if (NULL == fp)
 8004532:	f8d7 3d44 	ldr.w	r3, [r7, #3396]	@ 0xd44
 8004536:	2b00      	cmp	r3, #0
 8004538:	d127      	bne.n	800458a <http_server+0x1c2>
            { //file not found due to missing file or missing FS
                int retval = http_server_send404(&httpResponse, socket, netops);
 800453a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800453e:	f6a3 5248 	subw	r2, r3, #3400	@ 0xd48
 8004542:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004546:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 800454a:	f507 60f0 	add.w	r0, r7, #1920	@ 0x780
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	f7ff fd63 	bl	800401c <http_server_send404>
 8004556:	f8c7 0d0c 	str.w	r0, [r7, #3340]	@ 0xd0c
                if (retval < 0)
 800455a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800455e:	2b00      	cmp	r3, #0
 8004560:	da10      	bge.n	8004584 <http_server+0x1bc>
                {
                    PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 8004562:	4b69      	ldr	r3, [pc, #420]	@ (8004708 <http_server+0x340>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68d8      	ldr	r0, [r3, #12]
 8004568:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	4b68      	ldr	r3, [pc, #416]	@ (8004710 <http_server+0x348>)
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	23eb      	movs	r3, #235	@ 0xeb
 8004574:	4a67      	ldr	r2, [pc, #412]	@ (8004714 <http_server+0x34c>)
 8004576:	496c      	ldr	r1, [pc, #432]	@ (8004728 <http_server+0x360>)
 8004578:	f004 fba2 	bl	8008cc0 <fiprintf>
                    return -1;
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	f000 bd40 	b.w	8005004 <http_server+0xc3c>
                }
                return 0;
 8004584:	2300      	movs	r3, #0
 8004586:	f000 bd3d 	b.w	8005004 <http_server+0xc3c>
            }
            else
            { //file found . do read, determine if chunking is required, write accordingly and disconnect
                char freadBuffer[HTTP_SERVER_FREAD_BUFFER_SIZE];
                int readLen = http_file_fops.fread(&freadBuffer, sizeof(freadBuffer), 1, fp);
 800458a:	4b65      	ldr	r3, [pc, #404]	@ (8004720 <http_server+0x358>)
 800458c:	689c      	ldr	r4, [r3, #8]
 800458e:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 8004592:	f8d7 3d44 	ldr.w	r3, [r7, #3396]	@ 0xd44
 8004596:	2201      	movs	r2, #1
 8004598:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800459c:	47a0      	blx	r4
 800459e:	4603      	mov	r3, r0
 80045a0:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
                if (http_file_fops.eof(fp))
 80045a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004720 <http_server+0x358>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f8d7 0d44 	ldr.w	r0, [r7, #3396]	@ 0xd44
 80045ac:	4798      	blx	r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d069      	beq.n	8004688 <http_server+0x2c0>
                {                                                            //complete contents has been read to buffer. no chunking required
                    httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 80045b4:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80045b8:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80045bc:	22c8      	movs	r2, #200	@ 0xc8
 80045be:	801a      	strh	r2, [r3, #0]
                    httpResponse.bodyLength = readLen;
 80045c0:	f8d7 2d10 	ldr.w	r2, [r7, #3344]	@ 0xd10
 80045c4:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80045c8:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80045cc:	605a      	str	r2, [r3, #4]
                    httpResponse.filePath = http_request.httpFilePath;
 80045ce:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80045d2:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80045d6:	f207 729c 	addw	r2, r7, #1948	@ 0x79c
 80045da:	3202      	adds	r2, #2
 80045dc:	615a      	str	r2, [r3, #20]
                    retBufLen = http_response_response_header(httpResponse);
 80045de:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80045e2:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80045e6:	466c      	mov	r4, sp
 80045e8:	f103 0210 	add.w	r2, r3, #16
 80045ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80045ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f4:	f7ff facc 	bl	8003b90 <http_response_response_header>
 80045f8:	f8c7 0d34 	str.w	r0, [r7, #3380]	@ 0xd34
                    //check retval write and disconnect
                    if (retBufLen <= 0)
 80045fc:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004600:	2b00      	cmp	r3, #0
 8004602:	dc10      	bgt.n	8004626 <http_server+0x25e>
                    {
                        PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 8004604:	4b40      	ldr	r3, [pc, #256]	@ (8004708 <http_server+0x340>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68d8      	ldr	r0, [r3, #12]
 800460a:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	4b3f      	ldr	r3, [pc, #252]	@ (8004710 <http_server+0x348>)
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	23fd      	movs	r3, #253	@ 0xfd
 8004616:	4a3f      	ldr	r2, [pc, #252]	@ (8004714 <http_server+0x34c>)
 8004618:	4944      	ldr	r1, [pc, #272]	@ (800472c <http_server+0x364>)
 800461a:	f004 fb51 	bl	8008cc0 <fiprintf>
                        return -1;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	f000 bcef 	b.w	8005004 <http_server+0xc3c>
                    }
                    netops->http_net_write(socket, (unsigned char *)httpHeaderBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS); //write header
 8004626:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800462a:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685c      	ldr	r4, [r3, #4]
 8004632:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 8004636:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800463a:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 800463e:	2364      	movs	r3, #100	@ 0x64
 8004640:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 8004644:	6800      	ldr	r0, [r0, #0]
 8004646:	47a0      	blx	r4
                    netops->http_net_write(socket, (unsigned char *)freadBuffer, readLen, HTTP_SERVER_TIMOUT_MS);        //
 8004648:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800464c:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685c      	ldr	r4, [r3, #4]
 8004654:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 8004658:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800465c:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004660:	2364      	movs	r3, #100	@ 0x64
 8004662:	f8d7 2d10 	ldr.w	r2, [r7, #3344]	@ 0xd10
 8004666:	6800      	ldr	r0, [r0, #0]
 8004668:	47a0      	blx	r4
                    netops->http_net_disconnect(socket);
 800466a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800466e:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 800467a:	f6a2 5244 	subw	r2, r2, #3396	@ 0xd44
 800467e:	6810      	ldr	r0, [r2, #0]
 8004680:	4798      	blx	r3
                    return 0;
 8004682:	2300      	movs	r3, #0
 8004684:	f000 bcbe 	b.w	8005004 <http_server+0xc3c>
                }
                else
                {                                                            //time to do chunked encoding
                    httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 8004688:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800468c:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004690:	22c8      	movs	r2, #200	@ 0xc8
 8004692:	801a      	strh	r2, [r3, #0]
                    httpResponse.bodyLength = 0;
 8004694:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004698:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 800469c:	2200      	movs	r2, #0
 800469e:	605a      	str	r2, [r3, #4]
                    httpResponse.transferEncoding = transferEnc_chunked; //set chunked encoding since we dont know actual length yet
 80046a0:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80046a4:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80046a8:	2201      	movs	r2, #1
 80046aa:	741a      	strb	r2, [r3, #16]
                    httpResponse.filePath = http_request.httpFilePath;   //path to be used for contentType
 80046ac:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80046b0:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80046b4:	f207 729c 	addw	r2, r7, #1948	@ 0x79c
 80046b8:	3202      	adds	r2, #2
 80046ba:	615a      	str	r2, [r3, #20]
                    retBufLen = http_response_response_header(httpResponse);
 80046bc:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80046c0:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 80046c4:	466c      	mov	r4, sp
 80046c6:	f103 0210 	add.w	r2, r3, #16
 80046ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80046cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046d2:	f7ff fa5d 	bl	8003b90 <http_response_response_header>
 80046d6:	f8c7 0d34 	str.w	r0, [r7, #3380]	@ 0xd34
                    //check retval write and disconnect
                    if (retBufLen <= 0)
 80046da:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 80046de:	2b00      	cmp	r3, #0
 80046e0:	dc26      	bgt.n	8004730 <http_server+0x368>
                    {
                        PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 80046e2:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <http_server+0x340>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68d8      	ldr	r0, [r3, #12]
 80046e8:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <http_server+0x348>)
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	f240 130f 	movw	r3, #271	@ 0x10f
 80046f6:	4a07      	ldr	r2, [pc, #28]	@ (8004714 <http_server+0x34c>)
 80046f8:	490c      	ldr	r1, [pc, #48]	@ (800472c <http_server+0x364>)
 80046fa:	f004 fae1 	bl	8008cc0 <fiprintf>
                        return -1;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	f000 bc7f 	b.w	8005004 <http_server+0xc3c>
 8004706:	bf00      	nop
 8004708:	200009d4 	.word	0x200009d4
 800470c:	0800b320 	.word	0x0800b320
 8004710:	0800ba34 	.word	0x0800ba34
 8004714:	0800b1f4 	.word	0x0800b1f4
 8004718:	0800b2e8 	.word	0x0800b2e8
 800471c:	0800b32c 	.word	0x0800b32c
 8004720:	20000b08 	.word	0x20000b08
 8004724:	0800b35c 	.word	0x0800b35c
 8004728:	0800b218 	.word	0x0800b218
 800472c:	0800b388 	.word	0x0800b388
                    }
                    //send out the response header
                    netops->http_net_write(socket, (unsigned char *)httpHeaderBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS); //write header
 8004730:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004734:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685c      	ldr	r4, [r3, #4]
 800473c:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 8004740:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004744:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004748:	2364      	movs	r3, #100	@ 0x64
 800474a:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800474e:	6800      	ldr	r0, [r0, #0]
 8004750:	47a0      	blx	r4

                    http_server_writeChunkedBody(socket, (char *)freadBuffer, readLen, netops);
 8004752:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004756:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 800475a:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 800475e:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 8004762:	f6a2 5044 	subw	r0, r2, #3396	@ 0xd44
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8d7 2d10 	ldr.w	r2, [r7, #3344]	@ 0xd10
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f7ff fd55 	bl	800421c <http_server_writeChunkedBody>
                    do
                    { //now read and write remaining contents
                        readLen = http_file_fops.fread(&freadBuffer, sizeof(freadBuffer), 1, fp);
 8004772:	4b99      	ldr	r3, [pc, #612]	@ (80049d8 <http_server+0x610>)
 8004774:	689c      	ldr	r4, [r3, #8]
 8004776:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 800477a:	f8d7 3d44 	ldr.w	r3, [r7, #3396]	@ 0xd44
 800477e:	2201      	movs	r2, #1
 8004780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004784:	47a0      	blx	r4
 8004786:	4603      	mov	r3, r0
 8004788:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
                        http_server_writeChunkedBody(socket, (char *)freadBuffer, readLen, netops);
 800478c:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004790:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004794:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 8004798:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 800479c:	f6a2 5044 	subw	r0, r2, #3396	@ 0xd44
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8d7 2d10 	ldr.w	r2, [r7, #3344]	@ 0xd10
 80047a6:	6800      	ldr	r0, [r0, #0]
 80047a8:	f7ff fd38 	bl	800421c <http_server_writeChunkedBody>
                    } while (!http_file_fops.eof(fp));
 80047ac:	4b8a      	ldr	r3, [pc, #552]	@ (80049d8 <http_server+0x610>)
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f8d7 0d44 	ldr.w	r0, [r7, #3396]	@ 0xd44
 80047b4:	4798      	blx	r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0da      	beq.n	8004772 <http_server+0x3aa>

                    //send last 0\r\n\r\n
                    netops->http_net_write(socket, (unsigned char *)"0\r\n\r\n", 5, HTTP_SERVER_TIMOUT_MS);
 80047bc:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80047c0:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685c      	ldr	r4, [r3, #4]
 80047c8:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80047cc:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 80047d0:	2364      	movs	r3, #100	@ 0x64
 80047d2:	2205      	movs	r2, #5
 80047d4:	4981      	ldr	r1, [pc, #516]	@ (80049dc <http_server+0x614>)
 80047d6:	6800      	ldr	r0, [r0, #0]
 80047d8:	47a0      	blx	r4
                    netops->http_net_disconnect(socket);
 80047da:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80047de:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 80047ea:	f6a2 5244 	subw	r2, r2, #3396	@ 0xd44
 80047ee:	6810      	ldr	r0, [r2, #0]
 80047f0:	4798      	blx	r3
                }
            }
            break;
 80047f2:	e3df      	b.n	8004fb4 <http_server+0xbec>
        case httpFileClass_SSI:
        {
            if (NULL != http_file_fops.fopen)
 80047f4:	4b78      	ldr	r3, [pc, #480]	@ (80049d8 <http_server+0x610>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <http_server+0x448>
            { //else FS is not mounted
                fp = http_file_fops.fopen(http_request.httpFilePath);
 80047fc:	4b76      	ldr	r3, [pc, #472]	@ (80049d8 <http_server+0x610>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f207 729c 	addw	r2, r7, #1948	@ 0x79c
 8004804:	3202      	adds	r2, #2
 8004806:	4610      	mov	r0, r2
 8004808:	4798      	blx	r3
 800480a:	f8c7 0d44 	str.w	r0, [r7, #3396]	@ 0xd44
 800480e:	e00f      	b.n	8004830 <http_server+0x468>
            }
            else
            {
                PRINT_ERROR("fops not mounted(%d)\r\n", httpFileClass_none);
 8004810:	4b73      	ldr	r3, [pc, #460]	@ (80049e0 <http_server+0x618>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68d8      	ldr	r0, [r3, #12]
 8004816:	2300      	movs	r3, #0
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	4b72      	ldr	r3, [pc, #456]	@ (80049e4 <http_server+0x61c>)
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	f44f 7395 	mov.w	r3, #298	@ 0x12a
 8004822:	4a71      	ldr	r2, [pc, #452]	@ (80049e8 <http_server+0x620>)
 8004824:	4971      	ldr	r1, [pc, #452]	@ (80049ec <http_server+0x624>)
 8004826:	f004 fa4b 	bl	8008cc0 <fiprintf>
                fp = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 3d44 	str.w	r3, [r7, #3396]	@ 0xd44
            }
            if (NULL == fp)
 8004830:	f8d7 3d44 	ldr.w	r3, [r7, #3396]	@ 0xd44
 8004834:	2b00      	cmp	r3, #0
 8004836:	d126      	bne.n	8004886 <http_server+0x4be>
            { //file not found due to missing file or missing FS
                int retval = http_server_send404(&httpResponse, socket, netops);
 8004838:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800483c:	f6a3 5248 	subw	r2, r3, #3400	@ 0xd48
 8004840:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004844:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 8004848:	f507 60f0 	add.w	r0, r7, #1920	@ 0x780
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	f7ff fbe4 	bl	800401c <http_server_send404>
 8004854:	f8c7 0d14 	str.w	r0, [r7, #3348]	@ 0xd14
                if (retval < 0)
 8004858:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800485c:	2b00      	cmp	r3, #0
 800485e:	da10      	bge.n	8004882 <http_server+0x4ba>
                {
                    PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 8004860:	4b5f      	ldr	r3, [pc, #380]	@ (80049e0 <http_server+0x618>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68d8      	ldr	r0, [r3, #12]
 8004866:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	4b5d      	ldr	r3, [pc, #372]	@ (80049e4 <http_server+0x61c>)
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f44f 7399 	mov.w	r3, #306	@ 0x132
 8004874:	4a5c      	ldr	r2, [pc, #368]	@ (80049e8 <http_server+0x620>)
 8004876:	495e      	ldr	r1, [pc, #376]	@ (80049f0 <http_server+0x628>)
 8004878:	f004 fa22 	bl	8008cc0 <fiprintf>
                    return -1;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	e3c0      	b.n	8005004 <http_server+0xc3c>
                }
                return 0;
 8004882:	2300      	movs	r3, #0
 8004884:	e3be      	b.n	8005004 <http_server+0xc3c>
                {
                    char SSIString[HTTP_MAX_SSI_LENGTH + 12]; //string and <!--##-->
                    char SSIReplacementString[HTTP_MAX_SSI_REPLACE_LENGTH];
                } ssiReplacements[HTTP_MAX_SSI_COUNT];

                int ssiCount = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 3d40 	str.w	r3, [r7, #3392]	@ 0xd40
                //compute all replacement string irrespective of occurrence. optimize by computing only required strings
                //this has to be computed ahead of time to avoid the replacement strings changing while we process this in server
                int i = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
                for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 8004898:	e077      	b.n	800498a <http_server+0x5c2>
                { //iterate through the http_SSI_replacer to look for registered strings
                    if (NULL != http_SSI_replacer[i].SSI_String)
 800489a:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <http_server+0x62c>)
 800489c:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 80048a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d06b      	beq.n	8004980 <http_server+0x5b8>
                    {
                        snprintf(ssiReplacements[ssiCount].SSIString, (HTTP_MAX_SSI_LENGTH + 12), "<!--#%s#-->", http_SSI_replacer[i].SSI_String);
 80048a8:	f107 0208 	add.w	r2, r7, #8
 80048ac:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 80048b0:	21b1      	movs	r1, #177	@ 0xb1
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	18d0      	adds	r0, r2, r3
 80048b8:	4a4e      	ldr	r2, [pc, #312]	@ (80049f4 <http_server+0x62c>)
 80048ba:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 80048be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048c2:	4a4d      	ldr	r2, [pc, #308]	@ (80049f8 <http_server+0x630>)
 80048c4:	211b      	movs	r1, #27
 80048c6:	f004 fa9b 	bl	8008e00 <sniprintf>
                        http_SSI_get_replacer_string(http_SSI_replacer[i].SSI_String, ssiReplacements[ssiCount].SSIReplacementString, HTTP_MAX_SSI_REPLACE_LENGTH);
 80048ca:	4a4a      	ldr	r2, [pc, #296]	@ (80049f4 <http_server+0x62c>)
 80048cc:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 80048d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80048d4:	f107 0208 	add.w	r2, r7, #8
 80048d8:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 80048dc:	21b1      	movs	r1, #177	@ 0xb1
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	3318      	adds	r3, #24
 80048e4:	4413      	add	r3, r2
 80048e6:	3303      	adds	r3, #3
 80048e8:	2296      	movs	r2, #150	@ 0x96
 80048ea:	4619      	mov	r1, r3
 80048ec:	f7fe f824 	bl	8002938 <http_SSI_get_replacer_string>
                        if (HTTP_MAX_SSI_LENGTH > strlen(ssiReplacements[ssiCount].SSIString))
 80048f0:	f107 0208 	add.w	r2, r7, #8
 80048f4:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 80048f8:	21b1      	movs	r1, #177	@ 0xb1
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fc6f 	bl	80001e4 <strlen>
 8004906:	4603      	mov	r3, r0
 8004908:	2b0e      	cmp	r3, #14
 800490a:	d818      	bhi.n	800493e <http_server+0x576>
                        {
                            //should we sned a server error here???
                            PRINT_ERROR("registered SSI string is larger than HTTP_MAX_SSI_LENGTH. replacements might be messed up. increase HTTP_MAX_SSI_LENGTH in config (%d)\r\n", (int)strlen(ssiReplacements[ssiCount].SSIString));
 800490c:	4b34      	ldr	r3, [pc, #208]	@ (80049e0 <http_server+0x618>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68dc      	ldr	r4, [r3, #12]
 8004912:	f107 0208 	add.w	r2, r7, #8
 8004916:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 800491a:	21b1      	movs	r1, #177	@ 0xb1
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7fb fc5e 	bl	80001e4 <strlen>
 8004928:	4603      	mov	r3, r0
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	4b2d      	ldr	r3, [pc, #180]	@ (80049e4 <http_server+0x61c>)
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	f240 134f 	movw	r3, #335	@ 0x14f
 8004934:	4a2c      	ldr	r2, [pc, #176]	@ (80049e8 <http_server+0x620>)
 8004936:	4931      	ldr	r1, [pc, #196]	@ (80049fc <http_server+0x634>)
 8004938:	4620      	mov	r0, r4
 800493a:	f004 f9c1 	bl	8008cc0 <fiprintf>
                        }
                        if (HTTP_MAX_SSI_REPLACE_LENGTH < strlen(http_SSI_replacer[i].SSI_String))
 800493e:	4a2d      	ldr	r2, [pc, #180]	@ (80049f4 <http_server+0x62c>)
 8004940:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fb fc4b 	bl	80001e4 <strlen>
 800494e:	4603      	mov	r3, r0
 8004950:	2b96      	cmp	r3, #150	@ 0x96
 8004952:	d910      	bls.n	8004976 <http_server+0x5ae>
                        {
                            PRINT_ERROR("replacement string for %s is larger than HTTP_MAX_SSI_REPLACE_LENGTH. modify config to avoid partial replacement\r\n", http_SSI_replacer[i].SSI_String);
 8004954:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <http_server+0x618>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68d8      	ldr	r0, [r3, #12]
 800495a:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <http_server+0x62c>)
 800495c:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	4b1f      	ldr	r3, [pc, #124]	@ (80049e4 <http_server+0x61c>)
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	f240 1353 	movw	r3, #339	@ 0x153
 800496e:	4a1e      	ldr	r2, [pc, #120]	@ (80049e8 <http_server+0x620>)
 8004970:	4923      	ldr	r1, [pc, #140]	@ (8004a00 <http_server+0x638>)
 8004972:	f004 f9a5 	bl	8008cc0 <fiprintf>
                        }
                        ssiCount++;
 8004976:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 800497a:	3301      	adds	r3, #1
 800497c:	f8c7 3d40 	str.w	r3, [r7, #3392]	@ 0xd40
                for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8004980:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004984:	3301      	adds	r3, #1
 8004986:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800498a:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800498e:	2b04      	cmp	r3, #4
 8004990:	dd83      	ble.n	800489a <http_server+0x4d2>
                    }
                }

                //populating only half the buffer to have space for replacements.
                //leaving last location for null terminating so that we can process it as a string
                int readLen = http_file_fops.fread(&freadBuffer, (HTTP_SERVER_FREAD_BUFFER_SIZE / 2) - 1, 1, fp);
 8004992:	4b11      	ldr	r3, [pc, #68]	@ (80049d8 <http_server+0x610>)
 8004994:	689c      	ldr	r4, [r3, #8]
 8004996:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 800499a:	f8d7 3d44 	ldr.w	r3, [r7, #3396]	@ 0xd44
 800499e:	2201      	movs	r2, #1
 80049a0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80049a4:	47a0      	blx	r4
 80049a6:	4603      	mov	r3, r0
 80049a8:	f8c7 3d1c 	str.w	r3, [r7, #3356]	@ 0xd1c
                freadBuffer[readLen] = 0;
 80049ac:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80049b0:	f6a3 12c8 	subw	r2, r3, #2504	@ 0x9c8
 80049b4:	f8d7 3d1c 	ldr.w	r3, [r7, #3356]	@ 0xd1c
 80049b8:	4413      	add	r3, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
                if (http_file_fops.eof(fp))
 80049be:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <http_server+0x610>)
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f8d7 0d44 	ldr.w	r0, [r7, #3396]	@ 0xd44
 80049c6:	4798      	blx	r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80af 	beq.w	8004b2e <http_server+0x766>
                { //complete contents has been read to buffer. no chunking required
                    for (i = 0; i < ssiCount; i++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 80049d6:	e033      	b.n	8004a40 <http_server+0x678>
 80049d8:	20000b08 	.word	0x20000b08
 80049dc:	0800b3bc 	.word	0x0800b3bc
 80049e0:	200009d4 	.word	0x200009d4
 80049e4:	0800ba34 	.word	0x0800ba34
 80049e8:	0800b1f4 	.word	0x0800b1f4
 80049ec:	0800b35c 	.word	0x0800b35c
 80049f0:	0800b218 	.word	0x0800b218
 80049f4:	20000aa4 	.word	0x20000aa4
 80049f8:	0800b3c4 	.word	0x0800b3c4
 80049fc:	0800b3d0 	.word	0x0800b3d0
 8004a00:	0800b46c 	.word	0x0800b46c
                    { //search and replace all occurrences of the SSI string with replacement contens
                        http_server_findNreplace((char *)&freadBuffer, HTTP_SERVER_FREAD_BUFFER_SIZE, ssiReplacements[i].SSIString, ssiReplacements[i].SSIReplacementString);
 8004a04:	f107 0208 	add.w	r2, r7, #8
 8004a08:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004a0c:	21b1      	movs	r1, #177	@ 0xb1
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	18d1      	adds	r1, r2, r3
 8004a14:	f107 0208 	add.w	r2, r7, #8
 8004a18:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004a1c:	20b1      	movs	r0, #177	@ 0xb1
 8004a1e:	fb00 f303 	mul.w	r3, r0, r3
 8004a22:	3318      	adds	r3, #24
 8004a24:	4413      	add	r3, r2
 8004a26:	3303      	adds	r3, #3
 8004a28:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a32:	f7ff fbb3 	bl	800419c <http_server_findNreplace>
                    for (i = 0; i < ssiCount; i++)
 8004a36:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 8004a40:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 8004a44:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	dbdb      	blt.n	8004a04 <http_server+0x63c>
                    }

                    //form the header, and write header followed by processed contents
                    httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 8004a4c:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004a50:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004a54:	22c8      	movs	r2, #200	@ 0xc8
 8004a56:	801a      	strh	r2, [r3, #0]
                    httpResponse.bodyLength = strlen(freadBuffer);
 8004a58:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fbc1 	bl	80001e4 <strlen>
 8004a62:	4602      	mov	r2, r0
 8004a64:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004a68:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004a6c:	605a      	str	r2, [r3, #4]
                    httpResponse.filePath = http_request.httpFilePath;
 8004a6e:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004a72:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004a76:	f207 729c 	addw	r2, r7, #1948	@ 0x79c
 8004a7a:	3202      	adds	r2, #2
 8004a7c:	615a      	str	r2, [r3, #20]
                    retBufLen = http_response_response_header(httpResponse);
 8004a7e:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004a82:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004a86:	466c      	mov	r4, sp
 8004a88:	f103 0210 	add.w	r2, r3, #16
 8004a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a94:	f7ff f87c 	bl	8003b90 <http_response_response_header>
 8004a98:	f8c7 0d34 	str.w	r0, [r7, #3380]	@ 0xd34
                    //check retval write and disconnect
                    if (retBufLen <= 0)
 8004a9c:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	dc10      	bgt.n	8004ac6 <http_server+0x6fe>
                    {
                        PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 8004aa4:	4bc5      	ldr	r3, [pc, #788]	@ (8004dbc <http_server+0x9f4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68d8      	ldr	r0, [r3, #12]
 8004aaa:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	4bc3      	ldr	r3, [pc, #780]	@ (8004dc0 <http_server+0x9f8>)
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8004ab8:	4ac2      	ldr	r2, [pc, #776]	@ (8004dc4 <http_server+0x9fc>)
 8004aba:	49c3      	ldr	r1, [pc, #780]	@ (8004dc8 <http_server+0xa00>)
 8004abc:	f004 f900 	bl	8008cc0 <fiprintf>
                        return -1;
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac4:	e29e      	b.n	8005004 <http_server+0xc3c>
                    }
                    netops->http_net_write(socket, (unsigned char *)httpHeaderBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS); //write header
 8004ac6:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004aca:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685c      	ldr	r4, [r3, #4]
 8004ad2:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 8004ad6:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004ada:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004ade:	2364      	movs	r3, #100	@ 0x64
 8004ae0:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 8004ae4:	6800      	ldr	r0, [r0, #0]
 8004ae6:	47a0      	blx	r4
                    //now write the modified contents file into netstream
                    netops->http_net_write(socket, (unsigned char *)freadBuffer, httpResponse.bodyLength, HTTP_SERVER_TIMOUT_MS); //
 8004ae8:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004aec:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685c      	ldr	r4, [r3, #4]
 8004af4:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004af8:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 8004b04:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004b08:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004b0c:	2364      	movs	r3, #100	@ 0x64
 8004b0e:	6800      	ldr	r0, [r0, #0]
 8004b10:	47a0      	blx	r4
                    netops->http_net_disconnect(socket);
 8004b12:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004b16:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 8004b22:	f6a2 5244 	subw	r2, r2, #3396	@ 0xd44
 8004b26:	6810      	ldr	r0, [r2, #0]
 8004b28:	4798      	blx	r3
                    return 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e26a      	b.n	8005004 <http_server+0xc3c>
                }
                else
                {                                                            //time to do chunking
                    httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 8004b2e:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004b32:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004b36:	22c8      	movs	r2, #200	@ 0xc8
 8004b38:	801a      	strh	r2, [r3, #0]
                    httpResponse.bodyLength = 0;
 8004b3a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004b3e:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004b42:	2200      	movs	r2, #0
 8004b44:	605a      	str	r2, [r3, #4]
                    httpResponse.transferEncoding = transferEnc_chunked; //set chunked encoding since we dont know actual length yet
 8004b46:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004b4a:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004b4e:	2201      	movs	r2, #1
 8004b50:	741a      	strb	r2, [r3, #16]
                    httpResponse.filePath = http_request.httpFilePath;   //path to be used for contentType
 8004b52:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004b56:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004b5a:	f207 729c 	addw	r2, r7, #1948	@ 0x79c
 8004b5e:	3202      	adds	r2, #2
 8004b60:	615a      	str	r2, [r3, #20]
                    retBufLen = http_response_response_header(httpResponse);
 8004b62:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004b66:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004b6a:	466c      	mov	r4, sp
 8004b6c:	f103 0210 	add.w	r2, r3, #16
 8004b70:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b78:	f7ff f80a 	bl	8003b90 <http_response_response_header>
 8004b7c:	f8c7 0d34 	str.w	r0, [r7, #3380]	@ 0xd34
                    //check retval write and disconnect
                    if (retBufLen <= 0)
 8004b80:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	dc10      	bgt.n	8004baa <http_server+0x7e2>
                    {
                        PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 8004b88:	4b8c      	ldr	r3, [pc, #560]	@ (8004dbc <http_server+0x9f4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68d8      	ldr	r0, [r3, #12]
 8004b8e:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc0 <http_server+0x9f8>)
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	f240 137f 	movw	r3, #383	@ 0x17f
 8004b9c:	4a89      	ldr	r2, [pc, #548]	@ (8004dc4 <http_server+0x9fc>)
 8004b9e:	498a      	ldr	r1, [pc, #552]	@ (8004dc8 <http_server+0xa00>)
 8004ba0:	f004 f88e 	bl	8008cc0 <fiprintf>
                        return -1;
 8004ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba8:	e22c      	b.n	8005004 <http_server+0xc3c>
                    }
                    //send out the response header
                    netops->http_net_write(socket, (unsigned char *)httpHeaderBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS); //write header
 8004baa:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004bae:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685c      	ldr	r4, [r3, #4]
 8004bb6:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 8004bba:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004bbe:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004bc2:	2364      	movs	r3, #100	@ 0x64
 8004bc4:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 8004bc8:	6800      	ldr	r0, [r0, #0]
 8004bca:	47a0      	blx	r4

                    //search for partial SSI strings and seek back to read in next round
                    http_server_findNseekBack((char *)freadBuffer, fp);
 8004bcc:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8004bd0:	f8d7 1d44 	ldr.w	r1, [r7, #3396]	@ 0xd44
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fb55 	bl	8004284 <http_server_findNseekBack>

                    //now do the replacement in buffer
                    for (i = 0; i < ssiCount; i++)
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 8004be0:	e01d      	b.n	8004c1e <http_server+0x856>
                    { //search and replace all occurrences of the SSI string with replacement contens
                        http_server_findNreplace((char *)&freadBuffer, HTTP_SERVER_FREAD_BUFFER_SIZE, ssiReplacements[i].SSIString, ssiReplacements[i].SSIReplacementString);
 8004be2:	f107 0208 	add.w	r2, r7, #8
 8004be6:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004bea:	21b1      	movs	r1, #177	@ 0xb1
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	18d1      	adds	r1, r2, r3
 8004bf2:	f107 0208 	add.w	r2, r7, #8
 8004bf6:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004bfa:	20b1      	movs	r0, #177	@ 0xb1
 8004bfc:	fb00 f303 	mul.w	r3, r0, r3
 8004c00:	3318      	adds	r3, #24
 8004c02:	4413      	add	r3, r2
 8004c04:	3303      	adds	r3, #3
 8004c06:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c10:	f7ff fac4 	bl	800419c <http_server_findNreplace>
                    for (i = 0; i < ssiCount; i++)
 8004c14:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 8004c1e:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 8004c22:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 8004c26:	429a      	cmp	r2, r3
 8004c28:	dbdb      	blt.n	8004be2 <http_server+0x81a>
                    }
                    int repBufLength = strlen(freadBuffer);
 8004c2a:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fad8 	bl	80001e4 <strlen>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f8c7 3d18 	str.w	r3, [r7, #3352]	@ 0xd18
                    //first write the contents we have read already
                    http_server_writeChunkedBody(socket, freadBuffer, repBufLength, netops);
 8004c3a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004c3e:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004c42:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 8004c46:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 8004c4a:	f6a2 5044 	subw	r0, r2, #3396	@ 0xd44
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8d7 2d18 	ldr.w	r2, [r7, #3352]	@ 0xd18
 8004c54:	6800      	ldr	r0, [r0, #0]
 8004c56:	f7ff fae1 	bl	800421c <http_server_writeChunkedBody>
                    do
                    { //now read and write remaining contents
                        readLen = http_file_fops.fread(&freadBuffer, (HTTP_SERVER_FREAD_BUFFER_SIZE / 2) - 1, 1, fp);
 8004c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004dcc <http_server+0xa04>)
 8004c5c:	689c      	ldr	r4, [r3, #8]
 8004c5e:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 8004c62:	f8d7 3d44 	ldr.w	r3, [r7, #3396]	@ 0xd44
 8004c66:	2201      	movs	r2, #1
 8004c68:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8004c6c:	47a0      	blx	r4
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f8c7 3d1c 	str.w	r3, [r7, #3356]	@ 0xd1c
                        freadBuffer[readLen] = 0;
 8004c74:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004c78:	f6a3 12c8 	subw	r2, r3, #2504	@ 0x9c8
 8004c7c:	f8d7 3d1c 	ldr.w	r3, [r7, #3356]	@ 0xd1c
 8004c80:	4413      	add	r3, r2
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]

                        //search for incomplete comment in teh end and do a seek
                        //now do the replacement in buffer
                        for (i = 0; i < ssiCount; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 8004c8c:	e01d      	b.n	8004cca <http_server+0x902>
                        { //search and replace all occurrences of the SSI string with replacement contens
                            http_server_findNreplace((char *)&freadBuffer, HTTP_SERVER_FREAD_BUFFER_SIZE, ssiReplacements[i].SSIString, ssiReplacements[i].SSIReplacementString);
 8004c8e:	f107 0208 	add.w	r2, r7, #8
 8004c92:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004c96:	21b1      	movs	r1, #177	@ 0xb1
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	18d1      	adds	r1, r2, r3
 8004c9e:	f107 0208 	add.w	r2, r7, #8
 8004ca2:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004ca6:	20b1      	movs	r0, #177	@ 0xb1
 8004ca8:	fb00 f303 	mul.w	r3, r0, r3
 8004cac:	3318      	adds	r3, #24
 8004cae:	4413      	add	r3, r2
 8004cb0:	3303      	adds	r3, #3
 8004cb2:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004cbc:	f7ff fa6e 	bl	800419c <http_server_findNreplace>
                        for (i = 0; i < ssiCount; i++)
 8004cc0:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 8004cca:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 8004cce:	f8d7 3d40 	ldr.w	r3, [r7, #3392]	@ 0xd40
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	dbdb      	blt.n	8004c8e <http_server+0x8c6>
                        }
                        repBufLength = strlen(freadBuffer);
 8004cd6:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fb fa82 	bl	80001e4 <strlen>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f8c7 3d18 	str.w	r3, [r7, #3352]	@ 0xd18

                        http_server_writeChunkedBody(socket, freadBuffer, repBufLength, netops);
 8004ce6:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004cea:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004cee:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 8004cf2:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 8004cf6:	f6a2 5044 	subw	r0, r2, #3396	@ 0xd44
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8d7 2d18 	ldr.w	r2, [r7, #3352]	@ 0xd18
 8004d00:	6800      	ldr	r0, [r0, #0]
 8004d02:	f7ff fa8b 	bl	800421c <http_server_writeChunkedBody>
                    } while (!http_file_fops.eof(fp));					
 8004d06:	4b31      	ldr	r3, [pc, #196]	@ (8004dcc <http_server+0xa04>)
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f8d7 0d44 	ldr.w	r0, [r7, #3396]	@ 0xd44
 8004d0e:	4798      	blx	r3
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0a1      	beq.n	8004c5a <http_server+0x892>

                    //send last 0\r\n\r\n
                    netops->http_net_write(socket, (unsigned char *)"0\r\n\r\n", 5, HTTP_SERVER_TIMOUT_MS);
 8004d16:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004d1a:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685c      	ldr	r4, [r3, #4]
 8004d22:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004d26:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004d2a:	2364      	movs	r3, #100	@ 0x64
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	4928      	ldr	r1, [pc, #160]	@ (8004dd0 <http_server+0xa08>)
 8004d30:	6800      	ldr	r0, [r0, #0]
 8004d32:	47a0      	blx	r4
                    netops->http_net_disconnect(socket);
 8004d34:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004d38:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 8004d44:	f6a2 5244 	subw	r2, r2, #3396	@ 0xd44
 8004d48:	6810      	ldr	r0, [r2, #0]
 8004d4a:	4798      	blx	r3
                }
            }
        }
        break;
 8004d4c:	e132      	b.n	8004fb4 <http_server+0xbec>
        case httpFileClass_CGI:
        { //no suport for chunked CGI output
            http_CGI_pathFunctionHandle_t cgiPathFunctionHandle = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8c7 3d30 	str.w	r3, [r7, #3376]	@ 0xd30
            cgiPathFunctionHandle = http_CGI_get_pathFunctionHandle(http_request.httpFilePath);
 8004d54:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 8004d58:	3302      	adds	r3, #2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd ffb4 	bl	8002cc8 <http_CGI_get_pathFunctionHandle>
 8004d60:	f8c7 0d30 	str.w	r0, [r7, #3376]	@ 0xd30
            if (NULL == cgiPathFunctionHandle)
 8004d64:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	@ 0xd30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d135      	bne.n	8004dd8 <http_server+0xa10>
            { //404 case
                int retval = http_server_send404(&httpResponse, socket, netops);
 8004d6c:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004d70:	f6a3 5248 	subw	r2, r3, #3400	@ 0xd48
 8004d74:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004d78:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 8004d7c:	f507 60f0 	add.w	r0, r7, #1920	@ 0x780
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	6819      	ldr	r1, [r3, #0]
 8004d84:	f7ff f94a 	bl	800401c <http_server_send404>
 8004d88:	f8c7 0d20 	str.w	r0, [r7, #3360]	@ 0xd20
                if (retval < 0)
 8004d8c:	f8d7 3d20 	ldr.w	r3, [r7, #3360]	@ 0xd20
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da10      	bge.n	8004db6 <http_server+0x9ee>
                {
                    PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 8004d94:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <http_server+0x9f4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68d8      	ldr	r0, [r3, #12]
 8004d9a:	f8d7 3d20 	ldr.w	r3, [r7, #3360]	@ 0xd20
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <http_server+0x9f8>)
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8004da8:	4a06      	ldr	r2, [pc, #24]	@ (8004dc4 <http_server+0x9fc>)
 8004daa:	490a      	ldr	r1, [pc, #40]	@ (8004dd4 <http_server+0xa0c>)
 8004dac:	f003 ff88 	bl	8008cc0 <fiprintf>
                    return -1;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295
 8004db4:	e126      	b.n	8005004 <http_server+0xc3c>
                }
                return 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e124      	b.n	8005004 <http_server+0xc3c>
 8004dba:	bf00      	nop
 8004dbc:	200009d4 	.word	0x200009d4
 8004dc0:	0800ba34 	.word	0x0800ba34
 8004dc4:	0800b1f4 	.word	0x0800b1f4
 8004dc8:	0800b388 	.word	0x0800b388
 8004dcc:	20000b08 	.word	0x20000b08
 8004dd0:	0800b3bc 	.word	0x0800b3bc
 8004dd4:	0800b218 	.word	0x0800b218
            }
            else
            { //time to execute cgi
                unsigned char cgiBuffer[HTTP_SERVER_CGI_BUFFER_SIZE];
                int retBufLength = http_CGI_exec_pathFunction(http_request.httpFilePath, (char *)&cgiBuffer, HTTP_SERVER_CGI_BUFFER_SIZE);
 8004dd8:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 8004ddc:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 8004de0:	3302      	adds	r3, #2
 8004de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fd fe80 	bl	8002aec <http_CGI_exec_pathFunction>
 8004dec:	f8c7 0d2c 	str.w	r0, [r7, #3372]	@ 0xd2c
                if (retBufLength < 0)
 8004df0:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	@ 0xd2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da38      	bge.n	8004e6a <http_server+0xaa2>
                { //send an internal error response
                    PRINT_ERROR("error executing pathFunction (%s - %d)\r\n", http_request.httpFilePath, retBufLength);
 8004df8:	4b85      	ldr	r3, [pc, #532]	@ (8005010 <http_server+0xc48>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68d8      	ldr	r0, [r3, #12]
 8004dfe:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	@ 0xd2c
 8004e02:	9302      	str	r3, [sp, #8]
 8004e04:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 8004e08:	3302      	adds	r3, #2
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	4b81      	ldr	r3, [pc, #516]	@ (8005014 <http_server+0xc4c>)
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8004e14:	4a80      	ldr	r2, [pc, #512]	@ (8005018 <http_server+0xc50>)
 8004e16:	4981      	ldr	r1, [pc, #516]	@ (800501c <http_server+0xc54>)
 8004e18:	f003 ff52 	bl	8008cc0 <fiprintf>
                    int retval = http_server_send_serverError500(&httpResponse, socket, netops);
 8004e1c:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004e20:	f6a3 5248 	subw	r2, r3, #3400	@ 0xd48
 8004e24:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004e28:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 8004e2c:	f507 60f0 	add.w	r0, r7, #1920	@ 0x780
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	f7ff f972 	bl	800411c <http_server_send_serverError500>
 8004e38:	f8c7 0d24 	str.w	r0, [r7, #3364]	@ 0xd24
                    if (retval < 0)
 8004e3c:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	@ 0xd24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da10      	bge.n	8004e66 <http_server+0xa9e>
                    {
                        PRINT_ERROR("error forming 500 header (%d)\r\n", retval);
 8004e44:	4b72      	ldr	r3, [pc, #456]	@ (8005010 <http_server+0xc48>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68d8      	ldr	r0, [r3, #12]
 8004e4a:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	@ 0xd24
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	4b70      	ldr	r3, [pc, #448]	@ (8005014 <http_server+0xc4c>)
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8004e58:	4a6f      	ldr	r2, [pc, #444]	@ (8005018 <http_server+0xc50>)
 8004e5a:	4971      	ldr	r1, [pc, #452]	@ (8005020 <http_server+0xc58>)
 8004e5c:	f003 ff30 	bl	8008cc0 <fiprintf>
                        return -1;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295
 8004e64:	e0ce      	b.n	8005004 <http_server+0xc3c>
                    }
                    return 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e0cc      	b.n	8005004 <http_server+0xc3c>
                }
                else
                {
                    httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 8004e6a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004e6e:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004e72:	22c8      	movs	r2, #200	@ 0xc8
 8004e74:	801a      	strh	r2, [r3, #0]
                    httpResponse.bodyLength = retBufLength;
 8004e76:	f8d7 2d2c 	ldr.w	r2, [r7, #3372]	@ 0xd2c
 8004e7a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004e7e:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004e82:	605a      	str	r2, [r3, #4]
                    httpResponse.filePath = NULL;
 8004e84:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004e88:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	615a      	str	r2, [r3, #20]
                    http_response_contenttype_t contentType = http_cgi_get_contentType(http_CGI_get_pathFunctionHandle(http_request.httpFilePath));
 8004e90:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 8004e94:	3302      	adds	r3, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd ff16 	bl	8002cc8 <http_CGI_get_pathFunctionHandle>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fd ff00 	bl	8002ca4 <http_cgi_get_contentType>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3d2b 	strb.w	r3, [r7, #3371]	@ 0xd2b
                    httpResponse.contentType = contentType;
 8004eaa:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004eae:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004eb2:	f897 2d2b 	ldrb.w	r2, [r7, #3371]	@ 0xd2b
 8004eb6:	761a      	strb	r2, [r3, #24]
                    retBufLen = http_response_response_header(httpResponse);
 8004eb8:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004ebc:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8004ec0:	466c      	mov	r4, sp
 8004ec2:	f103 0210 	add.w	r2, r3, #16
 8004ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ec8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ece:	f7fe fe5f 	bl	8003b90 <http_response_response_header>
 8004ed2:	f8c7 0d34 	str.w	r0, [r7, #3380]	@ 0xd34
                    //check retval write and disconnect
                    if (retBufLen < 0)
 8004ed6:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da10      	bge.n	8004f00 <http_server+0xb38>
                    {
                        PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 8004ede:	4b4c      	ldr	r3, [pc, #304]	@ (8005010 <http_server+0xc48>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68d8      	ldr	r0, [r3, #12]
 8004ee4:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	4b4a      	ldr	r3, [pc, #296]	@ (8005014 <http_server+0xc4c>)
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8004ef2:	4a49      	ldr	r2, [pc, #292]	@ (8005018 <http_server+0xc50>)
 8004ef4:	494b      	ldr	r1, [pc, #300]	@ (8005024 <http_server+0xc5c>)
 8004ef6:	f003 fee3 	bl	8008cc0 <fiprintf>
                        return -1;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	e081      	b.n	8005004 <http_server+0xc3c>
                    }
                    netops->http_net_write(socket, (unsigned char *)httpHeaderBuffer, retBufLen, HTTP_SERVER_TIMOUT_MS); //write header
 8004f00:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004f04:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685c      	ldr	r4, [r3, #4]
 8004f0c:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 8004f10:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004f14:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004f18:	2364      	movs	r3, #100	@ 0x64
 8004f1a:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 8004f1e:	6800      	ldr	r0, [r0, #0]
 8004f20:	47a0      	blx	r4
                    if (retBufLen != 0)
 8004f22:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <http_server+0xb84>
                    { //case where operation was successful but no content to pass on.
                        netops->http_net_write(socket, (unsigned char *)cgiBuffer, retBufLength, HTTP_SERVER_TIMOUT_MS);
 8004f2a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004f2e:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685c      	ldr	r4, [r3, #4]
 8004f36:	f507 7160 	add.w	r1, r7, #896	@ 0x380
 8004f3a:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004f3e:	f6a3 5044 	subw	r0, r3, #3396	@ 0xd44
 8004f42:	2364      	movs	r3, #100	@ 0x64
 8004f44:	f8d7 2d2c 	ldr.w	r2, [r7, #3372]	@ 0xd2c
 8004f48:	6800      	ldr	r0, [r0, #0]
 8004f4a:	47a0      	blx	r4
                    }
                    netops->http_net_disconnect(socket);
 8004f4c:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004f50:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 8004f5c:	f6a2 5244 	subw	r2, r2, #3396	@ 0xd44
 8004f60:	6810      	ldr	r0, [r2, #0]
 8004f62:	4798      	blx	r3
                    return 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e04d      	b.n	8005004 <http_server+0xc3c>
            }
        }
        break;
        default:
            {
				int retval = http_server_send404(&httpResponse, socket, netops);
 8004f68:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004f6c:	f6a3 5248 	subw	r2, r3, #3400	@ 0xd48
 8004f70:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004f74:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 8004f78:	f507 60f0 	add.w	r0, r7, #1920	@ 0x780
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6819      	ldr	r1, [r3, #0]
 8004f80:	f7ff f84c 	bl	800401c <http_server_send404>
 8004f84:	f8c7 0d08 	str.w	r0, [r7, #3336]	@ 0xd08
            if (retval < 0)
 8004f88:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da10      	bge.n	8004fb2 <http_server+0xbea>
            {
	            PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 8004f90:	4b1f      	ldr	r3, [pc, #124]	@ (8005010 <http_server+0xc48>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68d8      	ldr	r0, [r3, #12]
 8004f96:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005014 <http_server+0xc4c>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <http_server+0xc50>)
 8004fa6:	4920      	ldr	r1, [pc, #128]	@ (8005028 <http_server+0xc60>)
 8004fa8:	f003 fe8a 	bl	8008cc0 <fiprintf>
	            return -1;
 8004fac:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb0:	e028      	b.n	8005004 <http_server+0xc3c>
			} 
			break;
 8004fb2:	bf00      	nop
			}
        }
        break;
 8004fb4:	e025      	b.n	8005002 <http_server+0xc3a>
    default: //currently supporting only GET. for all other requests, respond with not implemented.
		{int retval = http_server_send501(&httpResponse, socket, netops);
 8004fb6:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004fba:	f6a3 5248 	subw	r2, r3, #3400	@ 0xd48
 8004fbe:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8004fc2:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 8004fc6:	f507 60f0 	add.w	r0, r7, #1920	@ 0x780
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	f7ff f865 	bl	800409c <http_server_send501>
 8004fd2:	f8c7 0d04 	str.w	r0, [r7, #3332]	@ 0xd04
		if (retval < 0)
 8004fd6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da10      	bge.n	8005000 <http_server+0xc38>
		{
			PRINT_ERROR("error forming 501 header (%d)\r\n", retval);
 8004fde:	4b0c      	ldr	r3, [pc, #48]	@ (8005010 <http_server+0xc48>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68d8      	ldr	r0, [r3, #12]
 8004fe4:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <http_server+0xc4c>)
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	f240 13ed 	movw	r3, #493	@ 0x1ed
 8004ff2:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <http_server+0xc50>)
 8004ff4:	490d      	ldr	r1, [pc, #52]	@ (800502c <http_server+0xc64>)
 8004ff6:	f003 fe63 	bl	8008cc0 <fiprintf>
			return -1;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffe:	e001      	b.n	8005004 <http_server+0xc3c>
		}
        break;
 8005000:	bf00      	nop
		}
    }
    return 0;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	f607 574c 	addw	r7, r7, #3404	@ 0xd4c
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}
 800500e:	bf00      	nop
 8005010:	200009d4 	.word	0x200009d4
 8005014:	0800ba34 	.word	0x0800ba34
 8005018:	0800b1f4 	.word	0x0800b1f4
 800501c:	0800b4f4 	.word	0x0800b4f4
 8005020:	0800b280 	.word	0x0800b280
 8005024:	0800b388 	.word	0x0800b388
 8005028:	0800b218 	.word	0x0800b218
 800502c:	0800b24c 	.word	0x0800b24c

08005030 <http_localfs_fopen_w>:
static size_t http_localfs_fread_w(void *ptr, size_t size, size_t nmemb, void *fp);
static int http_localfs_fgetc_w(void *fp);
static int http_localfs_fseek_w(void *fp, long offset, int whence);
static int http_localfs_feof_w(void *fp);

static void *http_localfs_fopen_w(const char *filename) { return (void *)http_localfs_fopen(filename); }
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fd ff17 	bl	8002e6c <http_localfs_fopen>
 800503e:	4603      	mov	r3, r0
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <http_localfs_fclose_w>:
static int http_localfs_fclose_w(void *fp) { return http_localfs_fclose((http_localfs_filesystem_fp_t)fp); }
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fd ff3f 	bl	8002ed4 <http_localfs_fclose>
 8005056:	4603      	mov	r3, r0
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <http_localfs_fread_w>:
static size_t http_localfs_fread_w(void *ptr, size_t size, size_t nmemb, void *fp) { return http_localfs_fread(ptr, size, nmemb, (http_localfs_filesystem_fp_t)fp); }
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7fd ffab 	bl	8002fd0 <http_localfs_fread>
 800507a:	4603      	mov	r3, r0
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <http_localfs_fgetc_w>:
static int http_localfs_fgetc_w(void *fp) { return http_localfs_fgetc((http_localfs_filesystem_fp_t)fp); }
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fd ff45 	bl	8002f1c <http_localfs_fgetc>
 8005092:	4603      	mov	r3, r0
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <http_localfs_fseek_w>:
static int http_localfs_fseek_w(void *fp, long offset, int whence) { return http_localfs_fseek((http_localfs_filesystem_fp_t)fp, offset, whence); }
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7fe f803 	bl	80030b8 <http_localfs_fseek>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <http_localfs_feof_w>:
static int http_localfs_feof_w(void *fp) { return http_localfs_feof((http_localfs_filesystem_fp_t)fp); }
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fd ff63 	bl	8002f90 <http_localfs_feof>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <tcpServerSocketEventHandler>:
static int32_t gi32HTTPSrvRxLen=0;
extern SOCKET tcp_server_socket;


void tcpServerSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af02      	add	r7, sp, #8
 80050da:	4603      	mov	r3, r0
 80050dc:	603a      	str	r2, [r7, #0]
 80050de:	71fb      	strb	r3, [r7, #7]
 80050e0:	460b      	mov	r3, r1
 80050e2:	71bb      	strb	r3, [r7, #6]
	//TODO: check if this is HTTP socket
	switch (u8Msg) {
 80050e4:	79bb      	ldrb	r3, [r7, #6]
 80050e6:	2b07      	cmp	r3, #7
 80050e8:	d006      	beq.n	80050f8 <tcpServerSocketEventHandler+0x24>
 80050ea:	2b07      	cmp	r3, #7
 80050ec:	dc2a      	bgt.n	8005144 <tcpServerSocketEventHandler+0x70>
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d02a      	beq.n	8005148 <tcpServerSocketEventHandler+0x74>
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d004      	beq.n	8005100 <tcpServerSocketEventHandler+0x2c>
				PRINT_ERROR("ERROR >> Receive error for Rx socket (Err=%ld).\r\n",gi32HTTPSrvRxLen);
			}
			gbHTTPSrvRecvDone=true;
		}
		break;
		default: break;
 80050f6:	e025      	b.n	8005144 <tcpServerSocketEventHandler+0x70>
			gbHTTPSrvSendDone=true;
 80050f8:	4b16      	ldr	r3, [pc, #88]	@ (8005154 <tcpServerSocketEventHandler+0x80>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
		break;
 80050fe:	e024      	b.n	800514a <tcpServerSocketEventHandler+0x76>
			tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	60fb      	str	r3, [r7, #12]
			gi32HTTPSrvRxLen = pstrRx->s16BufferSize;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800510a:	461a      	mov	r2, r3
 800510c:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <tcpServerSocketEventHandler+0x84>)
 800510e:	601a      	str	r2, [r3, #0]
			if((gi32HTTPSrvRxLen<0) && (gi32HTTPSrvRxLen!=SOCK_ERR_TIMEOUT)) {
 8005110:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <tcpServerSocketEventHandler+0x84>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	da11      	bge.n	800513c <tcpServerSocketEventHandler+0x68>
 8005118:	4b0f      	ldr	r3, [pc, #60]	@ (8005158 <tcpServerSocketEventHandler+0x84>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f113 0f0d 	cmn.w	r3, #13
 8005120:	d00c      	beq.n	800513c <tcpServerSocketEventHandler+0x68>
				PRINT_ERROR("ERROR >> Receive error for Rx socket (Err=%ld).\r\n",gi32HTTPSrvRxLen);
 8005122:	4b0e      	ldr	r3, [pc, #56]	@ (800515c <tcpServerSocketEventHandler+0x88>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68d8      	ldr	r0, [r3, #12]
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <tcpServerSocketEventHandler+0x84>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <tcpServerSocketEventHandler+0x8c>)
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2361      	movs	r3, #97	@ 0x61
 8005134:	4a0b      	ldr	r2, [pc, #44]	@ (8005164 <tcpServerSocketEventHandler+0x90>)
 8005136:	490c      	ldr	r1, [pc, #48]	@ (8005168 <tcpServerSocketEventHandler+0x94>)
 8005138:	f003 fdc2 	bl	8008cc0 <fiprintf>
			gbHTTPSrvRecvDone=true;
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <tcpServerSocketEventHandler+0x98>)
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
		break;
 8005142:	e002      	b.n	800514a <tcpServerSocketEventHandler+0x76>
		default: break;
 8005144:	bf00      	nop
 8005146:	e000      	b.n	800514a <tcpServerSocketEventHandler+0x76>
		break;
 8005148:	bf00      	nop
	}
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000b9c 	.word	0x20000b9c
 8005158:	20000ba0 	.word	0x20000ba0
 800515c:	200009d4 	.word	0x200009d4
 8005160:	0800ba40 	.word	0x0800ba40
 8005164:	0800b53c 	.word	0x0800b53c
 8005168:	0800b56c 	.word	0x0800b56c
 800516c:	20000b9d 	.word	0x20000b9d

08005170 <http_server_WINC15x0_net_read>:

int http_server_WINC15x0_net_read(int socket, unsigned char *readBuffer, int readBufferLength, int timeoutMs){
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
	//as of now, read is meant only for HTTP request headers. So, in case there is more data coming fro host
	//allocate a larger buffer in config. Later to accomodate post and other data input methods, we will implement
	// a RX FIFO pool.
	
	gbHTTPSrvRecvDone=false;
 800517e:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <http_server_WINC15x0_net_read+0x74>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
	if (SOCK_ERR_NO_ERROR!=recv(socket,readBuffer,readBufferLength,timeoutMs)){
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	b258      	sxtb	r0, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	b29a      	uxth	r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	f003 fa8a 	bl	80086a8 <recv>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <http_server_WINC15x0_net_read+0x4a>
		PRINT_ERROR("ERROR >> recv failed\r\n");
 800519a:	4b13      	ldr	r3, [pc, #76]	@ (80051e8 <http_server_WINC15x0_net_read+0x78>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68d8      	ldr	r0, [r3, #12]
 80051a0:	4b12      	ldr	r3, [pc, #72]	@ (80051ec <http_server_WINC15x0_net_read+0x7c>)
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2371      	movs	r3, #113	@ 0x71
 80051a6:	4a12      	ldr	r2, [pc, #72]	@ (80051f0 <http_server_WINC15x0_net_read+0x80>)
 80051a8:	4912      	ldr	r1, [pc, #72]	@ (80051f4 <http_server_WINC15x0_net_read+0x84>)
 80051aa:	f003 fd89 	bl	8008cc0 <fiprintf>
		return -1;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e012      	b.n	80051da <http_server_WINC15x0_net_read+0x6a>
	}
	//call handle_events until we get rx callback
	while (false==gbHTTPSrvRecvDone){
		m2m_wifi_handle_events(NULL);
 80051b4:	2000      	movs	r0, #0
 80051b6:	f001 facb 	bl	8006750 <m2m_wifi_handle_events>
	while (false==gbHTTPSrvRecvDone){
 80051ba:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <http_server_WINC15x0_net_read+0x74>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f083 0301 	eor.w	r3, r3, #1
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f5      	bne.n	80051b4 <http_server_WINC15x0_net_read+0x44>
	}
	
	//length will be updated in the callback
	if (gi32HTTPSrvRxLen>0){
 80051c8:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <http_server_WINC15x0_net_read+0x88>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dd02      	ble.n	80051d6 <http_server_WINC15x0_net_read+0x66>
		return gi32HTTPSrvRxLen;
 80051d0:	4b09      	ldr	r3, [pc, #36]	@ (80051f8 <http_server_WINC15x0_net_read+0x88>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	e001      	b.n	80051da <http_server_WINC15x0_net_read+0x6a>
	}

	return -1;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000b9d 	.word	0x20000b9d
 80051e8:	200009d4 	.word	0x200009d4
 80051ec:	0800ba5c 	.word	0x0800ba5c
 80051f0:	0800b53c 	.word	0x0800b53c
 80051f4:	0800b5b4 	.word	0x0800b5b4
 80051f8:	20000ba0 	.word	0x20000ba0

080051fc <http_server_WINC15x0_net_write>:
int http_server_WINC15x0_net_write(int socket, unsigned char *writeBuffer, int writeBufferLength, int timeoutMs){
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
	//static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
	gbHTTPSrvSendDone=false;
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <http_server_WINC15x0_net_write+0x64>)
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
	if (SOCK_ERR_NO_ERROR!=send(socket,writeBuffer,writeBufferLength,timeoutMs)){
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	b258      	sxtb	r0, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	b29a      	uxth	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	f003 f9cd 	bl	80085bc <send>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00f      	beq.n	8005248 <http_server_WINC15x0_net_write+0x4c>
		PRINT_ERROR("ERROR >> send error");
 8005228:	4b0e      	ldr	r3, [pc, #56]	@ (8005264 <http_server_WINC15x0_net_write+0x68>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68d8      	ldr	r0, [r3, #12]
 800522e:	4b0e      	ldr	r3, [pc, #56]	@ (8005268 <http_server_WINC15x0_net_write+0x6c>)
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2384      	movs	r3, #132	@ 0x84
 8005234:	4a0d      	ldr	r2, [pc, #52]	@ (800526c <http_server_WINC15x0_net_write+0x70>)
 8005236:	490e      	ldr	r1, [pc, #56]	@ (8005270 <http_server_WINC15x0_net_write+0x74>)
 8005238:	f003 fd42 	bl	8008cc0 <fiprintf>
		return -1;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	e00a      	b.n	8005258 <http_server_WINC15x0_net_write+0x5c>
	}
	//wait for send callback . Not essential. but let us do it for now.
	while (false==gbHTTPSrvSendDone){
		m2m_wifi_handle_events(NULL);
 8005242:	2000      	movs	r0, #0
 8005244:	f001 fa84 	bl	8006750 <m2m_wifi_handle_events>
	while (false==gbHTTPSrvSendDone){
 8005248:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <http_server_WINC15x0_net_write+0x64>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f083 0301 	eor.w	r3, r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f5      	bne.n	8005242 <http_server_WINC15x0_net_write+0x46>
	}

	//TODO: figure out how to get actual send length from callback
	//this length will be updated in the callback
	//return gu32MQTTBrokerSendLen;
	return writeBufferLength;
 8005256:	687b      	ldr	r3, [r7, #4]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000b9c 	.word	0x20000b9c
 8005264:	200009d4 	.word	0x200009d4
 8005268:	0800ba7c 	.word	0x0800ba7c
 800526c:	0800b53c 	.word	0x0800b53c
 8005270:	0800b5e0 	.word	0x0800b5e0

08005274 <http_server_WINC15x0_net_disconnect>:

void http_server_WINC15x0_net_disconnect(int socket){
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	close(socket);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	b25b      	sxtb	r3, r3
 8005280:	4618      	mov	r0, r3
 8005282:	f003 fa97 	bl	80087b4 <close>
	tcp_server_socket=-1;
 8005286:	4b03      	ldr	r3, [pc, #12]	@ (8005294 <http_server_WINC15x0_net_disconnect+0x20>)
 8005288:	22ff      	movs	r2, #255	@ 0xff
 800528a:	701a      	strb	r2, [r3, #0]
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000000 	.word	0x20000000

08005298 <http_server_timerVal_SSI_replacer_cb>:

/*callbacks to replace SSI string timerVal*/
int http_server_timerVal_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength);
int http_server_timerVal_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
	if (0 != strcmp("timerVal", SSIString)) //not a mandatory check
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	480f      	ldr	r0, [pc, #60]	@ (80052e4 <http_server_timerVal_SSI_replacer_cb+0x4c>)
 80052a8:	f7fa ff92 	bl	80001d0 <strcmp>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <http_server_timerVal_SSI_replacer_cb+0x26>
	{
		printf("SSI string missmatch in timerVal callback\r\n");
 80052b2:	480d      	ldr	r0, [pc, #52]	@ (80052e8 <http_server_timerVal_SSI_replacer_cb+0x50>)
 80052b4:	f003 fd9c 	bl	8008df0 <puts>
		return -1;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	e00d      	b.n	80052da <http_server_timerVal_SSI_replacer_cb+0x42>
	}
	sprintf(replacerBuffer,"%lu",HAL_GetTick());
 80052be:	f7fb ffd7 	bl	8001270 <HAL_GetTick>
 80052c2:	4603      	mov	r3, r0
 80052c4:	461a      	mov	r2, r3
 80052c6:	4909      	ldr	r1, [pc, #36]	@ (80052ec <http_server_timerVal_SSI_replacer_cb+0x54>)
 80052c8:	68b8      	ldr	r0, [r7, #8]
 80052ca:	f003 fdcd 	bl	8008e68 <siprintf>
	replacerBuffer[bufferLength] = 0;
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
	return 0;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	0800b608 	.word	0x0800b608
 80052e8:	0800b614 	.word	0x0800b614
 80052ec:	0800b640 	.word	0x0800b640

080052f0 <http_server_timerValCallCount_SSI_replacer_cb>:

int http_server_timerValCallCount_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength);
int http_server_timerValCallCount_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
	if (0 != strcmp("timerValCC", SSIString)) //not a mandatory check
 80052fc:	68f9      	ldr	r1, [r7, #12]
 80052fe:	4811      	ldr	r0, [pc, #68]	@ (8005344 <http_server_timerValCallCount_SSI_replacer_cb+0x54>)
 8005300:	f7fa ff66 	bl	80001d0 <strcmp>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <http_server_timerValCallCount_SSI_replacer_cb+0x26>
	{
		printf("SSI string missmatch in timerVal callback\r\n");
 800530a:	480f      	ldr	r0, [pc, #60]	@ (8005348 <http_server_timerValCallCount_SSI_replacer_cb+0x58>)
 800530c:	f003 fd70 	bl	8008df0 <puts>
		return -1;
 8005310:	f04f 33ff 	mov.w	r3, #4294967295
 8005314:	e011      	b.n	800533a <http_server_timerValCallCount_SSI_replacer_cb+0x4a>
	}
	timerValCC++;
 8005316:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <http_server_timerValCallCount_SSI_replacer_cb+0x5c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	4a0b      	ldr	r2, [pc, #44]	@ (800534c <http_server_timerValCallCount_SSI_replacer_cb+0x5c>)
 800531e:	6013      	str	r3, [r2, #0]
	sprintf(replacerBuffer,"%lu",timerValCC);
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <http_server_timerValCallCount_SSI_replacer_cb+0x5c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	490a      	ldr	r1, [pc, #40]	@ (8005350 <http_server_timerValCallCount_SSI_replacer_cb+0x60>)
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f003 fd9d 	bl	8008e68 <siprintf>
	replacerBuffer[bufferLength] = 0;
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
	return 0;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	0800b644 	.word	0x0800b644
 8005348:	0800b614 	.word	0x0800b614
 800534c:	20000b94 	.word	0x20000b94
 8005350:	0800b640 	.word	0x0800b640

08005354 <httpServerTest_cgiPathFunction>:


int httpServerTest_cgiPathFunction(const char *CGIPath, char *replacerBuffer, unsigned int bufferLength);
int httpServerTest_cgiPathFunction(const char *CGIPath, char *replacerBuffer, unsigned int bufferLength)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
	

	if (0 != strcmp(CGIPath, serverTestCGIPath))
 8005360:	4b2b      	ldr	r3, [pc, #172]	@ (8005410 <httpServerTest_cgiPathFunction+0xbc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4619      	mov	r1, r3
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7fa ff32 	bl	80001d0 <strcmp>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <httpServerTest_cgiPathFunction+0x24>
	return -1;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	e047      	b.n	8005408 <httpServerTest_cgiPathFunction+0xb4>
	if ((bufferLength <= 0) || NULL == replacerBuffer)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <httpServerTest_cgiPathFunction+0x30>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <httpServerTest_cgiPathFunction+0x36>
	return -1;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295
 8005388:	e03e      	b.n	8005408 <httpServerTest_cgiPathFunction+0xb4>
	char pStatus=0;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]

	printf("CGI func called !!!!!!!!!!!!!!!!!!!!");
 800538e:	4821      	ldr	r0, [pc, #132]	@ (8005414 <httpServerTest_cgiPathFunction+0xc0>)
 8005390:	f003 fcc6 	bl	8008d20 <iprintf>
	BSP_LED_Toggle(LED1);
 8005394:	2000      	movs	r0, #0
 8005396:	f7fb feeb 	bl	8001170 <BSP_LED_Toggle>
	if(true==HAL_GPIO_ReadPin(LED1_GPIO_PORT,LED1_PIN)){
 800539a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800539e:	481e      	ldr	r0, [pc, #120]	@ (8005418 <httpServerTest_cgiPathFunction+0xc4>)
 80053a0:	f7fc fa76 	bl	8001890 <HAL_GPIO_ReadPin>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10e      	bne.n	80053c8 <httpServerTest_cgiPathFunction+0x74>
		BSP_LED_On(LED1);
 80053aa:	2000      	movs	r0, #0
 80053ac:	f7fb feac 	bl	8001108 <BSP_LED_On>
		BSP_LED_On(LED2);
 80053b0:	2001      	movs	r0, #1
 80053b2:	f7fb fea9 	bl	8001108 <BSP_LED_On>
		BSP_LED_On(LED3);
 80053b6:	2002      	movs	r0, #2
 80053b8:	f7fb fea6 	bl	8001108 <BSP_LED_On>
		BSP_LED_Off(LED4);
 80053bc:	2003      	movs	r0, #3
 80053be:	f7fb febd 	bl	800113c <BSP_LED_Off>
		pStatus=1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	75fb      	strb	r3, [r7, #23]
 80053c6:	e015      	b.n	80053f4 <httpServerTest_cgiPathFunction+0xa0>
	}
	else if(false==HAL_GPIO_ReadPin(LED1_GPIO_PORT,LED1_PIN)){
 80053c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053cc:	4812      	ldr	r0, [pc, #72]	@ (8005418 <httpServerTest_cgiPathFunction+0xc4>)
 80053ce:	f7fc fa5f 	bl	8001890 <HAL_GPIO_ReadPin>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10d      	bne.n	80053f4 <httpServerTest_cgiPathFunction+0xa0>
		BSP_LED_Off(LED1);
 80053d8:	2000      	movs	r0, #0
 80053da:	f7fb feaf 	bl	800113c <BSP_LED_Off>
		BSP_LED_Off(LED2);
 80053de:	2001      	movs	r0, #1
 80053e0:	f7fb feac 	bl	800113c <BSP_LED_Off>
		BSP_LED_Off(LED3);
 80053e4:	2002      	movs	r0, #2
 80053e6:	f7fb fea9 	bl	800113c <BSP_LED_Off>
		BSP_LED_On(LED4);
 80053ea:	2003      	movs	r0, #3
 80053ec:	f7fb fe8c 	bl	8001108 <BSP_LED_On>
		pStatus=0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	75fb      	strb	r3, [r7, #23]
	}
	
	sprintf(replacerBuffer,"{  \"LEDstatus\":  %d }",pStatus);
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	461a      	mov	r2, r3
 80053f8:	4908      	ldr	r1, [pc, #32]	@ (800541c <httpServerTest_cgiPathFunction+0xc8>)
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	f003 fd34 	bl	8008e68 <siprintf>
	return strlen(replacerBuffer);
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f7fa feef 	bl	80001e4 <strlen>
 8005406:	4603      	mov	r3, r0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	200009c0 	.word	0x200009c0
 8005414:	0800b650 	.word	0x0800b650
 8005418:	40020c00 	.word	0x40020c00
 800541c:	0800b678 	.word	0x0800b678

08005420 <http_server_WINC15x0_init>:

//http_server_init for WINC1500 based platforms
int http_server_WINC15x0_init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	@ 0x38
 8005424:	af02      	add	r7, sp, #8
	http_localfs_deinit(); //just in case previous test left it in stale state
 8005426:	f7fd fd67 	bl	8002ef8 <http_localfs_deinit>
	http_localfs_init();
 800542a:	f7fd fcab 	bl	8002d84 <http_localfs_init>

	//register index file to localfs
	int retval = http_localfs_registerFile(path_index_html, (char *)&index_html, index_html_len, 0);
 800542e:	4b43      	ldr	r3, [pc, #268]	@ (800553c <http_server_WINC15x0_init+0x11c>)
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <http_server_WINC15x0_init+0x120>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	4942      	ldr	r1, [pc, #264]	@ (8005544 <http_server_WINC15x0_init+0x124>)
 800543a:	f7fd fcaf 	bl	8002d9c <http_localfs_registerFile>
 800543e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (retval < 0)
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	da05      	bge.n	8005452 <http_server_WINC15x0_init+0x32>
	{
		printf("!! test_http_server(registerFile failed)\r\n");
 8005446:	4840      	ldr	r0, [pc, #256]	@ (8005548 <http_server_WINC15x0_init+0x128>)
 8005448:	f003 fcd2 	bl	8008df0 <puts>
		return -1;
 800544c:	f04f 33ff 	mov.w	r3, #4294967295
 8005450:	e070      	b.n	8005534 <http_server_WINC15x0_init+0x114>
	}
	retval = http_localfs_registerFile(path_timerVal_ssi, (char *)&timerVal_ssi, timerVal_ssi_len, 0);
 8005452:	4b3e      	ldr	r3, [pc, #248]	@ (800554c <http_server_WINC15x0_init+0x12c>)
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	4b3e      	ldr	r3, [pc, #248]	@ (8005550 <http_server_WINC15x0_init+0x130>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	493d      	ldr	r1, [pc, #244]	@ (8005554 <http_server_WINC15x0_init+0x134>)
 800545e:	f7fd fc9d 	bl	8002d9c <http_localfs_registerFile>
 8005462:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (retval < 0)
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005466:	2b00      	cmp	r3, #0
 8005468:	da05      	bge.n	8005476 <http_server_WINC15x0_init+0x56>
	{
		printf("!! test_http_server(registerFile failed for timerVal_ssi)\r\n");
 800546a:	483b      	ldr	r0, [pc, #236]	@ (8005558 <http_server_WINC15x0_init+0x138>)
 800546c:	f003 fcc0 	bl	8008df0 <puts>
		return -1;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	e05e      	b.n	8005534 <http_server_WINC15x0_init+0x114>
	}
	//register local fs fops.
	http_file_fops_t localFSFops;
	http_file_init_fopsStruct(&localFSFops);
 8005476:	f107 030c 	add.w	r3, r7, #12
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd fc5a 	bl	8002d34 <http_file_init_fopsStruct>
	
	localFSFops.fopen = http_localfs_fopen_w;
 8005480:	4b36      	ldr	r3, [pc, #216]	@ (800555c <http_server_WINC15x0_init+0x13c>)
 8005482:	60fb      	str	r3, [r7, #12]
	localFSFops.fclose = http_localfs_fclose_w;
 8005484:	4b36      	ldr	r3, [pc, #216]	@ (8005560 <http_server_WINC15x0_init+0x140>)
 8005486:	613b      	str	r3, [r7, #16]
	localFSFops.fread = http_localfs_fread_w;
 8005488:	4b36      	ldr	r3, [pc, #216]	@ (8005564 <http_server_WINC15x0_init+0x144>)
 800548a:	617b      	str	r3, [r7, #20]
	localFSFops.fgetc = http_localfs_fgetc_w;
 800548c:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <http_server_WINC15x0_init+0x148>)
 800548e:	61bb      	str	r3, [r7, #24]
	localFSFops.fseek = http_localfs_fseek_w;
 8005490:	4b36      	ldr	r3, [pc, #216]	@ (800556c <http_server_WINC15x0_init+0x14c>)
 8005492:	61fb      	str	r3, [r7, #28]
	localFSFops.eof = http_localfs_feof_w;
 8005494:	4b36      	ldr	r3, [pc, #216]	@ (8005570 <http_server_WINC15x0_init+0x150>)
 8005496:	623b      	str	r3, [r7, #32]
	http_file_register_fops(localFSFops);
 8005498:	466a      	mov	r2, sp
 800549a:	f107 031c 	add.w	r3, r7, #28
 800549e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054ac:	f7fd fc50 	bl	8002d50 <http_file_register_fops>

	//register netops
	http_net_netops_t http_WINC_netops;
	http_net_init_netopsStruct(&http_WINC_netops);
 80054b0:	463b      	mov	r3, r7
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fd fe78 	bl	80031a8 <http_net_init_netopsStruct>
	
	http_WINC_netops.http_net_read = http_server_WINC15x0_net_read;
 80054b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005574 <http_server_WINC15x0_init+0x154>)
 80054ba:	603b      	str	r3, [r7, #0]
	http_WINC_netops.http_net_write = http_server_WINC15x0_net_write;
 80054bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005578 <http_server_WINC15x0_init+0x158>)
 80054be:	607b      	str	r3, [r7, #4]
	http_WINC_netops.http_net_disconnect = http_server_WINC15x0_net_disconnect;
 80054c0:	4b2e      	ldr	r3, [pc, #184]	@ (800557c <http_server_WINC15x0_init+0x15c>)
 80054c2:	60bb      	str	r3, [r7, #8]
	httpNetops = http_net_register_netops(http_WINC_netops);
 80054c4:	463b      	mov	r3, r7
 80054c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054ca:	f7fd fe7d 	bl	80031c8 <http_net_register_netops>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005580 <http_server_WINC15x0_init+0x160>)
 80054d2:	6013      	str	r3, [r2, #0]
	
	//now register an SSI string. file has already been registered in fs
	http_SSI_deRegister_all();
 80054d4:	f7fd fadc 	bl	8002a90 <http_SSI_deRegister_all>
	http_SSI_replacer_t *SSIReplacementHandle;
	SSIReplacementHandle = http_SSI_register_replacer("timerVal", http_server_timerVal_SSI_replacer_cb);
 80054d8:	492a      	ldr	r1, [pc, #168]	@ (8005584 <http_server_WINC15x0_init+0x164>)
 80054da:	482b      	ldr	r0, [pc, #172]	@ (8005588 <http_server_WINC15x0_init+0x168>)
 80054dc:	f7fd fa60 	bl	80029a0 <http_SSI_register_replacer>
 80054e0:	62b8      	str	r0, [r7, #40]	@ 0x28
	if (NULL == SSIReplacementHandle)
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <http_server_WINC15x0_init+0xd4>
	{
		printf("http_SSI_register_replacer timerVal failed\r\n");
 80054e8:	4828      	ldr	r0, [pc, #160]	@ (800558c <http_server_WINC15x0_init+0x16c>)
 80054ea:	f003 fc81 	bl	8008df0 <puts>
		return -1;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e01f      	b.n	8005534 <http_server_WINC15x0_init+0x114>
	}
	
	SSIReplacementHandle = http_SSI_register_replacer("timerValCC", http_server_timerValCallCount_SSI_replacer_cb);
 80054f4:	4926      	ldr	r1, [pc, #152]	@ (8005590 <http_server_WINC15x0_init+0x170>)
 80054f6:	4827      	ldr	r0, [pc, #156]	@ (8005594 <http_server_WINC15x0_init+0x174>)
 80054f8:	f7fd fa52 	bl	80029a0 <http_SSI_register_replacer>
 80054fc:	62b8      	str	r0, [r7, #40]	@ 0x28
	if (NULL == SSIReplacementHandle)
 80054fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <http_server_WINC15x0_init+0xf0>
	{
		printf("http_SSI_register_replacer timerValCC failed\r\n");
 8005504:	4824      	ldr	r0, [pc, #144]	@ (8005598 <http_server_WINC15x0_init+0x178>)
 8005506:	f003 fc73 	bl	8008df0 <puts>
		return -1;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	e011      	b.n	8005534 <http_server_WINC15x0_init+0x114>
	}
	
	//now register a CGI path function
	http_CGI_pathFunction_t *cgiPathHandle2;

	cgiPathHandle2 = http_CGI_register_pathFunction(serverTestCGIPath, httpServerTest_cgiPathFunction, HTTP_contentType_json);
 8005510:	4b22      	ldr	r3, [pc, #136]	@ (800559c <http_server_WINC15x0_init+0x17c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2208      	movs	r2, #8
 8005516:	4922      	ldr	r1, [pc, #136]	@ (80055a0 <http_server_WINC15x0_init+0x180>)
 8005518:	4618      	mov	r0, r3
 800551a:	f7fd fb27 	bl	8002b6c <http_CGI_register_pathFunction>
 800551e:	6278      	str	r0, [r7, #36]	@ 0x24
	if (NULL == cgiPathHandle2)
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <http_server_WINC15x0_init+0x112>
	{
		printf("http_CGI_register_pathFunction failed");
 8005526:	481f      	ldr	r0, [pc, #124]	@ (80055a4 <http_server_WINC15x0_init+0x184>)
 8005528:	f003 fbfa 	bl	8008d20 <iprintf>
		return -1;
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	e000      	b.n	8005534 <http_server_WINC15x0_init+0x114>
	}
	
	return 0;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3730      	adds	r7, #48	@ 0x30
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	2000086c 	.word	0x2000086c
 8005540:	20000868 	.word	0x20000868
 8005544:	20000020 	.word	0x20000020
 8005548:	0800b690 	.word	0x0800b690
 800554c:	200009b4 	.word	0x200009b4
 8005550:	200009b0 	.word	0x200009b0
 8005554:	20000870 	.word	0x20000870
 8005558:	0800b6bc 	.word	0x0800b6bc
 800555c:	08005031 	.word	0x08005031
 8005560:	08005049 	.word	0x08005049
 8005564:	08005061 	.word	0x08005061
 8005568:	08005085 	.word	0x08005085
 800556c:	0800509d 	.word	0x0800509d
 8005570:	080050bd 	.word	0x080050bd
 8005574:	08005171 	.word	0x08005171
 8005578:	080051fd 	.word	0x080051fd
 800557c:	08005275 	.word	0x08005275
 8005580:	20000b98 	.word	0x20000b98
 8005584:	08005299 	.word	0x08005299
 8005588:	0800b608 	.word	0x0800b608
 800558c:	0800b6f8 	.word	0x0800b6f8
 8005590:	080052f1 	.word	0x080052f1
 8005594:	0800b644 	.word	0x0800b644
 8005598:	0800b724 	.word	0x0800b724
 800559c:	200009c0 	.word	0x200009c0
 80055a0:	08005355 	.word	0x08005355
 80055a4:	0800b754 	.word	0x0800b754

080055a8 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 80055ae:	2340      	movs	r3, #64	@ 0x40
 80055b0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80055b2:	2301      	movs	r3, #1
 80055b4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4820      	ldr	r0, [pc, #128]	@ (8005648 <init_chip_pins+0xa0>)
 80055c8:	f7fb ffc6 	bl	8001558 <HAL_GPIO_Init>



    GPIO_InitStruct.Pin   = CONF_WINC_PIN_WAKE;
 80055cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055d0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d2:	1d3b      	adds	r3, r7, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	481d      	ldr	r0, [pc, #116]	@ (800564c <init_chip_pins+0xa4>)
 80055d8:	f7fb ffbe 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_POWER_ENABLE;
 80055dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055e0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	481a      	ldr	r0, [pc, #104]	@ (8005650 <init_chip_pins+0xa8>)
 80055e8:	f7fb ffb6 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE;
 80055ec:	2320      	movs	r3, #32
 80055ee:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE, &GPIO_InitStruct);
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4815      	ldr	r0, [pc, #84]	@ (800564c <init_chip_pins+0xa4>)
 80055f6:	f7fb ffaf 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fa:	2301      	movs	r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055fe:	2301      	movs	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 8005602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005606:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4810      	ldr	r0, [pc, #64]	@ (8005650 <init_chip_pins+0xa8>)
 800560e:	f7fb ffa3 	bl	8001558 <HAL_GPIO_Init>
    /* Set INIT value */
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
 8005612:	2200      	movs	r2, #0
 8005614:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005618:	480d      	ldr	r0, [pc, #52]	@ (8005650 <init_chip_pins+0xa8>)
 800561a:	f7fc f951 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
 800561e:	2201      	movs	r2, #1
 8005620:	2120      	movs	r1, #32
 8005622:	480a      	ldr	r0, [pc, #40]	@ (800564c <init_chip_pins+0xa4>)
 8005624:	f7fc f94c 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 8005628:	2201      	movs	r2, #1
 800562a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800562e:	4808      	ldr	r0, [pc, #32]	@ (8005650 <init_chip_pins+0xa8>)
 8005630:	f7fc f946 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 8005634:	2201      	movs	r2, #1
 8005636:	2140      	movs	r1, #64	@ 0x40
 8005638:	4803      	ldr	r0, [pc, #12]	@ (8005648 <init_chip_pins+0xa0>)
 800563a:	f7fc f941 	bl	80018c0 <HAL_GPIO_WritePin>

}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40020800 	.word	0x40020800
 800564c:	40020400 	.word	0x40020400
 8005650:	40020000 	.word	0x40020000

08005654 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 8005658:	f7ff ffa6 	bl	80055a8 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800565c:	f000 f804 	bl	8005668 <nm_bsp_reset>

	return M2M_SUCCESS;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800566c:	2201      	movs	r2, #1
 800566e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005672:	4814      	ldr	r0, [pc, #80]	@ (80056c4 <nm_bsp_reset+0x5c>)
 8005674:	f7fc f924 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005678:	2064      	movs	r0, #100	@ 0x64
 800567a:	f7fb fe05 	bl	8001288 <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800567e:	2200      	movs	r2, #0
 8005680:	2120      	movs	r1, #32
 8005682:	4811      	ldr	r0, [pc, #68]	@ (80056c8 <nm_bsp_reset+0x60>)
 8005684:	f7fc f91c 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005688:	2064      	movs	r0, #100	@ 0x64
 800568a:	f7fb fdfd 	bl	8001288 <HAL_Delay>

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800568e:	2201      	movs	r2, #1
 8005690:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005694:	480b      	ldr	r0, [pc, #44]	@ (80056c4 <nm_bsp_reset+0x5c>)
 8005696:	f7fc f913 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800569a:	2064      	movs	r0, #100	@ 0x64
 800569c:	f7fb fdf4 	bl	8001288 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 80056a0:	2200      	movs	r2, #0
 80056a2:	2140      	movs	r1, #64	@ 0x40
 80056a4:	4809      	ldr	r0, [pc, #36]	@ (80056cc <nm_bsp_reset+0x64>)
 80056a6:	f7fc f90b 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80056aa:	2064      	movs	r0, #100	@ 0x64
 80056ac:	f7fb fdec 	bl	8001288 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 80056b0:	2201      	movs	r2, #1
 80056b2:	2140      	movs	r1, #64	@ 0x40
 80056b4:	4805      	ldr	r0, [pc, #20]	@ (80056cc <nm_bsp_reset+0x64>)
 80056b6:	f7fc f903 	bl	80018c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80056ba:	2064      	movs	r0, #100	@ 0x64
 80056bc:	f7fb fde4 	bl	8001288 <HAL_Delay>

}
 80056c0:	bf00      	nop
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40020000 	.word	0x40020000
 80056c8:	40020400 	.word	0x40020400
 80056cc:	40020800 	.word	0x40020800

080056d0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fb fdd5 	bl	8001288 <HAL_Delay>
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOB_CLK_ENABLE();
 80056f0:	2300      	movs	r3, #0
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <nm_bsp_register_isr+0x58>)
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	4a11      	ldr	r2, [pc, #68]	@ (8005740 <nm_bsp_register_isr+0x58>)
 80056fa:	f043 0302 	orr.w	r3, r3, #2
 80056fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005700:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <nm_bsp_register_isr+0x58>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800570c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8005712:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4619      	mov	r1, r3
 8005722:	4808      	ldr	r0, [pc, #32]	@ (8005744 <nm_bsp_register_isr+0x5c>)
 8005724:	f7fb ff18 	bl	8001558 <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 8005728:	2200      	movs	r2, #0
 800572a:	2100      	movs	r1, #0
 800572c:	2028      	movs	r0, #40	@ 0x28
 800572e:	f7fb fece 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 8005732:	2028      	movs	r0, #40	@ 0x28
 8005734:	f7fb fee7 	bl	8001506 <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 8005738:	bf00      	nop
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40023800 	.word	0x40023800
 8005744:	40020400 	.word	0x40020400

08005748 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d108      	bne.n	800576a <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 8005758:	2200      	movs	r2, #0
 800575a:	2101      	movs	r1, #1
 800575c:	2028      	movs	r0, #40	@ 0x28
 800575e:	f7fb feb6 	bl	80014ce <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8005762:	2028      	movs	r0, #40	@ 0x28
 8005764:	f7fb fecf 	bl	8001506 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 8005768:	e002      	b.n	8005770 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800576a:	2028      	movs	r0, #40	@ 0x28
 800576c:	f7fb fed9 	bl	8001522 <HAL_NVIC_DisableIRQ>
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
    if (select)
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 8005788:	2200      	movs	r2, #0
 800578a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800578e:	4807      	ldr	r0, [pc, #28]	@ (80057ac <spi_select_slave+0x34>)
 8005790:	f7fc f896 	bl	80018c0 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 8005794:	e005      	b.n	80057a2 <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 8005796:	2201      	movs	r2, #1
 8005798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800579c:	4803      	ldr	r0, [pc, #12]	@ (80057ac <spi_select_slave+0x34>)
 800579e:	f7fc f88f 	bl	80018c0 <HAL_GPIO_WritePin>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40020000 	.word	0x40020000

080057b0 <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 80057be:	2001      	movs	r0, #1
 80057c0:	f7ff ffda 	bl	8005778 <spi_select_slave>
    
    
    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057d0:	9200      	str	r2, [sp, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	491a      	ldr	r1, [pc, #104]	@ (8005840 <spi_rw+0x90>)
 80057d6:	481b      	ldr	r0, [pc, #108]	@ (8005844 <spi_rw+0x94>)
 80057d8:	f7fc fdab 	bl	8002332 <HAL_SPI_TransmitReceive>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]
 80057e0:	e01f      	b.n	8005822 <spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d111      	bne.n	800580c <spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057ee:	9200      	str	r2, [sp, #0]
 80057f0:	4a13      	ldr	r2, [pc, #76]	@ (8005840 <spi_rw+0x90>)
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	4813      	ldr	r0, [pc, #76]	@ (8005844 <spi_rw+0x94>)
 80057f6:	f7fc fd9c 	bl	8002332 <HAL_SPI_TransmitReceive>
 80057fa:	4603      	mov	r3, r0
 80057fc:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	461a      	mov	r2, r3
 8005802:	2100      	movs	r1, #0
 8005804:	480e      	ldr	r0, [pc, #56]	@ (8005840 <spi_rw+0x90>)
 8005806:	f003 fc53 	bl	80090b0 <memset>
 800580a:	e00a      	b.n	8005822 <spi_rw+0x72>
    }
    else
    {     
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005812:	9200      	str	r2, [sp, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	480a      	ldr	r0, [pc, #40]	@ (8005844 <spi_rw+0x94>)
 800581a:	f7fc fd8a 	bl	8002332 <HAL_SPI_TransmitReceive>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]
    } 
    
    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <spi_rw+0x7e>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 8005828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800582c:	e003      	b.n	8005836 <spi_rw+0x86>
    }
    
  	spi_select_slave(false);
 800582e:	2000      	movs	r0, #0
 8005830:	f7ff ffa2 	bl	8005778 <spi_select_slave>

	return M2M_SUCCESS;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000bfc 	.word	0x20000bfc
 8005844:	20000ba4 	.word	0x20000ba4

08005848 <nm_bus_wifi_spi_init>:
#endif
#endif //CONF_WINC_USE_SPI

void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* Peripheral clock enable */
    SPI_WIFI_CLK_ENABLE();
 8005850:	2300      	movs	r3, #0
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <nm_bus_wifi_spi_init+0x7c>)
 8005856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005858:	4a1a      	ldr	r2, [pc, #104]	@ (80058c4 <nm_bus_wifi_spi_init+0x7c>)
 800585a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800585e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005860:	4b18      	ldr	r3, [pc, #96]	@ (80058c4 <nm_bus_wifi_spi_init+0x7c>)
 8005862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]

    /* Configure GPIO pin : PA4 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = SPI_WIFI_CS_PIN;
 800586c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005870:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005872:	2301      	movs	r3, #1
 8005874:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8005876:	2301      	movs	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800587a:	2303      	movs	r3, #3
 800587c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_CS_GPIO_PORT, &GPIO_InitStruct);
 8005882:	f107 030c 	add.w	r3, r7, #12
 8005886:	4619      	mov	r1, r3
 8005888:	480f      	ldr	r0, [pc, #60]	@ (80058c8 <nm_bus_wifi_spi_init+0x80>)
 800588a:	f7fb fe65 	bl	8001558 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800588e:	2201      	movs	r2, #1
 8005890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005894:	480c      	ldr	r0, [pc, #48]	@ (80058c8 <nm_bus_wifi_spi_init+0x80>)
 8005896:	f7fc f813 	bl	80018c0 <HAL_GPIO_WritePin>
    /**SPIx GPIO Configuration
    PB3     ------> SPI_WIFI_SCK
    PB4     ------> SPI_WIFI_MISO
    PB5     ------> SPI_WIFI_MOSI
    */
    GPIO_InitStruct.Pin = SPI_WIFI_SCK_PIN|SPI_WIFI_MISO_PIN|SPI_WIFI_MOSI_PIN;
 800589a:	23e0      	movs	r3, #224	@ 0xe0
 800589c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800589e:	2302      	movs	r3, #2
 80058a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058a2:	2302      	movs	r3, #2
 80058a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80058a6:	2303      	movs	r3, #3
 80058a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = SPI3_WIFI_AF;
 80058aa:	2305      	movs	r3, #5
 80058ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80058ae:	f107 030c 	add.w	r3, r7, #12
 80058b2:	4619      	mov	r1, r3
 80058b4:	4804      	ldr	r0, [pc, #16]	@ (80058c8 <nm_bus_wifi_spi_init+0x80>)
 80058b6:	f7fb fe4f 	bl	8001558 <HAL_GPIO_Init>
}
 80058ba:	bf00      	nop
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40020000 	.word	0x40020000

080058cc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */
	printf("nm_bus_wrapper_stm32f407.c:\t\t\tInitializing SPI interface\n");
 80058d8:	481c      	ldr	r0, [pc, #112]	@ (800594c <nm_bus_init+0x80>)
 80058da:	f003 fa89 	bl	8008df0 <puts>
	hspiWifi.Instance			   = SPI_WIFI;
 80058de:	4b1c      	ldr	r3, [pc, #112]	@ (8005950 <nm_bus_init+0x84>)
 80058e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005954 <nm_bus_init+0x88>)
 80058e2:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 80058e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005950 <nm_bus_init+0x84>)
 80058e6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80058ea:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 80058ec:	4b18      	ldr	r3, [pc, #96]	@ (8005950 <nm_bus_init+0x84>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 80058f2:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <nm_bus_init+0x84>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 80058f8:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <nm_bus_init+0x84>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 80058fe:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <nm_bus_init+0x84>)
 8005900:	2200      	movs	r2, #0
 8005902:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 8005904:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <nm_bus_init+0x84>)
 8005906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800590a:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800590c:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <nm_bus_init+0x84>)
 800590e:	2200      	movs	r2, #0
 8005910:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 8005912:	4b0f      	ldr	r3, [pc, #60]	@ (8005950 <nm_bus_init+0x84>)
 8005914:	2200      	movs	r2, #0
 8005916:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 8005918:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <nm_bus_init+0x84>)
 800591a:	2200      	movs	r2, #0
 800591c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <nm_bus_init+0x84>)
 8005920:	2200      	movs	r2, #0
 8005922:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 8005924:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <nm_bus_init+0x84>)
 8005926:	220a      	movs	r2, #10
 8005928:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 800592a:	4809      	ldr	r0, [pc, #36]	@ (8005950 <nm_bus_init+0x84>)
 800592c:	f7fc fc78 	bl	8002220 <HAL_SPI_Init>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
	}

	HAL_SPI_MspInit(&hspiWifi);
 8005930:	4807      	ldr	r0, [pc, #28]	@ (8005950 <nm_bus_init+0x84>)
 8005932:	f7fb fa33 	bl	8000d9c <HAL_SPI_MspInit>


	nm_bsp_reset();
 8005936:	f7ff fe97 	bl	8005668 <nm_bsp_reset>
	nm_bsp_sleep(1);
 800593a:	2001      	movs	r0, #1
 800593c:	f7ff fec8 	bl	80056d0 <nm_bsp_sleep>
	return result;
 8005940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	0800b77c 	.word	0x0800b77c
 8005950:	20000ba4 	.word	0x20000ba4
 8005954:	40013000 	.word	0x40013000

08005958 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d10d      	bne.n	800598a <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6859      	ldr	r1, [r3, #4]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	891b      	ldrh	r3, [r3, #8]
 800597e:	461a      	mov	r2, r3
 8005980:	f7ff ff16 	bl	80057b0 <spi_rw>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8005988:	e002      	b.n	8005990 <nm_bus_ioctl+0x38>
		default:
			s8Ret = -1;
 800598a:	23ff      	movs	r3, #255	@ 0xff
 800598c:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
			break;
 800598e:	bf00      	nop
	}

	return s8Ret;
 8005990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d010      	beq.n	80059e0 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	701a      	strb	r2, [r3, #0]
		pDst++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
		pSrc++;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1ef      	bne.n	80059be <m2m_memcpy+0x12>
 80059de:	e000      	b.n	80059e2 <m2m_memcpy+0x36>
	if(sz == 0) return;
 80059e0:	bf00      	nop
}
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	460b      	mov	r3, r1
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00c      	beq.n	8005a1a <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	7afa      	ldrb	r2, [r7, #11]
 8005a04:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f3      	bne.n	8005a00 <m2m_memset+0x14>
 8005a18:	e000      	b.n	8005a1c <m2m_memset+0x30>
	if(sz == 0) return;
 8005a1a:	bf00      	nop
}
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 8005a32:	e005      	b.n	8005a40 <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 8005a34:	89fb      	ldrh	r3, [r7, #14]
 8005a36:	3301      	adds	r3, #1
 8005a38:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f5      	bne.n	8005a34 <m2m_strlen+0xe>
	}
	return u16StrLen;
 8005a48:	89fb      	ldrh	r3, [r7, #14]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

void isr(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <isr+0x1c>)
 8005a5e:	78db      	ldrb	r3, [r3, #3]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	3301      	adds	r3, #1
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <isr+0x1c>)
 8005a68:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 8005a6a:	bf00      	nop
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	20000d28 	.word	0x20000d28

08005a78 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 8005a82:	4b14      	ldr	r3, [pc, #80]	@ (8005ad4 <hif_set_rx_done+0x5c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8005a88:	2001      	movs	r0, #1
 8005a8a:	f7ff fe5d 	bl	8005748 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 8005a8e:	463b      	mov	r3, r7
 8005a90:	4619      	mov	r1, r3
 8005a92:	f241 0070 	movw	r0, #4208	@ 0x1070
 8005a96:	f001 f99c 	bl	8006dd2 <nm_read_reg_with_ret>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 8005a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10f      	bne.n	8005ac6 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f043 0302 	orr.w	r3, r3, #2
 8005aac:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f241 0070 	movw	r0, #4208	@ 0x1070
 8005ab6:	f001 f99a 	bl	8006dee <nm_write_reg>
 8005aba:	4603      	mov	r3, r0
 8005abc:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 8005abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac2:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 8005ac4:	e000      	b.n	8005ac8 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8005ac6:	bf00      	nop
	return ret;
 8005ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000d28 	.word	0x20000d28

08005ad8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	603a      	str	r2, [r7, #0]
 8005ae2:	71fb      	strb	r3, [r7, #7]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	80bb      	strh	r3, [r7, #4]


}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8005afa:	2300      	movs	r3, #0
 8005afc:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 8005afe:	4b14      	ldr	r3, [pc, #80]	@ (8005b50 <hif_chip_wake+0x5c>)
 8005b00:	789b      	ldrb	r3, [r3, #2]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 8005b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0c:	e01c      	b.n	8005b48 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 8005b0e:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <hif_chip_wake+0x5c>)
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10c      	bne.n	8005b32 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8005b18:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <hif_chip_wake+0x5c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 8005b22:	f000 ff93 	bl	8006a4c <chip_wake>
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 8005b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <hif_chip_wake+0x5c>)
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	4b04      	ldr	r3, [pc, #16]	@ (8005b50 <hif_chip_wake+0x5c>)
 8005b3e:	705a      	strb	r2, [r3, #1]
 8005b40:	e000      	b.n	8005b44 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 8005b42:	bf00      	nop
ERR1:
	return ret;
 8005b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000d28 	.word	0x20000d28

08005b54 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 8005b58:	4b08      	ldr	r3, [pc, #32]	@ (8005b7c <hif_chip_sleep_sc+0x28>)
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d006      	beq.n	8005b70 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 8005b62:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <hif_chip_sleep_sc+0x28>)
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	4b03      	ldr	r3, [pc, #12]	@ (8005b7c <hif_chip_sleep_sc+0x28>)
 8005b6e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20000d28 	.word	0x20000d28

08005b80 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8005b86:	2300      	movs	r3, #0
 8005b88:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 8005b8a:	4b12      	ldr	r3, [pc, #72]	@ (8005bd4 <hif_chip_sleep+0x54>)
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 8005b94:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <hif_chip_sleep+0x54>)
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <hif_chip_sleep+0x54>)
 8005ba0:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <hif_chip_sleep+0x54>)
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8005bac:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <hif_chip_sleep+0x54>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 8005bb6:	f000 fee5 	bl	8006984 <chip_sleep>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 8005bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	e000      	b.n	8005bc8 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 8005bc6:	bf00      	nop
	return ret;
 8005bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000d28 	.word	0x20000d28

08005bd8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 8005be0:	2228      	movs	r2, #40	@ 0x28
 8005be2:	2100      	movs	r1, #0
 8005be4:	4807      	ldr	r0, [pc, #28]	@ (8005c04 <hif_init+0x2c>)
 8005be6:	f7ff ff01 	bl	80059ec <m2m_memset>
	nm_bsp_register_isr(isr);
 8005bea:	4807      	ldr	r0, [pc, #28]	@ (8005c08 <hif_init+0x30>)
 8005bec:	f7ff fd7c 	bl	80056e8 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 8005bf0:	4906      	ldr	r1, [pc, #24]	@ (8005c0c <hif_init+0x34>)
 8005bf2:	2003      	movs	r0, #3
 8005bf4:	f000 faca 	bl	800618c <hif_register_cb>
	return M2M_SUCCESS;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000d28 	.word	0x20000d28
 8005c08:	08005a59 	.word	0x08005a59
 8005c0c:	08005ad9 	.word	0x08005ad9

08005c10 <hif_send>:
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	603a      	str	r2, [r7, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	71fb      	strb	r3, [r7, #7]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	71bb      	strb	r3, [r7, #6]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80bb      	strh	r3, [r7, #4]
    /* temp is 16 bit variable used to read a volatile memory location to
       pass to function/macro, which is not using volatile variable.
       it is done due to IAR warning.
    */
    uint16  temp;
	sint8	ret = M2M_ERR_SEND;
 8005c26:	23ff      	movs	r3, #255	@ 0xff
 8005c28:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 8005c2a:	79bb      	ldrb	r3, [r7, #6]
 8005c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8005c38:	2308      	movs	r3, #8
 8005c3a:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 8005c42:	8b7b      	ldrh	r3, [r7, #26]
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8005c48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005c4a:	440b      	add	r3, r1
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	837b      	strh	r3, [r7, #26]
 8005c54:	e005      	b.n	8005c62 <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 8005c56:	8b7b      	ldrh	r3, [r7, #26]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	88bb      	ldrh	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	837b      	strh	r3, [r7, #26]
	}
	ret = hif_chip_wake();
 8005c62:	f7ff ff47 	bl	8005af4 <hif_chip_wake>
 8005c66:	4603      	mov	r3, r0
 8005c68:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 8005c6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 80e6 	bne.w	8005e40 <hif_send+0x230>
	{
		volatile uint32 reg, dma_addr = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
        temp = (uint16)strHif.u16Length;
 8005c80:	8b7b      	ldrh	r3, [r7, #26]
 8005c82:	83bb      	strh	r3, [r7, #28]
		reg |= (uint32)u8Gid;
 8005c84:	79fa      	ldrb	r2, [r7, #7]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 8005c8c:	79bb      	ldrb	r3, [r7, #6]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)temp<<16);
 8005c96:	8bbb      	ldrh	r3, [r7, #28]
 8005c98:	041a      	lsls	r2, r3, #16
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f241 008c 	movw	r0, #4236	@ 0x108c
 8005ca8:	f001 f8a1 	bl	8006dee <nm_write_reg>
 8005cac:	4603      	mov	r3, r0
 8005cae:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8005cb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 80b7 	bne.w	8005e28 <hif_send+0x218>

		reg = 0UL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f043 0302 	orr.w	r3, r3, #2
 8005cc4:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f241 0078 	movw	r0, #4216	@ 0x1078
 8005cce:	f001 f88e 	bl	8006dee <nm_write_reg>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8005cd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 80a6 	bne.w	8005e2c <hif_send+0x21c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]

		for(cnt = 0; cnt < 1000; cnt ++)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	81fb      	strh	r3, [r7, #14]
 8005ce8:	e02e      	b.n	8005d48 <hif_send+0x138>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f241 0078 	movw	r0, #4216	@ 0x1078
 8005cf4:	f001 f86d 	bl	8006dd2 <nm_read_reg_with_ret>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 8005cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d127      	bne.n	8005d54 <hif_send+0x144>
			/*
			 * If it takes too long to get a response, the slow down to
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 8005d04:	89fb      	ldrh	r3, [r7, #14]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005d0c:	d303      	bcc.n	8005d16 <hif_send+0x106>
				if(cnt < 501) {
 8005d0e:	89fb      	ldrh	r3, [r7, #14]
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
 8005d10:	2001      	movs	r0, #1
 8005d12:	f7ff fcdd 	bl	80056d0 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10e      	bne.n	8005d3e <hif_send+0x12e>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 8005d20:	f107 0310 	add.w	r3, r7, #16
 8005d24:	4619      	mov	r1, r3
 8005d26:	484a      	ldr	r0, [pc, #296]	@ (8005e50 <hif_send+0x240>)
 8005d28:	f001 f853 	bl	8006dd2 <nm_read_reg_with_ret>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 8005d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00f      	beq.n	8005d58 <hif_send+0x148>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	613b      	str	r3, [r7, #16]
					goto ERR1;
 8005d3c:	e07d      	b.n	8005e3a <hif_send+0x22a>
		for(cnt = 0; cnt < 1000; cnt ++)
 8005d3e:	89fb      	ldrh	r3, [r7, #14]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3301      	adds	r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	81fb      	strh	r3, [r7, #14]
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d50:	d3cb      	bcc.n	8005cea <hif_send+0xda>
 8005d52:	e002      	b.n	8005d5a <hif_send+0x14a>
			if(ret != M2M_SUCCESS) break;
 8005d54:	bf00      	nop
 8005d56:	e000      	b.n	8005d5a <hif_send+0x14a>
				}
				/*in case of success break */
                break;
 8005d58:	bf00      	nop
			}
		}
        
		if (dma_addr != 0)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d055      	beq.n	8005e0c <hif_send+0x1fc>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8005d64:	8b7b      	ldrh	r3, [r7, #26]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f107 0118 	add.w	r1, r7, #24
 8005d70:	2208      	movs	r2, #8
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f8b8 	bl	8006ee8 <nm_write_block>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8005d7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d155      	bne.n	8005e30 <hif_send+0x220>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	3308      	adds	r3, #8
 8005d88:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00f      	beq.n	8005db0 <hif_send+0x1a0>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	88ba      	ldrh	r2, [r7, #4]
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 f8a6 	bl	8006ee8 <nm_write_block>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8005da0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d145      	bne.n	8005e34 <hif_send+0x224>
				u32CurrAddr += u16CtrlBufSize;
 8005da8:	88ba      	ldrh	r2, [r7, #4]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4413      	add	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <hif_send+0x1d4>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8005db6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005db8:	88bb      	ldrh	r3, [r7, #4]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 f88c 	bl	8006ee8 <nm_write_block>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8005dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d12d      	bne.n	8005e38 <hif_send+0x228>
				u32CurrAddr += u16DataSize;
 8005ddc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f043 0302 	orr.w	r3, r3, #2
 8005df0:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4619      	mov	r1, r3
 8005df6:	f241 006c 	movw	r0, #4204	@ 0x106c
 8005dfa:	f000 fff8 	bl	8006dee <nm_write_reg>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8005e02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <hif_send+0x20a>
 8005e0a:	e016      	b.n	8005e3a <hif_send+0x22a>
		}
		else
		{
			ret = hif_chip_sleep();
 8005e0c:	f7ff feb8 	bl	8005b80 <hif_chip_sleep>
 8005e10:	4603      	mov	r3, r0
 8005e12:	77fb      	strb	r3, [r7, #31]
			M2M_PRINT("Failed to alloc rx size %d\r\n",ret);
			ret = M2M_ERR_MEM_ALLOC;
 8005e14:	23fd      	movs	r3, #253	@ 0xfd
 8005e16:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 8005e18:	e013      	b.n	8005e42 <hif_send+0x232>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 8005e1a:	f7ff feb1 	bl	8005b80 <hif_chip_sleep>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	77fb      	strb	r3, [r7, #31]
	return ret;
 8005e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e26:	e00e      	b.n	8005e46 <hif_send+0x236>
		if(M2M_SUCCESS != ret) goto ERR1;
 8005e28:	bf00      	nop
 8005e2a:	e006      	b.n	8005e3a <hif_send+0x22a>
		if(M2M_SUCCESS != ret) goto ERR1;
 8005e2c:	bf00      	nop
 8005e2e:	e004      	b.n	8005e3a <hif_send+0x22a>
			if(M2M_SUCCESS != ret) goto ERR1;
 8005e30:	bf00      	nop
 8005e32:	e002      	b.n	8005e3a <hif_send+0x22a>
				if(M2M_SUCCESS != ret) goto ERR1;
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <hif_send+0x22a>
				if(M2M_SUCCESS != ret) goto ERR1;
 8005e38:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 8005e3a:	f7ff fe8b 	bl	8005b54 <hif_chip_sleep_sc>
 8005e3e:	e000      	b.n	8005e42 <hif_send+0x232>
		goto ERR2;
 8005e40:	bf00      	nop
ERR2:
	/*logical error*/
	return ret;
 8005e42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	00150400 	.word	0x00150400

08005e54 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
    uint16 temp;
	sint8 ret = M2M_SUCCESS;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	4619      	mov	r1, r3
 8005e64:	f241 0070 	movw	r0, #4208	@ 0x1070
 8005e68:	f000 ffb3 	bl	8006dd2 <nm_read_reg_with_ret>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]
	if(M2M_SUCCESS == ret)
 8005e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 80f8 	bne.w	800606a <hif_isr+0x216>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 80ef 	beq.w	8006064 <hif_isr+0x210>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
 8005e86:	2000      	movs	r0, #0
 8005e88:	f7ff fc5e 	bl	8005748 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4619      	mov	r1, r3
 8005e98:	f241 0070 	movw	r0, #4208	@ 0x1070
 8005e9c:	f000 ffa7 	bl	8006dee <nm_write_reg>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]
			if(ret != M2M_SUCCESS)goto ERR1;
 8005ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f040 80e0 	bne.w	800606e <hif_isr+0x21a>
			gstrHifCxt.u8HifRXDone = 1;
 8005eae:	4b73      	ldr	r3, [pc, #460]	@ (800607c <hif_isr+0x228>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	089b      	lsrs	r3, r3, #2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebe:	82bb      	strh	r3, [r7, #20]
			if (size > 0) {
 8005ec0:	8abb      	ldrh	r3, [r7, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80cb 	beq.w	800605e <hif_isr+0x20a>
				uint32 address = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	607b      	str	r3, [r7, #4]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f241 0084 	movw	r0, #4228	@ 0x1084
 8005ed4:	f000 ff7d 	bl	8006dd2 <nm_read_reg_with_ret>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	75fb      	strb	r3, [r7, #23]
				if(M2M_SUCCESS != ret)
 8005edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <hif_isr+0x98>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7ff fc2f 	bl	8005748 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 8005eea:	e0c1      	b.n	8006070 <hif_isr+0x21c>
				}
				gstrHifCxt.u32RxAddr = address;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a63      	ldr	r2, [pc, #396]	@ (800607c <hif_isr+0x228>)
 8005ef0:	6053      	str	r3, [r2, #4]
				gstrHifCxt.u32RxSize = size;
 8005ef2:	8abb      	ldrh	r3, [r7, #20]
 8005ef4:	4a61      	ldr	r2, [pc, #388]	@ (800607c <hif_isr+0x228>)
 8005ef6:	6093      	str	r3, [r2, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f107 0108 	add.w	r1, r7, #8
 8005efe:	2204      	movs	r2, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 ff95 	bl	8006e30 <nm_read_block>
 8005f06:	4603      	mov	r3, r0
 8005f08:	75fb      	strb	r3, [r7, #23]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	817b      	strh	r3, [r7, #10]
				if(M2M_SUCCESS != ret)
 8005f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <hif_isr+0xcc>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f7ff fc15 	bl	8005748 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 8005f1e:	e0a7      	b.n	8006070 <hif_isr+0x21c>
				}
				if(strHif.u16Length != size)
 8005f20:	897b      	ldrh	r3, [r7, #10]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8aba      	ldrh	r2, [r7, #20]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d00b      	beq.n	8005f42 <hif_isr+0xee>
				{
					if((size - strHif.u16Length) > 4)
 8005f2a:	8abb      	ldrh	r3, [r7, #20]
 8005f2c:	897a      	ldrh	r2, [r7, #10]
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	dd05      	ble.n	8005f42 <hif_isr+0xee>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
 8005f36:	2001      	movs	r0, #1
 8005f38:	f7ff fc06 	bl	8005748 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
 8005f3c:	23fa      	movs	r3, #250	@ 0xfa
 8005f3e:	75fb      	strb	r3, [r7, #23]
						goto ERR1;
 8005f40:	e096      	b.n	8006070 <hif_isr+0x21c>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8005f42:	7a3b      	ldrb	r3, [r7, #8]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d110      	bne.n	8005f6c <hif_isr+0x118>
				{
					if(gstrHifCxt.pfWifiCb)
 8005f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800607c <hif_isr+0x228>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d078      	beq.n	8006044 <hif_isr+0x1f0>
                    {
                        temp = (uint16)strHif.u16Length;
 8005f52:	897b      	ldrh	r3, [r7, #10]
 8005f54:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8005f56:	4b49      	ldr	r3, [pc, #292]	@ (800607c <hif_isr+0x228>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	7a7a      	ldrb	r2, [r7, #9]
 8005f5c:	b2d0      	uxtb	r0, r2
 8005f5e:	8a7a      	ldrh	r2, [r7, #18]
 8005f60:	3a08      	subs	r2, #8
 8005f62:	b291      	uxth	r1, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	3208      	adds	r2, #8
 8005f68:	4798      	blx	r3
 8005f6a:	e06b      	b.n	8006044 <hif_isr+0x1f0>
					{
						M2M_ERR("WIFI callback is not registered\n");
					}

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8005f6c:	7a3b      	ldrb	r3, [r7, #8]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d110      	bne.n	8005f96 <hif_isr+0x142>
				{
					if(gstrHifCxt.pfIpCb)
 8005f74:	4b41      	ldr	r3, [pc, #260]	@ (800607c <hif_isr+0x228>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d063      	beq.n	8006044 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 8005f7c:	897b      	ldrh	r3, [r7, #10]
 8005f7e:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8005f80:	4b3e      	ldr	r3, [pc, #248]	@ (800607c <hif_isr+0x228>)
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	7a7a      	ldrb	r2, [r7, #9]
 8005f86:	b2d0      	uxtb	r0, r2
 8005f88:	8a7a      	ldrh	r2, [r7, #18]
 8005f8a:	3a08      	subs	r2, #8
 8005f8c:	b291      	uxth	r1, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	3208      	adds	r2, #8
 8005f92:	4798      	blx	r3
 8005f94:	e056      	b.n	8006044 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Scoket callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8005f96:	7a3b      	ldrb	r3, [r7, #8]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d110      	bne.n	8005fc0 <hif_isr+0x16c>
				{
					if(gstrHifCxt.pfOtaCb)
 8005f9e:	4b37      	ldr	r3, [pc, #220]	@ (800607c <hif_isr+0x228>)
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d04e      	beq.n	8006044 <hif_isr+0x1f0>
					{
                            temp = (uint16)strHif.u16Length;
 8005fa6:	897b      	ldrh	r3, [r7, #10]
 8005fa8:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8005faa:	4b34      	ldr	r3, [pc, #208]	@ (800607c <hif_isr+0x228>)
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	7a7a      	ldrb	r2, [r7, #9]
 8005fb0:	b2d0      	uxtb	r0, r2
 8005fb2:	8a7a      	ldrh	r2, [r7, #18]
 8005fb4:	3a08      	subs	r2, #8
 8005fb6:	b291      	uxth	r1, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	3208      	adds	r2, #8
 8005fbc:	4798      	blx	r3
 8005fbe:	e041      	b.n	8006044 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Ota callback is not registered\n");
                    }
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8005fc0:	7a3b      	ldrb	r3, [r7, #8]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b06      	cmp	r3, #6
 8005fc6:	d110      	bne.n	8005fea <hif_isr+0x196>
				{
					if(gstrHifCxt.pfCryptoCb)
 8005fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800607c <hif_isr+0x228>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d039      	beq.n	8006044 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 8005fd0:	897b      	ldrh	r3, [r7, #10]
 8005fd2:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8005fd4:	4b29      	ldr	r3, [pc, #164]	@ (800607c <hif_isr+0x228>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	7a7a      	ldrb	r2, [r7, #9]
 8005fda:	b2d0      	uxtb	r0, r2
 8005fdc:	8a7a      	ldrh	r2, [r7, #18]
 8005fde:	3a08      	subs	r2, #8
 8005fe0:	b291      	uxth	r1, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	3208      	adds	r2, #8
 8005fe6:	4798      	blx	r3
 8005fe8:	e02c      	b.n	8006044 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Crypto callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8005fea:	7a3b      	ldrb	r3, [r7, #8]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	d110      	bne.n	8006014 <hif_isr+0x1c0>
				{
					if(gstrHifCxt.pfSigmaCb)
 8005ff2:	4b22      	ldr	r3, [pc, #136]	@ (800607c <hif_isr+0x228>)
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d024      	beq.n	8006044 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 8005ffa:	897b      	ldrh	r3, [r7, #10]
 8005ffc:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <hif_isr+0x228>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	7a7a      	ldrb	r2, [r7, #9]
 8006004:	b2d0      	uxtb	r0, r2
 8006006:	8a7a      	ldrh	r2, [r7, #18]
 8006008:	3a08      	subs	r2, #8
 800600a:	b291      	uxth	r1, r2
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	3208      	adds	r2, #8
 8006010:	4798      	blx	r3
 8006012:	e017      	b.n	8006044 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Sigma callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8006014:	7a3b      	ldrb	r3, [r7, #8]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b05      	cmp	r3, #5
 800601a:	d110      	bne.n	800603e <hif_isr+0x1ea>
				{
				    if(gstrHifCxt.pfSslCb)
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <hif_isr+0x228>)
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00f      	beq.n	8006044 <hif_isr+0x1f0>
					{
					    temp = (uint16)strHif.u16Length;
 8006024:	897b      	ldrh	r3, [r7, #10]
 8006026:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8006028:	4b14      	ldr	r3, [pc, #80]	@ (800607c <hif_isr+0x228>)
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	7a7a      	ldrb	r2, [r7, #9]
 800602e:	b2d0      	uxtb	r0, r2
 8006030:	8a7a      	ldrh	r2, [r7, #18]
 8006032:	3a08      	subs	r2, #8
 8006034:	b291      	uxth	r1, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	3208      	adds	r2, #8
 800603a:	4798      	blx	r3
 800603c:	e002      	b.n	8006044 <hif_isr+0x1f0>
					}
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
 800603e:	23fa      	movs	r3, #250	@ 0xfa
 8006040:	75fb      	strb	r3, [r7, #23]
					goto ERR1;
 8006042:	e015      	b.n	8006070 <hif_isr+0x21c>
				}
				if(gstrHifCxt.u8HifRXDone)
 8006044:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <hif_isr+0x228>)
 8006046:	789b      	ldrb	r3, [r3, #2]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d010      	beq.n	8006070 <hif_isr+0x21c>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
 800604e:	f7ff fd13 	bl	8005a78 <hif_set_rx_done>
 8006052:	4603      	mov	r3, r0
 8006054:	75fb      	strb	r3, [r7, #23]
					if(ret != M2M_SUCCESS) goto ERR1;
 8006056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	e008      	b.n	8006070 <hif_isr+0x21c>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
 800605e:	23fe      	movs	r3, #254	@ 0xfe
 8006060:	75fb      	strb	r3, [r7, #23]
				goto ERR1;
 8006062:	e005      	b.n	8006070 <hif_isr+0x21c>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
 8006064:	23f4      	movs	r3, #244	@ 0xf4
 8006066:	75fb      	strb	r3, [r7, #23]
			goto ERR1;
 8006068:	e002      	b.n	8006070 <hif_isr+0x21c>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <hif_isr+0x21c>
			if(ret != M2M_SUCCESS)goto ERR1;
 800606e:	bf00      	nop
	}

ERR1:
	return ret;
 8006070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000d28 	.word	0x20000d28

08006080 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8006086:	2300      	movs	r3, #0
 8006088:	71fb      	strb	r3, [r7, #7]
	while (gstrHifCxt.u8Interrupt) {
 800608a:	e00e      	b.n	80060aa <hif_handle_isr+0x2a>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
 800608c:	4b0c      	ldr	r3, [pc, #48]	@ (80060c0 <hif_handle_isr+0x40>)
 800608e:	78db      	ldrb	r3, [r3, #3]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <hif_handle_isr+0x40>)
 8006098:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
 800609a:	f7ff fedb 	bl	8005e54 <hif_isr>
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 80060a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1f7      	bne.n	800609a <hif_handle_isr+0x1a>
	while (gstrHifCxt.u8Interrupt) {
 80060aa:	4b05      	ldr	r3, [pc, #20]	@ (80060c0 <hif_handle_isr+0x40>)
 80060ac:	78db      	ldrb	r3, [r3, #3]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1eb      	bne.n	800608c <hif_handle_isr+0xc>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
 80060b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000d28 	.word	0x20000d28

080060c4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4611      	mov	r1, r2
 80060d0:	461a      	mov	r2, r3
 80060d2:	460b      	mov	r3, r1
 80060d4:	80fb      	strh	r3, [r7, #6]
 80060d6:	4613      	mov	r3, r2
 80060d8:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 80060da:	2300      	movs	r3, #0
 80060dc:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <hif_receive+0x2c>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <hif_receive+0x2c>
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <hif_receive+0x42>
	{
		if(isDone)
 80060f0:	797b      	ldrb	r3, [r7, #5]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d004      	beq.n	8006100 <hif_receive+0x3c>
		{
			/* set RX done */
			ret = hif_set_rx_done();
 80060f6:	f7ff fcbf 	bl	8005a78 <hif_set_rx_done>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 80060fe:	e03d      	b.n	800617c <hif_receive+0xb8>
			ret = M2M_ERR_FAIL;
 8006100:	23f4      	movs	r3, #244	@ 0xf4
 8006102:	75fb      	strb	r3, [r7, #23]
		goto ERR1;
 8006104:	e03a      	b.n	800617c <hif_receive+0xb8>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	4b1f      	ldr	r3, [pc, #124]	@ (8006188 <hif_receive+0xc4>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	d902      	bls.n	8006116 <hif_receive+0x52>
	{
		ret = M2M_ERR_FAIL;
 8006110:	23f4      	movs	r3, #244	@ 0xf4
 8006112:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
 8006114:	e032      	b.n	800617c <hif_receive+0xb8>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 8006116:	4b1c      	ldr	r3, [pc, #112]	@ (8006188 <hif_receive+0xc4>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	429a      	cmp	r2, r3
 800611e:	d309      	bcc.n	8006134 <hif_receive+0x70>
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	441a      	add	r2, r3
 8006126:	4b18      	ldr	r3, [pc, #96]	@ (8006188 <hif_receive+0xc4>)
 8006128:	6859      	ldr	r1, [r3, #4]
 800612a:	4b17      	ldr	r3, [pc, #92]	@ (8006188 <hif_receive+0xc4>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	440b      	add	r3, r1
 8006130:	429a      	cmp	r2, r3
 8006132:	d902      	bls.n	800613a <hif_receive+0x76>
	{
		ret = M2M_ERR_FAIL;
 8006134:	23f4      	movs	r3, #244	@ 0xf4
 8006136:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
 8006138:	e020      	b.n	800617c <hif_receive+0xb8>
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	461a      	mov	r2, r3
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fe75 	bl	8006e30 <nm_read_block>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800614a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d111      	bne.n	8006176 <hif_receive+0xb2>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 8006152:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <hif_receive+0xc4>)
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4b0c      	ldr	r3, [pc, #48]	@ (8006188 <hif_receive+0xc4>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	441a      	add	r2, r3
 800615c:	88f9      	ldrh	r1, [r7, #6]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	440b      	add	r3, r1
 8006162:	429a      	cmp	r2, r3
 8006164:	d002      	beq.n	800616c <hif_receive+0xa8>
 8006166:	797b      	ldrb	r3, [r7, #5]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <hif_receive+0xb6>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800616c:	f7ff fc84 	bl	8005a78 <hif_set_rx_done>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]
 8006174:	e002      	b.n	800617c <hif_receive+0xb8>
	if(ret != M2M_SUCCESS)goto ERR1;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <hif_receive+0xb8>
	}

ERR1:
 800617a:	bf00      	nop
	return ret;
 800617c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000d28 	.word	0x20000d28

0800618c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	3b01      	subs	r3, #1
 80061a0:	2b06      	cmp	r3, #6
 80061a2:	d82d      	bhi.n	8006200 <hif_register_cb+0x74>
 80061a4:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <hif_register_cb+0x20>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080061d1 	.word	0x080061d1
 80061b0:	080061c9 	.word	0x080061c9
 80061b4:	080061e1 	.word	0x080061e1
 80061b8:	080061d9 	.word	0x080061d9
 80061bc:	080061f9 	.word	0x080061f9
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061f1 	.word	0x080061f1
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 80061c8:	4a13      	ldr	r2, [pc, #76]	@ (8006218 <hif_register_cb+0x8c>)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6113      	str	r3, [r2, #16]
			break;
 80061ce:	e01a      	b.n	8006206 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 80061d0:	4a11      	ldr	r2, [pc, #68]	@ (8006218 <hif_register_cb+0x8c>)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	60d3      	str	r3, [r2, #12]
			break;
 80061d6:	e016      	b.n	8006206 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 80061d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006218 <hif_register_cb+0x8c>)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6153      	str	r3, [r2, #20]
			break;
 80061de:	e012      	b.n	8006206 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 80061e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006218 <hif_register_cb+0x8c>)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	61d3      	str	r3, [r2, #28]
			break;
 80061e6:	e00e      	b.n	8006206 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 80061e8:	4a0b      	ldr	r2, [pc, #44]	@ (8006218 <hif_register_cb+0x8c>)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6213      	str	r3, [r2, #32]
			break;
 80061ee:	e00a      	b.n	8006206 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 80061f0:	4a09      	ldr	r2, [pc, #36]	@ (8006218 <hif_register_cb+0x8c>)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6193      	str	r3, [r2, #24]
			break;
 80061f6:	e006      	b.n	8006206 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 80061f8:	4a07      	ldr	r2, [pc, #28]	@ (8006218 <hif_register_cb+0x8c>)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 80061fe:	e002      	b.n	8006206 <hif_register_cb+0x7a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
 8006200:	23f4      	movs	r3, #244	@ 0xf4
 8006202:	73fb      	strb	r3, [r7, #15]
			break;
 8006204:	bf00      	nop
	}
	return ret;
 8006206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000d28 	.word	0x20000d28

0800621c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b0aa      	sub	sp, #168	@ 0xa8
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	603a      	str	r2, [r7, #0]
 8006226:	71fb      	strb	r3, [r7, #7]
 8006228:	460b      	mov	r3, r1
 800622a:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	2b2c      	cmp	r3, #44	@ 0x2c
 8006230:	d117      	bne.n	8006262 <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 8006232:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8006236:	2300      	movs	r3, #0
 8006238:	2204      	movs	r2, #4
 800623a:	6838      	ldr	r0, [r7, #0]
 800623c:	f7ff ff42 	bl	80060c4 <hif_receive>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 816a 	bne.w	800651c <m2m_wifi_cb+0x300>
		{
			if (gpfAppWifiCb)
 8006248:	4b9f      	ldr	r3, [pc, #636]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8165 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 8006252:	4b9d      	ldr	r3, [pc, #628]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800625a:	4611      	mov	r1, r2
 800625c:	202c      	movs	r0, #44	@ 0x2c
 800625e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
 8006260:	e15c      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b1b      	cmp	r3, #27
 8006266:	d117      	bne.n	8006298 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 8006268:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 800626c:	2300      	movs	r3, #0
 800626e:	2208      	movs	r2, #8
 8006270:	6838      	ldr	r0, [r7, #0]
 8006272:	f7ff ff27 	bl	80060c4 <hif_receive>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 814f 	bne.w	800651c <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800627e:	4b92      	ldr	r3, [pc, #584]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 814a 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 8006288:	4b8f      	ldr	r3, [pc, #572]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8006290:	4611      	mov	r1, r2
 8006292:	201b      	movs	r0, #27
 8006294:	4798      	blx	r3
}
 8006296:	e141      	b.n	800651c <m2m_wifi_cb+0x300>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b06      	cmp	r3, #6
 800629c:	d117      	bne.n	80062ce <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800629e:	f107 0108 	add.w	r1, r7, #8
 80062a2:	2301      	movs	r3, #1
 80062a4:	2230      	movs	r2, #48	@ 0x30
 80062a6:	6838      	ldr	r0, [r7, #0]
 80062a8:	f7ff ff0c 	bl	80060c4 <hif_receive>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f040 8134 	bne.w	800651c <m2m_wifi_cb+0x300>
			if(gpfAppWifiCb)
 80062b4:	4b84      	ldr	r3, [pc, #528]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 812f 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 80062be:	4b82      	ldr	r3, [pc, #520]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f107 0208 	add.w	r2, r7, #8
 80062c6:	4611      	mov	r1, r2
 80062c8:	2006      	movs	r0, #6
 80062ca:	4798      	blx	r3
}
 80062cc:	e126      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	2b0e      	cmp	r3, #14
 80062d2:	f000 8123 	beq.w	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	2b32      	cmp	r3, #50	@ 0x32
 80062da:	d117      	bne.n	800630c <m2m_wifi_cb+0xf0>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 80062dc:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80062e0:	2300      	movs	r3, #0
 80062e2:	2214      	movs	r2, #20
 80062e4:	6838      	ldr	r0, [r7, #0]
 80062e6:	f7ff feed 	bl	80060c4 <hif_receive>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 8115 	bne.w	800651c <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 80062f2:	4b75      	ldr	r3, [pc, #468]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8110 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 80062fc:	4b72      	ldr	r3, [pc, #456]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8006304:	4611      	mov	r1, r2
 8006306:	2032      	movs	r0, #50	@ 0x32
 8006308:	4798      	blx	r3
}
 800630a:	e107      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006310:	d11e      	bne.n	8006350 <m2m_wifi_cb+0x134>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
 8006312:	f107 0308 	add.w	r3, r7, #8
 8006316:	2264      	movs	r2, #100	@ 0x64
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fb66 	bl	80059ec <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 8006320:	f107 0108 	add.w	r1, r7, #8
 8006324:	2300      	movs	r3, #0
 8006326:	2264      	movs	r2, #100	@ 0x64
 8006328:	6838      	ldr	r0, [r7, #0]
 800632a:	f7ff fecb 	bl	80060c4 <hif_receive>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f040 80f3 	bne.w	800651c <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 8006336:	4b64      	ldr	r3, [pc, #400]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80ee 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 8006340:	4b61      	ldr	r3, [pc, #388]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f107 0208 	add.w	r2, r7, #8
 8006348:	4611      	mov	r1, r2
 800634a:	202f      	movs	r0, #47	@ 0x2f
 800634c:	4798      	blx	r3
}
 800634e:	e0e5      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	2b34      	cmp	r3, #52	@ 0x34
 8006354:	d115      	bne.n	8006382 <m2m_wifi_cb+0x166>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 8006356:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800635a:	2300      	movs	r3, #0
 800635c:	2204      	movs	r2, #4
 800635e:	6838      	ldr	r0, [r7, #0]
 8006360:	f7ff feb0 	bl	80060c4 <hif_receive>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 80d8 	bne.w	800651c <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800636c:	4b56      	ldr	r3, [pc, #344]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80d3 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 8006376:	4b54      	ldr	r3, [pc, #336]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2100      	movs	r1, #0
 800637c:	2034      	movs	r0, #52	@ 0x34
 800637e:	4798      	blx	r3
}
 8006380:	e0cc      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	2b11      	cmp	r3, #17
 8006386:	d11e      	bne.n	80063c6 <m2m_wifi_cb+0x1aa>
		gu8scanInProgress = 0;
 8006388:	4b50      	ldr	r3, [pc, #320]	@ (80064cc <m2m_wifi_cb+0x2b0>)
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800638e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8006392:	2300      	movs	r3, #0
 8006394:	2204      	movs	r2, #4
 8006396:	6838      	ldr	r0, [r7, #0]
 8006398:	f7ff fe94 	bl	80060c4 <hif_receive>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 80bc 	bne.w	800651c <m2m_wifi_cb+0x300>
			gu8ChNum = strState.u8NumofCh;
 80063a4:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 80063a8:	4b49      	ldr	r3, [pc, #292]	@ (80064d0 <m2m_wifi_cb+0x2b4>)
 80063aa:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
 80063ac:	4b46      	ldr	r3, [pc, #280]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 80b3 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 80063b6:	4b44      	ldr	r3, [pc, #272]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80063be:	4611      	mov	r1, r2
 80063c0:	2011      	movs	r0, #17
 80063c2:	4798      	blx	r3
}
 80063c4:	e0aa      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b13      	cmp	r3, #19
 80063ca:	d117      	bne.n	80063fc <m2m_wifi_cb+0x1e0>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 80063cc:	f107 0108 	add.w	r1, r7, #8
 80063d0:	2300      	movs	r3, #0
 80063d2:	222c      	movs	r2, #44	@ 0x2c
 80063d4:	6838      	ldr	r0, [r7, #0]
 80063d6:	f7ff fe75 	bl	80060c4 <hif_receive>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 809d 	bne.w	800651c <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 80063e2:	4b39      	ldr	r3, [pc, #228]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8098 	beq.w	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 80063ec:	4b36      	ldr	r3, [pc, #216]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f107 0208 	add.w	r2, r7, #8
 80063f4:	4611      	mov	r1, r2
 80063f6:	2013      	movs	r0, #19
 80063f8:	4798      	blx	r3
}
 80063fa:	e08f      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d116      	bne.n	8006430 <m2m_wifi_cb+0x214>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 8006402:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8006406:	2300      	movs	r3, #0
 8006408:	2204      	movs	r2, #4
 800640a:	6838      	ldr	r0, [r7, #0]
 800640c:	f7ff fe5a 	bl	80060c4 <hif_receive>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	f040 8082 	bne.w	800651c <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 8006418:	4b2b      	ldr	r3, [pc, #172]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d07d      	beq.n	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 8006420:	4b29      	ldr	r3, [pc, #164]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8006428:	4611      	mov	r1, r2
 800642a:	2004      	movs	r0, #4
 800642c:	4798      	blx	r3
}
 800642e:	e075      	b.n	800651c <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	2b65      	cmp	r3, #101	@ 0x65
 8006434:	d115      	bne.n	8006462 <m2m_wifi_cb+0x246>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 8006436:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800643a:	2300      	movs	r3, #0
 800643c:	2204      	movs	r2, #4
 800643e:	6838      	ldr	r0, [r7, #0]
 8006440:	f7ff fe40 	bl	80060c4 <hif_receive>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d168      	bne.n	800651c <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800644a:	4b1f      	ldr	r3, [pc, #124]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d064      	beq.n	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 8006452:	4b1d      	ldr	r3, [pc, #116]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800645a:	4611      	mov	r1, r2
 800645c:	2065      	movs	r0, #101	@ 0x65
 800645e:	4798      	blx	r3
}
 8006460:	e05c      	b.n	800651c <m2m_wifi_cb+0x300>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	2b09      	cmp	r3, #9
 8006466:	d115      	bne.n	8006494 <m2m_wifi_cb+0x278>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 8006468:	f107 0108 	add.w	r1, r7, #8
 800646c:	2301      	movs	r3, #1
 800646e:	2264      	movs	r2, #100	@ 0x64
 8006470:	6838      	ldr	r0, [r7, #0]
 8006472:	f7ff fe27 	bl	80060c4 <hif_receive>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d14f      	bne.n	800651c <m2m_wifi_cb+0x300>
			if(gpfAppWifiCb)
 800647c:	4b12      	ldr	r3, [pc, #72]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d04b      	beq.n	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 8006484:	4b10      	ldr	r3, [pc, #64]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f107 0208 	add.w	r2, r7, #8
 800648c:	4611      	mov	r1, r2
 800648e:	2009      	movs	r0, #9
 8006490:	4798      	blx	r3
}
 8006492:	e043      	b.n	800651c <m2m_wifi_cb+0x300>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b2a      	cmp	r3, #42	@ 0x2a
 8006498:	d11c      	bne.n	80064d4 <m2m_wifi_cb+0x2b8>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800649a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800649e:	2301      	movs	r3, #1
 80064a0:	2204      	movs	r2, #4
 80064a2:	6838      	ldr	r0, [r7, #0]
 80064a4:	f7ff fe0e 	bl	80060c4 <hif_receive>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d136      	bne.n	800651c <m2m_wifi_cb+0x300>
			if(gpfAppWifiCb)
 80064ae:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d032      	beq.n	800651c <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 80064b6:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <m2m_wifi_cb+0x2ac>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80064be:	4611      	mov	r1, r2
 80064c0:	202a      	movs	r0, #42	@ 0x2a
 80064c2:	4798      	blx	r3
}
 80064c4:	e02a      	b.n	800651c <m2m_wifi_cb+0x300>
 80064c6:	bf00      	nop
 80064c8:	20000d54 	.word	0x20000d54
 80064cc:	20000d51 	.word	0x20000d51
 80064d0:	20000d50 	.word	0x20000d50
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d120      	bne.n	800651c <m2m_wifi_cb+0x300>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 80064da:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80064de:	2300      	movs	r3, #0
 80064e0:	2208      	movs	r2, #8
 80064e2:	6838      	ldr	r0, [r7, #0]
 80064e4:	f7ff fdee 	bl	80060c4 <hif_receive>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d116      	bne.n	800651c <m2m_wifi_cb+0x300>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f103 0008 	add.w	r0, r3, #8
 80064f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80064f6:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 80064fa:	2301      	movs	r3, #1
 80064fc:	f7ff fde2 	bl	80060c4 <hif_receive>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <m2m_wifi_cb+0x300>
				if(gpfAppWifiCb)
 8006506:	4b07      	ldr	r3, [pc, #28]	@ (8006524 <m2m_wifi_cb+0x308>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <m2m_wifi_cb+0x300>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 800650e:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <m2m_wifi_cb+0x308>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8006516:	4611      	mov	r1, r2
 8006518:	2020      	movs	r0, #32
 800651a:	4798      	blx	r3
}
 800651c:	bf00      	nop
 800651e:	37a8      	adds	r7, #168	@ 0xa8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000d54 	.word	0x20000d54

08006528 <m2m_validate_ap_parameters>:
_EXIT0:
	return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
	/* Check for incoming pointer */
	if(pstrM2MAPConfig == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <m2m_validate_ap_parameters+0x18>
	{
		M2M_ERR("INVALID POINTER\n");
		s8Ret = M2M_ERR_FAIL;
 800653a:	23f4      	movs	r3, #244	@ 0xf4
 800653c:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800653e:	e07c      	b.n	800663a <m2m_validate_ap_parameters+0x112>
	}
	/* Check for SSID */
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff fa6f 	bl	8005a26 <m2m_strlen>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d006      	beq.n	800655c <m2m_validate_ap_parameters+0x34>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fa68 	bl	8005a26 <m2m_strlen>
 8006556:	4603      	mov	r3, r0
 8006558:	2b20      	cmp	r3, #32
 800655a:	d902      	bls.n	8006562 <m2m_validate_ap_parameters+0x3a>
	{
		M2M_ERR("INVALID SSID\n");
		s8Ret = M2M_ERR_FAIL;
 800655c:	23f4      	movs	r3, #244	@ 0xf4
 800655e:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 8006560:	e06b      	b.n	800663a <m2m_validate_ap_parameters+0x112>
	}
	/* Check for Channel */
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006568:	2b0e      	cmp	r3, #14
 800656a:	d804      	bhi.n	8006576 <m2m_validate_ap_parameters+0x4e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <m2m_validate_ap_parameters+0x54>
	{
		M2M_ERR("INVALID CH\n");
		s8Ret = M2M_ERR_FAIL;
 8006576:	23f4      	movs	r3, #244	@ 0xf4
 8006578:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800657a:	e05e      	b.n	800663a <m2m_validate_ap_parameters+0x112>
	}
	/* Check for DHCP Server IP address */
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <m2m_validate_ap_parameters+0x78>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800658c:	2b00      	cmp	r3, #0
 800658e:	d107      	bne.n	80065a0 <m2m_validate_ap_parameters+0x78>
	{
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <m2m_validate_ap_parameters+0x78>
		{
			M2M_ERR("INVALID DHCP SERVER IP\n");
			s8Ret = M2M_ERR_FAIL;
 800659a:	23f4      	movs	r3, #244	@ 0xf4
 800659c:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800659e:	e04c      	b.n	800663a <m2m_validate_ap_parameters+0x112>
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d046      	beq.n	8006638 <m2m_validate_ap_parameters+0x110>
	{
		goto ERR1;
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d12c      	bne.n	800660e <m2m_validate_ap_parameters+0xe6>
	{
		/* Check for WEP Key index */
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <m2m_validate_ap_parameters+0xa0>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d902      	bls.n	80065ce <m2m_validate_ap_parameters+0xa6>
		{
			M2M_ERR("INVALID KEY INDEX\n");
			s8Ret = M2M_ERR_FAIL;
 80065c8:	23f4      	movs	r3, #244	@ 0xf4
 80065ca:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 80065cc:	e035      	b.n	800663a <m2m_validate_ap_parameters+0x112>
		}
		/* Check for WEP Key size */
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80065d4:	2b0a      	cmp	r3, #10
 80065d6:	d007      	beq.n	80065e8 <m2m_validate_ap_parameters+0xc0>
			(pstrM2MAPConfig->u8KeySz != WEP_104_KEY_STRING_SIZE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
 80065de:	2b1a      	cmp	r3, #26
 80065e0:	d002      	beq.n	80065e8 <m2m_validate_ap_parameters+0xc0>
		)
		{
			M2M_ERR("INVALID KEY STRING SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 80065e2:	23f4      	movs	r3, #244	@ 0xf4
 80065e4:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 80065e6:	e028      	b.n	800663a <m2m_validate_ap_parameters+0x112>
		}

		if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3324      	adds	r3, #36	@ 0x24
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fa1a 	bl	8005a26 <m2m_strlen>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <m2m_validate_ap_parameters+0xe0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3324      	adds	r3, #36	@ 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fa12 	bl	8005a26 <m2m_strlen>
 8006602:	4603      	mov	r3, r0
 8006604:	2b1a      	cmp	r3, #26
 8006606:	d918      	bls.n	800663a <m2m_validate_ap_parameters+0x112>
		{
			M2M_ERR("INVALID KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 8006608:	23f4      	movs	r3, #244	@ 0xf4
 800660a:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800660c:	e015      	b.n	800663a <m2m_validate_ap_parameters+0x112>
		}
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WPA_PSK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006614:	2b02      	cmp	r3, #2
 8006616:	d10c      	bne.n	8006632 <m2m_validate_ap_parameters+0x10a>
	{
		/* Check for WPA Key size */
		if(	((pstrM2MAPConfig->u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPConfig->u8KeySz + 1) > M2M_MAX_PSK_LEN))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800661e:	2b07      	cmp	r3, #7
 8006620:	d904      	bls.n	800662c <m2m_validate_ap_parameters+0x104>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	d906      	bls.n	800663a <m2m_validate_ap_parameters+0x112>
		{
			M2M_ERR("INVALID WPA KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 800662c:	23f4      	movs	r3, #244	@ 0xf4
 800662e:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 8006630:	e003      	b.n	800663a <m2m_validate_ap_parameters+0x112>
		}
	}
	else
	{
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
		s8Ret = M2M_ERR_FAIL;
 8006632:	23f4      	movs	r3, #244	@ 0xf4
 8006634:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 8006636:	e000      	b.n	800663a <m2m_validate_ap_parameters+0x112>
		goto ERR1;
 8006638:	bf00      	nop
	}

ERR1:
	return s8Ret;
 800663a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CRL | (uint8)M2M_REQ_DATA_PKT), NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b090      	sub	sp, #64	@ 0x40
 800664c:	af02      	add	r7, sp, #8
 800664e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 8006656:	2301      	movs	r3, #1
 8006658:	72fb      	strb	r3, [r7, #11]

	if(param == NULL) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
 8006660:	23f4      	movs	r3, #244	@ 0xf4
 8006662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		goto _EXIT0;
 8006666:	e059      	b.n	800671c <m2m_wifi_init+0xd4>
	}

	gpfAppWifiCb = param->pfAppWifiCb;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a2e      	ldr	r2, [pc, #184]	@ (8006728 <m2m_wifi_init+0xe0>)
 800666e:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
 8006670:	4b2e      	ldr	r3, [pc, #184]	@ (800672c <m2m_wifi_init+0xe4>)
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
 8006676:	f107 030b 	add.w	r3, r7, #11
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fd1e 	bl	80070bc <nm_drv_init>
 8006680:	4603      	mov	r3, r0
 8006682:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 8006686:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800668a:	2b00      	cmp	r3, #0
 800668c:	d145      	bne.n	800671a <m2m_wifi_init+0xd2>
	/* Initialize host interface module */
	ret = hif_init(NULL);
 800668e:	2000      	movs	r0, #0
 8006690:	f7ff faa2 	bl	8005bd8 <hif_init>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800669a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d136      	bne.n	8006710 <m2m_wifi_init+0xc8>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
 80066a2:	4923      	ldr	r1, [pc, #140]	@ (8006730 <m2m_wifi_init+0xe8>)
 80066a4:	2001      	movs	r0, #1
 80066a6:	f7ff fd71 	bl	800618c <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fc64 	bl	8006f7c <nm_get_firmware_full_info>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	printf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 80066ba:	7c3b      	ldrb	r3, [r7, #16]
 80066bc:	4619      	mov	r1, r3
 80066be:	7c7b      	ldrb	r3, [r7, #17]
 80066c0:	461a      	mov	r2, r3
 80066c2:	7cbb      	ldrb	r3, [r7, #18]
 80066c4:	4618      	mov	r0, r3
 80066c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	4603      	mov	r3, r0
 80066cc:	4819      	ldr	r0, [pc, #100]	@ (8006734 <m2m_wifi_init+0xec>)
 80066ce:	f002 fb27 	bl	8008d20 <iprintf>
	printf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 80066d2:	f107 030c 	add.w	r3, r7, #12
 80066d6:	f103 0216 	add.w	r2, r3, #22
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	330a      	adds	r3, #10
 80066e0:	4619      	mov	r1, r3
 80066e2:	4815      	ldr	r0, [pc, #84]	@ (8006738 <m2m_wifi_init+0xf0>)
 80066e4:	f002 fb1c 	bl	8008d20 <iprintf>
	printf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	4619      	mov	r1, r3
 80066ec:	7d3b      	ldrb	r3, [r7, #20]
 80066ee:	461a      	mov	r2, r3
 80066f0:	7d7b      	ldrb	r3, [r7, #21]
 80066f2:	4812      	ldr	r0, [pc, #72]	@ (800673c <m2m_wifi_init+0xf4>)
 80066f4:	f002 fb14 	bl	8008d20 <iprintf>
	printf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 80066f8:	2304      	movs	r3, #4
 80066fa:	2205      	movs	r2, #5
 80066fc:	2113      	movs	r1, #19
 80066fe:	4810      	ldr	r0, [pc, #64]	@ (8006740 <m2m_wifi_init+0xf8>)
 8006700:	f002 fb0e 	bl	8008d20 <iprintf>
	printf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 8006704:	4a0f      	ldr	r2, [pc, #60]	@ (8006744 <m2m_wifi_init+0xfc>)
 8006706:	4910      	ldr	r1, [pc, #64]	@ (8006748 <m2m_wifi_init+0x100>)
 8006708:	4810      	ldr	r0, [pc, #64]	@ (800674c <m2m_wifi_init+0x104>)
 800670a:	f002 fb09 	bl	8008d20 <iprintf>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
 800670e:	e005      	b.n	800671c <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 8006710:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
 8006712:	2000      	movs	r0, #0
 8006714:	f000 fd30 	bl	8007178 <nm_drv_deinit>
 8006718:	e000      	b.n	800671c <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800671a:	bf00      	nop
_EXIT0:
	return ret;
 800671c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8006720:	4618      	mov	r0, r3
 8006722:	3738      	adds	r7, #56	@ 0x38
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20000d54 	.word	0x20000d54
 800672c:	20000d51 	.word	0x20000d51
 8006730:	0800621d 	.word	0x0800621d
 8006734:	0800b7b8 	.word	0x0800b7b8
 8006738:	0800b7e0 	.word	0x0800b7e0
 800673c:	0800b7fc 	.word	0x0800b7fc
 8006740:	0800b820 	.word	0x0800b820
 8006744:	0800b838 	.word	0x0800b838
 8006748:	0800b844 	.word	0x0800b844
 800674c:	0800b850 	.word	0x0800b850

08006750 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
 8006758:	f7ff fc92 	bl	8006080 <hif_handle_isr>
 800675c:	4603      	mov	r3, r0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <m2m_wifi_enable_ap>:
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_P2P, NULL, 0, NULL, 0, 0);
	return ret;
}
sint8 m2m_wifi_enable_ap(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b088      	sub	sp, #32
 800676a:	af04      	add	r7, sp, #16
 800676c:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_ERR_FAIL;
 800676e:	23f4      	movs	r3, #244	@ 0xf4
 8006770:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrM2MAPConfig))
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fed8 	bl	8006528 <m2m_validate_ap_parameters>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10d      	bne.n	800679a <m2m_wifi_enable_ap+0x34>
	{
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_AP, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig), NULL, 0, 0);
 800677e:	2300      	movs	r3, #0
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	2300      	movs	r3, #0
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	2300      	movs	r3, #0
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	2388      	movs	r3, #136	@ 0x88
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	2146      	movs	r1, #70	@ 0x46
 8006790:	2001      	movs	r0, #1
 8006792:	f7ff fa3d 	bl	8005c10 <hif_send>
 8006796:	4603      	mov	r3, r0
 8006798:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800679a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 80067be:	6939      	ldr	r1, [r7, #16]
 80067c0:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 80067c4:	f000 fb13 	bl	8006dee <nm_write_reg>
		if(val32 != 0) {
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d013      	beq.n	80067f6 <chip_apply_conf+0x50>
			uint32 reg = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 80067d2:	f107 030c 	add.w	r3, r7, #12
 80067d6:	4619      	mov	r1, r3
 80067d8:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 80067dc:	f000 faf9 	bl	8006dd2 <nm_read_reg_with_ret>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 80067e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e8      	bne.n	80067be <chip_apply_conf+0x18>
				if(reg == val32)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d002      	beq.n	80067fa <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 80067f4:	e7e3      	b.n	80067be <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <chip_apply_conf+0x56>
					break;
 80067fa:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 8006810:	2300      	movs	r3, #0
 8006812:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 8006814:	463b      	mov	r3, r7
 8006816:	4619      	mov	r1, r3
 8006818:	f241 4008 	movw	r0, #5128	@ 0x1408
 800681c:	f000 fad9 	bl	8006dd2 <nm_read_reg_with_ret>
 8006820:	4603      	mov	r3, r0
 8006822:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 8006824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d12b      	bne.n	8006884 <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006832:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	4619      	mov	r1, r3
 8006838:	f241 4008 	movw	r0, #5128	@ 0x1408
 800683c:	f000 fad7 	bl	8006dee <nm_write_reg>
 8006840:	4603      	mov	r3, r0
 8006842:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 8006844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11d      	bne.n	8006888 <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800684c:	463b      	mov	r3, r7
 800684e:	4619      	mov	r1, r3
 8006850:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8006854:	f000 fabd 	bl	8006dd2 <nm_read_reg_with_ret>
 8006858:	4603      	mov	r3, r0
 800685a:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800685c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d113      	bne.n	800688c <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800686a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8006874:	f000 fabb 	bl	8006dee <nm_write_reg>
 8006878:	4603      	mov	r3, r0
 800687a:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800687c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006880:	2b00      	cmp	r3, #0
ERR1:
 8006882:	e004      	b.n	800688e <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 8006884:	bf00      	nop
 8006886:	e002      	b.n	800688e <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 8006888:	bf00      	nop
 800688a:	e000      	b.n	800688e <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800688c:	bf00      	nop
	return ret;
 800688e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 80068a2:	4b31      	ldr	r3, [pc, #196]	@ (8006968 <nmi_get_chipid+0xcc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d157      	bne.n	800695a <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 80068aa:	492f      	ldr	r1, [pc, #188]	@ (8006968 <nmi_get_chipid+0xcc>)
 80068ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80068b0:	f000 fa8f 	bl	8006dd2 <nm_read_reg_with_ret>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <nmi_get_chipid+0x28>
			chipid = 0;
 80068ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006968 <nmi_get_chipid+0xcc>)
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
			return 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e04c      	b.n	800695e <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 80068c4:	1d3b      	adds	r3, r7, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 80068cc:	f000 fa81 	bl	8006dd2 <nm_read_reg_with_ret>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <nmi_get_chipid+0x44>
			chipid = 0;
 80068d6:	4b24      	ldr	r3, [pc, #144]	@ (8006968 <nmi_get_chipid+0xcc>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
			return 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	e03e      	b.n	800695e <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 80068e0:	4b21      	ldr	r3, [pc, #132]	@ (8006968 <nmi_get_chipid+0xcc>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a21      	ldr	r2, [pc, #132]	@ (800696c <nmi_get_chipid+0xd0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d106      	bne.n	80068f8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d028      	beq.n	8006942 <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 80068f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006968 <nmi_get_chipid+0xcc>)
 80068f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006970 <nmi_get_chipid+0xd4>)
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e024      	b.n	8006942 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 80068f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006968 <nmi_get_chipid+0xcc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006974 <nmi_get_chipid+0xd8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d01c      	beq.n	8006942 <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d103      	bne.n	8006916 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800690e:	4b16      	ldr	r3, [pc, #88]	@ (8006968 <nmi_get_chipid+0xcc>)
 8006910:	4a19      	ldr	r2, [pc, #100]	@ (8006978 <nmi_get_chipid+0xdc>)
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e015      	b.n	8006942 <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 8006916:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <nmi_get_chipid+0xcc>)
 8006918:	4a18      	ldr	r2, [pc, #96]	@ (800697c <nmi_get_chipid+0xe0>)
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	e011      	b.n	8006942 <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800691e:	4b12      	ldr	r3, [pc, #72]	@ (8006968 <nmi_get_chipid+0xcc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a17      	ldr	r2, [pc, #92]	@ (8006980 <nmi_get_chipid+0xe4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10c      	bne.n	8006942 <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 8006928:	490f      	ldr	r1, [pc, #60]	@ (8006968 <nmi_get_chipid+0xcc>)
 800692a:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800692e:	f000 fa50 	bl	8006dd2 <nm_read_reg_with_ret>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <nmi_get_chipid+0xa6>
			chipid = 0;
 8006938:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <nmi_get_chipid+0xcc>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
			return 0;
 800693e:	2300      	movs	r3, #0
 8006940:	e00d      	b.n	800695e <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 8006942:	4b09      	ldr	r3, [pc, #36]	@ (8006968 <nmi_get_chipid+0xcc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800694a:	4a07      	ldr	r2, [pc, #28]	@ (8006968 <nmi_get_chipid+0xcc>)
 800694c:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800694e:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <nmi_get_chipid+0xcc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8006956:	4a04      	ldr	r2, [pc, #16]	@ (8006968 <nmi_get_chipid+0xcc>)
 8006958:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800695a:	4b03      	ldr	r3, [pc, #12]	@ (8006968 <nmi_get_chipid+0xcc>)
 800695c:	681b      	ldr	r3, [r3, #0]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000d58 	.word	0x20000d58
 800696c:	001002a0 	.word	0x001002a0
 8006970:	001002a1 	.word	0x001002a1
 8006974:	001002b0 	.word	0x001002b0
 8006978:	001002b1 	.word	0x001002b1
 800697c:	001002b2 	.word	0x001002b2
 8006980:	001000f0 	.word	0x001000f0

08006984 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800698a:	2300      	movs	r3, #0
 800698c:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800698e:	463b      	mov	r3, r7
 8006990:	4619      	mov	r1, r3
 8006992:	2010      	movs	r0, #16
 8006994:	f000 fa1d 	bl	8006dd2 <nm_read_reg_with_ret>
 8006998:	4603      	mov	r3, r0
 800699a:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800699c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d144      	bne.n	8006a2e <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d000      	beq.n	80069b0 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 80069ae:	e7ee      	b.n	800698e <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 80069b0:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 80069b2:	463b      	mov	r3, r7
 80069b4:	4619      	mov	r1, r3
 80069b6:	2001      	movs	r0, #1
 80069b8:	f000 fa0b 	bl	8006dd2 <nm_read_reg_with_ret>
 80069bc:	4603      	mov	r3, r0
 80069be:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 80069c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d134      	bne.n	8006a32 <chip_sleep+0xae>
	if(reg & NBIT1)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	f023 0302 	bic.w	r3, r3, #2
 80069d8:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	4619      	mov	r1, r3
 80069de:	2001      	movs	r0, #1
 80069e0:	f000 fa05 	bl	8006dee <nm_write_reg>
 80069e4:	4603      	mov	r3, r0
 80069e6:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 80069e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d122      	bne.n	8006a36 <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 80069f0:	463b      	mov	r3, r7
 80069f2:	4619      	mov	r1, r3
 80069f4:	200b      	movs	r0, #11
 80069f6:	f000 f9ec 	bl	8006dd2 <nm_read_reg_with_ret>
 80069fa:	4603      	mov	r3, r0
 80069fc:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 80069fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d119      	bne.n	8006a3a <chip_sleep+0xb6>
	if(reg & NBIT0)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d016      	beq.n	8006a3e <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	200b      	movs	r0, #11
 8006a1e:	f000 f9e6 	bl	8006dee <nm_write_reg>
 8006a22:	4603      	mov	r3, r0
 8006a24:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 8006a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2a:	2b00      	cmp	r3, #0
	}

ERR1:
 8006a2c:	e007      	b.n	8006a3e <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 8006a2e:	bf00      	nop
 8006a30:	e006      	b.n	8006a40 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 8006a32:	bf00      	nop
 8006a34:	e004      	b.n	8006a40 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <chip_sleep+0xbc>
ERR1:
 8006a3e:	bf00      	nop
	return ret;
 8006a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <chip_wake>:
sint8 chip_wake(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 8006a62:	1d3b      	adds	r3, r7, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	200b      	movs	r0, #11
 8006a68:	f000 f9b3 	bl	8006dd2 <nm_read_reg_with_ret>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8006a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d150      	bne.n	8006b1a <chip_wake+0xce>

	if(!(reg & NBIT0))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10c      	bne.n	8006a9c <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	4619      	mov	r1, r3
 8006a8a:	200b      	movs	r0, #11
 8006a8c:	f000 f9af 	bl	8006dee <nm_write_reg>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8006a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d140      	bne.n	8006b1e <chip_wake+0xd2>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 8006a9c:	1d3b      	adds	r3, r7, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	f000 f996 	bl	8006dd2 <nm_read_reg_with_ret>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8006aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d137      	bne.n	8006b22 <chip_wake+0xd6>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d000      	beq.n	8006abe <chip_wake+0x72>
 8006abc:	e00d      	b.n	8006ada <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f043 0302 	orr.w	r3, r3, #2
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f000 f991 	bl	8006dee <nm_write_reg>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 8006ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d000      	beq.n	8006ada <chip_wake+0x8e>
 8006ad8:	e026      	b.n	8006b28 <chip_wake+0xdc>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 8006ada:	463b      	mov	r3, r7
 8006adc:	4619      	mov	r1, r3
 8006ade:	200f      	movs	r0, #15
 8006ae0:	f000 f977 	bl	8006dd2 <nm_read_reg_with_ret>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 8006ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11a      	bne.n	8006b26 <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <chip_wake+0xc6>
			break;
		}
		nm_bsp_sleep(2);
 8006afa:	2002      	movs	r0, #2
 8006afc:	f7fe fde8 	bl	80056d0 <nm_bsp_sleep>
		trials++;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d9e6      	bls.n	8006ada <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 8006b0c:	23fc      	movs	r3, #252	@ 0xfc
 8006b0e:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 8006b10:	e00a      	b.n	8006b28 <chip_wake+0xdc>
			break;
 8006b12:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 8006b14:	f000 f942 	bl	8006d9c <nm_bus_reset>
 8006b18:	e006      	b.n	8006b28 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8006b1a:	bf00      	nop
 8006b1c:	e004      	b.n	8006b28 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8006b1e:	bf00      	nop
 8006b20:	e002      	b.n	8006b28 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8006b22:	bf00      	nop
 8006b24:	e000      	b.n	8006b28 <chip_wake+0xdc>
			goto _WAKE_EXIT;
 8006b26:	bf00      	nop

_WAKE_EXIT:
	return ret;
 8006b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	71fb      	strb	r3, [r7, #7]
	printf("wait_for_bootrom: Printing from here\n");
 8006b3e:	4845      	ldr	r0, [pc, #276]	@ (8006c54 <wait_for_bootrom+0x120>)
 8006b40:	f002 f956 	bl	8008df0 <puts>
	sint8 ret = M2M_SUCCESS;
 8006b44:	2300      	movs	r3, #0
 8006b46:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61bb      	str	r3, [r7, #24]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 8006b54:	4b40      	ldr	r3, [pc, #256]	@ (8006c58 <wait_for_bootrom+0x124>)
 8006b56:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 8006b5c:	f241 0014 	movw	r0, #4116	@ 0x1014
 8006b60:	f000 f92b 	bl	8006dba <nm_read_reg>
 8006b64:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	db03      	blt.n	8006b74 <wait_for_bootrom+0x40>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	f7fe fdaf 	bl	80056d0 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 8006b72:	e7f3      	b.n	8006b5c <wait_for_bootrom+0x28>
			break;
 8006b74:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 8006b76:	4839      	ldr	r0, [pc, #228]	@ (8006c5c <wait_for_bootrom+0x128>)
 8006b78:	f000 f91f 	bl	8006dba <nm_read_reg>
 8006b7c:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d119      	bne.n	8006bc0 <wait_for_bootrom+0x8c>
	{
		reg = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 8006b90:	e012      	b.n	8006bb8 <wait_for_bootrom+0x84>
		{
			nm_bsp_sleep(1);
 8006b92:	2001      	movs	r0, #1
 8006b94:	f7fe fd9c 	bl	80056d0 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 8006b98:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 8006b9c:	f000 f90d 	bl	8006dba <nm_read_reg>
 8006ba0:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d902      	bls.n	8006bb8 <wait_for_bootrom+0x84>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 8006bb2:	23fb      	movs	r3, #251	@ 0xfb
 8006bb4:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 8006bb6:	e046      	b.n	8006c46 <wait_for_bootrom+0x112>
		while(reg != M2M_FINISH_BOOT_ROM)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	4a29      	ldr	r2, [pc, #164]	@ (8006c60 <wait_for_bootrom+0x12c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d1e8      	bne.n	8006b92 <wait_for_bootrom+0x5e>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d10a      	bne.n	8006bdc <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 8006bc6:	4927      	ldr	r1, [pc, #156]	@ (8006c64 <wait_for_bootrom+0x130>)
 8006bc8:	4827      	ldr	r0, [pc, #156]	@ (8006c68 <wait_for_bootrom+0x134>)
 8006bca:	f000 f910 	bl	8006dee <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 8006bce:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8006bd2:	f241 008c 	movw	r0, #4236	@ 0x108c
 8006bd6:	f000 f90a 	bl	8006dee <nm_write_reg>
 8006bda:	e01c      	b.n	8006c16 <wait_for_bootrom+0xe2>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d109      	bne.n	8006bf6 <wait_for_bootrom+0xc2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 8006be2:	4920      	ldr	r1, [pc, #128]	@ (8006c64 <wait_for_bootrom+0x130>)
 8006be4:	4820      	ldr	r0, [pc, #128]	@ (8006c68 <wait_for_bootrom+0x134>)
 8006be6:	f000 f902 	bl	8006dee <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 8006bea:	2100      	movs	r1, #0
 8006bec:	f241 008c 	movw	r0, #4236	@ 0x108c
 8006bf0:	f000 f8fd 	bl	8006dee <nm_write_reg>
 8006bf4:	e00f      	b.n	8006c16 <wait_for_bootrom+0xe2>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d107      	bne.n	8006c0c <wait_for_bootrom+0xd8>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 8006c00:	68f9      	ldr	r1, [r7, #12]
 8006c02:	f241 008c 	movw	r0, #4236	@ 0x108c
 8006c06:	f000 f8f2 	bl	8006dee <nm_write_reg>
 8006c0a:	e004      	b.n	8006c16 <wait_for_bootrom+0xe2>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 8006c0c:	68f9      	ldr	r1, [r7, #12]
 8006c0e:	f241 008c 	movw	r0, #4236	@ 0x108c
 8006c12:	f000 f8ec 	bl	8006dee <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 8006c16:	f7ff fe41 	bl	800689c <nmi_get_chipid>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c20:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 8006c24:	d303      	bcc.n	8006c2e <wait_for_bootrom+0xfa>
		//chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
		chip_apply_conf(u32GpReg1);
 8006c26:	6938      	ldr	r0, [r7, #16]
 8006c28:	f7ff fdbd 	bl	80067a6 <chip_apply_conf>
 8006c2c:	e002      	b.n	8006c34 <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 8006c2e:	6938      	ldr	r0, [r7, #16]
 8006c30:	f7ff fdb9 	bl	80067a6 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
	printf("DriverVerInfo:0x%08lx\n",u32DriverVerInfo);
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	480d      	ldr	r0, [pc, #52]	@ (8006c6c <wait_for_bootrom+0x138>)
 8006c38:	f002 f872 	bl	8008d20 <iprintf>
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 8006c3c:	490c      	ldr	r1, [pc, #48]	@ (8006c70 <wait_for_bootrom+0x13c>)
 8006c3e:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 8006c42:	f000 f8d4 	bl	8006dee <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 8006c46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	0800b868 	.word	0x0800b868
 8006c58:	13541354 	.word	0x13541354
 8006c5c:	000207bc 	.word	0x000207bc
 8006c60:	10add09e 	.word	0x10add09e
 8006c64:	3c1cd57d 	.word	0x3c1cd57d
 8006c68:	000207ac 	.word	0x000207ac
 8006c6c:	0800b890 	.word	0x0800b890
 8006c70:	ef522f61 	.word	0xef522f61

08006c74 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 8006c8a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006c8e:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 8006c90:	f241 038c 	movw	r3, #4236	@ 0x108c
 8006c94:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 8006c96:	4b1a      	ldr	r3, [pc, #104]	@ (8006d00 <wait_for_firmware_start+0x8c>)
 8006c98:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d002      	beq.n	8006ca6 <wait_for_firmware_start+0x32>
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d116      	bne.n	8006cd4 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 8006ca6:	4b17      	ldr	r3, [pc, #92]	@ (8006d04 <wait_for_firmware_start+0x90>)
 8006ca8:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 8006caa:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <wait_for_firmware_start+0x94>)
 8006cac:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 8006cae:	e011      	b.n	8006cd4 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 8006cb0:	2002      	movs	r0, #2
 8006cb2:	f7fe fd0d 	bl	80056d0 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f87e 	bl	8006dba <nm_read_reg>
 8006cbe:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d302      	bcc.n	8006cd4 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 8006cce:	23fb      	movs	r3, #251	@ 0xfb
 8006cd0:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 8006cd2:	e00e      	b.n	8006cf2 <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d1e9      	bne.n	8006cb0 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4a08      	ldr	r2, [pc, #32]	@ (8006d00 <wait_for_firmware_start+0x8c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d105      	bne.n	8006cf0 <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f241 008c 	movw	r0, #4236	@ 0x108c
 8006cea:	f000 f880 	bl	8006dee <nm_write_reg>
 8006cee:	e000      	b.n	8006cf2 <wait_for_firmware_start+0x7e>
	}
ERR:
 8006cf0:	bf00      	nop
	return ret;
 8006cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	02532636 	.word	0x02532636
 8006d04:	000207ac 	.word	0x000207ac
 8006d08:	d75dc1c3 	.word	0xd75dc1c3

08006d0c <chip_deinit>:

sint8 chip_deinit(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 8006d16:	463b      	mov	r3, r7
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8006d1e:	f000 f858 	bl	8006dd2 <nm_read_reg_with_ret>
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d34:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8006d3e:	f000 f856 	bl	8006dee <nm_write_reg>
 8006d42:	4603      	mov	r3, r0
 8006d44:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 8006d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4a:	2b00      	cmp	r3, #0
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
 8006d4c:	e000      	b.n	8006d50 <chip_deinit+0x44>
		goto ERR1;
 8006d4e:	bf00      	nop
	return ret;
 8006d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7fe fdaf 	bl	80058cc <nm_bus_init>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]


	return ret;
 8006d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8006d84:	2300      	movs	r3, #0
 8006d86:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 8006d88:	f7fe fe08 	bl	800599c <nm_bus_deinit>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	71fb      	strb	r3, [r7, #7]

	return ret;
 8006d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8006da2:	2300      	movs	r3, #0
 8006da4:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
    ret = nm_spi_reset();
 8006da6:	f000 fe9f 	bl	8007ae8 <nm_spi_reset>
 8006daa:	4603      	mov	r3, r0
 8006dac:	71fb      	strb	r3, [r7, #7]
	return ret;
 8006dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
#elif defined (CONF_WINC_USE_I2C)
#else
#error "Plesae define bus usage"
	return ret;
#endif
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 ff00 	bl	8007bc8 <nm_spi_read_reg>
 8006dc8:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ff03 	bl	8007bea <nm_spi_read_reg_with_ret>
 8006de4:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ff0f 	bl	8007c1e <nm_spi_write_reg>
 8006e00:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 ff17 	bl	8007c52 <nm_spi_read_block>
 8006e24:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 8006e3c:	4b20      	ldr	r3, [pc, #128]	@ (8006ec0 <nm_read_block+0x90>)
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	3b08      	subs	r3, #8
 8006e42:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 8006e4c:	8a3b      	ldrh	r3, [r7, #16]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d80f      	bhi.n	8006e74 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	b292      	uxth	r2, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff ffd2 	bl	8006e0a <p_nm_read_block>
 8006e66:	4603      	mov	r3, r0
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	7cfb      	ldrb	r3, [r7, #19]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	74fb      	strb	r3, [r7, #19]
			break;
 8006e72:	e01f      	b.n	8006eb4 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	8a3a      	ldrh	r2, [r7, #16]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff ffc3 	bl	8006e0a <p_nm_read_block>
 8006e84:	4603      	mov	r3, r0
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	7cfb      	ldrb	r3, [r7, #19]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 8006e90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10c      	bne.n	8006eb2 <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 8006e98:	8a3b      	ldrh	r3, [r7, #16]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 8006ea0:	8a3b      	ldrh	r3, [r7, #16]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 8006ea8:	8a3b      	ldrh	r3, [r7, #16]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 8006eb0:	e7cc      	b.n	8006e4c <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 8006eb2:	bf00      	nop
		}
	}

	return s8Ret;
 8006eb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	200009c4 	.word	0x200009c4

08006ec4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fed8 	bl	8007c8e <nm_spi_write_block>
 8006ede:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 8006ef4:	4b20      	ldr	r3, [pc, #128]	@ (8006f78 <nm_write_block+0x90>)
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	3b08      	subs	r3, #8
 8006efa:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 8006f00:	2300      	movs	r3, #0
 8006f02:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 8006f04:	8a3b      	ldrh	r3, [r7, #16]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d80f      	bhi.n	8006f2c <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	b292      	uxth	r2, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff ffd3 	bl	8006ec4 <p_nm_write_block>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	7cfb      	ldrb	r3, [r7, #19]
 8006f24:	4413      	add	r3, r2
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	74fb      	strb	r3, [r7, #19]
			break;
 8006f2a:	e01f      	b.n	8006f6c <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	8a3a      	ldrh	r2, [r7, #16]
 8006f34:	4619      	mov	r1, r3
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff ffc4 	bl	8006ec4 <p_nm_write_block>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	7cfb      	ldrb	r3, [r7, #19]
 8006f42:	4413      	add	r3, r2
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 8006f48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10c      	bne.n	8006f6a <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 8006f50:	8a3b      	ldrh	r3, [r7, #16]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 8006f58:	8a3b      	ldrh	r3, [r7, #16]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 8006f60:	8a3b      	ldrh	r3, [r7, #16]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 8006f68:	e7cc      	b.n	8006f04 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 8006f6a:	bf00      	nop
		}
	}

	return s8Ret;
 8006f6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200009c4 	.word	0x200009c4

08006f7c <nm_get_firmware_full_info>:
 *	@brief	Get Firmware version info
 *	@param [out]	M2mRev
 *			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
 *	@version	1.0
 */
sint8 nm_get_firmware_full_info(tstrM2mRev *pstrRev) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	uint16 curr_drv_ver, min_req_drv_ver, curr_firm_ver;
	uint32 reg = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
	sint8 ret = M2M_SUCCESS;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = { 0 };
 8006f8c:	f107 030c 	add.w	r3, r7, #12
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL) {
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8086 	beq.w	80070aa <nm_get_firmware_full_info+0x12e>
		m2m_memset((uint8*) pstrRev, 0, sizeof(tstrM2mRev));
 8006f9e:	2228      	movs	r2, #40	@ 0x28
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fe fd22 	bl	80059ec <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 8006fa8:	f107 0314 	add.w	r3, r7, #20
 8006fac:	4619      	mov	r1, r3
 8006fae:	4842      	ldr	r0, [pc, #264]	@ (80070b8 <nm_get_firmware_full_info+0x13c>)
 8006fb0:	f7ff ff0f 	bl	8006dd2 <nm_read_reg_with_ret>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	77fb      	strb	r3, [r7, #31]
		if (ret == M2M_SUCCESS) {
 8006fb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d174      	bne.n	80070aa <nm_get_firmware_full_info+0x12e>
			if (reg != 0) {
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d06e      	beq.n	80070a4 <nm_get_firmware_full_info+0x128>
				ret = nm_read_block(reg | 0x30000, (uint8*) &strgp,
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8006fcc:	f107 010c 	add.w	r1, r7, #12
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff ff2c 	bl	8006e30 <nm_read_block>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	77fb      	strb	r3, [r7, #31]
						sizeof(tstrGpRegs));
				if (ret == M2M_SUCCESS) {
 8006fdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d163      	bne.n	80070ac <nm_get_firmware_full_info+0x130>
					reg = strgp.u32Firmware_Ota_rev;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	617b      	str	r3, [r7, #20]
					if (reg != 0) {
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d054      	beq.n	800709e <nm_get_firmware_full_info+0x122>
						ret = nm_read_block(reg | 0x30000, (uint8*) pstrRev,
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8006ffa:	2228      	movs	r2, #40	@ 0x28
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff ff16 	bl	8006e30 <nm_read_block>
 8007004:	4603      	mov	r3, r0
 8007006:	77fb      	strb	r3, [r7, #31]
								sizeof(tstrM2mRev));
						if (ret == M2M_SUCCESS) {
 8007008:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d14d      	bne.n	80070ac <nm_get_firmware_full_info+0x130>
							curr_firm_ver = M2M_MAKE_VERSION(
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	b21a      	sxth	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	795b      	ldrb	r3, [r3, #5]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	b21b      	sxth	r3, r3
 8007020:	b2db      	uxtb	r3, r3
 8007022:	b21b      	sxth	r3, r3
 8007024:	4313      	orrs	r3, r2
 8007026:	b21a      	sxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	799b      	ldrb	r3, [r3, #6]
 800702c:	b21b      	sxth	r3, r3
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	b21b      	sxth	r3, r3
 8007034:	4313      	orrs	r3, r2
 8007036:	b21b      	sxth	r3, r3
 8007038:	83bb      	strh	r3, [r7, #28]
									pstrRev->u8FirmwareMajor,
									pstrRev->u8FirmwareMinor,
									pstrRev->u8FirmwarePatch);
							curr_drv_ver = M2M_MAKE_VERSION(
 800703a:	f241 3354 	movw	r3, #4948	@ 0x1354
 800703e:	837b      	strh	r3, [r7, #26]
									M2M_RELEASE_VERSION_MAJOR_NO,
									M2M_RELEASE_VERSION_MINOR_NO,
									M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	79db      	ldrb	r3, [r3, #7]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	b21a      	sxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7a1b      	ldrb	r3, [r3, #8]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	b21b      	sxth	r3, r3
 8007050:	b2db      	uxtb	r3, r3
 8007052:	b21b      	sxth	r3, r3
 8007054:	4313      	orrs	r3, r2
 8007056:	b21a      	sxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7a5b      	ldrb	r3, [r3, #9]
 800705c:	b21b      	sxth	r3, r3
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	b21b      	sxth	r3, r3
 8007064:	4313      	orrs	r3, r2
 8007066:	b21b      	sxth	r3, r3
 8007068:	833b      	strh	r3, [r7, #24]
									pstrRev->u8DriverMajor,
									pstrRev->u8DriverMinor,
									pstrRev->u8DriverPatch);
							if ((curr_firm_ver == 0) || (min_req_drv_ver == 0)
 800706a:	8bbb      	ldrh	r3, [r7, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <nm_get_firmware_full_info+0x100>
 8007070:	8b3b      	ldrh	r3, [r7, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <nm_get_firmware_full_info+0x100>
									|| (min_req_drv_ver == 0)) {
 8007076:	8b3b      	ldrh	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 800707c:	23f4      	movs	r3, #244	@ 0xf4
 800707e:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 8007080:	e014      	b.n	80070ac <nm_get_firmware_full_info+0x130>
							}
							if (curr_drv_ver < min_req_drv_ver) {
 8007082:	8b7a      	ldrh	r2, [r7, #26]
 8007084:	8b3b      	ldrh	r3, [r7, #24]
 8007086:	429a      	cmp	r2, r3
 8007088:	d202      	bcs.n	8007090 <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal
								 than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800708a:	23f3      	movs	r3, #243	@ 0xf3
 800708c:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800708e:	e00d      	b.n	80070ac <nm_get_firmware_full_info+0x130>
							}
							if (curr_drv_ver > curr_firm_ver) {
 8007090:	8b7a      	ldrh	r2, [r7, #26]
 8007092:	8bbb      	ldrh	r3, [r7, #28]
 8007094:	429a      	cmp	r2, r3
 8007096:	d909      	bls.n	80070ac <nm_get_firmware_full_info+0x130>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 8007098:	23f3      	movs	r3, #243	@ 0xf3
 800709a:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800709c:	e006      	b.n	80070ac <nm_get_firmware_full_info+0x130>
							}
						}
					} else {
						ret = M2M_ERR_FAIL;
 800709e:	23f4      	movs	r3, #244	@ 0xf4
 80070a0:	77fb      	strb	r3, [r7, #31]
 80070a2:	e003      	b.n	80070ac <nm_get_firmware_full_info+0x130>
					}
				}
			} else {
				ret = M2M_ERR_FAIL;
 80070a4:	23f4      	movs	r3, #244	@ 0xf4
 80070a6:	77fb      	strb	r3, [r7, #31]
 80070a8:	e000      	b.n	80070ac <nm_get_firmware_full_info+0x130>
			}
		}
	}
	EXIT: return ret;
 80070aa:	bf00      	nop
 80070ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	000c0008 	.word	0x000c0008

080070bc <nm_drv_init>:
 *				Generic argument
 *	@author	M. Abdelmawla
 *	@date	15 July 2012
 *	@version	1.0
 */
sint8 nm_drv_init(void *arg) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;

	if (NULL != arg) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <nm_drv_init+0x2a>
		u8Mode = *((uint8*) arg);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	73bb      	strb	r3, [r7, #14]
		if ((u8Mode < M2M_WIFI_MODE_NORMAL) || (u8Mode >= M2M_WIFI_MODE_MAX)) {
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <nm_drv_init+0x24>
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d904      	bls.n	80070ea <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73bb      	strb	r3, [r7, #14]
 80070e4:	e001      	b.n	80070ea <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73bb      	strb	r3, [r7, #14]
	}

	ret = nm_bus_iface_init(NULL);
 80070ea:	2000      	movs	r0, #0
 80070ec:	f7ff fe36 	bl	8006d5c <nm_bus_iface_init>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
	printf("nmdrv.c:\t\t\t\tSPI bus initialized!\n");
 80070f4:	481f      	ldr	r0, [pc, #124]	@ (8007174 <nm_drv_init+0xb8>)
 80070f6:	f001 fe7b 	bl	8008df0 <puts>

	if (M2M_SUCCESS != ret) {
 80070fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d12e      	bne.n	8007160 <nm_drv_init+0xa4>
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());

	//#ifdef CONF_WINC_USE_SPI
		/* Must do this after global reset to set SPI data packet size. */
	//#endif
	nm_spi_init();
 8007102:	f000 fd03 	bl	8007b0c <nm_spi_init>

	ret = wait_for_bootrom(u8Mode);
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff fd13 	bl	8006b34 <wait_for_bootrom>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 8007112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d11a      	bne.n	8007150 <nm_drv_init+0x94>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fda9 	bl	8006c74 <wait_for_firmware_start>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 8007126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d112      	bne.n	8007154 <nm_drv_init+0x98>
		goto ERR2;
	}

	if ((M2M_WIFI_MODE_ATE_HIGH == u8Mode)
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d017      	beq.n	8007164 <nm_drv_init+0xa8>
			|| (M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b03      	cmp	r3, #3
 8007138:	d014      	beq.n	8007164 <nm_drv_init+0xa8>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800713a:	f7ff fb64 	bl	8006806 <enable_interrupts>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <nm_drv_init+0x9c>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
 800714a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800714e:	e00c      	b.n	800716a <nm_drv_init+0xae>
		goto ERR2;
 8007150:	bf00      	nop
 8007152:	e002      	b.n	800715a <nm_drv_init+0x9e>
		goto ERR2;
 8007154:	bf00      	nop
 8007156:	e000      	b.n	800715a <nm_drv_init+0x9e>
		goto ERR2;
 8007158:	bf00      	nop
	ERR2: nm_bus_iface_deinit();
 800715a:	f7ff fe10 	bl	8006d7e <nm_bus_iface_deinit>
 800715e:	e002      	b.n	8007166 <nm_drv_init+0xaa>
		goto ERR1;
 8007160:	bf00      	nop
 8007162:	e000      	b.n	8007166 <nm_drv_init+0xaa>
		goto ERR1;
 8007164:	bf00      	nop
	ERR1: return ret;
 8007166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	0800b8a8 	.word	0x0800b8a8

08007178 <nm_drv_deinit>:
 *	@brief	Deinitialize NMC1000 driver
 *	@author	M. Abdelmawla
 *	@date	17 July 2012
 *	@version	1.0
 */
sint8 nm_drv_deinit(void *arg) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 8007180:	f7ff fdc4 	bl	8006d0c <chip_deinit>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 8007188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d113      	bne.n	80071b8 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 8007190:	2000      	movs	r0, #0
 8007192:	f001 fbe3 	bl	800895c <spi_flash_enable>
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800719a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10c      	bne.n	80071bc <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 80071a2:	f7ff fdec 	bl	8006d7e <nm_bus_iface_deinit>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 80071aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 80071b2:	f000 fcfb 	bl	8007bac <nm_spi_deinit>
 80071b6:	e004      	b.n	80071c2 <nm_drv_deinit+0x4a>
		goto ERR1;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <nm_drv_deinit+0x4a>
		goto ERR1;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <nm_drv_deinit+0x4a>
		goto ERR1;
 80071c0:	bf00      	nop
#endif

	ERR1: return ret;
 80071c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 80071e2:	887b      	ldrh	r3, [r7, #2]
 80071e4:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80071e6:	f107 030c 	add.w	r3, r7, #12
 80071ea:	4619      	mov	r1, r3
 80071ec:	2003      	movs	r0, #3
 80071ee:	f7fe fbb3 	bl	8005958 <nm_bus_ioctl>
 80071f2:	4603      	mov	r3, r0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 800720c:	2300      	movs	r3, #0
 800720e:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 8007210:	887b      	ldrh	r3, [r7, #2]
 8007212:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	4619      	mov	r1, r3
 800721a:	2003      	movs	r0, #3
 800721c:	f7fe fb9c 	bl	8005958 <nm_bus_ioctl>
 8007220:	4603      	mov	r3, r0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	460a      	mov	r2, r1
 8007236:	71fb      	strb	r3, [r7, #7]
 8007238:	4613      	mov	r3, r2
 800723a:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	005a      	lsls	r2, r3, #1
 8007240:	79bb      	ldrb	r3, [r7, #6]
 8007242:	4053      	eors	r3, r2
 8007244:	4a03      	ldr	r2, [pc, #12]	@ (8007254 <crc7_byte+0x28>)
 8007246:	5cd3      	ldrb	r3, [r2, r3]
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	0800ba9c 	.word	0x0800ba9c

08007258 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	73fb      	strb	r3, [r7, #15]
	while (len--)
 8007266:	e00a      	b.n	800727e <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	60ba      	str	r2, [r7, #8]
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	4611      	mov	r1, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff ffd9 	bl	800722c <crc7_byte>
 800727a:	4603      	mov	r3, r0
 800727c:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	1e5a      	subs	r2, r3, #1
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1ef      	bne.n	8007268 <crc7+0x10>
	return crc;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 80072a4:	2305      	movs	r3, #5
 80072a6:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 80072a8:	2301      	movs	r3, #1
 80072aa:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	3bc1      	subs	r3, #193	@ 0xc1
 80072b4:	2b0e      	cmp	r3, #14
 80072b6:	f200 80cc 	bhi.w	8007452 <spi_cmd+0x1be>
 80072ba:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <spi_cmd+0x2c>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	08007379 	.word	0x08007379
 80072c4:	08007379 	.word	0x08007379
 80072c8:	080073d5 	.word	0x080073d5
 80072cc:	08007319 	.word	0x08007319
 80072d0:	08007343 	.word	0x08007343
 80072d4:	08007355 	.word	0x08007355
 80072d8:	080073a3 	.word	0x080073a3
 80072dc:	080073a3 	.word	0x080073a3
 80072e0:	08007419 	.word	0x08007419
 80072e4:	080072fd 	.word	0x080072fd
 80072e8:	08007453 	.word	0x08007453
 80072ec:	08007453 	.word	0x08007453
 80072f0:	08007453 	.word	0x08007453
 80072f4:	08007453 	.word	0x08007453
 80072f8:	08007367 	.word	0x08007367
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	b2db      	uxtb	r3, r3
 8007302:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	b2db      	uxtb	r3, r3
 800730a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8007312:	2305      	movs	r3, #5
 8007314:	77fb      	strb	r3, [r7, #31]
		break;
 8007316:	e09f      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	0a1b      	lsrs	r3, r3, #8
 800731c:	b2db      	uxtb	r3, r3
 800731e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 8007320:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <spi_cmd+0x9e>
 8007328:	7d7b      	ldrb	r3, [r7, #21]
 800732a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800732e:	b2db      	uxtb	r3, r3
 8007330:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 8007338:	2300      	movs	r3, #0
 800733a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800733c:	2305      	movs	r3, #5
 800733e:	77fb      	strb	r3, [r7, #31]
		break;
 8007340:	e08a      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 8007342:	2300      	movs	r3, #0
 8007344:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 8007346:	2300      	movs	r3, #0
 8007348:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800734e:	2305      	movs	r3, #5
 8007350:	77fb      	strb	r3, [r7, #31]
		break;
 8007352:	e081      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 8007354:	2300      	movs	r3, #0
 8007356:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 8007358:	2300      	movs	r3, #0
 800735a:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800735c:	2300      	movs	r3, #0
 800735e:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8007360:	2305      	movs	r3, #5
 8007362:	77fb      	strb	r3, [r7, #31]
		break;
 8007364:	e078      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 8007366:	23ff      	movs	r3, #255	@ 0xff
 8007368:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800736a:	23ff      	movs	r3, #255	@ 0xff
 800736c:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800736e:	23ff      	movs	r3, #255	@ 0xff
 8007370:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8007372:	2305      	movs	r3, #5
 8007374:	77fb      	strb	r3, [r7, #31]
		break;
 8007376:	e06f      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	b2db      	uxtb	r3, r3
 800737e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	b2db      	uxtb	r3, r3
 8007386:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	b2db      	uxtb	r3, r3
 8007394:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	767b      	strb	r3, [r7, #25]
		len = 7;
 800739c:	2307      	movs	r3, #7
 800739e:	77fb      	strb	r3, [r7, #31]
		break;
 80073a0:	e05a      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	0c1b      	lsrs	r3, r3, #16
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	76bb      	strb	r3, [r7, #26]
		len = 8;
 80073ce:	2308      	movs	r3, #8
 80073d0:	77fb      	strb	r3, [r7, #31]
		break;
 80073d2:	e041      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 80073dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <spi_cmd+0x15a>
 80073e4:	7d7b      	ldrb	r3, [r7, #21]
 80073e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	0e1b      	lsrs	r3, r3, #24
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	b2db      	uxtb	r3, r3
 8007402:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b2db      	uxtb	r3, r3
 800740a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	76bb      	strb	r3, [r7, #26]
		len = 8;
 8007412:	2308      	movs	r3, #8
 8007414:	77fb      	strb	r3, [r7, #31]
		break;
 8007416:	e01f      	b.n	8007458 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	b2db      	uxtb	r3, r3
 800741e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	b2db      	uxtb	r3, r3
 8007426:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0e1b      	lsrs	r3, r3, #24
 8007432:	b2db      	uxtb	r3, r3
 8007434:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	b2db      	uxtb	r3, r3
 800743c:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	b2db      	uxtb	r3, r3
 8007444:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800744c:	2309      	movs	r3, #9
 800744e:	77fb      	strb	r3, [r7, #31]
		break;
 8007450:	e002      	b.n	8007458 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 8007452:	2300      	movs	r3, #0
 8007454:	77bb      	strb	r3, [r7, #30]
		break;
 8007456:	bf00      	nop
	}

	if (result) {
 8007458:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d027      	beq.n	80074b0 <spi_cmd+0x21c>
		if (!gu8Crc_off)
 8007460:	4b16      	ldr	r3, [pc, #88]	@ (80074bc <spi_cmd+0x228>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d113      	bne.n	8007490 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 8007468:	7ffb      	ldrb	r3, [r7, #31]
 800746a:	3b01      	subs	r3, #1
 800746c:	461a      	mov	r2, r3
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	4619      	mov	r1, r3
 8007474:	207f      	movs	r0, #127	@ 0x7f
 8007476:	f7ff feef 	bl	8007258 <crc7>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	7ffb      	ldrb	r3, [r7, #31]
 8007480:	3b01      	subs	r3, #1
 8007482:	0052      	lsls	r2, r2, #1
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	3320      	adds	r3, #32
 8007488:	443b      	add	r3, r7
 800748a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800748e:	e002      	b.n	8007496 <spi_cmd+0x202>
		else
			len-=1;
 8007490:	7ffb      	ldrb	r3, [r7, #31]
 8007492:	3b01      	subs	r3, #1
 8007494:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 8007496:	7ffb      	ldrb	r3, [r7, #31]
 8007498:	b29a      	uxth	r2, r3
 800749a:	f107 0314 	add.w	r3, r7, #20
 800749e:	4611      	mov	r1, r2
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff feab 	bl	80071fc <nmi_spi_write>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <spi_cmd+0x21c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 80074b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000d5c 	.word	0x20000d5c

080074c0 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 80074ca:	2301      	movs	r3, #1
 80074cc:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 80074ce:	4b18      	ldr	r3, [pc, #96]	@ (8007530 <spi_data_rsp+0x70>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <spi_data_rsp+0x1c>
		len = 2;
 80074d6:	2302      	movs	r3, #2
 80074d8:	73fb      	strb	r3, [r7, #15]
 80074da:	e001      	b.n	80074e0 <spi_data_rsp+0x20>
	else
		len = 3;
 80074dc:	2303      	movs	r3, #3
 80074de:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f107 0308 	add.w	r3, r7, #8
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fe6f 	bl	80071ce <nmi_spi_read>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 80074fa:	e013      	b.n	8007524 <spi_data_rsp+0x64>
	}

	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	3b01      	subs	r3, #1
 8007500:	3310      	adds	r3, #16
 8007502:	443b      	add	r3, r7
 8007504:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d107      	bne.n	800751c <spi_data_rsp+0x5c>
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	3b02      	subs	r3, #2
 8007510:	3310      	adds	r3, #16
 8007512:	443b      	add	r3, r7
 8007514:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007518:	2bc3      	cmp	r3, #195	@ 0xc3
 800751a:	d002      	beq.n	8007522 <spi_data_rsp+0x62>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 800751c:	2300      	movs	r3, #0
 800751e:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 8007520:	e000      	b.n	8007524 <spi_data_rsp+0x64>
	}
_fail_:
 8007522:	bf00      	nop

	return result;
 8007524:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000d5c 	.word	0x20000d5c

08007534 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800753e:	2301      	movs	r3, #1
 8007540:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	2bcf      	cmp	r3, #207	@ 0xcf
 8007546:	d005      	beq.n	8007554 <spi_cmd_rsp+0x20>
 8007548:	79fb      	ldrb	r3, [r7, #7]
 800754a:	2bc5      	cmp	r3, #197	@ 0xc5
 800754c:	d002      	beq.n	8007554 <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	2bc6      	cmp	r3, #198	@ 0xc6
 8007552:	d10b      	bne.n	800756c <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8007554:	f107 030d 	add.w	r3, r7, #13
 8007558:	2101      	movs	r1, #1
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fe37 	bl	80071ce <nmi_spi_read>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <spi_cmd_rsp+0x38>
			result = N_FAIL;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800756a:	e033      	b.n	80075d4 <spi_cmd_rsp+0xa0>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800756c:	230a      	movs	r3, #10
 800756e:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8007570:	f107 030d 	add.w	r3, r7, #13
 8007574:	2101      	movs	r1, #1
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fe29 	bl	80071ce <nmi_spi_read>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <spi_cmd_rsp+0x54>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 8007586:	e025      	b.n	80075d4 <spi_cmd_rsp+0xa0>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8007588:	7b7b      	ldrb	r3, [r7, #13]
 800758a:	79fa      	ldrb	r2, [r7, #7]
 800758c:	429a      	cmp	r2, r3
 800758e:	d007      	beq.n	80075a0 <spi_cmd_rsp+0x6c>
 8007590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	3a01      	subs	r2, #1
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	73ba      	strb	r2, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	dce7      	bgt.n	8007570 <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 80075a0:	230a      	movs	r3, #10
 80075a2:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 80075a4:	f107 030d 	add.w	r3, r7, #13
 80075a8:	2101      	movs	r1, #1
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff fe0f 	bl	80071ce <nmi_spi_read>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 80075ba:	e00b      	b.n	80075d4 <spi_cmd_rsp+0xa0>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 80075bc:	7b7b      	ldrb	r3, [r7, #13]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <spi_cmd_rsp+0x9e>
 80075c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	3a01      	subs	r2, #1
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	73ba      	strb	r2, [r7, #14]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dce8      	bgt.n	80075a4 <spi_cmd_rsp+0x70>

_fail_:
 80075d2:	bf00      	nop

	return result;
 80075d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
 80075ec:	4613      	mov	r3, r2
 80075ee:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 80075f0:	2301      	movs	r3, #1
 80075f2:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 80075f8:	887b      	ldrh	r3, [r7, #2]
 80075fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075fe:	d802      	bhi.n	8007606 <spi_data_read+0x26>
			nbytes = sz;
 8007600:	887b      	ldrh	r3, [r7, #2]
 8007602:	827b      	strh	r3, [r7, #18]
 8007604:	e002      	b.n	800760c <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 8007606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800760a:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800760c:	230a      	movs	r3, #10
 800760e:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8007610:	f107 030b 	add.w	r3, r7, #11
 8007614:	2101      	movs	r1, #1
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff fdd9 	bl	80071ce <nmi_spi_read>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 8007622:	2300      	movs	r3, #0
 8007624:	747b      	strb	r3, [r7, #17]
				break;
 8007626:	e010      	b.n	800764a <spi_data_read+0x6a>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	2b0f      	cmp	r3, #15
 8007634:	d008      	beq.n	8007648 <spi_data_read+0x68>
				break;
		} while (retry--);
 8007636:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800763a:	b29a      	uxth	r2, r3
 800763c:	3a01      	subs	r2, #1
 800763e:	b292      	uxth	r2, r2
 8007640:	82fa      	strh	r2, [r7, #22]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e4      	bne.n	8007610 <spi_data_read+0x30>
 8007646:	e000      	b.n	800764a <spi_data_read+0x6a>
				break;
 8007648:	bf00      	nop

		if (result == N_FAIL)
 800764a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d035      	beq.n	80076be <spi_data_read+0xde>
			break;

		if (retry <= 0) {
 8007652:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dc02      	bgt.n	8007660 <spi_data_read+0x80>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 800765a:	2300      	movs	r3, #0
 800765c:	747b      	strb	r3, [r7, #17]
			break;
 800765e:	e02f      	b.n	80076c0 <spi_data_read+0xe0>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8007660:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	4413      	add	r3, r2
 8007668:	8a7a      	ldrh	r2, [r7, #18]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff fdae 	bl	80071ce <nmi_spi_read>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <spi_data_read+0x9e>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 8007678:	2300      	movs	r3, #0
 800767a:	747b      	strb	r3, [r7, #17]
			break;
 800767c:	e020      	b.n	80076c0 <spi_data_read+0xe0>
		}
		if(!clockless)
 800767e:	787b      	ldrb	r3, [r7, #1]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10f      	bne.n	80076a4 <spi_data_read+0xc4>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 8007684:	4b11      	ldr	r3, [pc, #68]	@ (80076cc <spi_data_read+0xec>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10b      	bne.n	80076a4 <spi_data_read+0xc4>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	2102      	movs	r1, #2
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fd9b 	bl	80071ce <nmi_spi_read>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <spi_data_read+0xc4>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 800769e:	2300      	movs	r3, #0
 80076a0:	747b      	strb	r3, [r7, #17]
					break;
 80076a2:	e00d      	b.n	80076c0 <spi_data_read+0xe0>
				}
			}
		}
		ix += nbytes;
 80076a4:	8aba      	ldrh	r2, [r7, #20]
 80076a6:	8a7b      	ldrh	r3, [r7, #18]
 80076a8:	4413      	add	r3, r2
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 80076ae:	8a7b      	ldrh	r3, [r7, #18]
 80076b0:	887a      	ldrh	r2, [r7, #2]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	807b      	strh	r3, [r7, #2]

	} while (sz);
 80076b6:	887b      	ldrh	r3, [r7, #2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d19d      	bne.n	80075f8 <spi_data_read+0x18>
 80076bc:	e000      	b.n	80076c0 <spi_data_read+0xe0>
			break;
 80076be:	bf00      	nop

	return result;
 80076c0:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20000d5c 	.word	0x20000d5c

080076d0 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
 80076dc:	2301      	movs	r3, #1
 80076de:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 80076e0:	2300      	movs	r3, #0
 80076e2:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
 80076e8:	887b      	ldrh	r3, [r7, #2]
 80076ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ee:	d802      	bhi.n	80076f6 <spi_data_write+0x26>
			nbytes = sz;
 80076f0:	887b      	ldrh	r3, [r7, #2]
 80076f2:	82bb      	strh	r3, [r7, #20]
 80076f4:	e002      	b.n	80076fc <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 80076f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80076fa:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 80076fc:	23f0      	movs	r3, #240	@ 0xf0
 80076fe:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 8007700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d109      	bne.n	800771c <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 8007708:	887b      	ldrh	r3, [r7, #2]
 800770a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800770e:	d802      	bhi.n	8007716 <spi_data_write+0x46>
				order = 0x3;
 8007710:	2303      	movs	r3, #3
 8007712:	74bb      	strb	r3, [r7, #18]
 8007714:	e00b      	b.n	800772e <spi_data_write+0x5e>
			else
				order = 0x1;
 8007716:	2301      	movs	r3, #1
 8007718:	74bb      	strb	r3, [r7, #18]
 800771a:	e008      	b.n	800772e <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800771c:	887b      	ldrh	r3, [r7, #2]
 800771e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007722:	d802      	bhi.n	800772a <spi_data_write+0x5a>
				order = 0x3;
 8007724:	2303      	movs	r3, #3
 8007726:	74bb      	strb	r3, [r7, #18]
 8007728:	e001      	b.n	800772e <spi_data_write+0x5e>
			else
				order = 0x2;
 800772a:	2302      	movs	r3, #2
 800772c:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800772e:	7c7a      	ldrb	r2, [r7, #17]
 8007730:	7cbb      	ldrb	r3, [r7, #18]
 8007732:	4313      	orrs	r3, r2
 8007734:	b2db      	uxtb	r3, r3
 8007736:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 8007738:	f107 0311 	add.w	r3, r7, #17
 800773c:	2101      	movs	r1, #1
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fd5c 	bl	80071fc <nmi_spi_write>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 800774a:	2300      	movs	r3, #0
 800774c:	74fb      	strb	r3, [r7, #19]
			break;
 800774e:	e02a      	b.n	80077a6 <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 8007750:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	8aba      	ldrh	r2, [r7, #20]
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fd4d 	bl	80071fc <nmi_spi_write>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 8007768:	2300      	movs	r3, #0
 800776a:	74fb      	strb	r3, [r7, #19]
			break;
 800776c:	e01b      	b.n	80077a6 <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800776e:	4b11      	ldr	r3, [pc, #68]	@ (80077b4 <spi_data_write+0xe4>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10b      	bne.n	800778e <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 8007776:	f107 030c 	add.w	r3, r7, #12
 800777a:	2102      	movs	r1, #2
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fd3d 	bl	80071fc <nmi_spi_write>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 8007788:	2300      	movs	r3, #0
 800778a:	74fb      	strb	r3, [r7, #19]
				break;
 800778c:	e00b      	b.n	80077a6 <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 800778e:	8afa      	ldrh	r2, [r7, #22]
 8007790:	8abb      	ldrh	r3, [r7, #20]
 8007792:	4413      	add	r3, r2
 8007794:	b29b      	uxth	r3, r3
 8007796:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 8007798:	887a      	ldrh	r2, [r7, #2]
 800779a:	8abb      	ldrh	r3, [r7, #20]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	807b      	strh	r3, [r7, #2]
	} while (sz);
 80077a0:	887b      	ldrh	r3, [r7, #2]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1a0      	bne.n	80076e8 <spi_data_write+0x18>


	return result;
 80077a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000d5c 	.word	0x20000d5c

080077b8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af02      	add	r7, sp, #8
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 80077c2:	230a      	movs	r3, #10
 80077c4:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 80077ca:	23c9      	movs	r3, #201	@ 0xc9
 80077cc:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	733b      	strb	r3, [r7, #12]

_RETRY_:
	if (addr <= 0x30)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b30      	cmp	r3, #48	@ 0x30
 80077d6:	d804      	bhi.n	80077e2 <spi_write_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 80077d8:	23c3      	movs	r3, #195	@ 0xc3
 80077da:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 80077dc:	2301      	movs	r3, #1
 80077de:	733b      	strb	r3, [r7, #12]
 80077e0:	e003      	b.n	80077ea <spi_write_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
 80077e2:	23c9      	movs	r3, #201	@ 0xc9
 80077e4:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 80077ea:	7b78      	ldrb	r0, [r7, #13]
 80077ec:	7b3b      	ldrb	r3, [r7, #12]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	2304      	movs	r3, #4
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	f7ff fd4d 	bl	8007294 <spi_cmd>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 80077fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d109      	bne.n	800781a <spi_write_reg+0x62>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8007806:	7b7b      	ldrb	r3, [r7, #13]
 8007808:	4618      	mov	r0, r3
 800780a:	f7ff fe93 	bl	8007534 <spi_cmd_rsp>
 800780e:	4603      	mov	r3, r0
 8007810:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 8007812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007816:	2b01      	cmp	r3, #1
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
		goto _FAIL_;
	}

#endif
_FAIL_:
 8007818:	e000      	b.n	800781c <spi_write_reg+0x64>
		goto _FAIL_;
 800781a:	bf00      	nop
	if(result != N_OK)
 800781c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d017      	beq.n	8007854 <spi_write_reg+0x9c>
	{
		nm_bsp_sleep(1);
 8007824:	2001      	movs	r0, #1
 8007826:	f7fd ff53 	bl	80056d0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800782a:	2300      	movs	r3, #0
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	2300      	movs	r3, #0
 8007830:	2200      	movs	r2, #0
 8007832:	2100      	movs	r1, #0
 8007834:	20cf      	movs	r0, #207	@ 0xcf
 8007836:	f7ff fd2d 	bl	8007294 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800783a:	20cf      	movs	r0, #207	@ 0xcf
 800783c:	f7ff fe7a 	bl	8007534 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 8007840:	2001      	movs	r0, #1
 8007842:	f7fd ff45 	bl	80056d0 <nm_bsp_sleep>
		retry--;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	3b01      	subs	r3, #1
 800784a:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d000      	beq.n	8007854 <spi_write_reg+0x9c>
 8007852:	e7be      	b.n	80077d2 <spi_write_reg+0x1a>
	}

	return result;
 8007854:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800786e:	230a      	movs	r3, #10
 8007870:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 8007872:	23c7      	movs	r3, #199	@ 0xc7
 8007874:	757b      	strb	r3, [r7, #21]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <nm_spi_write+0x20>
		size = 2;
 800787c:	2302      	movs	r3, #2
 800787e:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	7d78      	ldrb	r0, [r7, #21]
 8007884:	2200      	movs	r2, #0
 8007886:	9200      	str	r2, [sp, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	f7ff fd02 	bl	8007294 <spi_cmd>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8007894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d11e      	bne.n	80078da <nm_spi_write+0x7a>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800789c:	7d7b      	ldrb	r3, [r7, #21]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fe48 	bl	8007534 <spi_cmd_rsp>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 80078a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d116      	bne.n	80078de <nm_spi_write+0x7e>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	4619      	mov	r1, r3
 80078b4:	68b8      	ldr	r0, [r7, #8]
 80078b6:	f7ff ff0b 	bl	80076d0 <spi_data_write>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 80078be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d10d      	bne.n	80078e2 <nm_spi_write+0x82>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 80078c6:	7d7b      	ldrb	r3, [r7, #21]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fdf9 	bl	80074c0 <spi_data_rsp>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 80078d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078d6:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}

_FAIL_:
 80078d8:	e004      	b.n	80078e4 <nm_spi_write+0x84>
		goto _FAIL_;
 80078da:	bf00      	nop
 80078dc:	e002      	b.n	80078e4 <nm_spi_write+0x84>
		goto _FAIL_;
 80078de:	bf00      	nop
 80078e0:	e000      	b.n	80078e4 <nm_spi_write+0x84>
		goto _FAIL_;
 80078e2:	bf00      	nop
	if(result != N_OK)
 80078e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d017      	beq.n	800791c <nm_spi_write+0xbc>
	{
		nm_bsp_sleep(1);
 80078ec:	2001      	movs	r0, #1
 80078ee:	f7fd feef 	bl	80056d0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 80078f2:	2300      	movs	r3, #0
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	2300      	movs	r3, #0
 80078f8:	2200      	movs	r2, #0
 80078fa:	2100      	movs	r1, #0
 80078fc:	20cf      	movs	r0, #207	@ 0xcf
 80078fe:	f7ff fcc9 	bl	8007294 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8007902:	20cf      	movs	r0, #207	@ 0xcf
 8007904:	f7ff fe16 	bl	8007534 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 8007908:	2001      	movs	r0, #1
 800790a:	f7fd fee1 	bl	80056d0 <nm_bsp_sleep>
		retry--;
 800790e:	7dbb      	ldrb	r3, [r7, #22]
 8007910:	3b01      	subs	r3, #1
 8007912:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 8007914:	7dbb      	ldrb	r3, [r7, #22]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d000      	beq.n	800791c <nm_spi_write+0xbc>
 800791a:	e7ac      	b.n	8007876 <nm_spi_write+0x16>
	}


	return result;
 800791c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 8007932:	230a      	movs	r3, #10
 8007934:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 8007936:	2301      	movs	r3, #1
 8007938:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_READ;
 800793a:	23ca      	movs	r3, #202	@ 0xca
 800793c:	737b      	strb	r3, [r7, #13]
	uint8 tmp[4];
	uint8 clockless = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	733b      	strb	r3, [r7, #12]

_RETRY_:

	if (addr <= 0xff)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2bff      	cmp	r3, #255	@ 0xff
 8007946:	d804      	bhi.n	8007952 <spi_read_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 8007948:	23c4      	movs	r3, #196	@ 0xc4
 800794a:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800794c:	2301      	movs	r3, #1
 800794e:	733b      	strb	r3, [r7, #12]
 8007950:	e003      	b.n	800795a <spi_read_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
 8007952:	23ca      	movs	r3, #202	@ 0xca
 8007954:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800795a:	7b78      	ldrb	r0, [r7, #13]
 800795c:	7b3b      	ldrb	r3, [r7, #12]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	2304      	movs	r3, #4
 8007962:	2200      	movs	r2, #0
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	f7ff fc95 	bl	8007294 <spi_cmd>
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800796e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d124      	bne.n	80079c0 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8007976:	7b7b      	ldrb	r3, [r7, #13]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fddb 	bl	8007534 <spi_cmd_rsp>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 8007982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d11c      	bne.n	80079c4 <spi_read_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800798a:	7b3a      	ldrb	r2, [r7, #12]
 800798c:	f107 0308 	add.w	r3, r7, #8
 8007990:	2104      	movs	r1, #4
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff fe24 	bl	80075e0 <spi_data_read>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800799c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d111      	bne.n	80079c8 <spi_read_reg+0xa0>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
 80079a4:	7a3b      	ldrb	r3, [r7, #8]
 80079a6:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 80079a8:	7a7b      	ldrb	r3, [r7, #9]
 80079aa:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 80079ac:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 80079ae:	7abb      	ldrb	r3, [r7, #10]
 80079b0:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 80079b2:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 80079b8:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	e004      	b.n	80079ca <spi_read_reg+0xa2>
		goto _FAIL_;
 80079c0:	bf00      	nop
 80079c2:	e002      	b.n	80079ca <spi_read_reg+0xa2>
		goto _FAIL_;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <spi_read_reg+0xa2>
		goto _FAIL_;
 80079c8:	bf00      	nop

_FAIL_:
	if(result != N_OK)
 80079ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d017      	beq.n	8007a02 <spi_read_reg+0xda>
	{

		nm_bsp_sleep(1);
 80079d2:	2001      	movs	r0, #1
 80079d4:	f7fd fe7c 	bl	80056d0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 80079d8:	2300      	movs	r3, #0
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	2300      	movs	r3, #0
 80079de:	2200      	movs	r2, #0
 80079e0:	2100      	movs	r1, #0
 80079e2:	20cf      	movs	r0, #207	@ 0xcf
 80079e4:	f7ff fc56 	bl	8007294 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 80079e8:	20cf      	movs	r0, #207	@ 0xcf
 80079ea:	f7ff fda3 	bl	8007534 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 80079ee:	2001      	movs	r0, #1
 80079f0:	f7fd fe6e 	bl	80056d0 <nm_bsp_sleep>
		retry--;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d000      	beq.n	8007a02 <spi_read_reg+0xda>
 8007a00:	e79f      	b.n	8007942 <spi_read_reg+0x1a>
	}

	return result;
 8007a02:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b088      	sub	sp, #32
 8007a12:	af02      	add	r7, sp, #8
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 8007a1c:	23c8      	movs	r3, #200	@ 0xc8
 8007a1e:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 8007a20:	230a      	movs	r3, #10
 8007a22:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	757b      	strb	r3, [r7, #21]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d103      	bne.n	8007a36 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	7d38      	ldrb	r0, [r7, #20]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	9200      	str	r2, [sp, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	68f9      	ldr	r1, [r7, #12]
 8007a42:	f7ff fc27 	bl	8007294 <spi_cmd>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8007a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d125      	bne.n	8007a9e <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8007a52:	7d3b      	ldrb	r3, [r7, #20]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fd6d 	bl	8007534 <spi_cmd_rsp>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8007a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d11d      	bne.n	8007aa2 <nm_spi_read+0x94>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 8007a66:	7d7b      	ldrb	r3, [r7, #21]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00c      	beq.n	8007a86 <nm_spi_read+0x78>
	{
		result = spi_data_read(tmp, size,0);
 8007a6c:	88f9      	ldrh	r1, [r7, #6]
 8007a6e:	f107 0310 	add.w	r3, r7, #16
 8007a72:	2200      	movs	r2, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fdb3 	bl	80075e0 <spi_data_read>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 8007a7e:	7c3a      	ldrb	r2, [r7, #16]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e007      	b.n	8007a96 <nm_spi_read+0x88>
	}
	else
		result = spi_data_read(buf, size,0);
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	68b8      	ldr	r0, [r7, #8]
 8007a8e:	f7ff fda7 	bl	80075e0 <spi_data_read>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 8007a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a9a:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
		goto _FAIL_;
	}
#endif

_FAIL_:
 8007a9c:	e002      	b.n	8007aa4 <nm_spi_read+0x96>
		goto _FAIL_;
 8007a9e:	bf00      	nop
 8007aa0:	e000      	b.n	8007aa4 <nm_spi_read+0x96>
		goto _FAIL_;
 8007aa2:	bf00      	nop
	if(result != N_OK)
 8007aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d017      	beq.n	8007adc <nm_spi_read+0xce>
	{
		nm_bsp_sleep(1);
 8007aac:	2001      	movs	r0, #1
 8007aae:	f7fd fe0f 	bl	80056d0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2100      	movs	r1, #0
 8007abc:	20cf      	movs	r0, #207	@ 0xcf
 8007abe:	f7ff fbe9 	bl	8007294 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8007ac2:	20cf      	movs	r0, #207	@ 0xcf
 8007ac4:	f7ff fd36 	bl	8007534 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 8007ac8:	2001      	movs	r0, #1
 8007aca:	f7fd fe01 	bl	80056d0 <nm_bsp_sleep>
		retry--;
 8007ace:	7dbb      	ldrb	r3, [r7, #22]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 8007ad4:	7dbb      	ldrb	r3, [r7, #22]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d000      	beq.n	8007adc <nm_spi_read+0xce>
 8007ada:	e7a5      	b.n	8007a28 <nm_spi_read+0x1a>
	}

	return result;
 8007adc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8007aee:	2300      	movs	r3, #0
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2300      	movs	r3, #0
 8007af4:	2200      	movs	r2, #0
 8007af6:	2100      	movs	r1, #0
 8007af8:	20cf      	movs	r0, #207	@ 0xcf
 8007afa:	f7ff fbcb 	bl	8007294 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 8007afe:	20cf      	movs	r0, #207	@ 0xcf
 8007b00:	f7ff fd18 	bl	8007534 <spi_cmd_rsp>
	return M2M_SUCCESS;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	603b      	str	r3, [r7, #0]


	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 8007b16:	4b24      	ldr	r3, [pc, #144]	@ (8007ba8 <nm_spi_init+0x9c>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f64e 0024 	movw	r0, #59428	@ 0xe824
 8007b24:	f7ff ff00 	bl	8007928 <spi_read_reg>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <nm_spi_init+0x3e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 8007b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ba8 <nm_spi_init+0x9c>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 8007b34:	463b      	mov	r3, r7
 8007b36:	4619      	mov	r1, r3
 8007b38:	f64e 0024 	movw	r0, #59428	@ 0xe824
 8007b3c:	f7ff fef4 	bl	8007928 <spi_read_reg>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <nm_spi_init+0x3e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e02a      	b.n	8007ba0 <nm_spi_init+0x94>
		}
	}
	if(gu8Crc_off == 0)
 8007b4a:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <nm_spi_init+0x9c>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d119      	bne.n	8007b86 <nm_spi_init+0x7a>
	{
		reg &= ~0xc;	/* disable crc checking */
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f023 030c 	bic.w	r3, r3, #12
 8007b58:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b60:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8007b68:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f64e 0024 	movw	r0, #59428	@ 0xe824
 8007b72:	f7ff fe21 	bl	80077b8 <spi_write_reg>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <nm_spi_init+0x74>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e00f      	b.n	8007ba0 <nm_spi_init+0x94>
		}
		gu8Crc_off = 1;
 8007b80:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <nm_spi_init+0x9c>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
 8007b86:	1d3b      	adds	r3, r7, #4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007b8e:	f7ff fecb 	bl	8007928 <spi_read_reg>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <nm_spi_init+0x92>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 8007b98:	f06f 0305 	mvn.w	r3, #5
 8007b9c:	e000      	b.n	8007ba0 <nm_spi_init+0x94>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	//spi_init_pkt_sz();


	return M2M_SUCCESS;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20000d5c 	.word	0x20000d5c

08007bac <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 8007bb0:	4b04      	ldr	r3, [pc, #16]	@ (8007bc4 <nm_spi_deinit+0x18>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000d5c 	.word	0x20000d5c

08007bc8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	uint32 u32Val = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]

	spi_read_reg(u32Addr, &u32Val);
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff fea4 	bl	8007928 <spi_read_reg>

	return u32Val;
 8007be0:	68fb      	ldr	r3, [r7, #12]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7ff fe96 	bl	8007928 <spi_read_reg>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8007c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d102      	bne.n	8007c0e <nm_spi_read_reg_with_ret+0x24>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	e001      	b.n	8007c12 <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 8007c0e:	23fa      	movs	r3, #250	@ 0xfa
 8007c10:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 8007c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff fdc4 	bl	80077b8 <spi_write_reg>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8007c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d102      	bne.n	8007c42 <nm_spi_write_reg+0x24>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
 8007c40:	e001      	b.n	8007c46 <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 8007c42:	23fa      	movs	r3, #250	@ 0xfa
 8007c44:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 8007c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	461a      	mov	r2, r3
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fed1 	bl	8007a0e <nm_spi_read>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8007c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d102      	bne.n	8007c7e <nm_spi_read_block+0x2c>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]
 8007c7c:	e001      	b.n	8007c82 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 8007c7e:	23fa      	movs	r3, #250	@ 0xfa
 8007c80:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 8007c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b086      	sub	sp, #24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff fddc 	bl	8007860 <nm_spi_write>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8007cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d102      	bne.n	8007cba <nm_spi_write_block+0x2c>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	75fb      	strb	r3, [r7, #23]
 8007cb8:	e001      	b.n	8007cbe <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 8007cba:	23fa      	movs	r3, #250	@ 0xfa
 8007cbc:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 8007cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	73bb      	strb	r3, [r7, #14]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 8007cde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 808d 	beq.w	8007e00 <Socket_ReadSocketData+0x134>
 8007ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cea:	4a47      	ldr	r2, [pc, #284]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	4413      	add	r3, r2
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8084 	beq.w	8007e00 <Socket_ReadSocketData+0x134>
 8007cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfc:	4a42      	ldr	r2, [pc, #264]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	4413      	add	r3, r2
 8007d02:	3304      	adds	r3, #4
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d079      	beq.n	8007e00 <Socket_ReadSocketData+0x134>
 8007d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d10:	4a3d      	ldr	r2, [pc, #244]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	4413      	add	r3, r2
 8007d16:	330a      	adds	r3, #10
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d16f      	bne.n	8007e00 <Socket_ReadSocketData+0x134>
	{
		uint32	u32Address = u32StartAddress;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007d28:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	767b      	strb	r3, [r7, #25]
			u16Read = u16ReadCount;
 8007d2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d30:	837b      	strh	r3, [r7, #26]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
 8007d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d36:	4a34      	ldr	r2, [pc, #208]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	8b7a      	ldrh	r2, [r7, #26]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	82fb      	strh	r3, [r7, #22]
			if(s16Diff > 0)
 8007d4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dd09      	ble.n	8007d66 <Socket_ReadSocketData+0x9a>
			{
				u8SetRxDone = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	767b      	strb	r3, [r7, #25]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
 8007d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	4413      	add	r3, r2
 8007d60:	3304      	adds	r3, #4
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	837b      	strh	r3, [r7, #26]
			}

			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
 8007d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6a:	4a27      	ldr	r2, [pc, #156]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	4413      	add	r3, r2
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	7e7b      	ldrb	r3, [r7, #25]
 8007d74:	8b7a      	ldrh	r2, [r7, #26]
 8007d76:	69f8      	ldr	r0, [r7, #28]
 8007d78:	f7fe f9a4 	bl	80060c4 <hif_receive>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d13d      	bne.n	8007dfe <Socket_ReadSocketData+0x132>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
 8007d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d86:	4a20      	ldr	r2, [pc, #128]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	4413      	add	r3, r2
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
 8007d92:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	88da      	ldrh	r2, [r3, #6]
 8007d9e:	8b7b      	ldrh	r3, [r7, #26]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
 8007da8:	4b18      	ldr	r3, [pc, #96]	@ (8007e0c <Socket_ReadSocketData+0x140>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <Socket_ReadSocketData+0xf2>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
 8007db0:	4b16      	ldr	r3, [pc, #88]	@ (8007e0c <Socket_ReadSocketData+0x140>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	7bb9      	ldrb	r1, [r7, #14]
 8007db6:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4798      	blx	r3

				u16ReadCount -= u16Read;
 8007dbe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007dc0:	8b7b      	ldrh	r3, [r7, #26]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	853b      	strh	r3, [r7, #40]	@ 0x28
				u32Address += u16Read;
 8007dc6:	8b7b      	ldrh	r3, [r7, #26]
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
 8007dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8007e08 <Socket_ReadSocketData+0x13c>)
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	4413      	add	r3, r2
 8007dd8:	330a      	adds	r3, #10
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <Socket_ReadSocketData+0x12a>
 8007de2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <Socket_ReadSocketData+0x12a>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 8007de8:	2301      	movs	r3, #1
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	2000      	movs	r0, #0
 8007df0:	f7fe f968 	bl	80060c4 <hif_receive>
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
 8007df4:	e004      	b.n	8007e00 <Socket_ReadSocketData+0x134>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
 8007df6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d196      	bne.n	8007d2a <Socket_ReadSocketData+0x5e>
	}
}
 8007dfc:	e000      	b.n	8007e00 <Socket_ReadSocketData+0x134>
				break;
 8007dfe:	bf00      	nop
}
 8007e00:	bf00      	nop
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20000d60 	.word	0x20000d60
 8007e0c:	20000e14 	.word	0x20000e14

08007e10 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b0ba      	sub	sp, #232	@ 0xe8
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	4603      	mov	r3, r0
 8007e18:	603a      	str	r2, [r7, #0]
 8007e1a:	71fb      	strb	r3, [r7, #7]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	80bb      	strh	r3, [r7, #4]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b41      	cmp	r3, #65	@ 0x41
 8007e24:	d002      	beq.n	8007e2c <m2m_ip_cb+0x1c>
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	2b54      	cmp	r3, #84	@ 0x54
 8007e2a:	d11c      	bne.n	8007e66 <m2m_ip_cb+0x56>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 8007e2c:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8007e30:	2300      	movs	r3, #0
 8007e32:	2204      	movs	r2, #4
 8007e34:	6838      	ldr	r0, [r7, #0]
 8007e36:	f7fe f945 	bl	80060c4 <hif_receive>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 81f3 	bne.w	8008228 <m2m_ip_cb+0x418>
		{
			strBind.status = strBindReply.s8Status;
 8007e42:	f997 30cd 	ldrsb.w	r3, [r7, #205]	@ 0xcd
 8007e46:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
			if(gpfAppSocketCb)
 8007e4a:	4bb2      	ldr	r3, [pc, #712]	@ (8008114 <m2m_ip_cb+0x304>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 81ea 	beq.w	8008228 <m2m_ip_cb+0x418>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
 8007e54:	4baf      	ldr	r3, [pc, #700]	@ (8008114 <m2m_ip_cb+0x304>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f997 00cc 	ldrsb.w	r0, [r7, #204]	@ 0xcc
 8007e5c:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8007e60:	2101      	movs	r1, #1
 8007e62:	4798      	blx	r3
	{
 8007e64:	e1e0      	b.n	8008228 <m2m_ip_cb+0x418>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b42      	cmp	r3, #66	@ 0x42
 8007e6a:	d11c      	bne.n	8007ea6 <m2m_ip_cb+0x96>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 8007e6c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8007e70:	2300      	movs	r3, #0
 8007e72:	2204      	movs	r2, #4
 8007e74:	6838      	ldr	r0, [r7, #0]
 8007e76:	f7fe f925 	bl	80060c4 <hif_receive>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f040 81da 	bne.w	8008236 <m2m_ip_cb+0x426>
		{
			strListen.status = strListenReply.s8Status;
 8007e82:	f997 30c5 	ldrsb.w	r3, [r7, #197]	@ 0xc5
 8007e86:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
			if(gpfAppSocketCb)
 8007e8a:	4ba2      	ldr	r3, [pc, #648]	@ (8008114 <m2m_ip_cb+0x304>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 81d1 	beq.w	8008236 <m2m_ip_cb+0x426>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
 8007e94:	4b9f      	ldr	r3, [pc, #636]	@ (8008114 <m2m_ip_cb+0x304>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f997 00c4 	ldrsb.w	r0, [r7, #196]	@ 0xc4
 8007e9c:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
 8007ea4:	e1c7      	b.n	8008236 <m2m_ip_cb+0x426>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	2b43      	cmp	r3, #67	@ 0x43
 8007eaa:	d170      	bne.n	8007f8e <m2m_ip_cb+0x17e>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 8007eac:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	220c      	movs	r2, #12
 8007eb4:	6838      	ldr	r0, [r7, #0]
 8007eb6:	f7fe f905 	bl	80060c4 <hif_receive>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f040 81ba 	bne.w	8008236 <m2m_ip_cb+0x426>
			if(strAcceptReply.sConnectedSock >= 0)
 8007ec2:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	db44      	blt.n	8007f54 <m2m_ip_cb+0x144>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
 8007eca:	f997 30bc 	ldrsb.w	r3, [r7, #188]	@ 0xbc
 8007ece:	f997 20bd 	ldrsb.w	r2, [r7, #189]	@ 0xbd
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4a90      	ldr	r2, [pc, #576]	@ (8008118 <m2m_ip_cb+0x308>)
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	4413      	add	r3, r2
 8007eda:	330b      	adds	r3, #11
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b2d9      	uxtb	r1, r3
 8007ee0:	4a8d      	ldr	r2, [pc, #564]	@ (8008118 <m2m_ip_cb+0x308>)
 8007ee2:	0103      	lsls	r3, r0, #4
 8007ee4:	4413      	add	r3, r2
 8007ee6:	330b      	adds	r3, #11
 8007ee8:	460a      	mov	r2, r1
 8007eea:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
 8007eec:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 8007ef0:	4a89      	ldr	r2, [pc, #548]	@ (8008118 <m2m_ip_cb+0x308>)
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	4413      	add	r3, r2
 8007ef6:	330a      	adds	r3, #10
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 8007efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f00:	f997 20bd 	ldrsb.w	r2, [r7, #189]	@ 0xbd
 8007f04:	4610      	mov	r0, r2
 8007f06:	3b08      	subs	r3, #8
 8007f08:	b299      	uxth	r1, r3
 8007f0a:	4a83      	ldr	r2, [pc, #524]	@ (8008118 <m2m_ip_cb+0x308>)
 8007f0c:	0103      	lsls	r3, r0, #4
 8007f0e:	4413      	add	r3, r2
 8007f10:	3308      	adds	r3, #8
 8007f12:	460a      	mov	r2, r1
 8007f14:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
 8007f16:	4b81      	ldr	r3, [pc, #516]	@ (800811c <m2m_ip_cb+0x30c>)
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	4b7e      	ldr	r3, [pc, #504]	@ (800811c <m2m_ip_cb+0x30c>)
 8007f22:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
 8007f24:	4b7d      	ldr	r3, [pc, #500]	@ (800811c <m2m_ip_cb+0x30c>)
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <m2m_ip_cb+0x12c>
					++gu16SessionID;
 8007f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800811c <m2m_ip_cb+0x30c>)
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3301      	adds	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	4b78      	ldr	r3, [pc, #480]	@ (800811c <m2m_ip_cb+0x30c>)
 8007f3a:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 8007f3c:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 8007f40:	4618      	mov	r0, r3
 8007f42:	4b76      	ldr	r3, [pc, #472]	@ (800811c <m2m_ip_cb+0x30c>)
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b299      	uxth	r1, r3
 8007f48:	4a73      	ldr	r2, [pc, #460]	@ (8008118 <m2m_ip_cb+0x308>)
 8007f4a:	0103      	lsls	r3, r0, #4
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3306      	adds	r3, #6
 8007f50:	460a      	mov	r2, r1
 8007f52:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
 8007f54:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 8007f58:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
			strAccept.strAddr.sin_family		= AF_INET;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 8007f62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8007f66:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 8007f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			if(gpfAppSocketCb)
 8007f72:	4b68      	ldr	r3, [pc, #416]	@ (8008114 <m2m_ip_cb+0x304>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 815d 	beq.w	8008236 <m2m_ip_cb+0x426>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 8007f7c:	4b65      	ldr	r3, [pc, #404]	@ (8008114 <m2m_ip_cb+0x304>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f997 00bc 	ldrsb.w	r0, [r7, #188]	@ 0xbc
 8007f84:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8007f88:	2104      	movs	r1, #4
 8007f8a:	4798      	blx	r3
}
 8007f8c:	e153      	b.n	8008236 <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2b44      	cmp	r3, #68	@ 0x44
 8007f92:	d002      	beq.n	8007f9a <m2m_ip_cb+0x18a>
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	2b4b      	cmp	r3, #75	@ 0x4b
 8007f98:	d131      	bne.n	8007ffe <m2m_ip_cb+0x1ee>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
 8007f9a:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	6838      	ldr	r0, [r7, #0]
 8007fa4:	f7fe f88e 	bl	80060c4 <hif_receive>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 813e 	bne.w	800822c <m2m_ip_cb+0x41c>
			strConnMsg.sock		= strConnectReply.sock;
 8007fb0:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 8007fb4:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
			strConnMsg.s8Error	= strConnectReply.s8Error;
 8007fb8:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8007fbc:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
 8007fc0:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10c      	bne.n	8007fe2 <m2m_ip_cb+0x1d2>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 8007fc8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007fcc:	f997 209c 	ldrsb.w	r2, [r7, #156]	@ 0x9c
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	3b08      	subs	r3, #8
 8007fd4:	b299      	uxth	r1, r3
 8007fd6:	4a50      	ldr	r2, [pc, #320]	@ (8008118 <m2m_ip_cb+0x308>)
 8007fd8:	0103      	lsls	r3, r0, #4
 8007fda:	4413      	add	r3, r2
 8007fdc:	3308      	adds	r3, #8
 8007fde:	460a      	mov	r2, r1
 8007fe0:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
 8007fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8008114 <m2m_ip_cb+0x304>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 8120 	beq.w	800822c <m2m_ip_cb+0x41c>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
 8007fec:	4b49      	ldr	r3, [pc, #292]	@ (8008114 <m2m_ip_cb+0x304>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f997 009c 	ldrsb.w	r0, [r7, #156]	@ 0x9c
 8007ff4:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8007ff8:	2105      	movs	r1, #5
 8007ffa:	4798      	blx	r3
	{
 8007ffc:	e116      	b.n	800822c <m2m_ip_cb+0x41c>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	2b4a      	cmp	r3, #74	@ 0x4a
 8008002:	d117      	bne.n	8008034 <m2m_ip_cb+0x224>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 8008004:	f107 010c 	add.w	r1, r7, #12
 8008008:	2300      	movs	r3, #0
 800800a:	2244      	movs	r2, #68	@ 0x44
 800800c:	6838      	ldr	r0, [r7, #0]
 800800e:	f7fe f859 	bl	80060c4 <hif_receive>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	f040 810e 	bne.w	8008236 <m2m_ip_cb+0x426>
			if(gpfAppResolveCb)
 800801a:	4b41      	ldr	r3, [pc, #260]	@ (8008120 <m2m_ip_cb+0x310>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 8109 	beq.w	8008236 <m2m_ip_cb+0x426>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
 8008024:	4b3e      	ldr	r3, [pc, #248]	@ (8008120 <m2m_ip_cb+0x310>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800802a:	f107 020c 	add.w	r2, r7, #12
 800802e:	4610      	mov	r0, r2
 8008030:	4798      	blx	r3
}
 8008032:	e100      	b.n	8008236 <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	2b46      	cmp	r3, #70	@ 0x46
 8008038:	d006      	beq.n	8008048 <m2m_ip_cb+0x238>
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	2b48      	cmp	r3, #72	@ 0x48
 800803e:	d003      	beq.n	8008048 <m2m_ip_cb+0x238>
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b4d      	cmp	r3, #77	@ 0x4d
 8008044:	f040 808e 	bne.w	8008164 <m2m_ip_cb+0x354>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
 8008048:	2306      	movs	r3, #6
 800804a:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		if(u8OpCode == SOCKET_CMD_RECVFROM)
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b48      	cmp	r3, #72	@ 0x48
 8008052:	d102      	bne.n	800805a <m2m_ip_cb+0x24a>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 8008054:	2309      	movs	r3, #9
 8008056:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		u16ReadSize = sizeof(tstrRecvReply);
 800805a:	2310      	movs	r3, #16
 800805c:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 8008060:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	@ 0xd8
 8008064:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8008068:	2300      	movs	r3, #0
 800806a:	6838      	ldr	r0, [r7, #0]
 800806c:	f7fe f82a 	bl	80060c4 <hif_receive>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	f040 80dc 	bne.w	8008230 <m2m_ip_cb+0x420>
			uint16 u16SessionID = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
			sock			= strRecvReply.sock;
 800807e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8008082:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
			u16SessionID = strRecvReply.u16SessionID;
 8008086:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800808a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
			gastrSockets[sock].bIsRecvPending = 0;
 800808e:	f997 30d5 	ldrsb.w	r3, [r7, #213]	@ 0xd5
 8008092:	4a21      	ldr	r2, [pc, #132]	@ (8008118 <m2m_ip_cb+0x308>)
 8008094:	011b      	lsls	r3, r3, #4
 8008096:	4413      	add	r3, r2
 8008098:	330c      	adds	r3, #12
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 800809e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80080a2:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 80080a6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80080aa:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
 80080ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080b2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
 80080b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 80080bc:	f997 30d5 	ldrsb.w	r3, [r7, #213]	@ 0xd5
 80080c0:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <m2m_ip_cb+0x308>)
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	4413      	add	r3, r2
 80080c6:	3306      	adds	r3, #6
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d13b      	bne.n	800814c <m2m_ip_cb+0x33c>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 80080d4:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dd23      	ble.n	8008124 <m2m_ip_cb+0x314>
 80080dc:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	@ 0xd2
 80080e0:	88bb      	ldrh	r3, [r7, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	da1e      	bge.n	8008124 <m2m_ip_cb+0x314>
					u32Address += u16DataOffset;
 80080e6:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	4413      	add	r3, r2
 80080ee:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
 80080f0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80080f4:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 80080f8:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 80080fc:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8008100:	f997 00d5 	ldrsb.w	r0, [r7, #213]	@ 0xd5
 8008104:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	f7ff fdde 	bl	8007ccc <Socket_ReadSocketData>
	{
 8008110:	e08e      	b.n	8008230 <m2m_ip_cb+0x420>
 8008112:	bf00      	nop
 8008114:	20000e14 	.word	0x20000e14
 8008118:	20000d60 	.word	0x20000d60
 800811c:	20000e10 	.word	0x20000e10
 8008120:	20000e18 	.word	0x20000e18
					strRecvMsg.s16BufferSize	= s16RecvStatus;
 8008124:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8008128:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
					strRecvMsg.pu8Buffer		= NULL;
 800812c:	2300      	movs	r3, #0
 800812e:	673b      	str	r3, [r7, #112]	@ 0x70
					if(gpfAppSocketCb)
 8008130:	4b43      	ldr	r3, [pc, #268]	@ (8008240 <m2m_ip_cb+0x430>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d07b      	beq.n	8008230 <m2m_ip_cb+0x420>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
 8008138:	4b41      	ldr	r3, [pc, #260]	@ (8008240 <m2m_ip_cb+0x430>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8008140:	f897 10df 	ldrb.w	r1, [r7, #223]	@ 0xdf
 8008144:	f997 00d5 	ldrsb.w	r0, [r7, #213]	@ 0xd5
 8008148:	4798      	blx	r3
	{
 800814a:	e071      	b.n	8008230 <m2m_ip_cb+0x420>
				if(u16ReadSize < u16BufferSize)
 800814c:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	@ 0xd8
 8008150:	88bb      	ldrh	r3, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d26c      	bcs.n	8008230 <m2m_ip_cb+0x420>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 8008156:	2301      	movs	r3, #1
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	2000      	movs	r0, #0
 800815e:	f7fd ffb1 	bl	80060c4 <hif_receive>
	{
 8008162:	e065      	b.n	8008230 <m2m_ip_cb+0x420>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b45      	cmp	r3, #69	@ 0x45
 8008168:	d005      	beq.n	8008176 <m2m_ip_cb+0x366>
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	2b47      	cmp	r3, #71	@ 0x47
 800816e:	d002      	beq.n	8008176 <m2m_ip_cb+0x366>
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	2b4c      	cmp	r3, #76	@ 0x4c
 8008174:	d13b      	bne.n	80081ee <m2m_ip_cb+0x3de>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
 8008176:	2307      	movs	r3, #7
 8008178:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		if(u8OpCode == SOCKET_CMD_SENDTO)
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	2b47      	cmp	r3, #71	@ 0x47
 8008180:	d102      	bne.n	8008188 <m2m_ip_cb+0x378>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
 8008182:	2308      	movs	r3, #8
 8008184:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 8008188:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800818c:	2300      	movs	r3, #0
 800818e:	2208      	movs	r2, #8
 8008190:	6838      	ldr	r0, [r7, #0]
 8008192:	f7fd ff97 	bl	80060c4 <hif_receive>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d14b      	bne.n	8008234 <m2m_ip_cb+0x424>
			uint16 u16SessionID = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
			sock = strReply.sock;
 80081a2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80081a6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
			u16SessionID = strReply.u16SessionID;
 80081aa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80081ae:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 80081b2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80081b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 80081ba:	f997 30db 	ldrsb.w	r3, [r7, #219]	@ 0xdb
 80081be:	4a21      	ldr	r2, [pc, #132]	@ (8008244 <m2m_ip_cb+0x434>)
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	4413      	add	r3, r2
 80081c4:	3306      	adds	r3, #6
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d130      	bne.n	8008234 <m2m_ip_cb+0x424>
				if(gpfAppSocketCb)
 80081d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008240 <m2m_ip_cb+0x430>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02c      	beq.n	8008234 <m2m_ip_cb+0x424>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
 80081da:	4b19      	ldr	r3, [pc, #100]	@ (8008240 <m2m_ip_cb+0x430>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 80081e2:	f897 10de 	ldrb.w	r1, [r7, #222]	@ 0xde
 80081e6:	f997 00db 	ldrsb.w	r0, [r7, #219]	@ 0xdb
 80081ea:	4798      	blx	r3
	{
 80081ec:	e022      	b.n	8008234 <m2m_ip_cb+0x424>
	else if(u8OpCode == SOCKET_CMD_PING)
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	2b52      	cmp	r3, #82	@ 0x52
 80081f2:	d120      	bne.n	8008236 <m2m_ip_cb+0x426>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 80081f4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80081f8:	2301      	movs	r3, #1
 80081fa:	2214      	movs	r2, #20
 80081fc:	6838      	ldr	r0, [r7, #0]
 80081fe:	f7fd ff61 	bl	80060c4 <hif_receive>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d116      	bne.n	8008236 <m2m_ip_cb+0x426>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
 8008208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800820a:	461a      	mov	r2, r3
 800820c:	4b0e      	ldr	r3, [pc, #56]	@ (8008248 <m2m_ip_cb+0x438>)
 800820e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
 8008210:	4b0d      	ldr	r3, [pc, #52]	@ (8008248 <m2m_ip_cb+0x438>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00e      	beq.n	8008236 <m2m_ip_cb+0x426>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 8008218:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <m2m_ip_cb+0x438>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800821e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008220:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008224:	4798      	blx	r3
}
 8008226:	e006      	b.n	8008236 <m2m_ip_cb+0x426>
	{
 8008228:	bf00      	nop
 800822a:	e004      	b.n	8008236 <m2m_ip_cb+0x426>
	{
 800822c:	bf00      	nop
 800822e:	e002      	b.n	8008236 <m2m_ip_cb+0x426>
	{
 8008230:	bf00      	nop
 8008232:	e000      	b.n	8008236 <m2m_ip_cb+0x426>
	{
 8008234:	bf00      	nop
}
 8008236:	bf00      	nop
 8008238:	37e0      	adds	r7, #224	@ 0xe0
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000e14 	.word	0x20000e14
 8008244:	20000d60 	.word	0x20000d60
 8008248:	20000e20 	.word	0x20000e20

0800824c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
 8008250:	4b0a      	ldr	r3, [pc, #40]	@ (800827c <socketInit+0x30>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10e      	bne.n	8008278 <socketInit+0x2c>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 800825a:	22b0      	movs	r2, #176	@ 0xb0
 800825c:	2100      	movs	r1, #0
 800825e:	4808      	ldr	r0, [pc, #32]	@ (8008280 <socketInit+0x34>)
 8008260:	f7fd fbc4 	bl	80059ec <m2m_memset>
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
 8008264:	4907      	ldr	r1, [pc, #28]	@ (8008284 <socketInit+0x38>)
 8008266:	2002      	movs	r0, #2
 8008268:	f7fd ff90 	bl	800618c <hif_register_cb>
		gbSocketInit	= 1;
 800826c:	4b03      	ldr	r3, [pc, #12]	@ (800827c <socketInit+0x30>)
 800826e:	2201      	movs	r2, #1
 8008270:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
 8008272:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <socketInit+0x3c>)
 8008274:	2200      	movs	r2, #0
 8008276:	801a      	strh	r2, [r3, #0]
	}
}
 8008278:	bf00      	nop
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000e1c 	.word	0x20000e1c
 8008280:	20000d60 	.word	0x20000d60
 8008284:	08007e11 	.word	0x08007e11
 8008288:	20000e10 	.word	0x20000e10

0800828c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
 8008296:	4a06      	ldr	r2, [pc, #24]	@ (80082b0 <registerSocketCallback+0x24>)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
 800829c:	4a05      	ldr	r2, [pc, #20]	@ (80082b4 <registerSocketCallback+0x28>)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6013      	str	r3, [r2, #0]
}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000e14 	.word	0x20000e14
 80082b4:	20000e18 	.word	0x20000e18

080082b8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08c      	sub	sp, #48	@ 0x30
 80082bc:	af04      	add	r7, sp, #16
 80082be:	4603      	mov	r3, r0
 80082c0:	80fb      	strh	r3, [r7, #6]
 80082c2:	460b      	mov	r3, r1
 80082c4:	717b      	strb	r3, [r7, #5]
 80082c6:	4613      	mov	r3, r2
 80082c8:	713b      	strb	r3, [r7, #4]
	SOCKET					sock = -1;
 80082ca:	23ff      	movs	r3, #255	@ 0xff
 80082cc:	77fb      	strb	r3, [r7, #31]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	f040 809c 	bne.w	800840e <socket+0x156>
	{
		if(u8Type == SOCK_STREAM)
 80082d6:	797b      	ldrb	r3, [r7, #5]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d12d      	bne.n	8008338 <socket+0x80>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 80082dc:	2300      	movs	r3, #0
 80082de:	77bb      	strb	r3, [r7, #30]
 80082e0:	e026      	b.n	8008330 <socket+0x78>
			{
				u8SockID	= u8NextTcpSock;
 80082e2:	4b4e      	ldr	r3, [pc, #312]	@ (800841c <socket+0x164>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	74fb      	strb	r3, [r7, #19]
				pstrSock	= &gastrSockets[u8NextTcpSock];
 80082e8:	4b4c      	ldr	r3, [pc, #304]	@ (800841c <socket+0x164>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	4a4b      	ldr	r2, [pc, #300]	@ (8008420 <socket+0x168>)
 80082f2:	4413      	add	r3, r2
 80082f4:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 80082f6:	4b49      	ldr	r3, [pc, #292]	@ (800841c <socket+0x164>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	4b49      	ldr	r3, [pc, #292]	@ (8008424 <socket+0x16c>)
 8008300:	fb83 1302 	smull	r1, r3, r3, r2
 8008304:	4413      	add	r3, r2
 8008306:	1099      	asrs	r1, r3, #2
 8008308:	17d3      	asrs	r3, r2, #31
 800830a:	1ac9      	subs	r1, r1, r3
 800830c:	460b      	mov	r3, r1
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	1a5b      	subs	r3, r3, r1
 8008312:	1ad1      	subs	r1, r2, r3
 8008314:	b2ca      	uxtb	r2, r1
 8008316:	4b41      	ldr	r3, [pc, #260]	@ (800841c <socket+0x164>)
 8008318:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	7a9b      	ldrb	r3, [r3, #10]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d102      	bne.n	800832a <socket+0x72>
				{
					sock = (SOCKET)u8SockID;
 8008324:	7cfb      	ldrb	r3, [r7, #19]
 8008326:	77fb      	strb	r3, [r7, #31]
					break;
 8008328:	e036      	b.n	8008398 <socket+0xe0>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800832a:	7fbb      	ldrb	r3, [r7, #30]
 800832c:	3301      	adds	r3, #1
 800832e:	77bb      	strb	r3, [r7, #30]
 8008330:	7fbb      	ldrb	r3, [r7, #30]
 8008332:	2b06      	cmp	r3, #6
 8008334:	d9d5      	bls.n	80082e2 <socket+0x2a>
 8008336:	e02f      	b.n	8008398 <socket+0xe0>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
 8008338:	797b      	ldrb	r3, [r7, #5]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d12c      	bne.n	8008398 <socket+0xe0>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
 800833e:	4b3a      	ldr	r3, [pc, #232]	@ (8008428 <socket+0x170>)
 8008340:	617b      	str	r3, [r7, #20]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 8008342:	2300      	movs	r3, #0
 8008344:	77bb      	strb	r3, [r7, #30]
 8008346:	e024      	b.n	8008392 <socket+0xda>
			{
				u8SockID		= u8NextUdpSock;
 8008348:	4b38      	ldr	r3, [pc, #224]	@ (800842c <socket+0x174>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	74fb      	strb	r3, [r7, #19]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
 800834e:	4b37      	ldr	r3, [pc, #220]	@ (800842c <socket+0x174>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 800835c:	4b33      	ldr	r3, [pc, #204]	@ (800842c <socket+0x174>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	3301      	adds	r3, #1
 8008364:	425a      	negs	r2, r3
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	f002 0203 	and.w	r2, r2, #3
 800836e:	bf58      	it	pl
 8008370:	4253      	negpl	r3, r2
 8008372:	b2da      	uxtb	r2, r3
 8008374:	4b2d      	ldr	r3, [pc, #180]	@ (800842c <socket+0x174>)
 8008376:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	7a9b      	ldrb	r3, [r3, #10]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <socket+0xd4>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 8008382:	7cfb      	ldrb	r3, [r7, #19]
 8008384:	3307      	adds	r3, #7
 8008386:	b2db      	uxtb	r3, r3
 8008388:	77fb      	strb	r3, [r7, #31]
					break;
 800838a:	e005      	b.n	8008398 <socket+0xe0>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800838c:	7fbb      	ldrb	r3, [r7, #30]
 800838e:	3301      	adds	r3, #1
 8008390:	77bb      	strb	r3, [r7, #30]
 8008392:	7fbb      	ldrb	r3, [r7, #30]
 8008394:	2b03      	cmp	r3, #3
 8008396:	d9d7      	bls.n	8008348 <socket+0x90>
				}
			}
		}

		if(sock >= 0)
 8008398:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800839c:	2b00      	cmp	r3, #0
 800839e:	db36      	blt.n	800840e <socket+0x156>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 80083a0:	2210      	movs	r2, #16
 80083a2:	2100      	movs	r1, #0
 80083a4:	69b8      	ldr	r0, [r7, #24]
 80083a6:	f7fd fb21 	bl	80059ec <m2m_memset>
			pstrSock->bIsUsed = 1;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2201      	movs	r2, #1
 80083ae:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
 80083b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008430 <socket+0x178>)
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	3301      	adds	r3, #1
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008430 <socket+0x178>)
 80083bc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
 80083be:	4b1c      	ldr	r3, [pc, #112]	@ (8008430 <socket+0x178>)
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <socket+0x11e>
				++gu16SessionID;
 80083c8:	4b19      	ldr	r3, [pc, #100]	@ (8008430 <socket+0x178>)
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3301      	adds	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	4b17      	ldr	r3, [pc, #92]	@ (8008430 <socket+0x178>)
 80083d4:	801a      	strh	r2, [r3, #0]

			pstrSock->u16SessionID = gu16SessionID;
 80083d6:	4b16      	ldr	r3, [pc, #88]	@ (8008430 <socket+0x178>)
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );

			if(u8Flags & SOCKET_FLAGS_SSL)
 80083e0:	793b      	ldrb	r3, [r7, #4]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d011      	beq.n	800840e <socket+0x156>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
 80083ea:	7ffb      	ldrb	r3, [r7, #31]
 80083ec:	733b      	strb	r3, [r7, #12]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2221      	movs	r2, #33	@ 0x21
 80083f2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 80083f4:	f107 020c 	add.w	r2, r7, #12
 80083f8:	2300      	movs	r3, #0
 80083fa:	9302      	str	r3, [sp, #8]
 80083fc:	2300      	movs	r3, #0
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	2300      	movs	r3, #0
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	2304      	movs	r3, #4
 8008406:	2150      	movs	r1, #80	@ 0x50
 8008408:	2002      	movs	r0, #2
 800840a:	f7fd fc01 	bl	8005c10 <hif_send>
			}
		}
	}
	return sock;
 800840e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000e24 	.word	0x20000e24
 8008420:	20000d60 	.word	0x20000d60
 8008424:	92492493 	.word	0x92492493
 8008428:	20000dd0 	.word	0x20000dd0
 800842c:	20000e25 	.word	0x20000e25
 8008430:	20000e10 	.word	0x20000e10

08008434 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af04      	add	r7, sp, #16
 800843a:	4603      	mov	r3, r0
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	71fb      	strb	r3, [r7, #7]
 8008440:	4613      	mov	r3, r2
 8008442:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8008444:	23fa      	movs	r3, #250	@ 0xfa
 8008446:	75fb      	strb	r3, [r7, #23]
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d047      	beq.n	80084de <bind+0xaa>
 800844e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	db43      	blt.n	80084de <bind+0xaa>
 8008456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845a:	4a24      	ldr	r2, [pc, #144]	@ (80084ec <bind+0xb8>)
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	4413      	add	r3, r2
 8008460:	330a      	adds	r3, #10
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	d139      	bne.n	80084de <bind+0xaa>
 800846a:	79bb      	ldrb	r3, [r7, #6]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d036      	beq.n	80084de <bind+0xaa>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
 8008470:	2341      	movs	r3, #65	@ 0x41
 8008472:	75bb      	strb	r3, [r7, #22]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 8008474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008478:	4a1c      	ldr	r2, [pc, #112]	@ (80084ec <bind+0xb8>)
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	4413      	add	r3, r2
 800847e:	330b      	adds	r3, #11
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <bind+0x5c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
 800848c:	2354      	movs	r3, #84	@ 0x54
 800848e:	75bb      	strb	r3, [r7, #22]
		}

		/* Build the bind request. */
		strBind.sock = sock;
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	743b      	strb	r3, [r7, #16]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 8008494:	f107 0308 	add.w	r3, r7, #8
 8008498:	2208      	movs	r2, #8
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd fa85 	bl	80059ac <m2m_memcpy>
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
 80084a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a6:	4a11      	ldr	r2, [pc, #68]	@ (80084ec <bind+0xb8>)
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	4413      	add	r3, r2
 80084ac:	3306      	adds	r3, #6
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	827b      	strh	r3, [r7, #18]

		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
 80084b4:	f107 0208 	add.w	r2, r7, #8
 80084b8:	7db9      	ldrb	r1, [r7, #22]
 80084ba:	2300      	movs	r3, #0
 80084bc:	9302      	str	r3, [sp, #8]
 80084be:	2300      	movs	r3, #0
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	2300      	movs	r3, #0
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	230c      	movs	r3, #12
 80084c8:	2002      	movs	r0, #2
 80084ca:	f7fd fba1 	bl	8005c10 <hif_send>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 80084d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <bind+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 80084da:	23f7      	movs	r3, #247	@ 0xf7
 80084dc:	75fb      	strb	r3, [r7, #23]
		}
	}
	return s8Ret;
 80084de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20000d60 	.word	0x20000d60

080084f0 <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af04      	add	r7, sp, #16
 80084f6:	4603      	mov	r3, r0
 80084f8:	460a      	mov	r2, r1
 80084fa:	71fb      	strb	r3, [r7, #7]
 80084fc:	4613      	mov	r3, r2
 80084fe:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8008500:	23fa      	movs	r3, #250	@ 0xfa
 8008502:	73fb      	strb	r3, [r7, #15]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 8008504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008508:	2b00      	cmp	r3, #0
 800850a:	db2b      	blt.n	8008564 <listen+0x74>
 800850c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008510:	4a17      	ldr	r2, [pc, #92]	@ (8008570 <listen+0x80>)
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	4413      	add	r3, r2
 8008516:	330a      	adds	r3, #10
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	d121      	bne.n	8008564 <listen+0x74>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	723b      	strb	r3, [r7, #8]
		strListen.u8BackLog = backlog;
 8008524:	79bb      	ldrb	r3, [r7, #6]
 8008526:	727b      	strb	r3, [r7, #9]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
 8008528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800852c:	4a10      	ldr	r2, [pc, #64]	@ (8008570 <listen+0x80>)
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	4413      	add	r3, r2
 8008532:	3306      	adds	r3, #6
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	817b      	strh	r3, [r7, #10]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
 800853a:	f107 0208 	add.w	r2, r7, #8
 800853e:	2300      	movs	r3, #0
 8008540:	9302      	str	r3, [sp, #8]
 8008542:	2300      	movs	r3, #0
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	2300      	movs	r3, #0
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	2304      	movs	r3, #4
 800854c:	2142      	movs	r1, #66	@ 0x42
 800854e:	2002      	movs	r0, #2
 8008550:	f7fd fb5e 	bl	8005c10 <hif_send>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 8008558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <listen+0x74>
		{
			s8Ret = SOCK_ERR_INVALID;
 8008560:	23f7      	movs	r3, #247	@ 0xf7
 8008562:	73fb      	strb	r3, [r7, #15]
		}
	}
	return s8Ret;
 8008564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000d60 	.word	0x20000d60

08008574 <accept>:

Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	73fb      	strb	r3, [r7, #15]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8008582:	23fa      	movs	r3, #250	@ 0xfa
 8008584:	75fb      	strb	r3, [r7, #23]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
 8008586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	db0b      	blt.n	80085a6 <accept+0x32>
 800858e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008592:	4a09      	ldr	r2, [pc, #36]	@ (80085b8 <accept+0x44>)
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	4413      	add	r3, r2
 8008598:	330a      	adds	r3, #10
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <accept+0x32>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75fb      	strb	r3, [r7, #23]
	}
	return s8Ret;
 80085a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	20000d60 	.word	0x20000d60

080085bc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08e      	sub	sp, #56	@ 0x38
 80085c0:	af04      	add	r7, sp, #16
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	4611      	mov	r1, r2
 80085c6:	461a      	mov	r2, r3
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]
 80085cc:	460b      	mov	r3, r1
 80085ce:	81bb      	strh	r3, [r7, #12]
 80085d0:	4613      	mov	r3, r2
 80085d2:	80fb      	strh	r3, [r7, #6]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 80085d4:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 80085d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 80085da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db59      	blt.n	8008696 <send+0xda>
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d056      	beq.n	8008696 <send+0xda>
 80085e8:	89bb      	ldrh	r3, [r7, #12]
 80085ea:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80085ee:	d852      	bhi.n	8008696 <send+0xda>
 80085f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f4:	4a2b      	ldr	r2, [pc, #172]	@ (80086a4 <send+0xe8>)
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	4413      	add	r3, r2
 80085fa:	330a      	adds	r3, #10
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d148      	bne.n	8008696 <send+0xda>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
 8008604:	2345      	movs	r3, #69	@ 0x45
 8008606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
 800860a:	2350      	movs	r3, #80	@ 0x50
 800860c:	84bb      	strh	r3, [r7, #36]	@ 0x24

		strSend.sock			= sock;
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	743b      	strb	r3, [r7, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
 8008612:	89bb      	ldrh	r3, [r7, #12]
 8008614:	827b      	strh	r3, [r7, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
 8008616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861a:	4a22      	ldr	r2, [pc, #136]	@ (80086a4 <send+0xe8>)
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	4413      	add	r3, r2
 8008620:	3306      	adds	r3, #6
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	83bb      	strh	r3, [r7, #28]

		if(sock >= TCP_SOCK_MAX)
 8008628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800862c:	2b06      	cmp	r3, #6
 800862e:	dd01      	ble.n	8008634 <send+0x78>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
 8008630:	2344      	movs	r3, #68	@ 0x44
 8008632:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 8008634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008638:	4a1a      	ldr	r2, [pc, #104]	@ (80086a4 <send+0xe8>)
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	4413      	add	r3, r2
 800863e:	330b      	adds	r3, #11
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <send+0xa6>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
 800864c:	234c      	movs	r3, #76	@ 0x4c
 800864e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
 8008652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008656:	4a13      	ldr	r2, [pc, #76]	@ (80086a4 <send+0xe8>)
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	4413      	add	r3, r2
 800865c:	3308      	adds	r3, #8
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 8008662:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008666:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800866a:	b2d9      	uxtb	r1, r3
 800866c:	f107 0210 	add.w	r2, r7, #16
 8008670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008672:	9302      	str	r3, [sp, #8]
 8008674:	89bb      	ldrh	r3, [r7, #12]
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	2310      	movs	r3, #16
 800867e:	2002      	movs	r0, #2
 8008680:	f7fd fac6 	bl	8005c10 <hif_send>
 8008684:	4603      	mov	r3, r0
 8008686:	84fb      	strh	r3, [r7, #38]	@ 0x26
		if(s16Ret != SOCK_ERR_NO_ERROR)
 8008688:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <send+0xda>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
 8008690:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 8008694:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
	}
	return s16Ret;
 8008696:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800869a:	4618      	mov	r0, r3
 800869c:	3728      	adds	r7, #40	@ 0x28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000d60 	.word	0x20000d60

080086a8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08c      	sub	sp, #48	@ 0x30
 80086ac:	af04      	add	r7, sp, #16
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	4603      	mov	r3, r0
 80086b4:	73fb      	strb	r3, [r7, #15]
 80086b6:	4613      	mov	r3, r2
 80086b8:	81bb      	strh	r3, [r7, #12]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 80086ba:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 80086be:	83fb      	strh	r3, [r7, #30]

	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 80086c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	db6c      	blt.n	80087a2 <recv+0xfa>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d069      	beq.n	80087a2 <recv+0xfa>
 80086ce:	89bb      	ldrh	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d066      	beq.n	80087a2 <recv+0xfa>
 80086d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086d8:	4a35      	ldr	r2, [pc, #212]	@ (80087b0 <recv+0x108>)
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	4413      	add	r3, r2
 80086de:	330a      	adds	r3, #10
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d15c      	bne.n	80087a2 <recv+0xfa>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
 80086e8:	2300      	movs	r3, #0
 80086ea:	83fb      	strh	r3, [r7, #30]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
 80086ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086f0:	4a2f      	ldr	r2, [pc, #188]	@ (80087b0 <recv+0x108>)
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	4413      	add	r3, r2
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	601a      	str	r2, [r3, #0]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
 80086fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086fe:	4a2c      	ldr	r2, [pc, #176]	@ (80087b0 <recv+0x108>)
 8008700:	011b      	lsls	r3, r3, #4
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	89ba      	ldrh	r2, [r7, #12]
 8008708:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
 800870a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800870e:	4a28      	ldr	r2, [pc, #160]	@ (80087b0 <recv+0x108>)
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	4413      	add	r3, r2
 8008714:	330c      	adds	r3, #12
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d141      	bne.n	80087a2 <recv+0xfa>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
 800871e:	2346      	movs	r3, #70	@ 0x46
 8008720:	777b      	strb	r3, [r7, #29]

			gastrSockets[sock].bIsRecvPending = 1;
 8008722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008726:	4a22      	ldr	r2, [pc, #136]	@ (80087b0 <recv+0x108>)
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	4413      	add	r3, r2
 800872c:	330c      	adds	r3, #12
 800872e:	2201      	movs	r2, #1
 8008730:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 8008732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008736:	4a1e      	ldr	r2, [pc, #120]	@ (80087b0 <recv+0x108>)
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	4413      	add	r3, r2
 800873c:	330b      	adds	r3, #11
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <recv+0xa6>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
 800874a:	234d      	movs	r3, #77	@ 0x4d
 800874c:	777b      	strb	r3, [r7, #29]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d103      	bne.n	800875c <recv+0xb4>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 8008754:	f04f 33ff 	mov.w	r3, #4294967295
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e001      	b.n	8008760 <recv+0xb8>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	617b      	str	r3, [r7, #20]
			strRecv.sock = sock;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	763b      	strb	r3, [r7, #24]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
 8008764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008768:	4a11      	ldr	r2, [pc, #68]	@ (80087b0 <recv+0x108>)
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	4413      	add	r3, r2
 800876e:	3306      	adds	r3, #6
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	837b      	strh	r3, [r7, #26]

			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
 8008776:	f107 0214 	add.w	r2, r7, #20
 800877a:	7f79      	ldrb	r1, [r7, #29]
 800877c:	2300      	movs	r3, #0
 800877e:	9302      	str	r3, [sp, #8]
 8008780:	2300      	movs	r3, #0
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	2300      	movs	r3, #0
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	2308      	movs	r3, #8
 800878a:	2002      	movs	r0, #2
 800878c:	f7fd fa40 	bl	8005c10 <hif_send>
 8008790:	4603      	mov	r3, r0
 8008792:	83fb      	strh	r3, [r7, #30]
			if(s16Ret != SOCK_ERR_NO_ERROR)
 8008794:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <recv+0xfa>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
 800879c:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80087a0:	83fb      	strh	r3, [r7, #30]
			}
		}
	}
	return s16Ret;
 80087a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3720      	adds	r7, #32
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20000d60 	.word	0x20000d60

080087b4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af04      	add	r7, sp, #16
 80087ba:	4603      	mov	r3, r0
 80087bc:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 80087be:	23fa      	movs	r3, #250	@ 0xfa
 80087c0:	73fb      	strb	r3, [r7, #15]
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 80087c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	db53      	blt.n	8008872 <close+0xbe>
 80087ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008880 <close+0xcc>)
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	4413      	add	r3, r2
 80087d4:	330a      	adds	r3, #10
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d149      	bne.n	8008872 <close+0xbe>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
 80087de:	2349      	movs	r3, #73	@ 0x49
 80087e0:	73bb      	strb	r3, [r7, #14]
		tstrCloseCmd strclose;
		strclose.sock = sock;
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	723b      	strb	r3, [r7, #8]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
 80087e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ea:	4a25      	ldr	r2, [pc, #148]	@ (8008880 <close+0xcc>)
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	4413      	add	r3, r2
 80087f0:	3306      	adds	r3, #6
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	817b      	strh	r3, [r7, #10]

		gastrSockets[sock].bIsUsed = 0;
 80087f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087fc:	4a20      	ldr	r2, [pc, #128]	@ (8008880 <close+0xcc>)
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4413      	add	r3, r2
 8008802:	330a      	adds	r3, #10
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
 8008808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800880c:	4a1c      	ldr	r2, [pc, #112]	@ (8008880 <close+0xcc>)
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	4413      	add	r3, r2
 8008812:	3306      	adds	r3, #6
 8008814:	2200      	movs	r2, #0
 8008816:	801a      	strh	r2, [r3, #0]

		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 8008818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800881c:	4a18      	ldr	r2, [pc, #96]	@ (8008880 <close+0xcc>)
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	4413      	add	r3, r2
 8008822:	330b      	adds	r3, #11
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <close+0x80>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
 8008830:	234e      	movs	r3, #78	@ 0x4e
 8008832:	73bb      	strb	r3, [r7, #14]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
 8008834:	f107 0208 	add.w	r2, r7, #8
 8008838:	7bb9      	ldrb	r1, [r7, #14]
 800883a:	2300      	movs	r3, #0
 800883c:	9302      	str	r3, [sp, #8]
 800883e:	2300      	movs	r3, #0
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	2300      	movs	r3, #0
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	2304      	movs	r3, #4
 8008848:	2002      	movs	r0, #2
 800884a:	f7fd f9e1 	bl	8005c10 <hif_send>
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 8008852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <close+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 800885a:	23f7      	movs	r3, #247	@ 0xf7
 800885c:	73fb      	strb	r3, [r7, #15]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
 800885e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	4a06      	ldr	r2, [pc, #24]	@ (8008880 <close+0xcc>)
 8008866:	4413      	add	r3, r2
 8008868:	2210      	movs	r2, #16
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f7fd f8bd 	bl	80059ec <m2m_memset>
	}
	return s8Ret;
 8008872:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20000d60 	.word	0x20000d60

08008884 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800888a:	463b      	mov	r3, r7
 800888c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	22b9      	movs	r2, #185	@ 0xb9
 8008892:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 8008894:	2100      	movs	r1, #0
 8008896:	4810      	ldr	r0, [pc, #64]	@ (80088d8 <spi_flash_enter_low_power_mode+0x54>)
 8008898:	f7fe faa9 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	4619      	mov	r1, r3
 80088a2:	480e      	ldr	r0, [pc, #56]	@ (80088dc <spi_flash_enter_low_power_mode+0x58>)
 80088a4:	f7fe faa3 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 80088a8:	2101      	movs	r1, #1
 80088aa:	480d      	ldr	r0, [pc, #52]	@ (80088e0 <spi_flash_enter_low_power_mode+0x5c>)
 80088ac:	f7fe fa9f 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 80088b0:	2100      	movs	r1, #0
 80088b2:	480c      	ldr	r0, [pc, #48]	@ (80088e4 <spi_flash_enter_low_power_mode+0x60>)
 80088b4:	f7fe fa9b 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 80088b8:	2181      	movs	r1, #129	@ 0x81
 80088ba:	480b      	ldr	r0, [pc, #44]	@ (80088e8 <spi_flash_enter_low_power_mode+0x64>)
 80088bc:	f7fe fa97 	bl	8006dee <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 80088c0:	bf00      	nop
 80088c2:	480a      	ldr	r0, [pc, #40]	@ (80088ec <spi_flash_enter_low_power_mode+0x68>)
 80088c4:	f7fe fa79 	bl	8006dba <nm_read_reg>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d1f9      	bne.n	80088c2 <spi_flash_enter_low_power_mode+0x3e>
}
 80088ce:	bf00      	nop
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	00010208 	.word	0x00010208
 80088dc:	0001020c 	.word	0x0001020c
 80088e0:	00010214 	.word	0x00010214
 80088e4:	0001021c 	.word	0x0001021c
 80088e8:	00010204 	.word	0x00010204
 80088ec:	00010218 	.word	0x00010218

080088f0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 80088f6:	463b      	mov	r3, r7
 80088f8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	22ab      	movs	r2, #171	@ 0xab
 80088fe:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 8008900:	2100      	movs	r1, #0
 8008902:	4810      	ldr	r0, [pc, #64]	@ (8008944 <spi_flash_leave_low_power_mode+0x54>)
 8008904:	f7fe fa73 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	4619      	mov	r1, r3
 800890e:	480e      	ldr	r0, [pc, #56]	@ (8008948 <spi_flash_leave_low_power_mode+0x58>)
 8008910:	f7fe fa6d 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 8008914:	2101      	movs	r1, #1
 8008916:	480d      	ldr	r0, [pc, #52]	@ (800894c <spi_flash_leave_low_power_mode+0x5c>)
 8008918:	f7fe fa69 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800891c:	2100      	movs	r1, #0
 800891e:	480c      	ldr	r0, [pc, #48]	@ (8008950 <spi_flash_leave_low_power_mode+0x60>)
 8008920:	f7fe fa65 	bl	8006dee <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 8008924:	2181      	movs	r1, #129	@ 0x81
 8008926:	480b      	ldr	r0, [pc, #44]	@ (8008954 <spi_flash_leave_low_power_mode+0x64>)
 8008928:	f7fe fa61 	bl	8006dee <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800892c:	bf00      	nop
 800892e:	480a      	ldr	r0, [pc, #40]	@ (8008958 <spi_flash_leave_low_power_mode+0x68>)
 8008930:	f7fe fa43 	bl	8006dba <nm_read_reg>
 8008934:	4603      	mov	r3, r0
 8008936:	2b01      	cmp	r3, #1
 8008938:	d1f9      	bne.n	800892e <spi_flash_leave_low_power_mode+0x3e>
}
 800893a:	bf00      	nop
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	00010208 	.word	0x00010208
 8008948:	0001020c 	.word	0x0001020c
 800894c:	00010214 	.word	0x00010214
 8008950:	0001021c 	.word	0x0001021c
 8008954:	00010204 	.word	0x00010204
 8008958:	00010218 	.word	0x00010218

0800895c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {
 800896a:	f7fd ff97 	bl	800689c <nmi_get_chipid>
 800896e:	4603      	mov	r3, r0
 8008970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008974:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 8008978:	d337      	bcc.n	80089ea <spi_flash_enable+0x8e>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800897a:	f107 0308 	add.w	r3, r7, #8
 800897e:	4619      	mov	r1, r3
 8008980:	f241 4010 	movw	r0, #5136	@ 0x1410
 8008984:	f7fe fa25 	bl	8006dd2 <nm_read_reg_with_ret>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800898c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d12c      	bne.n	80089ee <spi_flash_enable+0x92>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800899a:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800899e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 80089a6:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 80089aa:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4619      	mov	r1, r3
 80089b0:	f241 4010 	movw	r0, #5136	@ 0x1410
 80089b4:	f7fe fa1b 	bl	8006dee <nm_write_reg>
		if(enable) {
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <spi_flash_enable+0x68>
			spi_flash_leave_low_power_mode();
 80089be:	f7ff ff97 	bl	80088f0 <spi_flash_leave_low_power_mode>
 80089c2:	e001      	b.n	80089c8 <spi_flash_enable+0x6c>
		} else {
			spi_flash_enter_low_power_mode();
 80089c4:	f7ff ff5e 	bl	8008884 <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 80089ce:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 80089d2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089da:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4619      	mov	r1, r3
 80089e0:	f241 4010 	movw	r0, #5136	@ 0x1410
 80089e4:	f7fe fa03 	bl	8006dee <nm_write_reg>
 80089e8:	e002      	b.n	80089f0 <spi_flash_enable+0x94>
	}
ERR1:
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <spi_flash_enable+0x94>
			goto ERR1;
 80089ee:	bf00      	nop
	return s8Ret;
 80089f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <malloc>:
 80089fc:	4b02      	ldr	r3, [pc, #8]	@ (8008a08 <malloc+0xc>)
 80089fe:	4601      	mov	r1, r0
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f000 b82d 	b.w	8008a60 <_malloc_r>
 8008a06:	bf00      	nop
 8008a08:	200009d4 	.word	0x200009d4

08008a0c <free>:
 8008a0c:	4b02      	ldr	r3, [pc, #8]	@ (8008a18 <free+0xc>)
 8008a0e:	4601      	mov	r1, r0
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	f000 bcad 	b.w	8009370 <_free_r>
 8008a16:	bf00      	nop
 8008a18:	200009d4 	.word	0x200009d4

08008a1c <sbrk_aligned>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a5c <sbrk_aligned+0x40>)
 8008a20:	460c      	mov	r4, r1
 8008a22:	6831      	ldr	r1, [r6, #0]
 8008a24:	4605      	mov	r5, r0
 8008a26:	b911      	cbnz	r1, 8008a2e <sbrk_aligned+0x12>
 8008a28:	f000 fc26 	bl	8009278 <_sbrk_r>
 8008a2c:	6030      	str	r0, [r6, #0]
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4628      	mov	r0, r5
 8008a32:	f000 fc21 	bl	8009278 <_sbrk_r>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	d103      	bne.n	8008a42 <sbrk_aligned+0x26>
 8008a3a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a3e:	4620      	mov	r0, r4
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	1cc4      	adds	r4, r0, #3
 8008a44:	f024 0403 	bic.w	r4, r4, #3
 8008a48:	42a0      	cmp	r0, r4
 8008a4a:	d0f8      	beq.n	8008a3e <sbrk_aligned+0x22>
 8008a4c:	1a21      	subs	r1, r4, r0
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 fc12 	bl	8009278 <_sbrk_r>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d1f2      	bne.n	8008a3e <sbrk_aligned+0x22>
 8008a58:	e7ef      	b.n	8008a3a <sbrk_aligned+0x1e>
 8008a5a:	bf00      	nop
 8008a5c:	20000e28 	.word	0x20000e28

08008a60 <_malloc_r>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	1ccd      	adds	r5, r1, #3
 8008a66:	f025 0503 	bic.w	r5, r5, #3
 8008a6a:	3508      	adds	r5, #8
 8008a6c:	2d0c      	cmp	r5, #12
 8008a6e:	bf38      	it	cc
 8008a70:	250c      	movcc	r5, #12
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	db01      	blt.n	8008a7c <_malloc_r+0x1c>
 8008a78:	42a9      	cmp	r1, r5
 8008a7a:	d904      	bls.n	8008a86 <_malloc_r+0x26>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	6033      	str	r3, [r6, #0]
 8008a80:	2000      	movs	r0, #0
 8008a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b5c <_malloc_r+0xfc>
 8008a8a:	f000 f869 	bl	8008b60 <__malloc_lock>
 8008a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a92:	461c      	mov	r4, r3
 8008a94:	bb44      	cbnz	r4, 8008ae8 <_malloc_r+0x88>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ffbf 	bl	8008a1c <sbrk_aligned>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	d158      	bne.n	8008b56 <_malloc_r+0xf6>
 8008aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8008aa8:	4627      	mov	r7, r4
 8008aaa:	2f00      	cmp	r7, #0
 8008aac:	d143      	bne.n	8008b36 <_malloc_r+0xd6>
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	d04b      	beq.n	8008b4a <_malloc_r+0xea>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	eb04 0903 	add.w	r9, r4, r3
 8008abc:	f000 fbdc 	bl	8009278 <_sbrk_r>
 8008ac0:	4581      	cmp	r9, r0
 8008ac2:	d142      	bne.n	8008b4a <_malloc_r+0xea>
 8008ac4:	6821      	ldr	r1, [r4, #0]
 8008ac6:	1a6d      	subs	r5, r5, r1
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ffa6 	bl	8008a1c <sbrk_aligned>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d03a      	beq.n	8008b4a <_malloc_r+0xea>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	442b      	add	r3, r5
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	f8d8 3000 	ldr.w	r3, [r8]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	bb62      	cbnz	r2, 8008b3c <_malloc_r+0xdc>
 8008ae2:	f8c8 7000 	str.w	r7, [r8]
 8008ae6:	e00f      	b.n	8008b08 <_malloc_r+0xa8>
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	1b52      	subs	r2, r2, r5
 8008aec:	d420      	bmi.n	8008b30 <_malloc_r+0xd0>
 8008aee:	2a0b      	cmp	r2, #11
 8008af0:	d917      	bls.n	8008b22 <_malloc_r+0xc2>
 8008af2:	1961      	adds	r1, r4, r5
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	6025      	str	r5, [r4, #0]
 8008af8:	bf18      	it	ne
 8008afa:	6059      	strne	r1, [r3, #4]
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	bf08      	it	eq
 8008b00:	f8c8 1000 	streq.w	r1, [r8]
 8008b04:	5162      	str	r2, [r4, r5]
 8008b06:	604b      	str	r3, [r1, #4]
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 f82f 	bl	8008b6c <__malloc_unlock>
 8008b0e:	f104 000b 	add.w	r0, r4, #11
 8008b12:	1d23      	adds	r3, r4, #4
 8008b14:	f020 0007 	bic.w	r0, r0, #7
 8008b18:	1ac2      	subs	r2, r0, r3
 8008b1a:	bf1c      	itt	ne
 8008b1c:	1a1b      	subne	r3, r3, r0
 8008b1e:	50a3      	strne	r3, [r4, r2]
 8008b20:	e7af      	b.n	8008a82 <_malloc_r+0x22>
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	bf0c      	ite	eq
 8008b28:	f8c8 2000 	streq.w	r2, [r8]
 8008b2c:	605a      	strne	r2, [r3, #4]
 8008b2e:	e7eb      	b.n	8008b08 <_malloc_r+0xa8>
 8008b30:	4623      	mov	r3, r4
 8008b32:	6864      	ldr	r4, [r4, #4]
 8008b34:	e7ae      	b.n	8008a94 <_malloc_r+0x34>
 8008b36:	463c      	mov	r4, r7
 8008b38:	687f      	ldr	r7, [r7, #4]
 8008b3a:	e7b6      	b.n	8008aaa <_malloc_r+0x4a>
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d1fb      	bne.n	8008b3c <_malloc_r+0xdc>
 8008b44:	2300      	movs	r3, #0
 8008b46:	6053      	str	r3, [r2, #4]
 8008b48:	e7de      	b.n	8008b08 <_malloc_r+0xa8>
 8008b4a:	230c      	movs	r3, #12
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f000 f80c 	bl	8008b6c <__malloc_unlock>
 8008b54:	e794      	b.n	8008a80 <_malloc_r+0x20>
 8008b56:	6005      	str	r5, [r0, #0]
 8008b58:	e7d6      	b.n	8008b08 <_malloc_r+0xa8>
 8008b5a:	bf00      	nop
 8008b5c:	20000e2c 	.word	0x20000e2c

08008b60 <__malloc_lock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	@ (8008b68 <__malloc_lock+0x8>)
 8008b62:	f000 bbd6 	b.w	8009312 <__retarget_lock_acquire_recursive>
 8008b66:	bf00      	nop
 8008b68:	20000f70 	.word	0x20000f70

08008b6c <__malloc_unlock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	@ (8008b74 <__malloc_unlock+0x8>)
 8008b6e:	f000 bbd1 	b.w	8009314 <__retarget_lock_release_recursive>
 8008b72:	bf00      	nop
 8008b74:	20000f70 	.word	0x20000f70

08008b78 <std>:
 8008b78:	2300      	movs	r3, #0
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b86:	6083      	str	r3, [r0, #8]
 8008b88:	8181      	strh	r1, [r0, #12]
 8008b8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b8c:	81c2      	strh	r2, [r0, #14]
 8008b8e:	6183      	str	r3, [r0, #24]
 8008b90:	4619      	mov	r1, r3
 8008b92:	2208      	movs	r2, #8
 8008b94:	305c      	adds	r0, #92	@ 0x5c
 8008b96:	f000 fa8b 	bl	80090b0 <memset>
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd0 <std+0x58>)
 8008b9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd4 <std+0x5c>)
 8008ba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd8 <std+0x60>)
 8008ba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <std+0x64>)
 8008ba8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008baa:	4b0d      	ldr	r3, [pc, #52]	@ (8008be0 <std+0x68>)
 8008bac:	6224      	str	r4, [r4, #32]
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d006      	beq.n	8008bc0 <std+0x48>
 8008bb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008bb6:	4294      	cmp	r4, r2
 8008bb8:	d002      	beq.n	8008bc0 <std+0x48>
 8008bba:	33d0      	adds	r3, #208	@ 0xd0
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	d105      	bne.n	8008bcc <std+0x54>
 8008bc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bc8:	f000 bba2 	b.w	8009310 <__retarget_lock_init_recursive>
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	bf00      	nop
 8008bd0:	08008efd 	.word	0x08008efd
 8008bd4:	08008f23 	.word	0x08008f23
 8008bd8:	08008f5b 	.word	0x08008f5b
 8008bdc:	08008f7f 	.word	0x08008f7f
 8008be0:	20000e30 	.word	0x20000e30

08008be4 <stdio_exit_handler>:
 8008be4:	4a02      	ldr	r2, [pc, #8]	@ (8008bf0 <stdio_exit_handler+0xc>)
 8008be6:	4903      	ldr	r1, [pc, #12]	@ (8008bf4 <stdio_exit_handler+0x10>)
 8008be8:	4803      	ldr	r0, [pc, #12]	@ (8008bf8 <stdio_exit_handler+0x14>)
 8008bea:	f000 b87b 	b.w	8008ce4 <_fwalk_sglue>
 8008bee:	bf00      	nop
 8008bf0:	200009c8 	.word	0x200009c8
 8008bf4:	0800a391 	.word	0x0800a391
 8008bf8:	200009d8 	.word	0x200009d8

08008bfc <cleanup_stdio>:
 8008bfc:	6841      	ldr	r1, [r0, #4]
 8008bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <cleanup_stdio+0x34>)
 8008c00:	4299      	cmp	r1, r3
 8008c02:	b510      	push	{r4, lr}
 8008c04:	4604      	mov	r4, r0
 8008c06:	d001      	beq.n	8008c0c <cleanup_stdio+0x10>
 8008c08:	f001 fbc2 	bl	800a390 <_fflush_r>
 8008c0c:	68a1      	ldr	r1, [r4, #8]
 8008c0e:	4b09      	ldr	r3, [pc, #36]	@ (8008c34 <cleanup_stdio+0x38>)
 8008c10:	4299      	cmp	r1, r3
 8008c12:	d002      	beq.n	8008c1a <cleanup_stdio+0x1e>
 8008c14:	4620      	mov	r0, r4
 8008c16:	f001 fbbb 	bl	800a390 <_fflush_r>
 8008c1a:	68e1      	ldr	r1, [r4, #12]
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <cleanup_stdio+0x3c>)
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	d004      	beq.n	8008c2c <cleanup_stdio+0x30>
 8008c22:	4620      	mov	r0, r4
 8008c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c28:	f001 bbb2 	b.w	800a390 <_fflush_r>
 8008c2c:	bd10      	pop	{r4, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000e30 	.word	0x20000e30
 8008c34:	20000e98 	.word	0x20000e98
 8008c38:	20000f00 	.word	0x20000f00

08008c3c <global_stdio_init.part.0>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c6c <global_stdio_init.part.0+0x30>)
 8008c40:	4c0b      	ldr	r4, [pc, #44]	@ (8008c70 <global_stdio_init.part.0+0x34>)
 8008c42:	4a0c      	ldr	r2, [pc, #48]	@ (8008c74 <global_stdio_init.part.0+0x38>)
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	4620      	mov	r0, r4
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	f7ff ff94 	bl	8008b78 <std>
 8008c50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c54:	2201      	movs	r2, #1
 8008c56:	2109      	movs	r1, #9
 8008c58:	f7ff ff8e 	bl	8008b78 <std>
 8008c5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c60:	2202      	movs	r2, #2
 8008c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c66:	2112      	movs	r1, #18
 8008c68:	f7ff bf86 	b.w	8008b78 <std>
 8008c6c:	20000f68 	.word	0x20000f68
 8008c70:	20000e30 	.word	0x20000e30
 8008c74:	08008be5 	.word	0x08008be5

08008c78 <__sfp_lock_acquire>:
 8008c78:	4801      	ldr	r0, [pc, #4]	@ (8008c80 <__sfp_lock_acquire+0x8>)
 8008c7a:	f000 bb4a 	b.w	8009312 <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	20000f71 	.word	0x20000f71

08008c84 <__sfp_lock_release>:
 8008c84:	4801      	ldr	r0, [pc, #4]	@ (8008c8c <__sfp_lock_release+0x8>)
 8008c86:	f000 bb45 	b.w	8009314 <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20000f71 	.word	0x20000f71

08008c90 <__sinit>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	4604      	mov	r4, r0
 8008c94:	f7ff fff0 	bl	8008c78 <__sfp_lock_acquire>
 8008c98:	6a23      	ldr	r3, [r4, #32]
 8008c9a:	b11b      	cbz	r3, 8008ca4 <__sinit+0x14>
 8008c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca0:	f7ff bff0 	b.w	8008c84 <__sfp_lock_release>
 8008ca4:	4b04      	ldr	r3, [pc, #16]	@ (8008cb8 <__sinit+0x28>)
 8008ca6:	6223      	str	r3, [r4, #32]
 8008ca8:	4b04      	ldr	r3, [pc, #16]	@ (8008cbc <__sinit+0x2c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f5      	bne.n	8008c9c <__sinit+0xc>
 8008cb0:	f7ff ffc4 	bl	8008c3c <global_stdio_init.part.0>
 8008cb4:	e7f2      	b.n	8008c9c <__sinit+0xc>
 8008cb6:	bf00      	nop
 8008cb8:	08008bfd 	.word	0x08008bfd
 8008cbc:	20000f68 	.word	0x20000f68

08008cc0 <fiprintf>:
 8008cc0:	b40e      	push	{r1, r2, r3}
 8008cc2:	b503      	push	{r0, r1, lr}
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	ab03      	add	r3, sp, #12
 8008cc8:	4805      	ldr	r0, [pc, #20]	@ (8008ce0 <fiprintf+0x20>)
 8008cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cce:	6800      	ldr	r0, [r0, #0]
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	f000 fee5 	bl	8009aa0 <_vfiprintf_r>
 8008cd6:	b002      	add	sp, #8
 8008cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cdc:	b003      	add	sp, #12
 8008cde:	4770      	bx	lr
 8008ce0:	200009d4 	.word	0x200009d4

08008ce4 <_fwalk_sglue>:
 8008ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce8:	4607      	mov	r7, r0
 8008cea:	4688      	mov	r8, r1
 8008cec:	4614      	mov	r4, r2
 8008cee:	2600      	movs	r6, #0
 8008cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8008cf8:	d505      	bpl.n	8008d06 <_fwalk_sglue+0x22>
 8008cfa:	6824      	ldr	r4, [r4, #0]
 8008cfc:	2c00      	cmp	r4, #0
 8008cfe:	d1f7      	bne.n	8008cf0 <_fwalk_sglue+0xc>
 8008d00:	4630      	mov	r0, r6
 8008d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d06:	89ab      	ldrh	r3, [r5, #12]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d907      	bls.n	8008d1c <_fwalk_sglue+0x38>
 8008d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d10:	3301      	adds	r3, #1
 8008d12:	d003      	beq.n	8008d1c <_fwalk_sglue+0x38>
 8008d14:	4629      	mov	r1, r5
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	4306      	orrs	r6, r0
 8008d1c:	3568      	adds	r5, #104	@ 0x68
 8008d1e:	e7e9      	b.n	8008cf4 <_fwalk_sglue+0x10>

08008d20 <iprintf>:
 8008d20:	b40f      	push	{r0, r1, r2, r3}
 8008d22:	b507      	push	{r0, r1, r2, lr}
 8008d24:	4906      	ldr	r1, [pc, #24]	@ (8008d40 <iprintf+0x20>)
 8008d26:	ab04      	add	r3, sp, #16
 8008d28:	6808      	ldr	r0, [r1, #0]
 8008d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2e:	6881      	ldr	r1, [r0, #8]
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	f000 feb5 	bl	8009aa0 <_vfiprintf_r>
 8008d36:	b003      	add	sp, #12
 8008d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d3c:	b004      	add	sp, #16
 8008d3e:	4770      	bx	lr
 8008d40:	200009d4 	.word	0x200009d4

08008d44 <_puts_r>:
 8008d44:	6a03      	ldr	r3, [r0, #32]
 8008d46:	b570      	push	{r4, r5, r6, lr}
 8008d48:	6884      	ldr	r4, [r0, #8]
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	460e      	mov	r6, r1
 8008d4e:	b90b      	cbnz	r3, 8008d54 <_puts_r+0x10>
 8008d50:	f7ff ff9e 	bl	8008c90 <__sinit>
 8008d54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d56:	07db      	lsls	r3, r3, #31
 8008d58:	d405      	bmi.n	8008d66 <_puts_r+0x22>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	0598      	lsls	r0, r3, #22
 8008d5e:	d402      	bmi.n	8008d66 <_puts_r+0x22>
 8008d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d62:	f000 fad6 	bl	8009312 <__retarget_lock_acquire_recursive>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	0719      	lsls	r1, r3, #28
 8008d6a:	d502      	bpl.n	8008d72 <_puts_r+0x2e>
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d135      	bne.n	8008dde <_puts_r+0x9a>
 8008d72:	4621      	mov	r1, r4
 8008d74:	4628      	mov	r0, r5
 8008d76:	f000 f945 	bl	8009004 <__swsetup_r>
 8008d7a:	b380      	cbz	r0, 8008dde <_puts_r+0x9a>
 8008d7c:	f04f 35ff 	mov.w	r5, #4294967295
 8008d80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d82:	07da      	lsls	r2, r3, #31
 8008d84:	d405      	bmi.n	8008d92 <_puts_r+0x4e>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	d402      	bmi.n	8008d92 <_puts_r+0x4e>
 8008d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d8e:	f000 fac1 	bl	8009314 <__retarget_lock_release_recursive>
 8008d92:	4628      	mov	r0, r5
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da04      	bge.n	8008da4 <_puts_r+0x60>
 8008d9a:	69a2      	ldr	r2, [r4, #24]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	dc17      	bgt.n	8008dd0 <_puts_r+0x8c>
 8008da0:	290a      	cmp	r1, #10
 8008da2:	d015      	beq.n	8008dd0 <_puts_r+0x8c>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	6022      	str	r2, [r4, #0]
 8008daa:	7019      	strb	r1, [r3, #0]
 8008dac:	68a3      	ldr	r3, [r4, #8]
 8008dae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008db2:	3b01      	subs	r3, #1
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d1ed      	bne.n	8008d96 <_puts_r+0x52>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	da11      	bge.n	8008de2 <_puts_r+0x9e>
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	210a      	movs	r1, #10
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f000 f8df 	bl	8008f86 <__swbuf_r>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d0d7      	beq.n	8008d7c <_puts_r+0x38>
 8008dcc:	250a      	movs	r5, #10
 8008dce:	e7d7      	b.n	8008d80 <_puts_r+0x3c>
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f8d7 	bl	8008f86 <__swbuf_r>
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d1e7      	bne.n	8008dac <_puts_r+0x68>
 8008ddc:	e7ce      	b.n	8008d7c <_puts_r+0x38>
 8008dde:	3e01      	subs	r6, #1
 8008de0:	e7e4      	b.n	8008dac <_puts_r+0x68>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	6022      	str	r2, [r4, #0]
 8008de8:	220a      	movs	r2, #10
 8008dea:	701a      	strb	r2, [r3, #0]
 8008dec:	e7ee      	b.n	8008dcc <_puts_r+0x88>
	...

08008df0 <puts>:
 8008df0:	4b02      	ldr	r3, [pc, #8]	@ (8008dfc <puts+0xc>)
 8008df2:	4601      	mov	r1, r0
 8008df4:	6818      	ldr	r0, [r3, #0]
 8008df6:	f7ff bfa5 	b.w	8008d44 <_puts_r>
 8008dfa:	bf00      	nop
 8008dfc:	200009d4 	.word	0x200009d4

08008e00 <sniprintf>:
 8008e00:	b40c      	push	{r2, r3}
 8008e02:	b530      	push	{r4, r5, lr}
 8008e04:	4b17      	ldr	r3, [pc, #92]	@ (8008e64 <sniprintf+0x64>)
 8008e06:	1e0c      	subs	r4, r1, #0
 8008e08:	681d      	ldr	r5, [r3, #0]
 8008e0a:	b09d      	sub	sp, #116	@ 0x74
 8008e0c:	da08      	bge.n	8008e20 <sniprintf+0x20>
 8008e0e:	238b      	movs	r3, #139	@ 0x8b
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	f04f 30ff 	mov.w	r0, #4294967295
 8008e16:	b01d      	add	sp, #116	@ 0x74
 8008e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e1c:	b002      	add	sp, #8
 8008e1e:	4770      	bx	lr
 8008e20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e28:	bf14      	ite	ne
 8008e2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e2e:	4623      	moveq	r3, r4
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e38:	9002      	str	r0, [sp, #8]
 8008e3a:	9006      	str	r0, [sp, #24]
 8008e3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e42:	ab21      	add	r3, sp, #132	@ 0x84
 8008e44:	a902      	add	r1, sp, #8
 8008e46:	4628      	mov	r0, r5
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	f000 fb37 	bl	80094bc <_svfiprintf_r>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	bfbc      	itt	lt
 8008e52:	238b      	movlt	r3, #139	@ 0x8b
 8008e54:	602b      	strlt	r3, [r5, #0]
 8008e56:	2c00      	cmp	r4, #0
 8008e58:	d0dd      	beq.n	8008e16 <sniprintf+0x16>
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	e7d9      	b.n	8008e16 <sniprintf+0x16>
 8008e62:	bf00      	nop
 8008e64:	200009d4 	.word	0x200009d4

08008e68 <siprintf>:
 8008e68:	b40e      	push	{r1, r2, r3}
 8008e6a:	b500      	push	{lr}
 8008e6c:	b09c      	sub	sp, #112	@ 0x70
 8008e6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e70:	9002      	str	r0, [sp, #8]
 8008e72:	9006      	str	r0, [sp, #24]
 8008e74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e78:	4809      	ldr	r0, [pc, #36]	@ (8008ea0 <siprintf+0x38>)
 8008e7a:	9107      	str	r1, [sp, #28]
 8008e7c:	9104      	str	r1, [sp, #16]
 8008e7e:	4909      	ldr	r1, [pc, #36]	@ (8008ea4 <siprintf+0x3c>)
 8008e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	6800      	ldr	r0, [r0, #0]
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	a902      	add	r1, sp, #8
 8008e8c:	f000 fb16 	bl	80094bc <_svfiprintf_r>
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	b01c      	add	sp, #112	@ 0x70
 8008e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e9c:	b003      	add	sp, #12
 8008e9e:	4770      	bx	lr
 8008ea0:	200009d4 	.word	0x200009d4
 8008ea4:	ffff0208 	.word	0xffff0208

08008ea8 <siscanf>:
 8008ea8:	b40e      	push	{r1, r2, r3}
 8008eaa:	b530      	push	{r4, r5, lr}
 8008eac:	b09c      	sub	sp, #112	@ 0x70
 8008eae:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008eb0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008eb4:	f854 5b04 	ldr.w	r5, [r4], #4
 8008eb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008ebc:	9002      	str	r0, [sp, #8]
 8008ebe:	9006      	str	r0, [sp, #24]
 8008ec0:	f7f7 f990 	bl	80001e4 <strlen>
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef4 <siscanf+0x4c>)
 8008ec6:	9003      	str	r0, [sp, #12]
 8008ec8:	9007      	str	r0, [sp, #28]
 8008eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ecc:	480a      	ldr	r0, [pc, #40]	@ (8008ef8 <siscanf+0x50>)
 8008ece:	9401      	str	r4, [sp, #4]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ed4:	9314      	str	r3, [sp, #80]	@ 0x50
 8008ed6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008eda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	a902      	add	r1, sp, #8
 8008ee4:	6800      	ldr	r0, [r0, #0]
 8008ee6:	f000 fc3d 	bl	8009764 <__ssvfiscanf_r>
 8008eea:	b01c      	add	sp, #112	@ 0x70
 8008eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef0:	b003      	add	sp, #12
 8008ef2:	4770      	bx	lr
 8008ef4:	08008f1f 	.word	0x08008f1f
 8008ef8:	200009d4 	.word	0x200009d4

08008efc <__sread>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f04:	f000 f9a6 	bl	8009254 <_read_r>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	bfab      	itete	ge
 8008f0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f10:	181b      	addge	r3, r3, r0
 8008f12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f16:	bfac      	ite	ge
 8008f18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f1a:	81a3      	strhlt	r3, [r4, #12]
 8008f1c:	bd10      	pop	{r4, pc}

08008f1e <__seofread>:
 8008f1e:	2000      	movs	r0, #0
 8008f20:	4770      	bx	lr

08008f22 <__swrite>:
 8008f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	461f      	mov	r7, r3
 8008f28:	898b      	ldrh	r3, [r1, #12]
 8008f2a:	05db      	lsls	r3, r3, #23
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4616      	mov	r6, r2
 8008f32:	d505      	bpl.n	8008f40 <__swrite+0x1e>
 8008f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f38:	2302      	movs	r3, #2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f000 f978 	bl	8009230 <_lseek_r>
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	463b      	mov	r3, r7
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f56:	f000 b99f 	b.w	8009298 <_write_r>

08008f5a <__sseek>:
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f62:	f000 f965 	bl	8009230 <_lseek_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	bf15      	itete	ne
 8008f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f76:	81a3      	strheq	r3, [r4, #12]
 8008f78:	bf18      	it	ne
 8008f7a:	81a3      	strhne	r3, [r4, #12]
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <__sclose>:
 8008f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f82:	f000 b945 	b.w	8009210 <_close_r>

08008f86 <__swbuf_r>:
 8008f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f88:	460e      	mov	r6, r1
 8008f8a:	4614      	mov	r4, r2
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	b118      	cbz	r0, 8008f98 <__swbuf_r+0x12>
 8008f90:	6a03      	ldr	r3, [r0, #32]
 8008f92:	b90b      	cbnz	r3, 8008f98 <__swbuf_r+0x12>
 8008f94:	f7ff fe7c 	bl	8008c90 <__sinit>
 8008f98:	69a3      	ldr	r3, [r4, #24]
 8008f9a:	60a3      	str	r3, [r4, #8]
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	071a      	lsls	r2, r3, #28
 8008fa0:	d501      	bpl.n	8008fa6 <__swbuf_r+0x20>
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	b943      	cbnz	r3, 8008fb8 <__swbuf_r+0x32>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 f82b 	bl	8009004 <__swsetup_r>
 8008fae:	b118      	cbz	r0, 8008fb8 <__swbuf_r+0x32>
 8008fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	6922      	ldr	r2, [r4, #16]
 8008fbc:	1a98      	subs	r0, r3, r2
 8008fbe:	6963      	ldr	r3, [r4, #20]
 8008fc0:	b2f6      	uxtb	r6, r6
 8008fc2:	4283      	cmp	r3, r0
 8008fc4:	4637      	mov	r7, r6
 8008fc6:	dc05      	bgt.n	8008fd4 <__swbuf_r+0x4e>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f001 f9e0 	bl	800a390 <_fflush_r>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d1ed      	bne.n	8008fb0 <__swbuf_r+0x2a>
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	701e      	strb	r6, [r3, #0]
 8008fe2:	6962      	ldr	r2, [r4, #20]
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d004      	beq.n	8008ff4 <__swbuf_r+0x6e>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	07db      	lsls	r3, r3, #31
 8008fee:	d5e1      	bpl.n	8008fb4 <__swbuf_r+0x2e>
 8008ff0:	2e0a      	cmp	r6, #10
 8008ff2:	d1df      	bne.n	8008fb4 <__swbuf_r+0x2e>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f001 f9ca 	bl	800a390 <_fflush_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d0d9      	beq.n	8008fb4 <__swbuf_r+0x2e>
 8009000:	e7d6      	b.n	8008fb0 <__swbuf_r+0x2a>
	...

08009004 <__swsetup_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4b29      	ldr	r3, [pc, #164]	@ (80090ac <__swsetup_r+0xa8>)
 8009008:	4605      	mov	r5, r0
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	460c      	mov	r4, r1
 800900e:	b118      	cbz	r0, 8009018 <__swsetup_r+0x14>
 8009010:	6a03      	ldr	r3, [r0, #32]
 8009012:	b90b      	cbnz	r3, 8009018 <__swsetup_r+0x14>
 8009014:	f7ff fe3c 	bl	8008c90 <__sinit>
 8009018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901c:	0719      	lsls	r1, r3, #28
 800901e:	d422      	bmi.n	8009066 <__swsetup_r+0x62>
 8009020:	06da      	lsls	r2, r3, #27
 8009022:	d407      	bmi.n	8009034 <__swsetup_r+0x30>
 8009024:	2209      	movs	r2, #9
 8009026:	602a      	str	r2, [r5, #0]
 8009028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	e033      	b.n	800909c <__swsetup_r+0x98>
 8009034:	0758      	lsls	r0, r3, #29
 8009036:	d512      	bpl.n	800905e <__swsetup_r+0x5a>
 8009038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800903a:	b141      	cbz	r1, 800904e <__swsetup_r+0x4a>
 800903c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009040:	4299      	cmp	r1, r3
 8009042:	d002      	beq.n	800904a <__swsetup_r+0x46>
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f993 	bl	8009370 <_free_r>
 800904a:	2300      	movs	r3, #0
 800904c:	6363      	str	r3, [r4, #52]	@ 0x34
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	2300      	movs	r3, #0
 8009058:	6063      	str	r3, [r4, #4]
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f043 0308 	orr.w	r3, r3, #8
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	b94b      	cbnz	r3, 800907e <__swsetup_r+0x7a>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009074:	d003      	beq.n	800907e <__swsetup_r+0x7a>
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	f001 f9d7 	bl	800a42c <__smakebuf_r>
 800907e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009082:	f013 0201 	ands.w	r2, r3, #1
 8009086:	d00a      	beq.n	800909e <__swsetup_r+0x9a>
 8009088:	2200      	movs	r2, #0
 800908a:	60a2      	str	r2, [r4, #8]
 800908c:	6962      	ldr	r2, [r4, #20]
 800908e:	4252      	negs	r2, r2
 8009090:	61a2      	str	r2, [r4, #24]
 8009092:	6922      	ldr	r2, [r4, #16]
 8009094:	b942      	cbnz	r2, 80090a8 <__swsetup_r+0xa4>
 8009096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800909a:	d1c5      	bne.n	8009028 <__swsetup_r+0x24>
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	0799      	lsls	r1, r3, #30
 80090a0:	bf58      	it	pl
 80090a2:	6962      	ldrpl	r2, [r4, #20]
 80090a4:	60a2      	str	r2, [r4, #8]
 80090a6:	e7f4      	b.n	8009092 <__swsetup_r+0x8e>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7f7      	b.n	800909c <__swsetup_r+0x98>
 80090ac:	200009d4 	.word	0x200009d4

080090b0 <memset>:
 80090b0:	4402      	add	r2, r0
 80090b2:	4603      	mov	r3, r0
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d100      	bne.n	80090ba <memset+0xa>
 80090b8:	4770      	bx	lr
 80090ba:	f803 1b01 	strb.w	r1, [r3], #1
 80090be:	e7f9      	b.n	80090b4 <memset+0x4>

080090c0 <strchr>:
 80090c0:	b2c9      	uxtb	r1, r1
 80090c2:	4603      	mov	r3, r0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ca:	b112      	cbz	r2, 80090d2 <strchr+0x12>
 80090cc:	428a      	cmp	r2, r1
 80090ce:	d1f9      	bne.n	80090c4 <strchr+0x4>
 80090d0:	4770      	bx	lr
 80090d2:	2900      	cmp	r1, #0
 80090d4:	bf18      	it	ne
 80090d6:	2000      	movne	r0, #0
 80090d8:	4770      	bx	lr

080090da <strncpy>:
 80090da:	b510      	push	{r4, lr}
 80090dc:	3901      	subs	r1, #1
 80090de:	4603      	mov	r3, r0
 80090e0:	b132      	cbz	r2, 80090f0 <strncpy+0x16>
 80090e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80090e6:	f803 4b01 	strb.w	r4, [r3], #1
 80090ea:	3a01      	subs	r2, #1
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	d1f7      	bne.n	80090e0 <strncpy+0x6>
 80090f0:	441a      	add	r2, r3
 80090f2:	2100      	movs	r1, #0
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d100      	bne.n	80090fa <strncpy+0x20>
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	f803 1b01 	strb.w	r1, [r3], #1
 80090fe:	e7f9      	b.n	80090f4 <strncpy+0x1a>

08009100 <strrchr>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8009106:	4603      	mov	r3, r0
 8009108:	d10e      	bne.n	8009128 <strrchr+0x28>
 800910a:	4621      	mov	r1, r4
 800910c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009110:	f7ff bfd6 	b.w	80090c0 <strchr>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	4605      	mov	r5, r0
 8009118:	4621      	mov	r1, r4
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff ffd0 	bl	80090c0 <strchr>
 8009120:	2800      	cmp	r0, #0
 8009122:	d1f7      	bne.n	8009114 <strrchr+0x14>
 8009124:	4628      	mov	r0, r5
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	2500      	movs	r5, #0
 800912a:	e7f5      	b.n	8009118 <strrchr+0x18>

0800912c <strtok>:
 800912c:	4b16      	ldr	r3, [pc, #88]	@ (8009188 <strtok+0x5c>)
 800912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	681f      	ldr	r7, [r3, #0]
 8009134:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009136:	4605      	mov	r5, r0
 8009138:	460e      	mov	r6, r1
 800913a:	b9ec      	cbnz	r4, 8009178 <strtok+0x4c>
 800913c:	2050      	movs	r0, #80	@ 0x50
 800913e:	f7ff fc5d 	bl	80089fc <malloc>
 8009142:	4602      	mov	r2, r0
 8009144:	6478      	str	r0, [r7, #68]	@ 0x44
 8009146:	b920      	cbnz	r0, 8009152 <strtok+0x26>
 8009148:	4b10      	ldr	r3, [pc, #64]	@ (800918c <strtok+0x60>)
 800914a:	4811      	ldr	r0, [pc, #68]	@ (8009190 <strtok+0x64>)
 800914c:	215b      	movs	r1, #91	@ 0x5b
 800914e:	f000 f8f1 	bl	8009334 <__assert_func>
 8009152:	e9c0 4400 	strd	r4, r4, [r0]
 8009156:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800915a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800915e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009162:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009166:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800916a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800916e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009172:	6184      	str	r4, [r0, #24]
 8009174:	7704      	strb	r4, [r0, #28]
 8009176:	6244      	str	r4, [r0, #36]	@ 0x24
 8009178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800917a:	4631      	mov	r1, r6
 800917c:	4628      	mov	r0, r5
 800917e:	2301      	movs	r3, #1
 8009180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009184:	f000 b806 	b.w	8009194 <__strtok_r>
 8009188:	200009d4 	.word	0x200009d4
 800918c:	0800bb9c 	.word	0x0800bb9c
 8009190:	0800bbb3 	.word	0x0800bbb3

08009194 <__strtok_r>:
 8009194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009196:	4604      	mov	r4, r0
 8009198:	b908      	cbnz	r0, 800919e <__strtok_r+0xa>
 800919a:	6814      	ldr	r4, [r2, #0]
 800919c:	b144      	cbz	r4, 80091b0 <__strtok_r+0x1c>
 800919e:	4620      	mov	r0, r4
 80091a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80091a4:	460f      	mov	r7, r1
 80091a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80091aa:	b91e      	cbnz	r6, 80091b4 <__strtok_r+0x20>
 80091ac:	b965      	cbnz	r5, 80091c8 <__strtok_r+0x34>
 80091ae:	6015      	str	r5, [r2, #0]
 80091b0:	2000      	movs	r0, #0
 80091b2:	e005      	b.n	80091c0 <__strtok_r+0x2c>
 80091b4:	42b5      	cmp	r5, r6
 80091b6:	d1f6      	bne.n	80091a6 <__strtok_r+0x12>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1f0      	bne.n	800919e <__strtok_r+0xa>
 80091bc:	6014      	str	r4, [r2, #0]
 80091be:	7003      	strb	r3, [r0, #0]
 80091c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c2:	461c      	mov	r4, r3
 80091c4:	e00c      	b.n	80091e0 <__strtok_r+0x4c>
 80091c6:	b915      	cbnz	r5, 80091ce <__strtok_r+0x3a>
 80091c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091cc:	460e      	mov	r6, r1
 80091ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80091d2:	42ab      	cmp	r3, r5
 80091d4:	d1f7      	bne.n	80091c6 <__strtok_r+0x32>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0f3      	beq.n	80091c2 <__strtok_r+0x2e>
 80091da:	2300      	movs	r3, #0
 80091dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	e7ed      	b.n	80091c0 <__strtok_r+0x2c>

080091e4 <strstr>:
 80091e4:	780a      	ldrb	r2, [r1, #0]
 80091e6:	b570      	push	{r4, r5, r6, lr}
 80091e8:	b96a      	cbnz	r2, 8009206 <strstr+0x22>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d109      	bne.n	8009204 <strstr+0x20>
 80091f0:	460c      	mov	r4, r1
 80091f2:	4605      	mov	r5, r0
 80091f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0f6      	beq.n	80091ea <strstr+0x6>
 80091fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009200:	429e      	cmp	r6, r3
 8009202:	d0f7      	beq.n	80091f4 <strstr+0x10>
 8009204:	3001      	adds	r0, #1
 8009206:	7803      	ldrb	r3, [r0, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1ef      	bne.n	80091ec <strstr+0x8>
 800920c:	4618      	mov	r0, r3
 800920e:	e7ec      	b.n	80091ea <strstr+0x6>

08009210 <_close_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d06      	ldr	r5, [pc, #24]	@ (800922c <_close_r+0x1c>)
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	f7f7 fece 	bl	8000fbc <_close>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_close_r+0x1a>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_close_r+0x1a>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000f6c 	.word	0x20000f6c

08009230 <_lseek_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d07      	ldr	r5, [pc, #28]	@ (8009250 <_lseek_r+0x20>)
 8009234:	4604      	mov	r4, r0
 8009236:	4608      	mov	r0, r1
 8009238:	4611      	mov	r1, r2
 800923a:	2200      	movs	r2, #0
 800923c:	602a      	str	r2, [r5, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	f7f7 fee3 	bl	800100a <_lseek>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_lseek_r+0x1e>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_lseek_r+0x1e>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000f6c 	.word	0x20000f6c

08009254 <_read_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	@ (8009274 <_read_r+0x20>)
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	2200      	movs	r2, #0
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7f7 fe71 	bl	8000f4a <_read>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_read_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_read_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20000f6c 	.word	0x20000f6c

08009278 <_sbrk_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d06      	ldr	r5, [pc, #24]	@ (8009294 <_sbrk_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7f7 fece 	bl	8001024 <_sbrk>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_sbrk_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_sbrk_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000f6c 	.word	0x20000f6c

08009298 <_write_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d07      	ldr	r5, [pc, #28]	@ (80092b8 <_write_r+0x20>)
 800929c:	4604      	mov	r4, r0
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	602a      	str	r2, [r5, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f7f7 fe6c 	bl	8000f84 <_write>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_write_r+0x1e>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_write_r+0x1e>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20000f6c 	.word	0x20000f6c

080092bc <__errno>:
 80092bc:	4b01      	ldr	r3, [pc, #4]	@ (80092c4 <__errno+0x8>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	200009d4 	.word	0x200009d4

080092c8 <__libc_init_array>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009300 <__libc_init_array+0x38>)
 80092cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009304 <__libc_init_array+0x3c>)
 80092ce:	1b64      	subs	r4, r4, r5
 80092d0:	10a4      	asrs	r4, r4, #2
 80092d2:	2600      	movs	r6, #0
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	d109      	bne.n	80092ec <__libc_init_array+0x24>
 80092d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009308 <__libc_init_array+0x40>)
 80092da:	4c0c      	ldr	r4, [pc, #48]	@ (800930c <__libc_init_array+0x44>)
 80092dc:	f001 fb00 	bl	800a8e0 <_init>
 80092e0:	1b64      	subs	r4, r4, r5
 80092e2:	10a4      	asrs	r4, r4, #2
 80092e4:	2600      	movs	r6, #0
 80092e6:	42a6      	cmp	r6, r4
 80092e8:	d105      	bne.n	80092f6 <__libc_init_array+0x2e>
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f0:	4798      	blx	r3
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7ee      	b.n	80092d4 <__libc_init_array+0xc>
 80092f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fa:	4798      	blx	r3
 80092fc:	3601      	adds	r6, #1
 80092fe:	e7f2      	b.n	80092e6 <__libc_init_array+0x1e>
 8009300:	0800bda0 	.word	0x0800bda0
 8009304:	0800bda0 	.word	0x0800bda0
 8009308:	0800bda0 	.word	0x0800bda0
 800930c:	0800bda4 	.word	0x0800bda4

08009310 <__retarget_lock_init_recursive>:
 8009310:	4770      	bx	lr

08009312 <__retarget_lock_acquire_recursive>:
 8009312:	4770      	bx	lr

08009314 <__retarget_lock_release_recursive>:
 8009314:	4770      	bx	lr

08009316 <memcpy>:
 8009316:	440a      	add	r2, r1
 8009318:	4291      	cmp	r1, r2
 800931a:	f100 33ff 	add.w	r3, r0, #4294967295
 800931e:	d100      	bne.n	8009322 <memcpy+0xc>
 8009320:	4770      	bx	lr
 8009322:	b510      	push	{r4, lr}
 8009324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800932c:	4291      	cmp	r1, r2
 800932e:	d1f9      	bne.n	8009324 <memcpy+0xe>
 8009330:	bd10      	pop	{r4, pc}
	...

08009334 <__assert_func>:
 8009334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009336:	4614      	mov	r4, r2
 8009338:	461a      	mov	r2, r3
 800933a:	4b09      	ldr	r3, [pc, #36]	@ (8009360 <__assert_func+0x2c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4605      	mov	r5, r0
 8009340:	68d8      	ldr	r0, [r3, #12]
 8009342:	b954      	cbnz	r4, 800935a <__assert_func+0x26>
 8009344:	4b07      	ldr	r3, [pc, #28]	@ (8009364 <__assert_func+0x30>)
 8009346:	461c      	mov	r4, r3
 8009348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800934c:	9100      	str	r1, [sp, #0]
 800934e:	462b      	mov	r3, r5
 8009350:	4905      	ldr	r1, [pc, #20]	@ (8009368 <__assert_func+0x34>)
 8009352:	f7ff fcb5 	bl	8008cc0 <fiprintf>
 8009356:	f001 f955 	bl	800a604 <abort>
 800935a:	4b04      	ldr	r3, [pc, #16]	@ (800936c <__assert_func+0x38>)
 800935c:	e7f4      	b.n	8009348 <__assert_func+0x14>
 800935e:	bf00      	nop
 8009360:	200009d4 	.word	0x200009d4
 8009364:	0800bc48 	.word	0x0800bc48
 8009368:	0800bc1a 	.word	0x0800bc1a
 800936c:	0800bc0d 	.word	0x0800bc0d

08009370 <_free_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4605      	mov	r5, r0
 8009374:	2900      	cmp	r1, #0
 8009376:	d041      	beq.n	80093fc <_free_r+0x8c>
 8009378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800937c:	1f0c      	subs	r4, r1, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	18e4      	addlt	r4, r4, r3
 8009384:	f7ff fbec 	bl	8008b60 <__malloc_lock>
 8009388:	4a1d      	ldr	r2, [pc, #116]	@ (8009400 <_free_r+0x90>)
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	b933      	cbnz	r3, 800939c <_free_r+0x2c>
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	6014      	str	r4, [r2, #0]
 8009392:	4628      	mov	r0, r5
 8009394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009398:	f7ff bbe8 	b.w	8008b6c <__malloc_unlock>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d908      	bls.n	80093b2 <_free_r+0x42>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	1821      	adds	r1, r4, r0
 80093a4:	428b      	cmp	r3, r1
 80093a6:	bf01      	itttt	eq
 80093a8:	6819      	ldreq	r1, [r3, #0]
 80093aa:	685b      	ldreq	r3, [r3, #4]
 80093ac:	1809      	addeq	r1, r1, r0
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	e7ed      	b.n	800938e <_free_r+0x1e>
 80093b2:	461a      	mov	r2, r3
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	b10b      	cbz	r3, 80093bc <_free_r+0x4c>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d9fa      	bls.n	80093b2 <_free_r+0x42>
 80093bc:	6811      	ldr	r1, [r2, #0]
 80093be:	1850      	adds	r0, r2, r1
 80093c0:	42a0      	cmp	r0, r4
 80093c2:	d10b      	bne.n	80093dc <_free_r+0x6c>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	4401      	add	r1, r0
 80093c8:	1850      	adds	r0, r2, r1
 80093ca:	4283      	cmp	r3, r0
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	d1e0      	bne.n	8009392 <_free_r+0x22>
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	6053      	str	r3, [r2, #4]
 80093d6:	4408      	add	r0, r1
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	e7da      	b.n	8009392 <_free_r+0x22>
 80093dc:	d902      	bls.n	80093e4 <_free_r+0x74>
 80093de:	230c      	movs	r3, #12
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	e7d6      	b.n	8009392 <_free_r+0x22>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	1821      	adds	r1, r4, r0
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf04      	itt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	bf04      	itt	eq
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	6054      	str	r4, [r2, #4]
 80093fa:	e7ca      	b.n	8009392 <_free_r+0x22>
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	20000e2c 	.word	0x20000e2c

08009404 <__ssputs_r>:
 8009404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009408:	688e      	ldr	r6, [r1, #8]
 800940a:	461f      	mov	r7, r3
 800940c:	42be      	cmp	r6, r7
 800940e:	680b      	ldr	r3, [r1, #0]
 8009410:	4682      	mov	sl, r0
 8009412:	460c      	mov	r4, r1
 8009414:	4690      	mov	r8, r2
 8009416:	d82d      	bhi.n	8009474 <__ssputs_r+0x70>
 8009418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800941c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009420:	d026      	beq.n	8009470 <__ssputs_r+0x6c>
 8009422:	6965      	ldr	r5, [r4, #20]
 8009424:	6909      	ldr	r1, [r1, #16]
 8009426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800942a:	eba3 0901 	sub.w	r9, r3, r1
 800942e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009432:	1c7b      	adds	r3, r7, #1
 8009434:	444b      	add	r3, r9
 8009436:	106d      	asrs	r5, r5, #1
 8009438:	429d      	cmp	r5, r3
 800943a:	bf38      	it	cc
 800943c:	461d      	movcc	r5, r3
 800943e:	0553      	lsls	r3, r2, #21
 8009440:	d527      	bpl.n	8009492 <__ssputs_r+0x8e>
 8009442:	4629      	mov	r1, r5
 8009444:	f7ff fb0c 	bl	8008a60 <_malloc_r>
 8009448:	4606      	mov	r6, r0
 800944a:	b360      	cbz	r0, 80094a6 <__ssputs_r+0xa2>
 800944c:	6921      	ldr	r1, [r4, #16]
 800944e:	464a      	mov	r2, r9
 8009450:	f7ff ff61 	bl	8009316 <memcpy>
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800945a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	6126      	str	r6, [r4, #16]
 8009462:	6165      	str	r5, [r4, #20]
 8009464:	444e      	add	r6, r9
 8009466:	eba5 0509 	sub.w	r5, r5, r9
 800946a:	6026      	str	r6, [r4, #0]
 800946c:	60a5      	str	r5, [r4, #8]
 800946e:	463e      	mov	r6, r7
 8009470:	42be      	cmp	r6, r7
 8009472:	d900      	bls.n	8009476 <__ssputs_r+0x72>
 8009474:	463e      	mov	r6, r7
 8009476:	6820      	ldr	r0, [r4, #0]
 8009478:	4632      	mov	r2, r6
 800947a:	4641      	mov	r1, r8
 800947c:	f001 f885 	bl	800a58a <memmove>
 8009480:	68a3      	ldr	r3, [r4, #8]
 8009482:	1b9b      	subs	r3, r3, r6
 8009484:	60a3      	str	r3, [r4, #8]
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	4433      	add	r3, r6
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	2000      	movs	r0, #0
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	462a      	mov	r2, r5
 8009494:	f001 f8bd 	bl	800a612 <_realloc_r>
 8009498:	4606      	mov	r6, r0
 800949a:	2800      	cmp	r0, #0
 800949c:	d1e0      	bne.n	8009460 <__ssputs_r+0x5c>
 800949e:	6921      	ldr	r1, [r4, #16]
 80094a0:	4650      	mov	r0, sl
 80094a2:	f7ff ff65 	bl	8009370 <_free_r>
 80094a6:	230c      	movs	r3, #12
 80094a8:	f8ca 3000 	str.w	r3, [sl]
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b2:	81a3      	strh	r3, [r4, #12]
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	e7e9      	b.n	800948e <__ssputs_r+0x8a>
	...

080094bc <_svfiprintf_r>:
 80094bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	4698      	mov	r8, r3
 80094c2:	898b      	ldrh	r3, [r1, #12]
 80094c4:	061b      	lsls	r3, r3, #24
 80094c6:	b09d      	sub	sp, #116	@ 0x74
 80094c8:	4607      	mov	r7, r0
 80094ca:	460d      	mov	r5, r1
 80094cc:	4614      	mov	r4, r2
 80094ce:	d510      	bpl.n	80094f2 <_svfiprintf_r+0x36>
 80094d0:	690b      	ldr	r3, [r1, #16]
 80094d2:	b973      	cbnz	r3, 80094f2 <_svfiprintf_r+0x36>
 80094d4:	2140      	movs	r1, #64	@ 0x40
 80094d6:	f7ff fac3 	bl	8008a60 <_malloc_r>
 80094da:	6028      	str	r0, [r5, #0]
 80094dc:	6128      	str	r0, [r5, #16]
 80094de:	b930      	cbnz	r0, 80094ee <_svfiprintf_r+0x32>
 80094e0:	230c      	movs	r3, #12
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	b01d      	add	sp, #116	@ 0x74
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	2340      	movs	r3, #64	@ 0x40
 80094f0:	616b      	str	r3, [r5, #20]
 80094f2:	2300      	movs	r3, #0
 80094f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094f6:	2320      	movs	r3, #32
 80094f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009500:	2330      	movs	r3, #48	@ 0x30
 8009502:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80096a0 <_svfiprintf_r+0x1e4>
 8009506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800950a:	f04f 0901 	mov.w	r9, #1
 800950e:	4623      	mov	r3, r4
 8009510:	469a      	mov	sl, r3
 8009512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009516:	b10a      	cbz	r2, 800951c <_svfiprintf_r+0x60>
 8009518:	2a25      	cmp	r2, #37	@ 0x25
 800951a:	d1f9      	bne.n	8009510 <_svfiprintf_r+0x54>
 800951c:	ebba 0b04 	subs.w	fp, sl, r4
 8009520:	d00b      	beq.n	800953a <_svfiprintf_r+0x7e>
 8009522:	465b      	mov	r3, fp
 8009524:	4622      	mov	r2, r4
 8009526:	4629      	mov	r1, r5
 8009528:	4638      	mov	r0, r7
 800952a:	f7ff ff6b 	bl	8009404 <__ssputs_r>
 800952e:	3001      	adds	r0, #1
 8009530:	f000 80a7 	beq.w	8009682 <_svfiprintf_r+0x1c6>
 8009534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009536:	445a      	add	r2, fp
 8009538:	9209      	str	r2, [sp, #36]	@ 0x24
 800953a:	f89a 3000 	ldrb.w	r3, [sl]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 809f 	beq.w	8009682 <_svfiprintf_r+0x1c6>
 8009544:	2300      	movs	r3, #0
 8009546:	f04f 32ff 	mov.w	r2, #4294967295
 800954a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800954e:	f10a 0a01 	add.w	sl, sl, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	9307      	str	r3, [sp, #28]
 8009556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800955a:	931a      	str	r3, [sp, #104]	@ 0x68
 800955c:	4654      	mov	r4, sl
 800955e:	2205      	movs	r2, #5
 8009560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009564:	484e      	ldr	r0, [pc, #312]	@ (80096a0 <_svfiprintf_r+0x1e4>)
 8009566:	f7f6 fe4b 	bl	8000200 <memchr>
 800956a:	9a04      	ldr	r2, [sp, #16]
 800956c:	b9d8      	cbnz	r0, 80095a6 <_svfiprintf_r+0xea>
 800956e:	06d0      	lsls	r0, r2, #27
 8009570:	bf44      	itt	mi
 8009572:	2320      	movmi	r3, #32
 8009574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009578:	0711      	lsls	r1, r2, #28
 800957a:	bf44      	itt	mi
 800957c:	232b      	movmi	r3, #43	@ 0x2b
 800957e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009582:	f89a 3000 	ldrb.w	r3, [sl]
 8009586:	2b2a      	cmp	r3, #42	@ 0x2a
 8009588:	d015      	beq.n	80095b6 <_svfiprintf_r+0xfa>
 800958a:	9a07      	ldr	r2, [sp, #28]
 800958c:	4654      	mov	r4, sl
 800958e:	2000      	movs	r0, #0
 8009590:	f04f 0c0a 	mov.w	ip, #10
 8009594:	4621      	mov	r1, r4
 8009596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800959a:	3b30      	subs	r3, #48	@ 0x30
 800959c:	2b09      	cmp	r3, #9
 800959e:	d94b      	bls.n	8009638 <_svfiprintf_r+0x17c>
 80095a0:	b1b0      	cbz	r0, 80095d0 <_svfiprintf_r+0x114>
 80095a2:	9207      	str	r2, [sp, #28]
 80095a4:	e014      	b.n	80095d0 <_svfiprintf_r+0x114>
 80095a6:	eba0 0308 	sub.w	r3, r0, r8
 80095aa:	fa09 f303 	lsl.w	r3, r9, r3
 80095ae:	4313      	orrs	r3, r2
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	46a2      	mov	sl, r4
 80095b4:	e7d2      	b.n	800955c <_svfiprintf_r+0xa0>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	1d19      	adds	r1, r3, #4
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	9103      	str	r1, [sp, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfbb      	ittet	lt
 80095c2:	425b      	neglt	r3, r3
 80095c4:	f042 0202 	orrlt.w	r2, r2, #2
 80095c8:	9307      	strge	r3, [sp, #28]
 80095ca:	9307      	strlt	r3, [sp, #28]
 80095cc:	bfb8      	it	lt
 80095ce:	9204      	strlt	r2, [sp, #16]
 80095d0:	7823      	ldrb	r3, [r4, #0]
 80095d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80095d4:	d10a      	bne.n	80095ec <_svfiprintf_r+0x130>
 80095d6:	7863      	ldrb	r3, [r4, #1]
 80095d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80095da:	d132      	bne.n	8009642 <_svfiprintf_r+0x186>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	9203      	str	r2, [sp, #12]
 80095e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095e8:	3402      	adds	r4, #2
 80095ea:	9305      	str	r3, [sp, #20]
 80095ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80096b0 <_svfiprintf_r+0x1f4>
 80095f0:	7821      	ldrb	r1, [r4, #0]
 80095f2:	2203      	movs	r2, #3
 80095f4:	4650      	mov	r0, sl
 80095f6:	f7f6 fe03 	bl	8000200 <memchr>
 80095fa:	b138      	cbz	r0, 800960c <_svfiprintf_r+0x150>
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	eba0 000a 	sub.w	r0, r0, sl
 8009602:	2240      	movs	r2, #64	@ 0x40
 8009604:	4082      	lsls	r2, r0
 8009606:	4313      	orrs	r3, r2
 8009608:	3401      	adds	r4, #1
 800960a:	9304      	str	r3, [sp, #16]
 800960c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009610:	4824      	ldr	r0, [pc, #144]	@ (80096a4 <_svfiprintf_r+0x1e8>)
 8009612:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009616:	2206      	movs	r2, #6
 8009618:	f7f6 fdf2 	bl	8000200 <memchr>
 800961c:	2800      	cmp	r0, #0
 800961e:	d036      	beq.n	800968e <_svfiprintf_r+0x1d2>
 8009620:	4b21      	ldr	r3, [pc, #132]	@ (80096a8 <_svfiprintf_r+0x1ec>)
 8009622:	bb1b      	cbnz	r3, 800966c <_svfiprintf_r+0x1b0>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	3307      	adds	r3, #7
 8009628:	f023 0307 	bic.w	r3, r3, #7
 800962c:	3308      	adds	r3, #8
 800962e:	9303      	str	r3, [sp, #12]
 8009630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009632:	4433      	add	r3, r6
 8009634:	9309      	str	r3, [sp, #36]	@ 0x24
 8009636:	e76a      	b.n	800950e <_svfiprintf_r+0x52>
 8009638:	fb0c 3202 	mla	r2, ip, r2, r3
 800963c:	460c      	mov	r4, r1
 800963e:	2001      	movs	r0, #1
 8009640:	e7a8      	b.n	8009594 <_svfiprintf_r+0xd8>
 8009642:	2300      	movs	r3, #0
 8009644:	3401      	adds	r4, #1
 8009646:	9305      	str	r3, [sp, #20]
 8009648:	4619      	mov	r1, r3
 800964a:	f04f 0c0a 	mov.w	ip, #10
 800964e:	4620      	mov	r0, r4
 8009650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009654:	3a30      	subs	r2, #48	@ 0x30
 8009656:	2a09      	cmp	r2, #9
 8009658:	d903      	bls.n	8009662 <_svfiprintf_r+0x1a6>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0c6      	beq.n	80095ec <_svfiprintf_r+0x130>
 800965e:	9105      	str	r1, [sp, #20]
 8009660:	e7c4      	b.n	80095ec <_svfiprintf_r+0x130>
 8009662:	fb0c 2101 	mla	r1, ip, r1, r2
 8009666:	4604      	mov	r4, r0
 8009668:	2301      	movs	r3, #1
 800966a:	e7f0      	b.n	800964e <_svfiprintf_r+0x192>
 800966c:	ab03      	add	r3, sp, #12
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	462a      	mov	r2, r5
 8009672:	4b0e      	ldr	r3, [pc, #56]	@ (80096ac <_svfiprintf_r+0x1f0>)
 8009674:	a904      	add	r1, sp, #16
 8009676:	4638      	mov	r0, r7
 8009678:	f3af 8000 	nop.w
 800967c:	1c42      	adds	r2, r0, #1
 800967e:	4606      	mov	r6, r0
 8009680:	d1d6      	bne.n	8009630 <_svfiprintf_r+0x174>
 8009682:	89ab      	ldrh	r3, [r5, #12]
 8009684:	065b      	lsls	r3, r3, #25
 8009686:	f53f af2d 	bmi.w	80094e4 <_svfiprintf_r+0x28>
 800968a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800968c:	e72c      	b.n	80094e8 <_svfiprintf_r+0x2c>
 800968e:	ab03      	add	r3, sp, #12
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	462a      	mov	r2, r5
 8009694:	4b05      	ldr	r3, [pc, #20]	@ (80096ac <_svfiprintf_r+0x1f0>)
 8009696:	a904      	add	r1, sp, #16
 8009698:	4638      	mov	r0, r7
 800969a:	f000 fb87 	bl	8009dac <_printf_i>
 800969e:	e7ed      	b.n	800967c <_svfiprintf_r+0x1c0>
 80096a0:	0800bc49 	.word	0x0800bc49
 80096a4:	0800bc53 	.word	0x0800bc53
 80096a8:	00000000 	.word	0x00000000
 80096ac:	08009405 	.word	0x08009405
 80096b0:	0800bc4f 	.word	0x0800bc4f

080096b4 <_sungetc_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	1c4b      	adds	r3, r1, #1
 80096b8:	4614      	mov	r4, r2
 80096ba:	d103      	bne.n	80096c4 <_sungetc_r+0x10>
 80096bc:	f04f 35ff 	mov.w	r5, #4294967295
 80096c0:	4628      	mov	r0, r5
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	8993      	ldrh	r3, [r2, #12]
 80096c6:	f023 0320 	bic.w	r3, r3, #32
 80096ca:	8193      	strh	r3, [r2, #12]
 80096cc:	6853      	ldr	r3, [r2, #4]
 80096ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80096d0:	b2cd      	uxtb	r5, r1
 80096d2:	b18a      	cbz	r2, 80096f8 <_sungetc_r+0x44>
 80096d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80096d6:	429a      	cmp	r2, r3
 80096d8:	dd08      	ble.n	80096ec <_sungetc_r+0x38>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	1e5a      	subs	r2, r3, #1
 80096de:	6022      	str	r2, [r4, #0]
 80096e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	3301      	adds	r3, #1
 80096e8:	6063      	str	r3, [r4, #4]
 80096ea:	e7e9      	b.n	80096c0 <_sungetc_r+0xc>
 80096ec:	4621      	mov	r1, r4
 80096ee:	f000 ff12 	bl	800a516 <__submore>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d0f1      	beq.n	80096da <_sungetc_r+0x26>
 80096f6:	e7e1      	b.n	80096bc <_sungetc_r+0x8>
 80096f8:	6921      	ldr	r1, [r4, #16]
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	b141      	cbz	r1, 8009710 <_sungetc_r+0x5c>
 80096fe:	4291      	cmp	r1, r2
 8009700:	d206      	bcs.n	8009710 <_sungetc_r+0x5c>
 8009702:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009706:	42a9      	cmp	r1, r5
 8009708:	d102      	bne.n	8009710 <_sungetc_r+0x5c>
 800970a:	3a01      	subs	r2, #1
 800970c:	6022      	str	r2, [r4, #0]
 800970e:	e7ea      	b.n	80096e6 <_sungetc_r+0x32>
 8009710:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009714:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009718:	6363      	str	r3, [r4, #52]	@ 0x34
 800971a:	2303      	movs	r3, #3
 800971c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800971e:	4623      	mov	r3, r4
 8009720:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	2301      	movs	r3, #1
 8009728:	e7de      	b.n	80096e8 <_sungetc_r+0x34>

0800972a <__ssrefill_r>:
 800972a:	b510      	push	{r4, lr}
 800972c:	460c      	mov	r4, r1
 800972e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009730:	b169      	cbz	r1, 800974e <__ssrefill_r+0x24>
 8009732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009736:	4299      	cmp	r1, r3
 8009738:	d001      	beq.n	800973e <__ssrefill_r+0x14>
 800973a:	f7ff fe19 	bl	8009370 <_free_r>
 800973e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009740:	6063      	str	r3, [r4, #4]
 8009742:	2000      	movs	r0, #0
 8009744:	6360      	str	r0, [r4, #52]	@ 0x34
 8009746:	b113      	cbz	r3, 800974e <__ssrefill_r+0x24>
 8009748:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd10      	pop	{r4, pc}
 800974e:	6923      	ldr	r3, [r4, #16]
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	2300      	movs	r3, #0
 8009754:	6063      	str	r3, [r4, #4]
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f043 0320 	orr.w	r3, r3, #32
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	e7f3      	b.n	800974c <__ssrefill_r+0x22>

08009764 <__ssvfiscanf_r>:
 8009764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	460c      	mov	r4, r1
 800976a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800976e:	2100      	movs	r1, #0
 8009770:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009774:	49a5      	ldr	r1, [pc, #660]	@ (8009a0c <__ssvfiscanf_r+0x2a8>)
 8009776:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009778:	f10d 0804 	add.w	r8, sp, #4
 800977c:	49a4      	ldr	r1, [pc, #656]	@ (8009a10 <__ssvfiscanf_r+0x2ac>)
 800977e:	4fa5      	ldr	r7, [pc, #660]	@ (8009a14 <__ssvfiscanf_r+0x2b0>)
 8009780:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009784:	4606      	mov	r6, r0
 8009786:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	7813      	ldrb	r3, [r2, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 8158 	beq.w	8009a42 <__ssvfiscanf_r+0x2de>
 8009792:	5cf9      	ldrb	r1, [r7, r3]
 8009794:	f011 0108 	ands.w	r1, r1, #8
 8009798:	f102 0501 	add.w	r5, r2, #1
 800979c:	d019      	beq.n	80097d2 <__ssvfiscanf_r+0x6e>
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dd0f      	ble.n	80097c4 <__ssvfiscanf_r+0x60>
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	781a      	ldrb	r2, [r3, #0]
 80097a8:	5cba      	ldrb	r2, [r7, r2]
 80097aa:	0712      	lsls	r2, r2, #28
 80097ac:	d401      	bmi.n	80097b2 <__ssvfiscanf_r+0x4e>
 80097ae:	462a      	mov	r2, r5
 80097b0:	e7eb      	b.n	800978a <__ssvfiscanf_r+0x26>
 80097b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80097b4:	3201      	adds	r2, #1
 80097b6:	9245      	str	r2, [sp, #276]	@ 0x114
 80097b8:	6862      	ldr	r2, [r4, #4]
 80097ba:	3301      	adds	r3, #1
 80097bc:	3a01      	subs	r2, #1
 80097be:	6062      	str	r2, [r4, #4]
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	e7ec      	b.n	800979e <__ssvfiscanf_r+0x3a>
 80097c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80097c6:	4621      	mov	r1, r4
 80097c8:	4630      	mov	r0, r6
 80097ca:	4798      	blx	r3
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d0e9      	beq.n	80097a4 <__ssvfiscanf_r+0x40>
 80097d0:	e7ed      	b.n	80097ae <__ssvfiscanf_r+0x4a>
 80097d2:	2b25      	cmp	r3, #37	@ 0x25
 80097d4:	d012      	beq.n	80097fc <__ssvfiscanf_r+0x98>
 80097d6:	4699      	mov	r9, r3
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f340 8093 	ble.w	8009906 <__ssvfiscanf_r+0x1a2>
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	7813      	ldrb	r3, [r2, #0]
 80097e4:	454b      	cmp	r3, r9
 80097e6:	f040 812c 	bne.w	8009a42 <__ssvfiscanf_r+0x2de>
 80097ea:	6863      	ldr	r3, [r4, #4]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	6063      	str	r3, [r4, #4]
 80097f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80097f2:	3201      	adds	r2, #1
 80097f4:	3301      	adds	r3, #1
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	9345      	str	r3, [sp, #276]	@ 0x114
 80097fa:	e7d8      	b.n	80097ae <__ssvfiscanf_r+0x4a>
 80097fc:	9141      	str	r1, [sp, #260]	@ 0x104
 80097fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009800:	7853      	ldrb	r3, [r2, #1]
 8009802:	2b2a      	cmp	r3, #42	@ 0x2a
 8009804:	bf02      	ittt	eq
 8009806:	2310      	moveq	r3, #16
 8009808:	1c95      	addeq	r5, r2, #2
 800980a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800980c:	220a      	movs	r2, #10
 800980e:	46a9      	mov	r9, r5
 8009810:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009814:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009818:	2b09      	cmp	r3, #9
 800981a:	d91e      	bls.n	800985a <__ssvfiscanf_r+0xf6>
 800981c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009a18 <__ssvfiscanf_r+0x2b4>
 8009820:	2203      	movs	r2, #3
 8009822:	4650      	mov	r0, sl
 8009824:	f7f6 fcec 	bl	8000200 <memchr>
 8009828:	b138      	cbz	r0, 800983a <__ssvfiscanf_r+0xd6>
 800982a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800982c:	eba0 000a 	sub.w	r0, r0, sl
 8009830:	2301      	movs	r3, #1
 8009832:	4083      	lsls	r3, r0
 8009834:	4313      	orrs	r3, r2
 8009836:	9341      	str	r3, [sp, #260]	@ 0x104
 8009838:	464d      	mov	r5, r9
 800983a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800983e:	2b78      	cmp	r3, #120	@ 0x78
 8009840:	d806      	bhi.n	8009850 <__ssvfiscanf_r+0xec>
 8009842:	2b57      	cmp	r3, #87	@ 0x57
 8009844:	d810      	bhi.n	8009868 <__ssvfiscanf_r+0x104>
 8009846:	2b25      	cmp	r3, #37	@ 0x25
 8009848:	d0c5      	beq.n	80097d6 <__ssvfiscanf_r+0x72>
 800984a:	d857      	bhi.n	80098fc <__ssvfiscanf_r+0x198>
 800984c:	2b00      	cmp	r3, #0
 800984e:	d065      	beq.n	800991c <__ssvfiscanf_r+0x1b8>
 8009850:	2303      	movs	r3, #3
 8009852:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009854:	230a      	movs	r3, #10
 8009856:	9342      	str	r3, [sp, #264]	@ 0x108
 8009858:	e078      	b.n	800994c <__ssvfiscanf_r+0x1e8>
 800985a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800985c:	fb02 1103 	mla	r1, r2, r3, r1
 8009860:	3930      	subs	r1, #48	@ 0x30
 8009862:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009864:	464d      	mov	r5, r9
 8009866:	e7d2      	b.n	800980e <__ssvfiscanf_r+0xaa>
 8009868:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800986c:	2a20      	cmp	r2, #32
 800986e:	d8ef      	bhi.n	8009850 <__ssvfiscanf_r+0xec>
 8009870:	a101      	add	r1, pc, #4	@ (adr r1, 8009878 <__ssvfiscanf_r+0x114>)
 8009872:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009876:	bf00      	nop
 8009878:	0800992b 	.word	0x0800992b
 800987c:	08009851 	.word	0x08009851
 8009880:	08009851 	.word	0x08009851
 8009884:	08009985 	.word	0x08009985
 8009888:	08009851 	.word	0x08009851
 800988c:	08009851 	.word	0x08009851
 8009890:	08009851 	.word	0x08009851
 8009894:	08009851 	.word	0x08009851
 8009898:	08009851 	.word	0x08009851
 800989c:	08009851 	.word	0x08009851
 80098a0:	08009851 	.word	0x08009851
 80098a4:	0800999b 	.word	0x0800999b
 80098a8:	08009981 	.word	0x08009981
 80098ac:	08009903 	.word	0x08009903
 80098b0:	08009903 	.word	0x08009903
 80098b4:	08009903 	.word	0x08009903
 80098b8:	08009851 	.word	0x08009851
 80098bc:	0800993d 	.word	0x0800993d
 80098c0:	08009851 	.word	0x08009851
 80098c4:	08009851 	.word	0x08009851
 80098c8:	08009851 	.word	0x08009851
 80098cc:	08009851 	.word	0x08009851
 80098d0:	080099ab 	.word	0x080099ab
 80098d4:	08009945 	.word	0x08009945
 80098d8:	08009923 	.word	0x08009923
 80098dc:	08009851 	.word	0x08009851
 80098e0:	08009851 	.word	0x08009851
 80098e4:	080099a7 	.word	0x080099a7
 80098e8:	08009851 	.word	0x08009851
 80098ec:	08009981 	.word	0x08009981
 80098f0:	08009851 	.word	0x08009851
 80098f4:	08009851 	.word	0x08009851
 80098f8:	0800992b 	.word	0x0800992b
 80098fc:	3b45      	subs	r3, #69	@ 0x45
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d8a6      	bhi.n	8009850 <__ssvfiscanf_r+0xec>
 8009902:	2305      	movs	r3, #5
 8009904:	e021      	b.n	800994a <__ssvfiscanf_r+0x1e6>
 8009906:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009908:	4621      	mov	r1, r4
 800990a:	4630      	mov	r0, r6
 800990c:	4798      	blx	r3
 800990e:	2800      	cmp	r0, #0
 8009910:	f43f af66 	beq.w	80097e0 <__ssvfiscanf_r+0x7c>
 8009914:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009916:	2800      	cmp	r0, #0
 8009918:	f040 808b 	bne.w	8009a32 <__ssvfiscanf_r+0x2ce>
 800991c:	f04f 30ff 	mov.w	r0, #4294967295
 8009920:	e08b      	b.n	8009a3a <__ssvfiscanf_r+0x2d6>
 8009922:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009924:	f042 0220 	orr.w	r2, r2, #32
 8009928:	9241      	str	r2, [sp, #260]	@ 0x104
 800992a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800992c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009930:	9241      	str	r2, [sp, #260]	@ 0x104
 8009932:	2210      	movs	r2, #16
 8009934:	2b6e      	cmp	r3, #110	@ 0x6e
 8009936:	9242      	str	r2, [sp, #264]	@ 0x108
 8009938:	d902      	bls.n	8009940 <__ssvfiscanf_r+0x1dc>
 800993a:	e005      	b.n	8009948 <__ssvfiscanf_r+0x1e4>
 800993c:	2300      	movs	r3, #0
 800993e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009940:	2303      	movs	r3, #3
 8009942:	e002      	b.n	800994a <__ssvfiscanf_r+0x1e6>
 8009944:	2308      	movs	r3, #8
 8009946:	9342      	str	r3, [sp, #264]	@ 0x108
 8009948:	2304      	movs	r3, #4
 800994a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800994c:	6863      	ldr	r3, [r4, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	dd39      	ble.n	80099c6 <__ssvfiscanf_r+0x262>
 8009952:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009954:	0659      	lsls	r1, r3, #25
 8009956:	d404      	bmi.n	8009962 <__ssvfiscanf_r+0x1fe>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	5cba      	ldrb	r2, [r7, r2]
 800995e:	0712      	lsls	r2, r2, #28
 8009960:	d438      	bmi.n	80099d4 <__ssvfiscanf_r+0x270>
 8009962:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009964:	2b02      	cmp	r3, #2
 8009966:	dc47      	bgt.n	80099f8 <__ssvfiscanf_r+0x294>
 8009968:	466b      	mov	r3, sp
 800996a:	4622      	mov	r2, r4
 800996c:	a941      	add	r1, sp, #260	@ 0x104
 800996e:	4630      	mov	r0, r6
 8009970:	f000 fb3c 	bl	8009fec <_scanf_chars>
 8009974:	2801      	cmp	r0, #1
 8009976:	d064      	beq.n	8009a42 <__ssvfiscanf_r+0x2de>
 8009978:	2802      	cmp	r0, #2
 800997a:	f47f af18 	bne.w	80097ae <__ssvfiscanf_r+0x4a>
 800997e:	e7c9      	b.n	8009914 <__ssvfiscanf_r+0x1b0>
 8009980:	220a      	movs	r2, #10
 8009982:	e7d7      	b.n	8009934 <__ssvfiscanf_r+0x1d0>
 8009984:	4629      	mov	r1, r5
 8009986:	4640      	mov	r0, r8
 8009988:	f000 fd8c 	bl	800a4a4 <__sccl>
 800998c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800998e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009992:	9341      	str	r3, [sp, #260]	@ 0x104
 8009994:	4605      	mov	r5, r0
 8009996:	2301      	movs	r3, #1
 8009998:	e7d7      	b.n	800994a <__ssvfiscanf_r+0x1e6>
 800999a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800999c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80099a2:	2300      	movs	r3, #0
 80099a4:	e7d1      	b.n	800994a <__ssvfiscanf_r+0x1e6>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e7cf      	b.n	800994a <__ssvfiscanf_r+0x1e6>
 80099aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80099ac:	06c3      	lsls	r3, r0, #27
 80099ae:	f53f aefe 	bmi.w	80097ae <__ssvfiscanf_r+0x4a>
 80099b2:	9b00      	ldr	r3, [sp, #0]
 80099b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80099b6:	1d19      	adds	r1, r3, #4
 80099b8:	9100      	str	r1, [sp, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	07c0      	lsls	r0, r0, #31
 80099be:	bf4c      	ite	mi
 80099c0:	801a      	strhmi	r2, [r3, #0]
 80099c2:	601a      	strpl	r2, [r3, #0]
 80099c4:	e6f3      	b.n	80097ae <__ssvfiscanf_r+0x4a>
 80099c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099c8:	4621      	mov	r1, r4
 80099ca:	4630      	mov	r0, r6
 80099cc:	4798      	blx	r3
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d0bf      	beq.n	8009952 <__ssvfiscanf_r+0x1ee>
 80099d2:	e79f      	b.n	8009914 <__ssvfiscanf_r+0x1b0>
 80099d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80099d6:	3201      	adds	r2, #1
 80099d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80099da:	6862      	ldr	r2, [r4, #4]
 80099dc:	3a01      	subs	r2, #1
 80099de:	2a00      	cmp	r2, #0
 80099e0:	6062      	str	r2, [r4, #4]
 80099e2:	dd02      	ble.n	80099ea <__ssvfiscanf_r+0x286>
 80099e4:	3301      	adds	r3, #1
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	e7b6      	b.n	8009958 <__ssvfiscanf_r+0x1f4>
 80099ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099ec:	4621      	mov	r1, r4
 80099ee:	4630      	mov	r0, r6
 80099f0:	4798      	blx	r3
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d0b0      	beq.n	8009958 <__ssvfiscanf_r+0x1f4>
 80099f6:	e78d      	b.n	8009914 <__ssvfiscanf_r+0x1b0>
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	dc0f      	bgt.n	8009a1c <__ssvfiscanf_r+0x2b8>
 80099fc:	466b      	mov	r3, sp
 80099fe:	4622      	mov	r2, r4
 8009a00:	a941      	add	r1, sp, #260	@ 0x104
 8009a02:	4630      	mov	r0, r6
 8009a04:	f000 fb4c 	bl	800a0a0 <_scanf_i>
 8009a08:	e7b4      	b.n	8009974 <__ssvfiscanf_r+0x210>
 8009a0a:	bf00      	nop
 8009a0c:	080096b5 	.word	0x080096b5
 8009a10:	0800972b 	.word	0x0800972b
 8009a14:	0800bc98 	.word	0x0800bc98
 8009a18:	0800bc4f 	.word	0x0800bc4f
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <__ssvfiscanf_r+0x2e4>)
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f43f aec5 	beq.w	80097ae <__ssvfiscanf_r+0x4a>
 8009a24:	466b      	mov	r3, sp
 8009a26:	4622      	mov	r2, r4
 8009a28:	a941      	add	r1, sp, #260	@ 0x104
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f3af 8000 	nop.w
 8009a30:	e7a0      	b.n	8009974 <__ssvfiscanf_r+0x210>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	065b      	lsls	r3, r3, #25
 8009a36:	f53f af71 	bmi.w	800991c <__ssvfiscanf_r+0x1b8>
 8009a3a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a44:	e7f9      	b.n	8009a3a <__ssvfiscanf_r+0x2d6>
 8009a46:	bf00      	nop
 8009a48:	00000000 	.word	0x00000000

08009a4c <__sfputc_r>:
 8009a4c:	6893      	ldr	r3, [r2, #8]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	b410      	push	{r4}
 8009a54:	6093      	str	r3, [r2, #8]
 8009a56:	da08      	bge.n	8009a6a <__sfputc_r+0x1e>
 8009a58:	6994      	ldr	r4, [r2, #24]
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	db01      	blt.n	8009a62 <__sfputc_r+0x16>
 8009a5e:	290a      	cmp	r1, #10
 8009a60:	d103      	bne.n	8009a6a <__sfputc_r+0x1e>
 8009a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a66:	f7ff ba8e 	b.w	8008f86 <__swbuf_r>
 8009a6a:	6813      	ldr	r3, [r2, #0]
 8009a6c:	1c58      	adds	r0, r3, #1
 8009a6e:	6010      	str	r0, [r2, #0]
 8009a70:	7019      	strb	r1, [r3, #0]
 8009a72:	4608      	mov	r0, r1
 8009a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <__sfputs_r>:
 8009a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	4614      	mov	r4, r2
 8009a82:	18d5      	adds	r5, r2, r3
 8009a84:	42ac      	cmp	r4, r5
 8009a86:	d101      	bne.n	8009a8c <__sfputs_r+0x12>
 8009a88:	2000      	movs	r0, #0
 8009a8a:	e007      	b.n	8009a9c <__sfputs_r+0x22>
 8009a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a90:	463a      	mov	r2, r7
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff ffda 	bl	8009a4c <__sfputc_r>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d1f3      	bne.n	8009a84 <__sfputs_r+0xa>
 8009a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aa0 <_vfiprintf_r>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	b09d      	sub	sp, #116	@ 0x74
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	4698      	mov	r8, r3
 8009aac:	4606      	mov	r6, r0
 8009aae:	b118      	cbz	r0, 8009ab8 <_vfiprintf_r+0x18>
 8009ab0:	6a03      	ldr	r3, [r0, #32]
 8009ab2:	b90b      	cbnz	r3, 8009ab8 <_vfiprintf_r+0x18>
 8009ab4:	f7ff f8ec 	bl	8008c90 <__sinit>
 8009ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aba:	07d9      	lsls	r1, r3, #31
 8009abc:	d405      	bmi.n	8009aca <_vfiprintf_r+0x2a>
 8009abe:	89ab      	ldrh	r3, [r5, #12]
 8009ac0:	059a      	lsls	r2, r3, #22
 8009ac2:	d402      	bmi.n	8009aca <_vfiprintf_r+0x2a>
 8009ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ac6:	f7ff fc24 	bl	8009312 <__retarget_lock_acquire_recursive>
 8009aca:	89ab      	ldrh	r3, [r5, #12]
 8009acc:	071b      	lsls	r3, r3, #28
 8009ace:	d501      	bpl.n	8009ad4 <_vfiprintf_r+0x34>
 8009ad0:	692b      	ldr	r3, [r5, #16]
 8009ad2:	b99b      	cbnz	r3, 8009afc <_vfiprintf_r+0x5c>
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff fa94 	bl	8009004 <__swsetup_r>
 8009adc:	b170      	cbz	r0, 8009afc <_vfiprintf_r+0x5c>
 8009ade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ae0:	07dc      	lsls	r4, r3, #31
 8009ae2:	d504      	bpl.n	8009aee <_vfiprintf_r+0x4e>
 8009ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae8:	b01d      	add	sp, #116	@ 0x74
 8009aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aee:	89ab      	ldrh	r3, [r5, #12]
 8009af0:	0598      	lsls	r0, r3, #22
 8009af2:	d4f7      	bmi.n	8009ae4 <_vfiprintf_r+0x44>
 8009af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009af6:	f7ff fc0d 	bl	8009314 <__retarget_lock_release_recursive>
 8009afa:	e7f3      	b.n	8009ae4 <_vfiprintf_r+0x44>
 8009afc:	2300      	movs	r3, #0
 8009afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b00:	2320      	movs	r3, #32
 8009b02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b0a:	2330      	movs	r3, #48	@ 0x30
 8009b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cbc <_vfiprintf_r+0x21c>
 8009b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b14:	f04f 0901 	mov.w	r9, #1
 8009b18:	4623      	mov	r3, r4
 8009b1a:	469a      	mov	sl, r3
 8009b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b20:	b10a      	cbz	r2, 8009b26 <_vfiprintf_r+0x86>
 8009b22:	2a25      	cmp	r2, #37	@ 0x25
 8009b24:	d1f9      	bne.n	8009b1a <_vfiprintf_r+0x7a>
 8009b26:	ebba 0b04 	subs.w	fp, sl, r4
 8009b2a:	d00b      	beq.n	8009b44 <_vfiprintf_r+0xa4>
 8009b2c:	465b      	mov	r3, fp
 8009b2e:	4622      	mov	r2, r4
 8009b30:	4629      	mov	r1, r5
 8009b32:	4630      	mov	r0, r6
 8009b34:	f7ff ffa1 	bl	8009a7a <__sfputs_r>
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f000 80a7 	beq.w	8009c8c <_vfiprintf_r+0x1ec>
 8009b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b40:	445a      	add	r2, fp
 8009b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b44:	f89a 3000 	ldrb.w	r3, [sl]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 809f 	beq.w	8009c8c <_vfiprintf_r+0x1ec>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f04f 32ff 	mov.w	r2, #4294967295
 8009b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b58:	f10a 0a01 	add.w	sl, sl, #1
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b64:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b66:	4654      	mov	r4, sl
 8009b68:	2205      	movs	r2, #5
 8009b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b6e:	4853      	ldr	r0, [pc, #332]	@ (8009cbc <_vfiprintf_r+0x21c>)
 8009b70:	f7f6 fb46 	bl	8000200 <memchr>
 8009b74:	9a04      	ldr	r2, [sp, #16]
 8009b76:	b9d8      	cbnz	r0, 8009bb0 <_vfiprintf_r+0x110>
 8009b78:	06d1      	lsls	r1, r2, #27
 8009b7a:	bf44      	itt	mi
 8009b7c:	2320      	movmi	r3, #32
 8009b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b82:	0713      	lsls	r3, r2, #28
 8009b84:	bf44      	itt	mi
 8009b86:	232b      	movmi	r3, #43	@ 0x2b
 8009b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b92:	d015      	beq.n	8009bc0 <_vfiprintf_r+0x120>
 8009b94:	9a07      	ldr	r2, [sp, #28]
 8009b96:	4654      	mov	r4, sl
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f04f 0c0a 	mov.w	ip, #10
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ba4:	3b30      	subs	r3, #48	@ 0x30
 8009ba6:	2b09      	cmp	r3, #9
 8009ba8:	d94b      	bls.n	8009c42 <_vfiprintf_r+0x1a2>
 8009baa:	b1b0      	cbz	r0, 8009bda <_vfiprintf_r+0x13a>
 8009bac:	9207      	str	r2, [sp, #28]
 8009bae:	e014      	b.n	8009bda <_vfiprintf_r+0x13a>
 8009bb0:	eba0 0308 	sub.w	r3, r0, r8
 8009bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	46a2      	mov	sl, r4
 8009bbe:	e7d2      	b.n	8009b66 <_vfiprintf_r+0xc6>
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	1d19      	adds	r1, r3, #4
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	9103      	str	r1, [sp, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	bfbb      	ittet	lt
 8009bcc:	425b      	neglt	r3, r3
 8009bce:	f042 0202 	orrlt.w	r2, r2, #2
 8009bd2:	9307      	strge	r3, [sp, #28]
 8009bd4:	9307      	strlt	r3, [sp, #28]
 8009bd6:	bfb8      	it	lt
 8009bd8:	9204      	strlt	r2, [sp, #16]
 8009bda:	7823      	ldrb	r3, [r4, #0]
 8009bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bde:	d10a      	bne.n	8009bf6 <_vfiprintf_r+0x156>
 8009be0:	7863      	ldrb	r3, [r4, #1]
 8009be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009be4:	d132      	bne.n	8009c4c <_vfiprintf_r+0x1ac>
 8009be6:	9b03      	ldr	r3, [sp, #12]
 8009be8:	1d1a      	adds	r2, r3, #4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	9203      	str	r2, [sp, #12]
 8009bee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bf2:	3402      	adds	r4, #2
 8009bf4:	9305      	str	r3, [sp, #20]
 8009bf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ccc <_vfiprintf_r+0x22c>
 8009bfa:	7821      	ldrb	r1, [r4, #0]
 8009bfc:	2203      	movs	r2, #3
 8009bfe:	4650      	mov	r0, sl
 8009c00:	f7f6 fafe 	bl	8000200 <memchr>
 8009c04:	b138      	cbz	r0, 8009c16 <_vfiprintf_r+0x176>
 8009c06:	9b04      	ldr	r3, [sp, #16]
 8009c08:	eba0 000a 	sub.w	r0, r0, sl
 8009c0c:	2240      	movs	r2, #64	@ 0x40
 8009c0e:	4082      	lsls	r2, r0
 8009c10:	4313      	orrs	r3, r2
 8009c12:	3401      	adds	r4, #1
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c1a:	4829      	ldr	r0, [pc, #164]	@ (8009cc0 <_vfiprintf_r+0x220>)
 8009c1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c20:	2206      	movs	r2, #6
 8009c22:	f7f6 faed 	bl	8000200 <memchr>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d03f      	beq.n	8009caa <_vfiprintf_r+0x20a>
 8009c2a:	4b26      	ldr	r3, [pc, #152]	@ (8009cc4 <_vfiprintf_r+0x224>)
 8009c2c:	bb1b      	cbnz	r3, 8009c76 <_vfiprintf_r+0x1d6>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	3307      	adds	r3, #7
 8009c32:	f023 0307 	bic.w	r3, r3, #7
 8009c36:	3308      	adds	r3, #8
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3c:	443b      	add	r3, r7
 8009c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c40:	e76a      	b.n	8009b18 <_vfiprintf_r+0x78>
 8009c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c46:	460c      	mov	r4, r1
 8009c48:	2001      	movs	r0, #1
 8009c4a:	e7a8      	b.n	8009b9e <_vfiprintf_r+0xfe>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	3401      	adds	r4, #1
 8009c50:	9305      	str	r3, [sp, #20]
 8009c52:	4619      	mov	r1, r3
 8009c54:	f04f 0c0a 	mov.w	ip, #10
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c5e:	3a30      	subs	r2, #48	@ 0x30
 8009c60:	2a09      	cmp	r2, #9
 8009c62:	d903      	bls.n	8009c6c <_vfiprintf_r+0x1cc>
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d0c6      	beq.n	8009bf6 <_vfiprintf_r+0x156>
 8009c68:	9105      	str	r1, [sp, #20]
 8009c6a:	e7c4      	b.n	8009bf6 <_vfiprintf_r+0x156>
 8009c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c70:	4604      	mov	r4, r0
 8009c72:	2301      	movs	r3, #1
 8009c74:	e7f0      	b.n	8009c58 <_vfiprintf_r+0x1b8>
 8009c76:	ab03      	add	r3, sp, #12
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4b12      	ldr	r3, [pc, #72]	@ (8009cc8 <_vfiprintf_r+0x228>)
 8009c7e:	a904      	add	r1, sp, #16
 8009c80:	4630      	mov	r0, r6
 8009c82:	f3af 8000 	nop.w
 8009c86:	4607      	mov	r7, r0
 8009c88:	1c78      	adds	r0, r7, #1
 8009c8a:	d1d6      	bne.n	8009c3a <_vfiprintf_r+0x19a>
 8009c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c8e:	07d9      	lsls	r1, r3, #31
 8009c90:	d405      	bmi.n	8009c9e <_vfiprintf_r+0x1fe>
 8009c92:	89ab      	ldrh	r3, [r5, #12]
 8009c94:	059a      	lsls	r2, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_vfiprintf_r+0x1fe>
 8009c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c9a:	f7ff fb3b 	bl	8009314 <__retarget_lock_release_recursive>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	065b      	lsls	r3, r3, #25
 8009ca2:	f53f af1f 	bmi.w	8009ae4 <_vfiprintf_r+0x44>
 8009ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ca8:	e71e      	b.n	8009ae8 <_vfiprintf_r+0x48>
 8009caa:	ab03      	add	r3, sp, #12
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	462a      	mov	r2, r5
 8009cb0:	4b05      	ldr	r3, [pc, #20]	@ (8009cc8 <_vfiprintf_r+0x228>)
 8009cb2:	a904      	add	r1, sp, #16
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f000 f879 	bl	8009dac <_printf_i>
 8009cba:	e7e4      	b.n	8009c86 <_vfiprintf_r+0x1e6>
 8009cbc:	0800bc49 	.word	0x0800bc49
 8009cc0:	0800bc53 	.word	0x0800bc53
 8009cc4:	00000000 	.word	0x00000000
 8009cc8:	08009a7b 	.word	0x08009a7b
 8009ccc:	0800bc4f 	.word	0x0800bc4f

08009cd0 <_printf_common>:
 8009cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	4698      	mov	r8, r3
 8009cd8:	688a      	ldr	r2, [r1, #8]
 8009cda:	690b      	ldr	r3, [r1, #16]
 8009cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	bfb8      	it	lt
 8009ce4:	4613      	movlt	r3, r2
 8009ce6:	6033      	str	r3, [r6, #0]
 8009ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cec:	4607      	mov	r7, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	b10a      	cbz	r2, 8009cf6 <_printf_common+0x26>
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	6033      	str	r3, [r6, #0]
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	0699      	lsls	r1, r3, #26
 8009cfa:	bf42      	ittt	mi
 8009cfc:	6833      	ldrmi	r3, [r6, #0]
 8009cfe:	3302      	addmi	r3, #2
 8009d00:	6033      	strmi	r3, [r6, #0]
 8009d02:	6825      	ldr	r5, [r4, #0]
 8009d04:	f015 0506 	ands.w	r5, r5, #6
 8009d08:	d106      	bne.n	8009d18 <_printf_common+0x48>
 8009d0a:	f104 0a19 	add.w	sl, r4, #25
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	6832      	ldr	r2, [r6, #0]
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	42ab      	cmp	r3, r5
 8009d16:	dc26      	bgt.n	8009d66 <_printf_common+0x96>
 8009d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d1c:	6822      	ldr	r2, [r4, #0]
 8009d1e:	3b00      	subs	r3, #0
 8009d20:	bf18      	it	ne
 8009d22:	2301      	movne	r3, #1
 8009d24:	0692      	lsls	r2, r2, #26
 8009d26:	d42b      	bmi.n	8009d80 <_printf_common+0xb0>
 8009d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d2c:	4641      	mov	r1, r8
 8009d2e:	4638      	mov	r0, r7
 8009d30:	47c8      	blx	r9
 8009d32:	3001      	adds	r0, #1
 8009d34:	d01e      	beq.n	8009d74 <_printf_common+0xa4>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	6922      	ldr	r2, [r4, #16]
 8009d3a:	f003 0306 	and.w	r3, r3, #6
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	bf02      	ittt	eq
 8009d42:	68e5      	ldreq	r5, [r4, #12]
 8009d44:	6833      	ldreq	r3, [r6, #0]
 8009d46:	1aed      	subeq	r5, r5, r3
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	bf0c      	ite	eq
 8009d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d50:	2500      	movne	r5, #0
 8009d52:	4293      	cmp	r3, r2
 8009d54:	bfc4      	itt	gt
 8009d56:	1a9b      	subgt	r3, r3, r2
 8009d58:	18ed      	addgt	r5, r5, r3
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	341a      	adds	r4, #26
 8009d5e:	42b5      	cmp	r5, r6
 8009d60:	d11a      	bne.n	8009d98 <_printf_common+0xc8>
 8009d62:	2000      	movs	r0, #0
 8009d64:	e008      	b.n	8009d78 <_printf_common+0xa8>
 8009d66:	2301      	movs	r3, #1
 8009d68:	4652      	mov	r2, sl
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	47c8      	blx	r9
 8009d70:	3001      	adds	r0, #1
 8009d72:	d103      	bne.n	8009d7c <_printf_common+0xac>
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	e7c6      	b.n	8009d0e <_printf_common+0x3e>
 8009d80:	18e1      	adds	r1, r4, r3
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	2030      	movs	r0, #48	@ 0x30
 8009d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d8a:	4422      	add	r2, r4
 8009d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d94:	3302      	adds	r3, #2
 8009d96:	e7c7      	b.n	8009d28 <_printf_common+0x58>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	4638      	mov	r0, r7
 8009da0:	47c8      	blx	r9
 8009da2:	3001      	adds	r0, #1
 8009da4:	d0e6      	beq.n	8009d74 <_printf_common+0xa4>
 8009da6:	3601      	adds	r6, #1
 8009da8:	e7d9      	b.n	8009d5e <_printf_common+0x8e>
	...

08009dac <_printf_i>:
 8009dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	7e0f      	ldrb	r7, [r1, #24]
 8009db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009db4:	2f78      	cmp	r7, #120	@ 0x78
 8009db6:	4691      	mov	r9, r2
 8009db8:	4680      	mov	r8, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	469a      	mov	sl, r3
 8009dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dc2:	d807      	bhi.n	8009dd4 <_printf_i+0x28>
 8009dc4:	2f62      	cmp	r7, #98	@ 0x62
 8009dc6:	d80a      	bhi.n	8009dde <_printf_i+0x32>
 8009dc8:	2f00      	cmp	r7, #0
 8009dca:	f000 80d2 	beq.w	8009f72 <_printf_i+0x1c6>
 8009dce:	2f58      	cmp	r7, #88	@ 0x58
 8009dd0:	f000 80b9 	beq.w	8009f46 <_printf_i+0x19a>
 8009dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ddc:	e03a      	b.n	8009e54 <_printf_i+0xa8>
 8009dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009de2:	2b15      	cmp	r3, #21
 8009de4:	d8f6      	bhi.n	8009dd4 <_printf_i+0x28>
 8009de6:	a101      	add	r1, pc, #4	@ (adr r1, 8009dec <_printf_i+0x40>)
 8009de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dec:	08009e45 	.word	0x08009e45
 8009df0:	08009e59 	.word	0x08009e59
 8009df4:	08009dd5 	.word	0x08009dd5
 8009df8:	08009dd5 	.word	0x08009dd5
 8009dfc:	08009dd5 	.word	0x08009dd5
 8009e00:	08009dd5 	.word	0x08009dd5
 8009e04:	08009e59 	.word	0x08009e59
 8009e08:	08009dd5 	.word	0x08009dd5
 8009e0c:	08009dd5 	.word	0x08009dd5
 8009e10:	08009dd5 	.word	0x08009dd5
 8009e14:	08009dd5 	.word	0x08009dd5
 8009e18:	08009f59 	.word	0x08009f59
 8009e1c:	08009e83 	.word	0x08009e83
 8009e20:	08009f13 	.word	0x08009f13
 8009e24:	08009dd5 	.word	0x08009dd5
 8009e28:	08009dd5 	.word	0x08009dd5
 8009e2c:	08009f7b 	.word	0x08009f7b
 8009e30:	08009dd5 	.word	0x08009dd5
 8009e34:	08009e83 	.word	0x08009e83
 8009e38:	08009dd5 	.word	0x08009dd5
 8009e3c:	08009dd5 	.word	0x08009dd5
 8009e40:	08009f1b 	.word	0x08009f1b
 8009e44:	6833      	ldr	r3, [r6, #0]
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6032      	str	r2, [r6, #0]
 8009e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e54:	2301      	movs	r3, #1
 8009e56:	e09d      	b.n	8009f94 <_printf_i+0x1e8>
 8009e58:	6833      	ldr	r3, [r6, #0]
 8009e5a:	6820      	ldr	r0, [r4, #0]
 8009e5c:	1d19      	adds	r1, r3, #4
 8009e5e:	6031      	str	r1, [r6, #0]
 8009e60:	0606      	lsls	r6, r0, #24
 8009e62:	d501      	bpl.n	8009e68 <_printf_i+0xbc>
 8009e64:	681d      	ldr	r5, [r3, #0]
 8009e66:	e003      	b.n	8009e70 <_printf_i+0xc4>
 8009e68:	0645      	lsls	r5, r0, #25
 8009e6a:	d5fb      	bpl.n	8009e64 <_printf_i+0xb8>
 8009e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e70:	2d00      	cmp	r5, #0
 8009e72:	da03      	bge.n	8009e7c <_printf_i+0xd0>
 8009e74:	232d      	movs	r3, #45	@ 0x2d
 8009e76:	426d      	negs	r5, r5
 8009e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e7c:	4859      	ldr	r0, [pc, #356]	@ (8009fe4 <_printf_i+0x238>)
 8009e7e:	230a      	movs	r3, #10
 8009e80:	e011      	b.n	8009ea6 <_printf_i+0xfa>
 8009e82:	6821      	ldr	r1, [r4, #0]
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	0608      	lsls	r0, r1, #24
 8009e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e8c:	d402      	bmi.n	8009e94 <_printf_i+0xe8>
 8009e8e:	0649      	lsls	r1, r1, #25
 8009e90:	bf48      	it	mi
 8009e92:	b2ad      	uxthmi	r5, r5
 8009e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e96:	4853      	ldr	r0, [pc, #332]	@ (8009fe4 <_printf_i+0x238>)
 8009e98:	6033      	str	r3, [r6, #0]
 8009e9a:	bf14      	ite	ne
 8009e9c:	230a      	movne	r3, #10
 8009e9e:	2308      	moveq	r3, #8
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ea6:	6866      	ldr	r6, [r4, #4]
 8009ea8:	60a6      	str	r6, [r4, #8]
 8009eaa:	2e00      	cmp	r6, #0
 8009eac:	bfa2      	ittt	ge
 8009eae:	6821      	ldrge	r1, [r4, #0]
 8009eb0:	f021 0104 	bicge.w	r1, r1, #4
 8009eb4:	6021      	strge	r1, [r4, #0]
 8009eb6:	b90d      	cbnz	r5, 8009ebc <_printf_i+0x110>
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	d04b      	beq.n	8009f54 <_printf_i+0x1a8>
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ec2:	fb03 5711 	mls	r7, r3, r1, r5
 8009ec6:	5dc7      	ldrb	r7, [r0, r7]
 8009ec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ecc:	462f      	mov	r7, r5
 8009ece:	42bb      	cmp	r3, r7
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	d9f4      	bls.n	8009ebe <_printf_i+0x112>
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	d10b      	bne.n	8009ef0 <_printf_i+0x144>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	07df      	lsls	r7, r3, #31
 8009edc:	d508      	bpl.n	8009ef0 <_printf_i+0x144>
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	6861      	ldr	r1, [r4, #4]
 8009ee2:	4299      	cmp	r1, r3
 8009ee4:	bfde      	ittt	le
 8009ee6:	2330      	movle	r3, #48	@ 0x30
 8009ee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009eec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ef0:	1b92      	subs	r2, r2, r6
 8009ef2:	6122      	str	r2, [r4, #16]
 8009ef4:	f8cd a000 	str.w	sl, [sp]
 8009ef8:	464b      	mov	r3, r9
 8009efa:	aa03      	add	r2, sp, #12
 8009efc:	4621      	mov	r1, r4
 8009efe:	4640      	mov	r0, r8
 8009f00:	f7ff fee6 	bl	8009cd0 <_printf_common>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d14a      	bne.n	8009f9e <_printf_i+0x1f2>
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0c:	b004      	add	sp, #16
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	f043 0320 	orr.w	r3, r3, #32
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	4833      	ldr	r0, [pc, #204]	@ (8009fe8 <_printf_i+0x23c>)
 8009f1c:	2778      	movs	r7, #120	@ 0x78
 8009f1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	6831      	ldr	r1, [r6, #0]
 8009f26:	061f      	lsls	r7, r3, #24
 8009f28:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f2c:	d402      	bmi.n	8009f34 <_printf_i+0x188>
 8009f2e:	065f      	lsls	r7, r3, #25
 8009f30:	bf48      	it	mi
 8009f32:	b2ad      	uxthmi	r5, r5
 8009f34:	6031      	str	r1, [r6, #0]
 8009f36:	07d9      	lsls	r1, r3, #31
 8009f38:	bf44      	itt	mi
 8009f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f3e:	6023      	strmi	r3, [r4, #0]
 8009f40:	b11d      	cbz	r5, 8009f4a <_printf_i+0x19e>
 8009f42:	2310      	movs	r3, #16
 8009f44:	e7ac      	b.n	8009ea0 <_printf_i+0xf4>
 8009f46:	4827      	ldr	r0, [pc, #156]	@ (8009fe4 <_printf_i+0x238>)
 8009f48:	e7e9      	b.n	8009f1e <_printf_i+0x172>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	f023 0320 	bic.w	r3, r3, #32
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	e7f6      	b.n	8009f42 <_printf_i+0x196>
 8009f54:	4616      	mov	r6, r2
 8009f56:	e7bd      	b.n	8009ed4 <_printf_i+0x128>
 8009f58:	6833      	ldr	r3, [r6, #0]
 8009f5a:	6825      	ldr	r5, [r4, #0]
 8009f5c:	6961      	ldr	r1, [r4, #20]
 8009f5e:	1d18      	adds	r0, r3, #4
 8009f60:	6030      	str	r0, [r6, #0]
 8009f62:	062e      	lsls	r6, r5, #24
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	d501      	bpl.n	8009f6c <_printf_i+0x1c0>
 8009f68:	6019      	str	r1, [r3, #0]
 8009f6a:	e002      	b.n	8009f72 <_printf_i+0x1c6>
 8009f6c:	0668      	lsls	r0, r5, #25
 8009f6e:	d5fb      	bpl.n	8009f68 <_printf_i+0x1bc>
 8009f70:	8019      	strh	r1, [r3, #0]
 8009f72:	2300      	movs	r3, #0
 8009f74:	6123      	str	r3, [r4, #16]
 8009f76:	4616      	mov	r6, r2
 8009f78:	e7bc      	b.n	8009ef4 <_printf_i+0x148>
 8009f7a:	6833      	ldr	r3, [r6, #0]
 8009f7c:	1d1a      	adds	r2, r3, #4
 8009f7e:	6032      	str	r2, [r6, #0]
 8009f80:	681e      	ldr	r6, [r3, #0]
 8009f82:	6862      	ldr	r2, [r4, #4]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7f6 f93a 	bl	8000200 <memchr>
 8009f8c:	b108      	cbz	r0, 8009f92 <_printf_i+0x1e6>
 8009f8e:	1b80      	subs	r0, r0, r6
 8009f90:	6060      	str	r0, [r4, #4]
 8009f92:	6863      	ldr	r3, [r4, #4]
 8009f94:	6123      	str	r3, [r4, #16]
 8009f96:	2300      	movs	r3, #0
 8009f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f9c:	e7aa      	b.n	8009ef4 <_printf_i+0x148>
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	47d0      	blx	sl
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d0ad      	beq.n	8009f08 <_printf_i+0x15c>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	079b      	lsls	r3, r3, #30
 8009fb0:	d413      	bmi.n	8009fda <_printf_i+0x22e>
 8009fb2:	68e0      	ldr	r0, [r4, #12]
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	4298      	cmp	r0, r3
 8009fb8:	bfb8      	it	lt
 8009fba:	4618      	movlt	r0, r3
 8009fbc:	e7a6      	b.n	8009f0c <_printf_i+0x160>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	47d0      	blx	sl
 8009fc8:	3001      	adds	r0, #1
 8009fca:	d09d      	beq.n	8009f08 <_printf_i+0x15c>
 8009fcc:	3501      	adds	r5, #1
 8009fce:	68e3      	ldr	r3, [r4, #12]
 8009fd0:	9903      	ldr	r1, [sp, #12]
 8009fd2:	1a5b      	subs	r3, r3, r1
 8009fd4:	42ab      	cmp	r3, r5
 8009fd6:	dcf2      	bgt.n	8009fbe <_printf_i+0x212>
 8009fd8:	e7eb      	b.n	8009fb2 <_printf_i+0x206>
 8009fda:	2500      	movs	r5, #0
 8009fdc:	f104 0619 	add.w	r6, r4, #25
 8009fe0:	e7f5      	b.n	8009fce <_printf_i+0x222>
 8009fe2:	bf00      	nop
 8009fe4:	0800bc5a 	.word	0x0800bc5a
 8009fe8:	0800bc6b 	.word	0x0800bc6b

08009fec <_scanf_chars>:
 8009fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	4615      	mov	r5, r2
 8009ff2:	688a      	ldr	r2, [r1, #8]
 8009ff4:	4680      	mov	r8, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	b932      	cbnz	r2, 800a008 <_scanf_chars+0x1c>
 8009ffa:	698a      	ldr	r2, [r1, #24]
 8009ffc:	2a00      	cmp	r2, #0
 8009ffe:	bf14      	ite	ne
 800a000:	f04f 32ff 	movne.w	r2, #4294967295
 800a004:	2201      	moveq	r2, #1
 800a006:	608a      	str	r2, [r1, #8]
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a09c <_scanf_chars+0xb0>
 800a00e:	06d1      	lsls	r1, r2, #27
 800a010:	bf5f      	itttt	pl
 800a012:	681a      	ldrpl	r2, [r3, #0]
 800a014:	1d11      	addpl	r1, r2, #4
 800a016:	6019      	strpl	r1, [r3, #0]
 800a018:	6816      	ldrpl	r6, [r2, #0]
 800a01a:	2700      	movs	r7, #0
 800a01c:	69a0      	ldr	r0, [r4, #24]
 800a01e:	b188      	cbz	r0, 800a044 <_scanf_chars+0x58>
 800a020:	2801      	cmp	r0, #1
 800a022:	d107      	bne.n	800a034 <_scanf_chars+0x48>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	6963      	ldr	r3, [r4, #20]
 800a02a:	5c9b      	ldrb	r3, [r3, r2]
 800a02c:	b953      	cbnz	r3, 800a044 <_scanf_chars+0x58>
 800a02e:	2f00      	cmp	r7, #0
 800a030:	d031      	beq.n	800a096 <_scanf_chars+0xaa>
 800a032:	e022      	b.n	800a07a <_scanf_chars+0x8e>
 800a034:	2802      	cmp	r0, #2
 800a036:	d120      	bne.n	800a07a <_scanf_chars+0x8e>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a040:	071b      	lsls	r3, r3, #28
 800a042:	d41a      	bmi.n	800a07a <_scanf_chars+0x8e>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	06da      	lsls	r2, r3, #27
 800a048:	bf5e      	ittt	pl
 800a04a:	682b      	ldrpl	r3, [r5, #0]
 800a04c:	781b      	ldrbpl	r3, [r3, #0]
 800a04e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a052:	682a      	ldr	r2, [r5, #0]
 800a054:	686b      	ldr	r3, [r5, #4]
 800a056:	3201      	adds	r2, #1
 800a058:	602a      	str	r2, [r5, #0]
 800a05a:	68a2      	ldr	r2, [r4, #8]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	3a01      	subs	r2, #1
 800a060:	606b      	str	r3, [r5, #4]
 800a062:	3701      	adds	r7, #1
 800a064:	60a2      	str	r2, [r4, #8]
 800a066:	b142      	cbz	r2, 800a07a <_scanf_chars+0x8e>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dcd7      	bgt.n	800a01c <_scanf_chars+0x30>
 800a06c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a070:	4629      	mov	r1, r5
 800a072:	4640      	mov	r0, r8
 800a074:	4798      	blx	r3
 800a076:	2800      	cmp	r0, #0
 800a078:	d0d0      	beq.n	800a01c <_scanf_chars+0x30>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	f013 0310 	ands.w	r3, r3, #16
 800a080:	d105      	bne.n	800a08e <_scanf_chars+0xa2>
 800a082:	68e2      	ldr	r2, [r4, #12]
 800a084:	3201      	adds	r2, #1
 800a086:	60e2      	str	r2, [r4, #12]
 800a088:	69a2      	ldr	r2, [r4, #24]
 800a08a:	b102      	cbz	r2, 800a08e <_scanf_chars+0xa2>
 800a08c:	7033      	strb	r3, [r6, #0]
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	443b      	add	r3, r7
 800a092:	6123      	str	r3, [r4, #16]
 800a094:	2000      	movs	r0, #0
 800a096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a09a:	bf00      	nop
 800a09c:	0800bc98 	.word	0x0800bc98

0800a0a0 <_scanf_i>:
 800a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	4698      	mov	r8, r3
 800a0a6:	4b74      	ldr	r3, [pc, #464]	@ (800a278 <_scanf_i+0x1d8>)
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	4682      	mov	sl, r0
 800a0ac:	4616      	mov	r6, r2
 800a0ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	ab03      	add	r3, sp, #12
 800a0b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0ba:	4b70      	ldr	r3, [pc, #448]	@ (800a27c <_scanf_i+0x1dc>)
 800a0bc:	69a1      	ldr	r1, [r4, #24]
 800a0be:	4a70      	ldr	r2, [pc, #448]	@ (800a280 <_scanf_i+0x1e0>)
 800a0c0:	2903      	cmp	r1, #3
 800a0c2:	bf08      	it	eq
 800a0c4:	461a      	moveq	r2, r3
 800a0c6:	68a3      	ldr	r3, [r4, #8]
 800a0c8:	9201      	str	r2, [sp, #4]
 800a0ca:	1e5a      	subs	r2, r3, #1
 800a0cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a0d0:	bf88      	it	hi
 800a0d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a0d6:	4627      	mov	r7, r4
 800a0d8:	bf82      	ittt	hi
 800a0da:	eb03 0905 	addhi.w	r9, r3, r5
 800a0de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a0e2:	60a3      	strhi	r3, [r4, #8]
 800a0e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a0e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a0ec:	bf98      	it	ls
 800a0ee:	f04f 0900 	movls.w	r9, #0
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	463d      	mov	r5, r7
 800a0f6:	f04f 0b00 	mov.w	fp, #0
 800a0fa:	6831      	ldr	r1, [r6, #0]
 800a0fc:	ab03      	add	r3, sp, #12
 800a0fe:	7809      	ldrb	r1, [r1, #0]
 800a100:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a104:	2202      	movs	r2, #2
 800a106:	f7f6 f87b 	bl	8000200 <memchr>
 800a10a:	b328      	cbz	r0, 800a158 <_scanf_i+0xb8>
 800a10c:	f1bb 0f01 	cmp.w	fp, #1
 800a110:	d159      	bne.n	800a1c6 <_scanf_i+0x126>
 800a112:	6862      	ldr	r2, [r4, #4]
 800a114:	b92a      	cbnz	r2, 800a122 <_scanf_i+0x82>
 800a116:	6822      	ldr	r2, [r4, #0]
 800a118:	2108      	movs	r1, #8
 800a11a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a11e:	6061      	str	r1, [r4, #4]
 800a120:	6022      	str	r2, [r4, #0]
 800a122:	6822      	ldr	r2, [r4, #0]
 800a124:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a128:	6022      	str	r2, [r4, #0]
 800a12a:	68a2      	ldr	r2, [r4, #8]
 800a12c:	1e51      	subs	r1, r2, #1
 800a12e:	60a1      	str	r1, [r4, #8]
 800a130:	b192      	cbz	r2, 800a158 <_scanf_i+0xb8>
 800a132:	6832      	ldr	r2, [r6, #0]
 800a134:	1c51      	adds	r1, r2, #1
 800a136:	6031      	str	r1, [r6, #0]
 800a138:	7812      	ldrb	r2, [r2, #0]
 800a13a:	f805 2b01 	strb.w	r2, [r5], #1
 800a13e:	6872      	ldr	r2, [r6, #4]
 800a140:	3a01      	subs	r2, #1
 800a142:	2a00      	cmp	r2, #0
 800a144:	6072      	str	r2, [r6, #4]
 800a146:	dc07      	bgt.n	800a158 <_scanf_i+0xb8>
 800a148:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a14c:	4631      	mov	r1, r6
 800a14e:	4650      	mov	r0, sl
 800a150:	4790      	blx	r2
 800a152:	2800      	cmp	r0, #0
 800a154:	f040 8085 	bne.w	800a262 <_scanf_i+0x1c2>
 800a158:	f10b 0b01 	add.w	fp, fp, #1
 800a15c:	f1bb 0f03 	cmp.w	fp, #3
 800a160:	d1cb      	bne.n	800a0fa <_scanf_i+0x5a>
 800a162:	6863      	ldr	r3, [r4, #4]
 800a164:	b90b      	cbnz	r3, 800a16a <_scanf_i+0xca>
 800a166:	230a      	movs	r3, #10
 800a168:	6063      	str	r3, [r4, #4]
 800a16a:	6863      	ldr	r3, [r4, #4]
 800a16c:	4945      	ldr	r1, [pc, #276]	@ (800a284 <_scanf_i+0x1e4>)
 800a16e:	6960      	ldr	r0, [r4, #20]
 800a170:	1ac9      	subs	r1, r1, r3
 800a172:	f000 f997 	bl	800a4a4 <__sccl>
 800a176:	f04f 0b00 	mov.w	fp, #0
 800a17a:	68a3      	ldr	r3, [r4, #8]
 800a17c:	6822      	ldr	r2, [r4, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d03d      	beq.n	800a1fe <_scanf_i+0x15e>
 800a182:	6831      	ldr	r1, [r6, #0]
 800a184:	6960      	ldr	r0, [r4, #20]
 800a186:	f891 c000 	ldrb.w	ip, [r1]
 800a18a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a18e:	2800      	cmp	r0, #0
 800a190:	d035      	beq.n	800a1fe <_scanf_i+0x15e>
 800a192:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a196:	d124      	bne.n	800a1e2 <_scanf_i+0x142>
 800a198:	0510      	lsls	r0, r2, #20
 800a19a:	d522      	bpl.n	800a1e2 <_scanf_i+0x142>
 800a19c:	f10b 0b01 	add.w	fp, fp, #1
 800a1a0:	f1b9 0f00 	cmp.w	r9, #0
 800a1a4:	d003      	beq.n	800a1ae <_scanf_i+0x10e>
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	6873      	ldr	r3, [r6, #4]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	6073      	str	r3, [r6, #4]
 800a1b6:	dd1b      	ble.n	800a1f0 <_scanf_i+0x150>
 800a1b8:	6833      	ldr	r3, [r6, #0]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	6033      	str	r3, [r6, #0]
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	e7d9      	b.n	800a17a <_scanf_i+0xda>
 800a1c6:	f1bb 0f02 	cmp.w	fp, #2
 800a1ca:	d1ae      	bne.n	800a12a <_scanf_i+0x8a>
 800a1cc:	6822      	ldr	r2, [r4, #0]
 800a1ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a1d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a1d6:	d1bf      	bne.n	800a158 <_scanf_i+0xb8>
 800a1d8:	2110      	movs	r1, #16
 800a1da:	6061      	str	r1, [r4, #4]
 800a1dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1e0:	e7a2      	b.n	800a128 <_scanf_i+0x88>
 800a1e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a1e6:	6022      	str	r2, [r4, #0]
 800a1e8:	780b      	ldrb	r3, [r1, #0]
 800a1ea:	f805 3b01 	strb.w	r3, [r5], #1
 800a1ee:	e7de      	b.n	800a1ae <_scanf_i+0x10e>
 800a1f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a1f4:	4631      	mov	r1, r6
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	4798      	blx	r3
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d0df      	beq.n	800a1be <_scanf_i+0x11e>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	05d9      	lsls	r1, r3, #23
 800a202:	d50d      	bpl.n	800a220 <_scanf_i+0x180>
 800a204:	42bd      	cmp	r5, r7
 800a206:	d909      	bls.n	800a21c <_scanf_i+0x17c>
 800a208:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a20c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a210:	4632      	mov	r2, r6
 800a212:	4650      	mov	r0, sl
 800a214:	4798      	blx	r3
 800a216:	f105 39ff 	add.w	r9, r5, #4294967295
 800a21a:	464d      	mov	r5, r9
 800a21c:	42bd      	cmp	r5, r7
 800a21e:	d028      	beq.n	800a272 <_scanf_i+0x1d2>
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	f012 0210 	ands.w	r2, r2, #16
 800a226:	d113      	bne.n	800a250 <_scanf_i+0x1b0>
 800a228:	702a      	strb	r2, [r5, #0]
 800a22a:	6863      	ldr	r3, [r4, #4]
 800a22c:	9e01      	ldr	r6, [sp, #4]
 800a22e:	4639      	mov	r1, r7
 800a230:	4650      	mov	r0, sl
 800a232:	47b0      	blx	r6
 800a234:	f8d8 3000 	ldr.w	r3, [r8]
 800a238:	6821      	ldr	r1, [r4, #0]
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	f8c8 2000 	str.w	r2, [r8]
 800a240:	f011 0f20 	tst.w	r1, #32
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	d00f      	beq.n	800a268 <_scanf_i+0x1c8>
 800a248:	6018      	str	r0, [r3, #0]
 800a24a:	68e3      	ldr	r3, [r4, #12]
 800a24c:	3301      	adds	r3, #1
 800a24e:	60e3      	str	r3, [r4, #12]
 800a250:	6923      	ldr	r3, [r4, #16]
 800a252:	1bed      	subs	r5, r5, r7
 800a254:	445d      	add	r5, fp
 800a256:	442b      	add	r3, r5
 800a258:	6123      	str	r3, [r4, #16]
 800a25a:	2000      	movs	r0, #0
 800a25c:	b007      	add	sp, #28
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a262:	f04f 0b00 	mov.w	fp, #0
 800a266:	e7ca      	b.n	800a1fe <_scanf_i+0x15e>
 800a268:	07ca      	lsls	r2, r1, #31
 800a26a:	bf4c      	ite	mi
 800a26c:	8018      	strhmi	r0, [r3, #0]
 800a26e:	6018      	strpl	r0, [r3, #0]
 800a270:	e7eb      	b.n	800a24a <_scanf_i+0x1aa>
 800a272:	2001      	movs	r0, #1
 800a274:	e7f2      	b.n	800a25c <_scanf_i+0x1bc>
 800a276:	bf00      	nop
 800a278:	0800b8cc 	.word	0x0800b8cc
 800a27c:	0800a765 	.word	0x0800a765
 800a280:	0800a845 	.word	0x0800a845
 800a284:	0800bc8c 	.word	0x0800bc8c

0800a288 <__sflush_r>:
 800a288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	0716      	lsls	r6, r2, #28
 800a292:	4605      	mov	r5, r0
 800a294:	460c      	mov	r4, r1
 800a296:	d454      	bmi.n	800a342 <__sflush_r+0xba>
 800a298:	684b      	ldr	r3, [r1, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dc02      	bgt.n	800a2a4 <__sflush_r+0x1c>
 800a29e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	dd48      	ble.n	800a336 <__sflush_r+0xae>
 800a2a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	d045      	beq.n	800a336 <__sflush_r+0xae>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2b0:	682f      	ldr	r7, [r5, #0]
 800a2b2:	6a21      	ldr	r1, [r4, #32]
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	d030      	beq.n	800a31a <__sflush_r+0x92>
 800a2b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	0759      	lsls	r1, r3, #29
 800a2be:	d505      	bpl.n	800a2cc <__sflush_r+0x44>
 800a2c0:	6863      	ldr	r3, [r4, #4]
 800a2c2:	1ad2      	subs	r2, r2, r3
 800a2c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2c6:	b10b      	cbz	r3, 800a2cc <__sflush_r+0x44>
 800a2c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2ca:	1ad2      	subs	r2, r2, r3
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2d0:	6a21      	ldr	r1, [r4, #32]
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b0      	blx	r6
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	d106      	bne.n	800a2ea <__sflush_r+0x62>
 800a2dc:	6829      	ldr	r1, [r5, #0]
 800a2de:	291d      	cmp	r1, #29
 800a2e0:	d82b      	bhi.n	800a33a <__sflush_r+0xb2>
 800a2e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a38c <__sflush_r+0x104>)
 800a2e4:	410a      	asrs	r2, r1
 800a2e6:	07d6      	lsls	r6, r2, #31
 800a2e8:	d427      	bmi.n	800a33a <__sflush_r+0xb2>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	6062      	str	r2, [r4, #4]
 800a2ee:	04d9      	lsls	r1, r3, #19
 800a2f0:	6922      	ldr	r2, [r4, #16]
 800a2f2:	6022      	str	r2, [r4, #0]
 800a2f4:	d504      	bpl.n	800a300 <__sflush_r+0x78>
 800a2f6:	1c42      	adds	r2, r0, #1
 800a2f8:	d101      	bne.n	800a2fe <__sflush_r+0x76>
 800a2fa:	682b      	ldr	r3, [r5, #0]
 800a2fc:	b903      	cbnz	r3, 800a300 <__sflush_r+0x78>
 800a2fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a302:	602f      	str	r7, [r5, #0]
 800a304:	b1b9      	cbz	r1, 800a336 <__sflush_r+0xae>
 800a306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a30a:	4299      	cmp	r1, r3
 800a30c:	d002      	beq.n	800a314 <__sflush_r+0x8c>
 800a30e:	4628      	mov	r0, r5
 800a310:	f7ff f82e 	bl	8009370 <_free_r>
 800a314:	2300      	movs	r3, #0
 800a316:	6363      	str	r3, [r4, #52]	@ 0x34
 800a318:	e00d      	b.n	800a336 <__sflush_r+0xae>
 800a31a:	2301      	movs	r3, #1
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b0      	blx	r6
 800a320:	4602      	mov	r2, r0
 800a322:	1c50      	adds	r0, r2, #1
 800a324:	d1c9      	bne.n	800a2ba <__sflush_r+0x32>
 800a326:	682b      	ldr	r3, [r5, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0c6      	beq.n	800a2ba <__sflush_r+0x32>
 800a32c:	2b1d      	cmp	r3, #29
 800a32e:	d001      	beq.n	800a334 <__sflush_r+0xac>
 800a330:	2b16      	cmp	r3, #22
 800a332:	d11e      	bne.n	800a372 <__sflush_r+0xea>
 800a334:	602f      	str	r7, [r5, #0]
 800a336:	2000      	movs	r0, #0
 800a338:	e022      	b.n	800a380 <__sflush_r+0xf8>
 800a33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a33e:	b21b      	sxth	r3, r3
 800a340:	e01b      	b.n	800a37a <__sflush_r+0xf2>
 800a342:	690f      	ldr	r7, [r1, #16]
 800a344:	2f00      	cmp	r7, #0
 800a346:	d0f6      	beq.n	800a336 <__sflush_r+0xae>
 800a348:	0793      	lsls	r3, r2, #30
 800a34a:	680e      	ldr	r6, [r1, #0]
 800a34c:	bf08      	it	eq
 800a34e:	694b      	ldreq	r3, [r1, #20]
 800a350:	600f      	str	r7, [r1, #0]
 800a352:	bf18      	it	ne
 800a354:	2300      	movne	r3, #0
 800a356:	eba6 0807 	sub.w	r8, r6, r7
 800a35a:	608b      	str	r3, [r1, #8]
 800a35c:	f1b8 0f00 	cmp.w	r8, #0
 800a360:	dde9      	ble.n	800a336 <__sflush_r+0xae>
 800a362:	6a21      	ldr	r1, [r4, #32]
 800a364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a366:	4643      	mov	r3, r8
 800a368:	463a      	mov	r2, r7
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b0      	blx	r6
 800a36e:	2800      	cmp	r0, #0
 800a370:	dc08      	bgt.n	800a384 <__sflush_r+0xfc>
 800a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a384:	4407      	add	r7, r0
 800a386:	eba8 0800 	sub.w	r8, r8, r0
 800a38a:	e7e7      	b.n	800a35c <__sflush_r+0xd4>
 800a38c:	dfbffffe 	.word	0xdfbffffe

0800a390 <_fflush_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	690b      	ldr	r3, [r1, #16]
 800a394:	4605      	mov	r5, r0
 800a396:	460c      	mov	r4, r1
 800a398:	b913      	cbnz	r3, 800a3a0 <_fflush_r+0x10>
 800a39a:	2500      	movs	r5, #0
 800a39c:	4628      	mov	r0, r5
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	b118      	cbz	r0, 800a3aa <_fflush_r+0x1a>
 800a3a2:	6a03      	ldr	r3, [r0, #32]
 800a3a4:	b90b      	cbnz	r3, 800a3aa <_fflush_r+0x1a>
 800a3a6:	f7fe fc73 	bl	8008c90 <__sinit>
 800a3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0f3      	beq.n	800a39a <_fflush_r+0xa>
 800a3b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3b4:	07d0      	lsls	r0, r2, #31
 800a3b6:	d404      	bmi.n	800a3c2 <_fflush_r+0x32>
 800a3b8:	0599      	lsls	r1, r3, #22
 800a3ba:	d402      	bmi.n	800a3c2 <_fflush_r+0x32>
 800a3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3be:	f7fe ffa8 	bl	8009312 <__retarget_lock_acquire_recursive>
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	f7ff ff5f 	bl	800a288 <__sflush_r>
 800a3ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3cc:	07da      	lsls	r2, r3, #31
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	d4e4      	bmi.n	800a39c <_fflush_r+0xc>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	059b      	lsls	r3, r3, #22
 800a3d6:	d4e1      	bmi.n	800a39c <_fflush_r+0xc>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3da:	f7fe ff9b 	bl	8009314 <__retarget_lock_release_recursive>
 800a3de:	e7dd      	b.n	800a39c <_fflush_r+0xc>

0800a3e0 <__swhatbuf_r>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	b096      	sub	sp, #88	@ 0x58
 800a3ec:	4615      	mov	r5, r2
 800a3ee:	461e      	mov	r6, r3
 800a3f0:	da0d      	bge.n	800a40e <__swhatbuf_r+0x2e>
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3f8:	f04f 0100 	mov.w	r1, #0
 800a3fc:	bf14      	ite	ne
 800a3fe:	2340      	movne	r3, #64	@ 0x40
 800a400:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a404:	2000      	movs	r0, #0
 800a406:	6031      	str	r1, [r6, #0]
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	b016      	add	sp, #88	@ 0x58
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
 800a40e:	466a      	mov	r2, sp
 800a410:	f000 f8d6 	bl	800a5c0 <_fstat_r>
 800a414:	2800      	cmp	r0, #0
 800a416:	dbec      	blt.n	800a3f2 <__swhatbuf_r+0x12>
 800a418:	9901      	ldr	r1, [sp, #4]
 800a41a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a41e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a422:	4259      	negs	r1, r3
 800a424:	4159      	adcs	r1, r3
 800a426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a42a:	e7eb      	b.n	800a404 <__swhatbuf_r+0x24>

0800a42c <__smakebuf_r>:
 800a42c:	898b      	ldrh	r3, [r1, #12]
 800a42e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a430:	079d      	lsls	r5, r3, #30
 800a432:	4606      	mov	r6, r0
 800a434:	460c      	mov	r4, r1
 800a436:	d507      	bpl.n	800a448 <__smakebuf_r+0x1c>
 800a438:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	6123      	str	r3, [r4, #16]
 800a440:	2301      	movs	r3, #1
 800a442:	6163      	str	r3, [r4, #20]
 800a444:	b003      	add	sp, #12
 800a446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a448:	ab01      	add	r3, sp, #4
 800a44a:	466a      	mov	r2, sp
 800a44c:	f7ff ffc8 	bl	800a3e0 <__swhatbuf_r>
 800a450:	9f00      	ldr	r7, [sp, #0]
 800a452:	4605      	mov	r5, r0
 800a454:	4639      	mov	r1, r7
 800a456:	4630      	mov	r0, r6
 800a458:	f7fe fb02 	bl	8008a60 <_malloc_r>
 800a45c:	b948      	cbnz	r0, 800a472 <__smakebuf_r+0x46>
 800a45e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a462:	059a      	lsls	r2, r3, #22
 800a464:	d4ee      	bmi.n	800a444 <__smakebuf_r+0x18>
 800a466:	f023 0303 	bic.w	r3, r3, #3
 800a46a:	f043 0302 	orr.w	r3, r3, #2
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	e7e2      	b.n	800a438 <__smakebuf_r+0xc>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	6020      	str	r0, [r4, #0]
 800a476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	9b01      	ldr	r3, [sp, #4]
 800a47e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a482:	b15b      	cbz	r3, 800a49c <__smakebuf_r+0x70>
 800a484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a488:	4630      	mov	r0, r6
 800a48a:	f000 f8ab 	bl	800a5e4 <_isatty_r>
 800a48e:	b128      	cbz	r0, 800a49c <__smakebuf_r+0x70>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f023 0303 	bic.w	r3, r3, #3
 800a496:	f043 0301 	orr.w	r3, r3, #1
 800a49a:	81a3      	strh	r3, [r4, #12]
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	431d      	orrs	r5, r3
 800a4a0:	81a5      	strh	r5, [r4, #12]
 800a4a2:	e7cf      	b.n	800a444 <__smakebuf_r+0x18>

0800a4a4 <__sccl>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	780b      	ldrb	r3, [r1, #0]
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	2b5e      	cmp	r3, #94	@ 0x5e
 800a4ac:	bf0b      	itete	eq
 800a4ae:	784b      	ldrbeq	r3, [r1, #1]
 800a4b0:	1c4a      	addne	r2, r1, #1
 800a4b2:	1c8a      	addeq	r2, r1, #2
 800a4b4:	2100      	movne	r1, #0
 800a4b6:	bf08      	it	eq
 800a4b8:	2101      	moveq	r1, #1
 800a4ba:	3801      	subs	r0, #1
 800a4bc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a4c0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a4c4:	42a8      	cmp	r0, r5
 800a4c6:	d1fb      	bne.n	800a4c0 <__sccl+0x1c>
 800a4c8:	b90b      	cbnz	r3, 800a4ce <__sccl+0x2a>
 800a4ca:	1e50      	subs	r0, r2, #1
 800a4cc:	bd70      	pop	{r4, r5, r6, pc}
 800a4ce:	f081 0101 	eor.w	r1, r1, #1
 800a4d2:	54e1      	strb	r1, [r4, r3]
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4dc:	2d2d      	cmp	r5, #45	@ 0x2d
 800a4de:	d005      	beq.n	800a4ec <__sccl+0x48>
 800a4e0:	2d5d      	cmp	r5, #93	@ 0x5d
 800a4e2:	d016      	beq.n	800a512 <__sccl+0x6e>
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	d0f1      	beq.n	800a4cc <__sccl+0x28>
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	e7f2      	b.n	800a4d2 <__sccl+0x2e>
 800a4ec:	7846      	ldrb	r6, [r0, #1]
 800a4ee:	2e5d      	cmp	r6, #93	@ 0x5d
 800a4f0:	d0fa      	beq.n	800a4e8 <__sccl+0x44>
 800a4f2:	42b3      	cmp	r3, r6
 800a4f4:	dcf8      	bgt.n	800a4e8 <__sccl+0x44>
 800a4f6:	3002      	adds	r0, #2
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	4296      	cmp	r6, r2
 800a4fe:	54a1      	strb	r1, [r4, r2]
 800a500:	dcfb      	bgt.n	800a4fa <__sccl+0x56>
 800a502:	1af2      	subs	r2, r6, r3
 800a504:	3a01      	subs	r2, #1
 800a506:	1c5d      	adds	r5, r3, #1
 800a508:	42b3      	cmp	r3, r6
 800a50a:	bfa8      	it	ge
 800a50c:	2200      	movge	r2, #0
 800a50e:	18ab      	adds	r3, r5, r2
 800a510:	e7e1      	b.n	800a4d6 <__sccl+0x32>
 800a512:	4610      	mov	r0, r2
 800a514:	e7da      	b.n	800a4cc <__sccl+0x28>

0800a516 <__submore>:
 800a516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51a:	460c      	mov	r4, r1
 800a51c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a51e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a522:	4299      	cmp	r1, r3
 800a524:	d11d      	bne.n	800a562 <__submore+0x4c>
 800a526:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a52a:	f7fe fa99 	bl	8008a60 <_malloc_r>
 800a52e:	b918      	cbnz	r0, 800a538 <__submore+0x22>
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a53c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a53e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a542:	6360      	str	r0, [r4, #52]	@ 0x34
 800a544:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a548:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a54c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a550:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a554:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a558:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a55c:	6020      	str	r0, [r4, #0]
 800a55e:	2000      	movs	r0, #0
 800a560:	e7e8      	b.n	800a534 <__submore+0x1e>
 800a562:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a564:	0077      	lsls	r7, r6, #1
 800a566:	463a      	mov	r2, r7
 800a568:	f000 f853 	bl	800a612 <_realloc_r>
 800a56c:	4605      	mov	r5, r0
 800a56e:	2800      	cmp	r0, #0
 800a570:	d0de      	beq.n	800a530 <__submore+0x1a>
 800a572:	eb00 0806 	add.w	r8, r0, r6
 800a576:	4601      	mov	r1, r0
 800a578:	4632      	mov	r2, r6
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7fe fecb 	bl	8009316 <memcpy>
 800a580:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a584:	f8c4 8000 	str.w	r8, [r4]
 800a588:	e7e9      	b.n	800a55e <__submore+0x48>

0800a58a <memmove>:
 800a58a:	4288      	cmp	r0, r1
 800a58c:	b510      	push	{r4, lr}
 800a58e:	eb01 0402 	add.w	r4, r1, r2
 800a592:	d902      	bls.n	800a59a <memmove+0x10>
 800a594:	4284      	cmp	r4, r0
 800a596:	4623      	mov	r3, r4
 800a598:	d807      	bhi.n	800a5aa <memmove+0x20>
 800a59a:	1e43      	subs	r3, r0, #1
 800a59c:	42a1      	cmp	r1, r4
 800a59e:	d008      	beq.n	800a5b2 <memmove+0x28>
 800a5a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5a8:	e7f8      	b.n	800a59c <memmove+0x12>
 800a5aa:	4402      	add	r2, r0
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	428a      	cmp	r2, r1
 800a5b0:	d100      	bne.n	800a5b4 <memmove+0x2a>
 800a5b2:	bd10      	pop	{r4, pc}
 800a5b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5bc:	e7f7      	b.n	800a5ae <memmove+0x24>
	...

0800a5c0 <_fstat_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4d07      	ldr	r5, [pc, #28]	@ (800a5e0 <_fstat_r+0x20>)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	f7f6 fd01 	bl	8000fd4 <_fstat>
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	d102      	bne.n	800a5dc <_fstat_r+0x1c>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	b103      	cbz	r3, 800a5dc <_fstat_r+0x1c>
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
 800a5de:	bf00      	nop
 800a5e0:	20000f6c 	.word	0x20000f6c

0800a5e4 <_isatty_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4d06      	ldr	r5, [pc, #24]	@ (800a600 <_isatty_r+0x1c>)
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	4608      	mov	r0, r1
 800a5ee:	602b      	str	r3, [r5, #0]
 800a5f0:	f7f6 fd00 	bl	8000ff4 <_isatty>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_isatty_r+0x1a>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_isatty_r+0x1a>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	20000f6c 	.word	0x20000f6c

0800a604 <abort>:
 800a604:	b508      	push	{r3, lr}
 800a606:	2006      	movs	r0, #6
 800a608:	f000 f946 	bl	800a898 <raise>
 800a60c:	2001      	movs	r0, #1
 800a60e:	f7f6 fc91 	bl	8000f34 <_exit>

0800a612 <_realloc_r>:
 800a612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a616:	4680      	mov	r8, r0
 800a618:	4615      	mov	r5, r2
 800a61a:	460c      	mov	r4, r1
 800a61c:	b921      	cbnz	r1, 800a628 <_realloc_r+0x16>
 800a61e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a622:	4611      	mov	r1, r2
 800a624:	f7fe ba1c 	b.w	8008a60 <_malloc_r>
 800a628:	b92a      	cbnz	r2, 800a636 <_realloc_r+0x24>
 800a62a:	f7fe fea1 	bl	8009370 <_free_r>
 800a62e:	2400      	movs	r4, #0
 800a630:	4620      	mov	r0, r4
 800a632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a636:	f000 f94b 	bl	800a8d0 <_malloc_usable_size_r>
 800a63a:	4285      	cmp	r5, r0
 800a63c:	4606      	mov	r6, r0
 800a63e:	d802      	bhi.n	800a646 <_realloc_r+0x34>
 800a640:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a644:	d8f4      	bhi.n	800a630 <_realloc_r+0x1e>
 800a646:	4629      	mov	r1, r5
 800a648:	4640      	mov	r0, r8
 800a64a:	f7fe fa09 	bl	8008a60 <_malloc_r>
 800a64e:	4607      	mov	r7, r0
 800a650:	2800      	cmp	r0, #0
 800a652:	d0ec      	beq.n	800a62e <_realloc_r+0x1c>
 800a654:	42b5      	cmp	r5, r6
 800a656:	462a      	mov	r2, r5
 800a658:	4621      	mov	r1, r4
 800a65a:	bf28      	it	cs
 800a65c:	4632      	movcs	r2, r6
 800a65e:	f7fe fe5a 	bl	8009316 <memcpy>
 800a662:	4621      	mov	r1, r4
 800a664:	4640      	mov	r0, r8
 800a666:	f7fe fe83 	bl	8009370 <_free_r>
 800a66a:	463c      	mov	r4, r7
 800a66c:	e7e0      	b.n	800a630 <_realloc_r+0x1e>
	...

0800a670 <_strtol_l.constprop.0>:
 800a670:	2b24      	cmp	r3, #36	@ 0x24
 800a672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a676:	4686      	mov	lr, r0
 800a678:	4690      	mov	r8, r2
 800a67a:	d801      	bhi.n	800a680 <_strtol_l.constprop.0+0x10>
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d106      	bne.n	800a68e <_strtol_l.constprop.0+0x1e>
 800a680:	f7fe fe1c 	bl	80092bc <__errno>
 800a684:	2316      	movs	r3, #22
 800a686:	6003      	str	r3, [r0, #0]
 800a688:	2000      	movs	r0, #0
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	4834      	ldr	r0, [pc, #208]	@ (800a760 <_strtol_l.constprop.0+0xf0>)
 800a690:	460d      	mov	r5, r1
 800a692:	462a      	mov	r2, r5
 800a694:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a698:	5d06      	ldrb	r6, [r0, r4]
 800a69a:	f016 0608 	ands.w	r6, r6, #8
 800a69e:	d1f8      	bne.n	800a692 <_strtol_l.constprop.0+0x22>
 800a6a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6a2:	d12d      	bne.n	800a700 <_strtol_l.constprop.0+0x90>
 800a6a4:	782c      	ldrb	r4, [r5, #0]
 800a6a6:	2601      	movs	r6, #1
 800a6a8:	1c95      	adds	r5, r2, #2
 800a6aa:	f033 0210 	bics.w	r2, r3, #16
 800a6ae:	d109      	bne.n	800a6c4 <_strtol_l.constprop.0+0x54>
 800a6b0:	2c30      	cmp	r4, #48	@ 0x30
 800a6b2:	d12a      	bne.n	800a70a <_strtol_l.constprop.0+0x9a>
 800a6b4:	782a      	ldrb	r2, [r5, #0]
 800a6b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6ba:	2a58      	cmp	r2, #88	@ 0x58
 800a6bc:	d125      	bne.n	800a70a <_strtol_l.constprop.0+0x9a>
 800a6be:	786c      	ldrb	r4, [r5, #1]
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	3502      	adds	r5, #2
 800a6c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a6c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	fbbc f9f3 	udiv	r9, ip, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800a6d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a6dc:	2f09      	cmp	r7, #9
 800a6de:	d81b      	bhi.n	800a718 <_strtol_l.constprop.0+0xa8>
 800a6e0:	463c      	mov	r4, r7
 800a6e2:	42a3      	cmp	r3, r4
 800a6e4:	dd27      	ble.n	800a736 <_strtol_l.constprop.0+0xc6>
 800a6e6:	1c57      	adds	r7, r2, #1
 800a6e8:	d007      	beq.n	800a6fa <_strtol_l.constprop.0+0x8a>
 800a6ea:	4581      	cmp	r9, r0
 800a6ec:	d320      	bcc.n	800a730 <_strtol_l.constprop.0+0xc0>
 800a6ee:	d101      	bne.n	800a6f4 <_strtol_l.constprop.0+0x84>
 800a6f0:	45a2      	cmp	sl, r4
 800a6f2:	db1d      	blt.n	800a730 <_strtol_l.constprop.0+0xc0>
 800a6f4:	fb00 4003 	mla	r0, r0, r3, r4
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6fe:	e7eb      	b.n	800a6d8 <_strtol_l.constprop.0+0x68>
 800a700:	2c2b      	cmp	r4, #43	@ 0x2b
 800a702:	bf04      	itt	eq
 800a704:	782c      	ldrbeq	r4, [r5, #0]
 800a706:	1c95      	addeq	r5, r2, #2
 800a708:	e7cf      	b.n	800a6aa <_strtol_l.constprop.0+0x3a>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1da      	bne.n	800a6c4 <_strtol_l.constprop.0+0x54>
 800a70e:	2c30      	cmp	r4, #48	@ 0x30
 800a710:	bf0c      	ite	eq
 800a712:	2308      	moveq	r3, #8
 800a714:	230a      	movne	r3, #10
 800a716:	e7d5      	b.n	800a6c4 <_strtol_l.constprop.0+0x54>
 800a718:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a71c:	2f19      	cmp	r7, #25
 800a71e:	d801      	bhi.n	800a724 <_strtol_l.constprop.0+0xb4>
 800a720:	3c37      	subs	r4, #55	@ 0x37
 800a722:	e7de      	b.n	800a6e2 <_strtol_l.constprop.0+0x72>
 800a724:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a728:	2f19      	cmp	r7, #25
 800a72a:	d804      	bhi.n	800a736 <_strtol_l.constprop.0+0xc6>
 800a72c:	3c57      	subs	r4, #87	@ 0x57
 800a72e:	e7d8      	b.n	800a6e2 <_strtol_l.constprop.0+0x72>
 800a730:	f04f 32ff 	mov.w	r2, #4294967295
 800a734:	e7e1      	b.n	800a6fa <_strtol_l.constprop.0+0x8a>
 800a736:	1c53      	adds	r3, r2, #1
 800a738:	d108      	bne.n	800a74c <_strtol_l.constprop.0+0xdc>
 800a73a:	2322      	movs	r3, #34	@ 0x22
 800a73c:	f8ce 3000 	str.w	r3, [lr]
 800a740:	4660      	mov	r0, ip
 800a742:	f1b8 0f00 	cmp.w	r8, #0
 800a746:	d0a0      	beq.n	800a68a <_strtol_l.constprop.0+0x1a>
 800a748:	1e69      	subs	r1, r5, #1
 800a74a:	e006      	b.n	800a75a <_strtol_l.constprop.0+0xea>
 800a74c:	b106      	cbz	r6, 800a750 <_strtol_l.constprop.0+0xe0>
 800a74e:	4240      	negs	r0, r0
 800a750:	f1b8 0f00 	cmp.w	r8, #0
 800a754:	d099      	beq.n	800a68a <_strtol_l.constprop.0+0x1a>
 800a756:	2a00      	cmp	r2, #0
 800a758:	d1f6      	bne.n	800a748 <_strtol_l.constprop.0+0xd8>
 800a75a:	f8c8 1000 	str.w	r1, [r8]
 800a75e:	e794      	b.n	800a68a <_strtol_l.constprop.0+0x1a>
 800a760:	0800bc98 	.word	0x0800bc98

0800a764 <_strtol_r>:
 800a764:	f7ff bf84 	b.w	800a670 <_strtol_l.constprop.0>

0800a768 <_strtoul_l.constprop.0>:
 800a768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a76c:	4e34      	ldr	r6, [pc, #208]	@ (800a840 <_strtoul_l.constprop.0+0xd8>)
 800a76e:	4686      	mov	lr, r0
 800a770:	460d      	mov	r5, r1
 800a772:	4628      	mov	r0, r5
 800a774:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a778:	5d37      	ldrb	r7, [r6, r4]
 800a77a:	f017 0708 	ands.w	r7, r7, #8
 800a77e:	d1f8      	bne.n	800a772 <_strtoul_l.constprop.0+0xa>
 800a780:	2c2d      	cmp	r4, #45	@ 0x2d
 800a782:	d12f      	bne.n	800a7e4 <_strtoul_l.constprop.0+0x7c>
 800a784:	782c      	ldrb	r4, [r5, #0]
 800a786:	2701      	movs	r7, #1
 800a788:	1c85      	adds	r5, r0, #2
 800a78a:	f033 0010 	bics.w	r0, r3, #16
 800a78e:	d109      	bne.n	800a7a4 <_strtoul_l.constprop.0+0x3c>
 800a790:	2c30      	cmp	r4, #48	@ 0x30
 800a792:	d12c      	bne.n	800a7ee <_strtoul_l.constprop.0+0x86>
 800a794:	7828      	ldrb	r0, [r5, #0]
 800a796:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a79a:	2858      	cmp	r0, #88	@ 0x58
 800a79c:	d127      	bne.n	800a7ee <_strtoul_l.constprop.0+0x86>
 800a79e:	786c      	ldrb	r4, [r5, #1]
 800a7a0:	2310      	movs	r3, #16
 800a7a2:	3502      	adds	r5, #2
 800a7a4:	f04f 38ff 	mov.w	r8, #4294967295
 800a7a8:	2600      	movs	r6, #0
 800a7aa:	fbb8 f8f3 	udiv	r8, r8, r3
 800a7ae:	fb03 f908 	mul.w	r9, r3, r8
 800a7b2:	ea6f 0909 	mvn.w	r9, r9
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a7bc:	f1bc 0f09 	cmp.w	ip, #9
 800a7c0:	d81c      	bhi.n	800a7fc <_strtoul_l.constprop.0+0x94>
 800a7c2:	4664      	mov	r4, ip
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	dd2a      	ble.n	800a81e <_strtoul_l.constprop.0+0xb6>
 800a7c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a7cc:	d007      	beq.n	800a7de <_strtoul_l.constprop.0+0x76>
 800a7ce:	4580      	cmp	r8, r0
 800a7d0:	d322      	bcc.n	800a818 <_strtoul_l.constprop.0+0xb0>
 800a7d2:	d101      	bne.n	800a7d8 <_strtoul_l.constprop.0+0x70>
 800a7d4:	45a1      	cmp	r9, r4
 800a7d6:	db1f      	blt.n	800a818 <_strtoul_l.constprop.0+0xb0>
 800a7d8:	fb00 4003 	mla	r0, r0, r3, r4
 800a7dc:	2601      	movs	r6, #1
 800a7de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7e2:	e7e9      	b.n	800a7b8 <_strtoul_l.constprop.0+0x50>
 800a7e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7e6:	bf04      	itt	eq
 800a7e8:	782c      	ldrbeq	r4, [r5, #0]
 800a7ea:	1c85      	addeq	r5, r0, #2
 800a7ec:	e7cd      	b.n	800a78a <_strtoul_l.constprop.0+0x22>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1d8      	bne.n	800a7a4 <_strtoul_l.constprop.0+0x3c>
 800a7f2:	2c30      	cmp	r4, #48	@ 0x30
 800a7f4:	bf0c      	ite	eq
 800a7f6:	2308      	moveq	r3, #8
 800a7f8:	230a      	movne	r3, #10
 800a7fa:	e7d3      	b.n	800a7a4 <_strtoul_l.constprop.0+0x3c>
 800a7fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a800:	f1bc 0f19 	cmp.w	ip, #25
 800a804:	d801      	bhi.n	800a80a <_strtoul_l.constprop.0+0xa2>
 800a806:	3c37      	subs	r4, #55	@ 0x37
 800a808:	e7dc      	b.n	800a7c4 <_strtoul_l.constprop.0+0x5c>
 800a80a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a80e:	f1bc 0f19 	cmp.w	ip, #25
 800a812:	d804      	bhi.n	800a81e <_strtoul_l.constprop.0+0xb6>
 800a814:	3c57      	subs	r4, #87	@ 0x57
 800a816:	e7d5      	b.n	800a7c4 <_strtoul_l.constprop.0+0x5c>
 800a818:	f04f 36ff 	mov.w	r6, #4294967295
 800a81c:	e7df      	b.n	800a7de <_strtoul_l.constprop.0+0x76>
 800a81e:	1c73      	adds	r3, r6, #1
 800a820:	d106      	bne.n	800a830 <_strtoul_l.constprop.0+0xc8>
 800a822:	2322      	movs	r3, #34	@ 0x22
 800a824:	f8ce 3000 	str.w	r3, [lr]
 800a828:	4630      	mov	r0, r6
 800a82a:	b932      	cbnz	r2, 800a83a <_strtoul_l.constprop.0+0xd2>
 800a82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a830:	b107      	cbz	r7, 800a834 <_strtoul_l.constprop.0+0xcc>
 800a832:	4240      	negs	r0, r0
 800a834:	2a00      	cmp	r2, #0
 800a836:	d0f9      	beq.n	800a82c <_strtoul_l.constprop.0+0xc4>
 800a838:	b106      	cbz	r6, 800a83c <_strtoul_l.constprop.0+0xd4>
 800a83a:	1e69      	subs	r1, r5, #1
 800a83c:	6011      	str	r1, [r2, #0]
 800a83e:	e7f5      	b.n	800a82c <_strtoul_l.constprop.0+0xc4>
 800a840:	0800bc98 	.word	0x0800bc98

0800a844 <_strtoul_r>:
 800a844:	f7ff bf90 	b.w	800a768 <_strtoul_l.constprop.0>

0800a848 <_raise_r>:
 800a848:	291f      	cmp	r1, #31
 800a84a:	b538      	push	{r3, r4, r5, lr}
 800a84c:	4605      	mov	r5, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	d904      	bls.n	800a85c <_raise_r+0x14>
 800a852:	2316      	movs	r3, #22
 800a854:	6003      	str	r3, [r0, #0]
 800a856:	f04f 30ff 	mov.w	r0, #4294967295
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a85e:	b112      	cbz	r2, 800a866 <_raise_r+0x1e>
 800a860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a864:	b94b      	cbnz	r3, 800a87a <_raise_r+0x32>
 800a866:	4628      	mov	r0, r5
 800a868:	f000 f830 	bl	800a8cc <_getpid_r>
 800a86c:	4622      	mov	r2, r4
 800a86e:	4601      	mov	r1, r0
 800a870:	4628      	mov	r0, r5
 800a872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a876:	f000 b817 	b.w	800a8a8 <_kill_r>
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d00a      	beq.n	800a894 <_raise_r+0x4c>
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	d103      	bne.n	800a88a <_raise_r+0x42>
 800a882:	2316      	movs	r3, #22
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	2001      	movs	r0, #1
 800a888:	e7e7      	b.n	800a85a <_raise_r+0x12>
 800a88a:	2100      	movs	r1, #0
 800a88c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a890:	4620      	mov	r0, r4
 800a892:	4798      	blx	r3
 800a894:	2000      	movs	r0, #0
 800a896:	e7e0      	b.n	800a85a <_raise_r+0x12>

0800a898 <raise>:
 800a898:	4b02      	ldr	r3, [pc, #8]	@ (800a8a4 <raise+0xc>)
 800a89a:	4601      	mov	r1, r0
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f7ff bfd3 	b.w	800a848 <_raise_r>
 800a8a2:	bf00      	nop
 800a8a4:	200009d4 	.word	0x200009d4

0800a8a8 <_kill_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d07      	ldr	r5, [pc, #28]	@ (800a8c8 <_kill_r+0x20>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	f7f6 fb2d 	bl	8000f14 <_kill>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d102      	bne.n	800a8c4 <_kill_r+0x1c>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	b103      	cbz	r3, 800a8c4 <_kill_r+0x1c>
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	bd38      	pop	{r3, r4, r5, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000f6c 	.word	0x20000f6c

0800a8cc <_getpid_r>:
 800a8cc:	f7f6 bb1a 	b.w	8000f04 <_getpid>

0800a8d0 <_malloc_usable_size_r>:
 800a8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d4:	1f18      	subs	r0, r3, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfbc      	itt	lt
 800a8da:	580b      	ldrlt	r3, [r1, r0]
 800a8dc:	18c0      	addlt	r0, r0, r3
 800a8de:	4770      	bx	lr

0800a8e0 <_init>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	bf00      	nop
 800a8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e6:	bc08      	pop	{r3}
 800a8e8:	469e      	mov	lr, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_fini>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr
