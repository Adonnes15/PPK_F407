
04_F407_EmbeddedServer3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011184  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002188  08011314  08011314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801349c  0801349c  00016290  2**0
                  CONTENTS
  4 .ARM          00000008  0801349c  0801349c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134a4  080134a4  00016290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134a4  080134a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080134a8  080134a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001290  20000000  080134ac  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016290  2**0
                  CONTENTS
 10 .bss          00001864  20001290  20001290  00016290  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002af4  20002af4  00016290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016290  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e584  00000000  00000000  000162c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059d7  00000000  00000000  00034844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  0003a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001352  00000000  00000000  0003bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a125  00000000  00000000  0003ce7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c342  00000000  00000000  00066f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d70a7  00000000  00000000  000932e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a388  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071a8  00000000  00000000  0016a3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a9  00000000  00000000  00171574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001290 	.word	0x20001290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112fc 	.word	0x080112fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001294 	.word	0x20001294
 80001cc:	080112fc 	.word	0x080112fc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96a 	b.w	8000b98 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	460c      	mov	r4, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14e      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008e8:	4694      	mov	ip, r2
 80008ea:	458c      	cmp	ip, r1
 80008ec:	4686      	mov	lr, r0
 80008ee:	fab2 f282 	clz	r2, r2
 80008f2:	d962      	bls.n	80009ba <__udivmoddi4+0xde>
 80008f4:	b14a      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f6:	f1c2 0320 	rsb	r3, r2, #32
 80008fa:	4091      	lsls	r1, r2
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	fa0c fc02 	lsl.w	ip, ip, r2
 8000904:	4319      	orrs	r1, r3
 8000906:	fa00 fe02 	lsl.w	lr, r0, r2
 800090a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090e:	fa1f f68c 	uxth.w	r6, ip
 8000912:	fbb1 f4f7 	udiv	r4, r1, r7
 8000916:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800091a:	fb07 1114 	mls	r1, r7, r4, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb04 f106 	mul.w	r1, r4, r6
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000932:	f080 8112 	bcs.w	8000b5a <__udivmoddi4+0x27e>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 810f 	bls.w	8000b5a <__udivmoddi4+0x27e>
 800093c:	3c02      	subs	r4, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a59      	subs	r1, r3, r1
 8000942:	fa1f f38e 	uxth.w	r3, lr
 8000946:	fbb1 f0f7 	udiv	r0, r1, r7
 800094a:	fb07 1110 	mls	r1, r7, r0, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb00 f606 	mul.w	r6, r0, r6
 8000956:	429e      	cmp	r6, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x94>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000962:	f080 80fc 	bcs.w	8000b5e <__udivmoddi4+0x282>
 8000966:	429e      	cmp	r6, r3
 8000968:	f240 80f9 	bls.w	8000b5e <__udivmoddi4+0x282>
 800096c:	4463      	add	r3, ip
 800096e:	3802      	subs	r0, #2
 8000970:	1b9b      	subs	r3, r3, r6
 8000972:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000976:	2100      	movs	r1, #0
 8000978:	b11d      	cbz	r5, 8000982 <__udivmoddi4+0xa6>
 800097a:	40d3      	lsrs	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	e9c5 3200 	strd	r3, r2, [r5]
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d905      	bls.n	8000996 <__udivmoddi4+0xba>
 800098a:	b10d      	cbz	r5, 8000990 <__udivmoddi4+0xb4>
 800098c:	e9c5 0100 	strd	r0, r1, [r5]
 8000990:	2100      	movs	r1, #0
 8000992:	4608      	mov	r0, r1
 8000994:	e7f5      	b.n	8000982 <__udivmoddi4+0xa6>
 8000996:	fab3 f183 	clz	r1, r3
 800099a:	2900      	cmp	r1, #0
 800099c:	d146      	bne.n	8000a2c <__udivmoddi4+0x150>
 800099e:	42a3      	cmp	r3, r4
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xcc>
 80009a2:	4290      	cmp	r0, r2
 80009a4:	f0c0 80f0 	bcc.w	8000b88 <__udivmoddi4+0x2ac>
 80009a8:	1a86      	subs	r6, r0, r2
 80009aa:	eb64 0303 	sbc.w	r3, r4, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0e6      	beq.n	8000982 <__udivmoddi4+0xa6>
 80009b4:	e9c5 6300 	strd	r6, r3, [r5]
 80009b8:	e7e3      	b.n	8000982 <__udivmoddi4+0xa6>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	f040 8090 	bne.w	8000ae0 <__udivmoddi4+0x204>
 80009c0:	eba1 040c 	sub.w	r4, r1, ip
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	2101      	movs	r1, #1
 80009ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80009d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d6:	fb08 4416 	mls	r4, r8, r6, r4
 80009da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009de:	fb07 f006 	mul.w	r0, r7, r6
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x11c>
 80009e6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x11a>
 80009f0:	4298      	cmp	r0, r3
 80009f2:	f200 80cd 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009f6:	4626      	mov	r6, r4
 80009f8:	1a1c      	subs	r4, r3, r0
 80009fa:	fa1f f38e 	uxth.w	r3, lr
 80009fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a02:	fb08 4410 	mls	r4, r8, r0, r4
 8000a06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0a:	fb00 f707 	mul.w	r7, r0, r7
 8000a0e:	429f      	cmp	r7, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x148>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x146>
 8000a1c:	429f      	cmp	r7, r3
 8000a1e:	f200 80b0 	bhi.w	8000b82 <__udivmoddi4+0x2a6>
 8000a22:	4620      	mov	r0, r4
 8000a24:	1bdb      	subs	r3, r3, r7
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	e7a5      	b.n	8000978 <__udivmoddi4+0x9c>
 8000a2c:	f1c1 0620 	rsb	r6, r1, #32
 8000a30:	408b      	lsls	r3, r1
 8000a32:	fa22 f706 	lsr.w	r7, r2, r6
 8000a36:	431f      	orrs	r7, r3
 8000a38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a40:	ea43 030c 	orr.w	r3, r3, ip
 8000a44:	40f4      	lsrs	r4, r6
 8000a46:	fa00 f801 	lsl.w	r8, r0, r1
 8000a4a:	0c38      	lsrs	r0, r7, #16
 8000a4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a50:	fbb4 fef0 	udiv	lr, r4, r0
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fb00 441e 	mls	r4, r0, lr, r4
 8000a5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a60:	fb0e f90c 	mul.w	r9, lr, ip
 8000a64:	45a1      	cmp	r9, r4
 8000a66:	fa02 f201 	lsl.w	r2, r2, r1
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x1a6>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a72:	f080 8084 	bcs.w	8000b7e <__udivmoddi4+0x2a2>
 8000a76:	45a1      	cmp	r9, r4
 8000a78:	f240 8081 	bls.w	8000b7e <__udivmoddi4+0x2a2>
 8000a7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	eba4 0409 	sub.w	r4, r4, r9
 8000a86:	fa1f f983 	uxth.w	r9, r3
 8000a8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a9a:	45a4      	cmp	ip, r4
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x1d2>
 8000a9e:	193c      	adds	r4, r7, r4
 8000aa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000aa4:	d267      	bcs.n	8000b76 <__udivmoddi4+0x29a>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0x29a>
 8000aaa:	3b02      	subs	r3, #2
 8000aac:	443c      	add	r4, r7
 8000aae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ab2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ab6:	eba4 040c 	sub.w	r4, r4, ip
 8000aba:	429c      	cmp	r4, r3
 8000abc:	46ce      	mov	lr, r9
 8000abe:	469c      	mov	ip, r3
 8000ac0:	d351      	bcc.n	8000b66 <__udivmoddi4+0x28a>
 8000ac2:	d04e      	beq.n	8000b62 <__udivmoddi4+0x286>
 8000ac4:	b155      	cbz	r5, 8000adc <__udivmoddi4+0x200>
 8000ac6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ace:	fa04 f606 	lsl.w	r6, r4, r6
 8000ad2:	40cb      	lsrs	r3, r1
 8000ad4:	431e      	orrs	r6, r3
 8000ad6:	40cc      	lsrs	r4, r1
 8000ad8:	e9c5 6400 	strd	r6, r4, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	e750      	b.n	8000982 <__udivmoddi4+0xa6>
 8000ae0:	f1c2 0320 	rsb	r3, r2, #32
 8000ae4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	fa24 f303 	lsr.w	r3, r4, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	430c      	orrs	r4, r1
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3110 	mls	r1, r8, r0, r3
 8000b08:	0c23      	lsrs	r3, r4, #16
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f107 	mul.w	r1, r0, r7
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x24c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b1e:	d22c      	bcs.n	8000b7a <__udivmoddi4+0x29e>
 8000b20:	4299      	cmp	r1, r3
 8000b22:	d92a      	bls.n	8000b7a <__udivmoddi4+0x29e>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b30:	fb08 3311 	mls	r3, r8, r1, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb01 f307 	mul.w	r3, r1, r7
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x276>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b48:	d213      	bcs.n	8000b72 <__udivmoddi4+0x296>
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	d911      	bls.n	8000b72 <__udivmoddi4+0x296>
 8000b4e:	3902      	subs	r1, #2
 8000b50:	4464      	add	r4, ip
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b58:	e739      	b.n	80009ce <__udivmoddi4+0xf2>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	e6f0      	b.n	8000940 <__udivmoddi4+0x64>
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e706      	b.n	8000970 <__udivmoddi4+0x94>
 8000b62:	45c8      	cmp	r8, r9
 8000b64:	d2ae      	bcs.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7a8      	b.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b72:	4631      	mov	r1, r6
 8000b74:	e7ed      	b.n	8000b52 <__udivmoddi4+0x276>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e799      	b.n	8000aae <__udivmoddi4+0x1d2>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e7d4      	b.n	8000b28 <__udivmoddi4+0x24c>
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1a6>
 8000b82:	4463      	add	r3, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	e74d      	b.n	8000a24 <__udivmoddi4+0x148>
 8000b88:	4606      	mov	r6, r0
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e70f      	b.n	80009b0 <__udivmoddi4+0xd4>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	e730      	b.n	80009f8 <__udivmoddi4+0x11c>
 8000b96:	bf00      	nop

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <SD_Card_Init>:
DWORD FreeClusters;
uint32_t TotalSize, FreeSpace;
char RW_Buffer[200];

void SD_Card_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    FR_Status = f_mount(&FatFs, SDPath, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	492e      	ldr	r1, [pc, #184]	@ (8000c5c <SD_Card_Init+0xc0>)
 8000ba4:	482e      	ldr	r0, [pc, #184]	@ (8000c60 <SD_Card_Init+0xc4>)
 8000ba6:	f006 fd35 	bl	8007614 <f_mount>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b2d      	ldr	r3, [pc, #180]	@ (8000c64 <SD_Card_Init+0xc8>)
 8000bb0:	701a      	strb	r2, [r3, #0]
    if (FR_Status != FR_OK)
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <SD_Card_Init+0xc8>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <SD_Card_Init+0x2c>
    {
      printf("Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000bba:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <SD_Card_Init+0xc8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4829      	ldr	r0, [pc, #164]	@ (8000c68 <SD_Card_Init+0xcc>)
 8000bc2:	f00e fdab 	bl	800f71c <iprintf>
	TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
	FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
	printf("Total SD Card Size: %lu Bytes\r\n", TotalSize);
	printf("Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
    }
}
 8000bc6:	e046      	b.n	8000c56 <SD_Card_Init+0xba>
    printf("SD Card Mounted Successfully! \r\n\n");
 8000bc8:	4828      	ldr	r0, [pc, #160]	@ (8000c6c <SD_Card_Init+0xd0>)
 8000bca:	f00e fe0f 	bl	800f7ec <puts>
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000bce:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <SD_Card_Init+0xd4>)
 8000bd0:	4928      	ldr	r1, [pc, #160]	@ (8000c74 <SD_Card_Init+0xd8>)
 8000bd2:	4829      	ldr	r0, [pc, #164]	@ (8000c78 <SD_Card_Init+0xdc>)
 8000bd4:	f007 fa42 	bl	800805c <f_getfree>
	TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <SD_Card_Init+0xd4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	3b02      	subs	r3, #2
 8000be0:	4a23      	ldr	r2, [pc, #140]	@ (8000c70 <SD_Card_Init+0xd4>)
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	8952      	ldrh	r2, [r2, #10]
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fdc4 	bl	8000778 <__aeabi_ui2d>
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <SD_Card_Init+0xe0>)
 8000bf6:	f7ff fb53 	bl	80002a0 <__aeabi_dmul>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	f7ff fe33 	bl	800086c <__aeabi_d2uiz>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a1d      	ldr	r2, [pc, #116]	@ (8000c80 <SD_Card_Init+0xe4>)
 8000c0a:	6013      	str	r3, [r2, #0]
	FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <SD_Card_Init+0xd4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	895b      	ldrh	r3, [r3, #10]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <SD_Card_Init+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fdab 	bl	8000778 <__aeabi_ui2d>
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <SD_Card_Init+0xe0>)
 8000c28:	f7ff fb3a 	bl	80002a0 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fe1a 	bl	800086c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <SD_Card_Init+0xe8>)
 8000c3c:	6013      	str	r3, [r2, #0]
	printf("Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <SD_Card_Init+0xe4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	@ (8000c88 <SD_Card_Init+0xec>)
 8000c46:	f00e fd69 	bl	800f71c <iprintf>
	printf("Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <SD_Card_Init+0xe8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480e      	ldr	r0, [pc, #56]	@ (8000c8c <SD_Card_Init+0xf0>)
 8000c52:	f00e fd63 	bl	800f71c <iprintf>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200023e4 	.word	0x200023e4
 8000c60:	200012ac 	.word	0x200012ac
 8000c64:	200022e4 	.word	0x200022e4
 8000c68:	08011314 	.word	0x08011314
 8000c6c:	08011348 	.word	0x08011348
 8000c70:	200022e8 	.word	0x200022e8
 8000c74:	200022ec 	.word	0x200022ec
 8000c78:	0801136c 	.word	0x0801136c
 8000c7c:	3fe00000 	.word	0x3fe00000
 8000c80:	200022f0 	.word	0x200022f0
 8000c84:	200022f4 	.word	0x200022f4
 8000c88:	08011370 	.word	0x08011370
 8000c8c:	08011390 	.word	0x08011390

08000c90 <list_dir>:

	  }
}

int list_dir (char *DataBuffer,const char *path)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	f2ad 7d44 	subw	sp, sp, #1860	@ 0x744
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000c9c:	f2a3 733c 	subw	r3, r3, #1852	@ 0x73c
 8000ca0:	6018      	str	r0, [r3, #0]
 8000ca2:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000ca6:	f5a3 63e8 	sub.w	r3, r3, #1856	@ 0x740
 8000caa:	6019      	str	r1, [r3, #0]
    FRESULT res;
    DIR dir;
    FILINFO fno;
    int nfile, ndir;
    char TxBuffer[1000] = {0}; // Initialize TxBuffer with null terminators to handle string concatenation.
 8000cac:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000cb0:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f00e ff0d 	bl	800fae0 <memset>

    res = f_opendir(&dir, path);  /* Open the directory */
 8000cc6:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000cca:	f5a3 63e8 	sub.w	r3, r3, #1856	@ 0x740
 8000cce:	f507 62e0 	add.w	r2, r7, #1792	@ 0x700
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	f007 f8b2 	bl	8007e3e <f_opendir>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
    if (res == FR_OK) {
 8000ce0:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d17e      	bne.n	8000de6 <list_dir+0x156>
        nfile = ndir = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8000cee:	f8d7 3738 	ldr.w	r3, [r7, #1848]	@ 0x738
 8000cf2:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
        for (;;) {
            res = f_readdir(&dir, &fno);  /* Read a directory item */
 8000cf6:	f507 62bd 	add.w	r2, r7, #1512	@ 0x5e8
 8000cfa:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f007 f935 	bl	8007f70 <f_readdir>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Error or end of dir */
 8000d0c:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14b      	bne.n	8000dac <list_dir+0x11c>
 8000d14:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000d18:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000d1c:	7d9b      	ldrb	r3, [r3, #22]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d044      	beq.n	8000dac <list_dir+0x11c>

            char entry[500];  // Buffer to hold the current entry (either directory or file)

            if (fno.fattrib & AM_DIR) {  /* Directory */
 8000d22:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000d26:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000d2a:	7a1b      	ldrb	r3, [r3, #8]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00f      	beq.n	8000d54 <list_dir+0xc4>
                sprintf(entry, "   <DIR>   %s\n", fno.fname);
 8000d34:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8000d38:	f103 0216 	add.w	r2, r3, #22
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4934      	ldr	r1, [pc, #208]	@ (8000e14 <list_dir+0x184>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00e fd8e 	bl	800f864 <siprintf>
                ndir++;
 8000d48:	f8d7 3738 	ldr.w	r3, [r7, #1848]	@ 0x738
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8000d52:	e00e      	b.n	8000d72 <list_dir+0xe2>
            } else {  /* File */
                sprintf(entry, "%s\n",fno.fname);
 8000d54:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8000d58:	f103 0216 	add.w	r2, r3, #22
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	492d      	ldr	r1, [pc, #180]	@ (8000e18 <list_dir+0x188>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00e fd7e 	bl	800f864 <siprintf>
                nfile++;
 8000d68:	f8d7 373c 	ldr.w	r3, [r7, #1852]	@ 0x73c
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
            }

            // Ensure there is enough space in TxBuffer before concatenation
            if (strlen(TxBuffer) + strlen(entry) < sizeof(TxBuffer)) {
 8000d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa34 	bl	80001e4 <strlen>
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fa2e 	bl	80001e4 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4423      	add	r3, r4
 8000d8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d90:	d208      	bcs.n	8000da4 <list_dir+0x114>
                strcat(TxBuffer, entry);
 8000d92:	f107 020c 	add.w	r2, r7, #12
 8000d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f00e fea7 	bl	800faf0 <strcat>
        for (;;) {
 8000da2:	e7a8      	b.n	8000cf6 <list_dir+0x66>
            } else {
                printf("Buffer overflow risk: TxBuffer size exceeded.\n");
 8000da4:	481d      	ldr	r0, [pc, #116]	@ (8000e1c <list_dir+0x18c>)
 8000da6:	f00e fd21 	bl	800f7ec <puts>
                break;
 8000daa:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000dac:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8000db0:	4618      	mov	r0, r3
 8000db2:	f007 f8b7 	bl	8007f24 <f_closedir>
        sprintf(DataBuffer,TxBuffer);
 8000db6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8000dba:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000dbe:	f2a3 733c 	subw	r3, r3, #1852	@ 0x73c
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	f00e fd4d 	bl	800f864 <siprintf>
        printf("List in directory:\n%s", TxBuffer);
 8000dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <list_dir+0x190>)
 8000dd2:	f00e fca3 	bl	800f71c <iprintf>
        printf("%d dirs, %d files.\n", ndir, nfile);
 8000dd6:	f8d7 273c 	ldr.w	r2, [r7, #1852]	@ 0x73c
 8000dda:	f8d7 1738 	ldr.w	r1, [r7, #1848]	@ 0x738
 8000dde:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <list_dir+0x194>)
 8000de0:	f00e fc9c 	bl	800f71c <iprintf>
 8000de4:	e009      	b.n	8000dfa <list_dir+0x16a>
    } else {
        printf("Failed to open \"%s\". (%u)\n", path, res);
 8000de6:	f897 2737 	ldrb.w	r2, [r7, #1847]	@ 0x737
 8000dea:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000dee:	f5a3 63e8 	sub.w	r3, r3, #1856	@ 0x740
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <list_dir+0x198>)
 8000df6:	f00e fc91 	bl	800f71c <iprintf>
    }
    return strlen(DataBuffer);
 8000dfa:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000dfe:	f2a3 733c 	subw	r3, r3, #1852	@ 0x73c
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	f7ff f9ee 	bl	80001e4 <strlen>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f207 7744 	addw	r7, r7, #1860	@ 0x744
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	08011414 	.word	0x08011414
 8000e18:	08011424 	.word	0x08011424
 8000e1c:	08011428 	.word	0x08011428
 8000e20:	08011458 	.word	0x08011458
 8000e24:	08011470 	.word	0x08011470
 8000e28:	08011484 	.word	0x08011484

08000e2c <EXTI15_10_IRQHandler>:
 * \brief Interrupt handler for WiFi EXTI GPIO 2. Call callback API.
 *
 * \param[in] None.
 * \retval    None.
 */
void EXTI15_10_IRQHandler(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
	uint16_t GPIO_Pin;

	/* Get GPIO_Pin */
	if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN)) {
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <EXTI15_10_IRQHandler+0x28>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <EXTI15_10_IRQHandler+0x18>
		GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e42:	80fb      	strh	r3, [r7, #6]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fa4a 	bl	80022e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013c00 	.word	0x40013c00

08000e58 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CONF_WINC_SPI_INT_PIN) {
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e68:	d101      	bne.n	8000e6e <HAL_GPIO_EXTI_Callback+0x16>
		isr();
 8000e6a:	f00b faf3 	bl	800c454 <isr>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <socket_cb>:
 *  - tstrSocketListenMsg
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	603a      	str	r2, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	460b      	mov	r3, r1
 8000e86:	71bb      	strb	r3, [r7, #6]
	switch (u8Msg) {
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	2b06      	cmp	r3, #6
 8000e8e:	f200 808f 	bhi.w	8000fb0 <socket_cb+0x138>
 8000e92:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <socket_cb+0x20>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000eb5 	.word	0x08000eb5
 8000e9c:	08000edf 	.word	0x08000edf
 8000ea0:	08000fb1 	.word	0x08000fb1
 8000ea4:	08000f25 	.word	0x08000f25
 8000ea8:	08000fb1 	.word	0x08000fb1
 8000eac:	08000fb1 	.word	0x08000fb1
 8000eb0:	08000fb1 	.word	0x08000fb1
	/* Socket bind */
	case SOCKET_MSG_BIND: {
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg*) pvMsg;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	60bb      	str	r3, [r7, #8]
		if (pstrBind && pstrBind->status == 0) {
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d07a      	beq.n	8000fb4 <socket_cb+0x13c>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d175      	bne.n	8000fb4 <socket_cb+0x13c>
			printf("socket_cb: bind success!\r\n");
 8000ec8:	4841      	ldr	r0, [pc, #260]	@ (8000fd0 <socket_cb+0x158>)
 8000eca:	f00e fc8f 	bl	800f7ec <puts>
			listen(tcp_server_socket, 0);
 8000ece:	4b41      	ldr	r3, [pc, #260]	@ (8000fd4 <socket_cb+0x15c>)
 8000ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00e f808 	bl	800eeec <listen>
		} else {
			//Handle bind error
		}
	}
		break;
 8000edc:	e06a      	b.n	8000fb4 <socket_cb+0x13c>

		/* Socket listen */
	case SOCKET_MSG_LISTEN: {
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg*) pvMsg;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
		if (pstrListen && pstrListen->status == 0) {
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d010      	beq.n	8000f0a <socket_cb+0x92>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f993 3000 	ldrsb.w	r3, [r3]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10b      	bne.n	8000f0a <socket_cb+0x92>
			printf("socket_cb: listen success!\r\n");
 8000ef2:	4839      	ldr	r0, [pc, #228]	@ (8000fd8 <socket_cb+0x160>)
 8000ef4:	f00e fc7a 	bl	800f7ec <puts>
			accept(tcp_server_socket, NULL, NULL);
 8000ef8:	4b36      	ldr	r3, [pc, #216]	@ (8000fd4 <socket_cb+0x15c>)
 8000efa:	f993 3000 	ldrsb.w	r3, [r3]
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00e f834 	bl	800ef70 <accept>
			printf("socket_cb: listen error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
		break;
 8000f08:	e057      	b.n	8000fba <socket_cb+0x142>
			printf("socket_cb: listen error!\r\n");
 8000f0a:	4834      	ldr	r0, [pc, #208]	@ (8000fdc <socket_cb+0x164>)
 8000f0c:	f00e fc6e 	bl	800f7ec <puts>
			close(tcp_server_socket);
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <socket_cb+0x15c>)
 8000f12:	f993 3000 	ldrsb.w	r3, [r3]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00e f94a 	bl	800f1b0 <close>
			tcp_server_socket = -1;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <socket_cb+0x15c>)
 8000f1e:	22ff      	movs	r2, #255	@ 0xff
 8000f20:	701a      	strb	r2, [r3, #0]
		break;
 8000f22:	e04a      	b.n	8000fba <socket_cb+0x142>

		/* Connect accept */
	case SOCKET_MSG_ACCEPT: {
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg*) pvMsg;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	617b      	str	r3, [r7, #20]
		if (pstrAccept) {
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d033      	beq.n	8000f96 <socket_cb+0x11e>
			printf("socket_cb: accept success!\r\n");
 8000f2e:	482c      	ldr	r0, [pc, #176]	@ (8000fe0 <socket_cb+0x168>)
 8000f30:	f00e fc5c 	bl	800f7ec <puts>
			accept(tcp_server_socket, NULL, NULL);
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <socket_cb+0x15c>)
 8000f36:	f993 3000 	ldrsb.w	r3, [r3]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00e f816 	bl	800ef70 <accept>
			tcp_client_socket = pstrAccept->sock;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f993 2000 	ldrsb.w	r2, [r3]
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <socket_cb+0x16c>)
 8000f4c:	701a      	strb	r2, [r3, #0]
			//TODO: Check and report retval
			printf("accepted conection. Calling HTTP_Server\r\n");
 8000f4e:	4826      	ldr	r0, [pc, #152]	@ (8000fe8 <socket_cb+0x170>)
 8000f50:	f00e fc4c 	bl	800f7ec <puts>
			int ret = http_server(tcp_client_socket, httpNetops);
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <socket_cb+0x16c>)
 8000f56:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <socket_cb+0x174>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f009 f8a4 	bl	800a0b0 <http_server>
 8000f68:	6138      	str	r0, [r7, #16]
			if (ret != 0) {
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d023      	beq.n	8000fb8 <socket_cb+0x140>
				printf("http_server failed!\n");
 8000f70:	481f      	ldr	r0, [pc, #124]	@ (8000ff0 <socket_cb+0x178>)
 8000f72:	f00e fc3b 	bl	800f7ec <puts>
				close(pstrAccept->sock);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f993 3000 	ldrsb.w	r3, [r3]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00e f917 	bl	800f1b0 <close>
				close(tcp_client_socket);
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <socket_cb+0x16c>)
 8000f84:	f993 3000 	ldrsb.w	r3, [r3]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00e f911 	bl	800f1b0 <close>
				tcp_client_socket = -1; // Reset socket variable
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <socket_cb+0x16c>)
 8000f90:	22ff      	movs	r2, #255	@ 0xff
 8000f92:	701a      	strb	r2, [r3, #0]
			printf("socket_cb: accept error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
		break;
 8000f94:	e010      	b.n	8000fb8 <socket_cb+0x140>
			printf("socket_cb: accept error!\r\n");
 8000f96:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <socket_cb+0x17c>)
 8000f98:	f00e fc28 	bl	800f7ec <puts>
			close(tcp_server_socket);
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <socket_cb+0x15c>)
 8000f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f00e f904 	bl	800f1b0 <close>
			tcp_server_socket = -1;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <socket_cb+0x15c>)
 8000faa:	22ff      	movs	r2, #255	@ 0xff
 8000fac:	701a      	strb	r2, [r3, #0]
		break;
 8000fae:	e003      	b.n	8000fb8 <socket_cb+0x140>
	case SOCKET_MSG_RECV: {
	}
		break;

	default:
		break;
 8000fb0:	bf00      	nop
 8000fb2:	e002      	b.n	8000fba <socket_cb+0x142>
		break;
 8000fb4:	bf00      	nop
 8000fb6:	e000      	b.n	8000fba <socket_cb+0x142>
		break;
 8000fb8:	bf00      	nop
	}
	tcpServerSocketEventHandler(sock, u8Msg, pvMsg);
 8000fba:	79b9      	ldrb	r1, [r7, #6]
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00a fd24 	bl	800ba10 <tcpServerSocketEventHandler>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	080114a0 	.word	0x080114a0
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	080114bc 	.word	0x080114bc
 8000fdc:	080114d8 	.word	0x080114d8
 8000fe0:	080114f4 	.word	0x080114f4
 8000fe4:	20000001 	.word	0x20000001
 8000fe8:	08011510 	.word	0x08011510
 8000fec:	20002710 	.word	0x20002710
 8000ff0:	0801153c 	.word	0x0801153c
 8000ff4:	08011550 	.word	0x08011550

08000ff8 <wifi_cb>:
 *  - [M2M_WIFI_REQ_DHCP_CONF](@ref M2M_WIFI_REQ_DHCP_CONF)
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b2c      	cmp	r3, #44	@ 0x2c
 8001008:	d002      	beq.n	8001010 <wifi_cb+0x18>
 800100a:	2b32      	cmp	r3, #50	@ 0x32
 800100c:	d00e      	beq.n	800102c <wifi_cb+0x34>
		wifi_connected = M2M_WIFI_CONNECTED;
		break;
	}

	default: {
		break;
 800100e:	e02a      	b.n	8001066 <wifi_cb+0x6e>
		tstrM2mWifiStateChanged *pstrWifiState =
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	60bb      	str	r3, [r7, #8]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d023      	beq.n	8001064 <wifi_cb+0x6c>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d11f      	bne.n	8001064 <wifi_cb+0x6c>
			printf("Station disconnected\r\n");
 8001024:	4812      	ldr	r0, [pc, #72]	@ (8001070 <wifi_cb+0x78>)
 8001026:	f00e fbe1 	bl	800f7ec <puts>
		break;
 800102a:	e01b      	b.n	8001064 <wifi_cb+0x6c>
		uint8_t *pu8IPAddress = (uint8_t*) pvMsg;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	60fb      	str	r3, [r7, #12]
		printf("Station connected\r\n");
 8001030:	4810      	ldr	r0, [pc, #64]	@ (8001074 <wifi_cb+0x7c>)
 8001032:	f00e fbdb 	bl	800f7ec <puts>
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
				pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3301      	adds	r3, #1
 8001040:	781b      	ldrb	r3, [r3, #0]
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 8001042:	461a      	mov	r2, r3
				pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3302      	adds	r3, #2
 8001048:	781b      	ldrb	r3, [r3, #0]
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 800104a:	4618      	mov	r0, r3
				pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3303      	adds	r3, #3
 8001050:	781b      	ldrb	r3, [r3, #0]
		printf("Station IP is %u.%u.%u.%u\r\n", pu8IPAddress[0],
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	4603      	mov	r3, r0
 8001056:	4808      	ldr	r0, [pc, #32]	@ (8001078 <wifi_cb+0x80>)
 8001058:	f00e fb60 	bl	800f71c <iprintf>
		wifi_connected = M2M_WIFI_CONNECTED;
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <wifi_cb+0x84>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
		break;
 8001062:	e000      	b.n	8001066 <wifi_cb+0x6e>
		break;
 8001064:	bf00      	nop
	}
	}
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	0801156c 	.word	0x0801156c
 8001074:	08011584 	.word	0x08011584
 8001078:	08011598 	.word	0x08011598
 800107c:	200023d4 	.word	0x200023d4

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0b0      	sub	sp, #192	@ 0xc0
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f000 fd69 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f8c1 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 f97d 	bl	800138c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001092:	f000 f945 	bl	8001320 <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 8001096:	f000 f923 	bl	80012e0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800109a:	f003 fd7d 	bl	8004b98 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SD_Card_Init();
 800109e:	f7ff fd7d 	bl	8000b9c <SD_Card_Init>
	/* Initialize the BSP. */
	nm_bsp_init();
 80010a2:	f00a ffd5 	bl	800c050 <nm_bsp_init>

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
 80010ac:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80010b0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	addr.sin_addr.s_addr = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t*) &param, 0, sizeof(tstrWifiInitParam));
 80010ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010be:	2218      	movs	r2, #24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00e fd0c 	bl	800fae0 <memset>

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
 80010c8:	4b47      	ldr	r3, [pc, #284]	@ (80011e8 <main+0x168>)
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	ret = m2m_wifi_init(&param);
 80010ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00b ffb6 	bl	800d044 <m2m_wifi_init>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	if ((M2M_SUCCESS != ret) && (ret != M2M_ERR_FW_VER_MISMATCH)) {
 80010de:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00c      	beq.n	8001100 <main+0x80>
 80010e6:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 80010ea:	f113 0f0d 	cmn.w	r3, #13
 80010ee:	d007      	beq.n	8001100 <main+0x80>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 80010f0:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 80010f4:	4619      	mov	r1, r3
 80010f6:	483d      	ldr	r0, [pc, #244]	@ (80011ec <main+0x16c>)
 80010f8:	f00e fb10 	bl	800f71c <iprintf>
		while (1) {
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <main+0x7c>
		}
	}

	/* Initialize socket module */
	socketInit();
 8001100:	f00d fda2 	bl	800ec48 <socketInit>
	registerSocketCallback(socket_cb, NULL);
 8001104:	2100      	movs	r1, #0
 8001106:	483a      	ldr	r0, [pc, #232]	@ (80011f0 <main+0x170>)
 8001108:	f00d fdbe 	bl	800ec88 <registerSocketCallback>

	/* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
	memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2288      	movs	r2, #136	@ 0x88
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00e fce3 	bl	800fae0 <memset>
	strcpy((char*) &strM2MAPConfig.au8SSID, MAIN_WLAN_SSID);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4a35      	ldr	r2, [pc, #212]	@ (80011f4 <main+0x174>)
 8001120:	ca07      	ldmia	r2, {r0, r1, r2}
 8001122:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strM2MAPConfig.u8ListenChannel = MAIN_WLAN_CHANNEL;
 8001126:	2306      	movs	r3, #6
 8001128:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	strM2MAPConfig.u8SecType = MAIN_WLAN_AUTH;
 800112c:	2303      	movs	r3, #3
 800112e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	strM2MAPConfig.au8DHCPServerIP[0] = 192;
 8001132:	23c0      	movs	r3, #192	@ 0xc0
 8001134:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	strM2MAPConfig.au8DHCPServerIP[1] = 168;
 8001138:	23a8      	movs	r3, #168	@ 0xa8
 800113a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	strM2MAPConfig.au8DHCPServerIP[2] = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	strM2MAPConfig.au8DHCPServerIP[3] = 9;
 8001144:	2309      	movs	r3, #9
 8001146:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

#if USE_WEP
	strcpy((char*) &strM2MAPConfig.au8WepKey, MAIN_WLAN_WEP_KEY);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	3324      	adds	r3, #36	@ 0x24
 8001150:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <main+0x178>)
 8001152:	ca07      	ldmia	r2, {r0, r1, r2}
 8001154:	c303      	stmia	r3!, {r0, r1}
 8001156:	801a      	strh	r2, [r3, #0]
 8001158:	3302      	adds	r3, #2
 800115a:	0c12      	lsrs	r2, r2, #16
 800115c:	701a      	strb	r2, [r3, #0]
	strM2MAPConfig.u8KeySz = strlen(MAIN_WLAN_WEP_KEY);
 800115e:	230a      	movs	r3, #10
 8001160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	strM2MAPConfig.u8KeyIndx = MAIN_WLAN_WEP_KEY_INDEX;
 8001164:	2301      	movs	r3, #1
 8001166:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
#endif

	/* Bring up AP mode with parameters structure. */
	ret = m2m_wifi_enable_ap(&strM2MAPConfig);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4618      	mov	r0, r3
 8001170:	f00b fff7 	bl	800d162 <m2m_wifi_enable_ap>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	if (M2M_SUCCESS != ret) {
 800117a:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <main+0x10c>
		printf("main: m2m_wifi_enable_ap call error!\r\n");
 8001182:	481e      	ldr	r0, [pc, #120]	@ (80011fc <main+0x17c>)
 8001184:	f00e fb32 	bl	800f7ec <puts>
		while (1) {
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <main+0x108>
		}
	}

	printf("AP mode started. You can connect to %s.\r\n",
 800118c:	4919      	ldr	r1, [pc, #100]	@ (80011f4 <main+0x174>)
 800118e:	481c      	ldr	r0, [pc, #112]	@ (8001200 <main+0x180>)
 8001190:	f00e fac4 	bl	800f71c <iprintf>
//		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
//		while (1) {
//		}
//	}
	//inint web server
	http_server_WINC15x0_init();
 8001194:	f00a fe08 	bl	800bda8 <http_server_WINC15x0_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		m2m_wifi_handle_events(NULL);
 8001198:	2000      	movs	r0, #0
 800119a:	f00b ffd7 	bl	800d14c <m2m_wifi_handle_events>

		if (wifi_connected == M2M_WIFI_CONNECTED) {
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <main+0x184>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d1f8      	bne.n	8001198 <main+0x118>
			if (tcp_server_socket < 0) {
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <main+0x188>)
 80011a8:	f993 3000 	ldrsb.w	r3, [r3]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	daf3      	bge.n	8001198 <main+0x118>
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
 80011b0:	2200      	movs	r2, #0
 80011b2:	2101      	movs	r1, #1
 80011b4:	2002      	movs	r0, #2
 80011b6:	f00d fd7d 	bl	800ecb4 <socket>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <main+0x188>)
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <main+0x188>)
 80011c4:	f993 3000 	ldrsb.w	r3, [r3]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da03      	bge.n	80011d4 <main+0x154>
					printf(
 80011cc:	480f      	ldr	r0, [pc, #60]	@ (800120c <main+0x18c>)
 80011ce:	f00e fb0d 	bl	800f7ec <puts>
							"main: failed to create TCP server socket error!\r\n");
					continue;
 80011d2:	e008      	b.n	80011e6 <main+0x166>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr*) &addr,
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <main+0x188>)
 80011d6:	f993 3000 	ldrsb.w	r3, [r3]
 80011da:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80011de:	2210      	movs	r2, #16
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d fe25 	bl	800ee30 <bind>
		m2m_wifi_handle_events(NULL);
 80011e6:	e7d7      	b.n	8001198 <main+0x118>
 80011e8:	08000ff9 	.word	0x08000ff9
 80011ec:	080115b4 	.word	0x080115b4
 80011f0:	08000e79 	.word	0x08000e79
 80011f4:	080115dc 	.word	0x080115dc
 80011f8:	080115e8 	.word	0x080115e8
 80011fc:	080115f4 	.word	0x080115f4
 8001200:	0801161c 	.word	0x0801161c
 8001204:	200023d4 	.word	0x200023d4
 8001208:	20000000 	.word	0x20000000
 800120c:	08011648 	.word	0x08011648

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	@ 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f00e fc5e 	bl	800fae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <SystemClock_Config+0xc8>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <SystemClock_Config+0xc8>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <SystemClock_Config+0xc8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <SystemClock_Config+0xcc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a20      	ldr	r2, [pc, #128]	@ (80012dc <SystemClock_Config+0xcc>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <SystemClock_Config+0xcc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001280:	2308      	movs	r3, #8
 8001282:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001284:	2348      	movs	r3, #72	@ 0x48
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001288:	2306      	movs	r3, #6
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800128c:	2307      	movs	r3, #7
 800128e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f001 f83b 	bl	8002310 <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a0:	f000 f9b0 	bl	8001604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fa9d 	bl	8002800 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012cc:	f000 f99a 	bl	8001604 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3750      	adds	r7, #80	@ 0x50
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_SDIO_SD_Init+0x38>)
 80012e6:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <MX_SDIO_SD_Init+0x3c>)
 80012e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_SDIO_SD_Init+0x38>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_SDIO_SD_Init+0x38>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_SDIO_SD_Init+0x38>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_SDIO_SD_Init+0x38>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <MX_SDIO_SD_Init+0x38>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <MX_SDIO_SD_Init+0x38>)
 800130a:	2202      	movs	r2, #2
 800130c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	200022f8 	.word	0x200022f8
 800131c:	40012c00 	.word	0x40012c00

08001320 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001326:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <MX_SPI1_Init+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <MX_SPI1_Init+0x64>)
 800132c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_SPI1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_SPI1_Init+0x64>)
 800134c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001350:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_SPI1_Init+0x64>)
 800136c:	220a      	movs	r2, #10
 800136e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_SPI1_Init+0x64>)
 8001372:	f002 fbc9 	bl	8003b08 <HAL_SPI_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800137c:	f000 f942 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000237c 	.word	0x2000237c
 8001388:	40013000 	.word	0x40013000

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	@ 0x30
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	4b91      	ldr	r3, [pc, #580]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a90      	ldr	r2, [pc, #576]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b8e      	ldr	r3, [pc, #568]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	4b8a      	ldr	r3, [pc, #552]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a89      	ldr	r2, [pc, #548]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b87      	ldr	r3, [pc, #540]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b83      	ldr	r3, [pc, #524]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a82      	ldr	r2, [pc, #520]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b80      	ldr	r3, [pc, #512]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b7c      	ldr	r3, [pc, #496]	@ (80015ec <MX_GPIO_Init+0x260>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a7b      	ldr	r2, [pc, #492]	@ (80015ec <MX_GPIO_Init+0x260>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b79      	ldr	r3, [pc, #484]	@ (80015ec <MX_GPIO_Init+0x260>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b75      	ldr	r3, [pc, #468]	@ (80015ec <MX_GPIO_Init+0x260>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a74      	ldr	r2, [pc, #464]	@ (80015ec <MX_GPIO_Init+0x260>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b72      	ldr	r3, [pc, #456]	@ (80015ec <MX_GPIO_Init+0x260>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b6e      	ldr	r3, [pc, #440]	@ (80015ec <MX_GPIO_Init+0x260>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a6d      	ldr	r2, [pc, #436]	@ (80015ec <MX_GPIO_Init+0x260>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b6b      	ldr	r3, [pc, #428]	@ (80015ec <MX_GPIO_Init+0x260>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2108      	movs	r1, #8
 800144e:	4868      	ldr	r0, [pc, #416]	@ (80015f0 <MX_GPIO_Init+0x264>)
 8001450:	f000 ff12 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2101      	movs	r1, #1
 8001458:	4866      	ldr	r0, [pc, #408]	@ (80015f4 <MX_GPIO_Init+0x268>)
 800145a:	f000 ff0d 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800145e:	2200      	movs	r2, #0
 8001460:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001464:	4864      	ldr	r0, [pc, #400]	@ (80015f8 <MX_GPIO_Init+0x26c>)
 8001466:	f000 ff07 	bl	8002278 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800146a:	2308      	movs	r3, #8
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	485b      	ldr	r0, [pc, #364]	@ (80015f0 <MX_GPIO_Init+0x264>)
 8001482:	f000 fd45 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001486:	2301      	movs	r3, #1
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4855      	ldr	r0, [pc, #340]	@ (80015f4 <MX_GPIO_Init+0x268>)
 800149e:	f000 fd37 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014a2:	2308      	movs	r3, #8
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b2:	2305      	movs	r3, #5
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	484d      	ldr	r0, [pc, #308]	@ (80015f4 <MX_GPIO_Init+0x268>)
 80014be:	f000 fd27 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4849      	ldr	r0, [pc, #292]	@ (80015fc <MX_GPIO_Init+0x270>)
 80014d8:	f000 fd1a 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014dc:	2310      	movs	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ec:	2306      	movs	r3, #6
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4841      	ldr	r0, [pc, #260]	@ (80015fc <MX_GPIO_Init+0x270>)
 80014f8:	f000 fd0a 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014fc:	2304      	movs	r3, #4
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	483c      	ldr	r0, [pc, #240]	@ (8001600 <MX_GPIO_Init+0x274>)
 8001510:	f000 fcfe 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001526:	2305      	movs	r3, #5
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4833      	ldr	r0, [pc, #204]	@ (8001600 <MX_GPIO_Init+0x274>)
 8001532:	f000 fced 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001536:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800153a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	482a      	ldr	r0, [pc, #168]	@ (80015f8 <MX_GPIO_Init+0x26c>)
 8001550:	f000 fcde 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4824      	ldr	r0, [pc, #144]	@ (80015fc <MX_GPIO_Init+0x270>)
 800156a:	f000 fcd1 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800156e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001580:	230a      	movs	r3, #10
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	481c      	ldr	r0, [pc, #112]	@ (80015fc <MX_GPIO_Init+0x270>)
 800158c:	f000 fcc0 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001590:	2320      	movs	r3, #32
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4815      	ldr	r0, [pc, #84]	@ (80015f8 <MX_GPIO_Init+0x26c>)
 80015a4:	f000 fcb4 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SCL_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin;
 80015a8:	2340      	movs	r3, #64	@ 0x40
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ac:	2312      	movs	r3, #18
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b8:	2304      	movs	r3, #4
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	480f      	ldr	r0, [pc, #60]	@ (8001600 <MX_GPIO_Init+0x274>)
 80015c4:	f000 fca4 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015cc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_GPIO_Init+0x264>)
 80015de:	f000 fc97 	bl	8001f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e2:	bf00      	nop
 80015e4:	3730      	adds	r7, #48	@ 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <Error_Handler+0x8>

08001610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	4a0f      	ldr	r2, [pc, #60]	@ (800165c <HAL_MspInit+0x4c>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001624:	6453      	str	r3, [r2, #68]	@ 0x44
 8001626:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <HAL_MspInit+0x4c>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800164e:	2007      	movs	r0, #7
 8001650:	f000 fc0e 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <HAL_SD_MspInit+0xe4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d15b      	bne.n	800173a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a2f      	ldr	r2, [pc, #188]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 800168c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a21      	ldr	r2, [pc, #132]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <HAL_SD_MspInit+0xe8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016e8:	230c      	movs	r3, #12
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4816      	ldr	r0, [pc, #88]	@ (800174c <HAL_SD_MspInit+0xec>)
 80016f4:	f000 fc0c 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800170a:	230c      	movs	r3, #12
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	480d      	ldr	r0, [pc, #52]	@ (800174c <HAL_SD_MspInit+0xec>)
 8001716:	f000 fbfb 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800171a:	2304      	movs	r3, #4
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001722:	2301      	movs	r3, #1
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800172a:	230c      	movs	r3, #12
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4806      	ldr	r0, [pc, #24]	@ (8001750 <HAL_SD_MspInit+0xf0>)
 8001736:	f000 fbeb 	bl	8001f10 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40012c00 	.word	0x40012c00
 8001748:	40023800 	.word	0x40023800
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a23      	ldr	r2, [pc, #140]	@ (8001800 <HAL_SPI_MspInit+0xac>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d13f      	bne.n	80017f6 <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <HAL_SPI_MspInit+0xb0>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <HAL_SPI_MspInit+0xb0>)
 8001780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001784:	6453      	str	r3, [r2, #68]	@ 0x44
 8001786:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <HAL_SPI_MspInit+0xb0>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_SPI_MspInit+0xb0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a1a      	ldr	r2, [pc, #104]	@ (8001804 <HAL_SPI_MspInit+0xb0>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <HAL_SPI_MspInit+0xb0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017ae:	23e0      	movs	r3, #224	@ 0xe0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017be:	2305      	movs	r3, #5
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480f      	ldr	r0, [pc, #60]	@ (8001808 <HAL_SPI_MspInit+0xb4>)
 80017ca:	f000 fba1 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e0:	2305      	movs	r3, #5
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	@ (8001808 <HAL_SPI_MspInit+0xb4>)
 80017ec:	f000 fb90 	bl	8001f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
		  extern void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi);
		  nm_bus_wifi_spi_init(hspi);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f00a fd27 	bl	800c244 <nm_bus_wifi_spi_init>
  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	@ 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40013000 	.word	0x40013000
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <NMI_Handler+0x4>

08001814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <MemManage_Handler+0x4>

08001824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <UsageFault_Handler+0x4>

08001834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001862:	f000 f9cd 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <ITM_SendChar+0x48>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <ITM_SendChar+0x48>)
 800187c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001880:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <ITM_SendChar+0x4c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <ITM_SendChar+0x4c>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800188e:	bf00      	nop
 8001890:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f8      	beq.n	8001890 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800189e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000edfc 	.word	0xe000edfc
 80018b8:	e0000e00 	.word	0xe0000e00

080018bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_kill>:

int _kill(int pid, int sig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d6:	f00e fa19 	bl	800fd0c <__errno>
 80018da:	4603      	mov	r3, r0
 80018dc:	2216      	movs	r2, #22
 80018de:	601a      	str	r2, [r3, #0]
  return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_exit>:

void _exit (int status)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffe7 	bl	80018cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fe:	bf00      	nop
 8001900:	e7fd      	b.n	80018fe <_exit+0x12>

08001902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e00a      	b.n	800192a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001914:	f3af 8000 	nop.w
 8001918:	4601      	mov	r1, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	60ba      	str	r2, [r7, #8]
 8001920:	b2ca      	uxtb	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	dbf0      	blt.n	8001914 <_read+0x12>
  }

  return len;
 8001932:	687b      	ldr	r3, [r7, #4]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e009      	b.n	8001962 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	60ba      	str	r2, [r7, #8]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff88 	bl	800186c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	dbf1      	blt.n	800194e <_write+0x12>
  }
  return len;
 800196a:	687b      	ldr	r3, [r7, #4]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_close>:

int _close(int file)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800199c:	605a      	str	r2, [r3, #4]
  return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_isatty>:

int _isatty(int file)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f00e f97e 	bl	800fd0c <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20020000 	.word	0x20020000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	200023d8 	.word	0x200023d8
 8001a44:	20002af8 	.word	0x20002af8

08001a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	@ (8001aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f00e f93d 	bl	800fd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff faef 	bl	8001080 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20001290 	.word	0x20001290
  ldr r2, =_sidata
 8001ab0:	080134ac 	.word	0x080134ac
  ldr r2, =_sbss
 8001ab4:	20001290 	.word	0x20001290
  ldr r4, =_ebss
 8001ab8:	20002af4 	.word	0x20002af4

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <BSP_LED_On+0x2c>)
 8001ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <BSP_LED_On+0x30>)
 8001ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ada:	2201      	movs	r2, #1
 8001adc:	4619      	mov	r1, r3
 8001ade:	f000 fbcb 	bl	8002278 <HAL_GPIO_WritePin>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000008 	.word	0x20000008
 8001af0:	08012b84 	.word	0x08012b84

08001af4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <BSP_LED_Off+0x2c>)
 8001b02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a06      	ldr	r2, [pc, #24]	@ (8001b24 <BSP_LED_Off+0x30>)
 8001b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	f000 fbb1 	bl	8002278 <HAL_GPIO_WritePin>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008
 8001b24:	08012b84 	.word	0x08012b84

08001b28 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3 
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <BSP_LED_Toggle+0x2c>)
 8001b36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4906      	ldr	r1, [pc, #24]	@ (8001b58 <BSP_LED_Toggle+0x30>)
 8001b3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f000 fbb0 	bl	80022aa <HAL_GPIO_TogglePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008
 8001b58:	08012b84 	.word	0x08012b84

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f973 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fd3e 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f999 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f953 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000001c 	.word	0x2000001c
 8001bfc:	20000018 	.word	0x20000018

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000001c 	.word	0x2000001c
 8001c24:	200023dc 	.word	0x200023dc

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200023dc 	.word	0x200023dc

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000001c 	.word	0x2000001c

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db12      	blt.n	8001d60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	490a      	ldr	r1, [pc, #40]	@ (8001d6c <__NVIC_DisableIRQ+0x44>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	3320      	adds	r3, #32
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d54:	f3bf 8f4f 	dsb	sy
}
 8001d58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d5a:	f3bf 8f6f 	isb	sy
}
 8001d5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff05 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff1a 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff0d 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff1d 	bl	8001d28 <__NVIC_DisableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff94 	bl	8001e2c <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e16b      	b.n	8002204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f040 815a 	bne.w	80021fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d005      	beq.n	8001f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d130      	bne.n	8001fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 0201 	and.w	r2, r3, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d017      	beq.n	8002000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d123      	bne.n	8002054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80b4 	beq.w	80021fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b60      	ldr	r3, [pc, #384]	@ (800221c <HAL_GPIO_Init+0x30c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	4a5f      	ldr	r2, [pc, #380]	@ (800221c <HAL_GPIO_Init+0x30c>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a6:	4b5d      	ldr	r3, [pc, #372]	@ (800221c <HAL_GPIO_Init+0x30c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002220 <HAL_GPIO_Init+0x310>)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	@ (8002224 <HAL_GPIO_Init+0x314>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <HAL_GPIO_Init+0x226>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a51      	ldr	r2, [pc, #324]	@ (8002228 <HAL_GPIO_Init+0x318>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d025      	beq.n	8002132 <HAL_GPIO_Init+0x222>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a50      	ldr	r2, [pc, #320]	@ (800222c <HAL_GPIO_Init+0x31c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <HAL_GPIO_Init+0x21e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002230 <HAL_GPIO_Init+0x320>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x21a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002234 <HAL_GPIO_Init+0x324>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x216>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4d      	ldr	r2, [pc, #308]	@ (8002238 <HAL_GPIO_Init+0x328>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x212>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4c      	ldr	r2, [pc, #304]	@ (800223c <HAL_GPIO_Init+0x32c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x20e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4b      	ldr	r2, [pc, #300]	@ (8002240 <HAL_GPIO_Init+0x330>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x20a>
 8002116:	2307      	movs	r3, #7
 8002118:	e00e      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211a:	2308      	movs	r3, #8
 800211c:	e00c      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211e:	2306      	movs	r3, #6
 8002120:	e00a      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002122:	2305      	movs	r3, #5
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002126:	2304      	movs	r3, #4
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	@ (8002220 <HAL_GPIO_Init+0x310>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <HAL_GPIO_Init+0x334>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a32      	ldr	r2, [pc, #200]	@ (8002244 <HAL_GPIO_Init+0x334>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b30      	ldr	r3, [pc, #192]	@ (8002244 <HAL_GPIO_Init+0x334>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a27      	ldr	r2, [pc, #156]	@ (8002244 <HAL_GPIO_Init+0x334>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <HAL_GPIO_Init+0x334>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_GPIO_Init+0x334>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_GPIO_Init+0x334>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a12      	ldr	r2, [pc, #72]	@ (8002244 <HAL_GPIO_Init+0x334>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f ae90 	bls.w	8001f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40021c00 	.word	0x40021c00
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e001      	b.n	800226a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	041a      	lsls	r2, r3, #16
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	400b      	ands	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022f6:	4a05      	ldr	r2, [pc, #20]	@ (800230c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fdaa 	bl	8000e58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40013c00 	.word	0x40013c00

08002310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e267      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d075      	beq.n	800241a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	4b88      	ldr	r3, [pc, #544]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00c      	beq.n	8002354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4b85      	ldr	r3, [pc, #532]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	2b08      	cmp	r3, #8
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b82      	ldr	r3, [pc, #520]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b7e      	ldr	r3, [pc, #504]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05b      	beq.n	8002418 <HAL_RCC_OscConfig+0x108>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d157      	bne.n	8002418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e242      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x74>
 8002376:	4b76      	ldr	r3, [pc, #472]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b70      	ldr	r3, [pc, #448]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6f      	ldr	r2, [pc, #444]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b6d      	ldr	r3, [pc, #436]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6c      	ldr	r2, [pc, #432]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 80023a8:	4b69      	ldr	r3, [pc, #420]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a68      	ldr	r2, [pc, #416]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b66      	ldr	r3, [pc, #408]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a65      	ldr	r2, [pc, #404]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fc2e 	bl	8001c28 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fc2a 	bl	8001c28 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e207      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xc0>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fc1a 	bl	8001c28 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff fc16 	bl	8001c28 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1f3      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b51      	ldr	r3, [pc, #324]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0xe8>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d11c      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b44      	ldr	r3, [pc, #272]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1c7      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4937      	ldr	r1, [pc, #220]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	e03a      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002480:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <HAL_RCC_OscConfig+0x244>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff fbcf 	bl	8001c28 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248e:	f7ff fbcb 	bl	8001c28 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e1a8      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b28      	ldr	r3, [pc, #160]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4925      	ldr	r1, [pc, #148]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_RCC_OscConfig+0x244>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fbae 	bl	8001c28 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7ff fbaa 	bl	8001c28 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e187      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d036      	beq.n	8002568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_RCC_OscConfig+0x248>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7ff fb8e 	bl	8001c28 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002510:	f7ff fb8a 	bl	8001c28 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e167      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_RCC_OscConfig+0x240>)
 8002524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x200>
 800252e:	e01b      	b.n	8002568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_OscConfig+0x248>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff fb77 	bl	8001c28 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e00e      	b.n	800255c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253e:	f7ff fb73 	bl	8001c28 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d907      	bls.n	800255c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e150      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
 8002550:	40023800 	.word	0x40023800
 8002554:	42470000 	.word	0x42470000
 8002558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b88      	ldr	r3, [pc, #544]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ea      	bne.n	800253e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8097 	beq.w	80026a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b81      	ldr	r3, [pc, #516]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b7d      	ldr	r3, [pc, #500]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	4a7c      	ldr	r2, [pc, #496]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	@ 0x40
 8002596:	4b7a      	ldr	r3, [pc, #488]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b77      	ldr	r3, [pc, #476]	@ (8002784 <HAL_RCC_OscConfig+0x474>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b74      	ldr	r3, [pc, #464]	@ (8002784 <HAL_RCC_OscConfig+0x474>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a73      	ldr	r2, [pc, #460]	@ (8002784 <HAL_RCC_OscConfig+0x474>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7ff fb33 	bl	8001c28 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7ff fb2f 	bl	8001c28 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e10c      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002784 <HAL_RCC_OscConfig+0x474>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x2ea>
 80025ec:	4b64      	ldr	r3, [pc, #400]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a63      	ldr	r2, [pc, #396]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x324>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x30c>
 8002602:	4b5f      	ldr	r3, [pc, #380]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	4a5e      	ldr	r2, [pc, #376]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	@ 0x70
 800260e:	4b5c      	ldr	r3, [pc, #368]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	4a5b      	ldr	r2, [pc, #364]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	@ 0x70
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0x324>
 800261c:	4b58      	ldr	r3, [pc, #352]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002620:	4a57      	ldr	r2, [pc, #348]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	@ 0x70
 8002628:	4b55      	ldr	r3, [pc, #340]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	4a54      	ldr	r2, [pc, #336]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7ff faf4 	bl	8001c28 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7ff faf0 	bl	8001c28 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0cb      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	4b49      	ldr	r3, [pc, #292]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ee      	beq.n	8002644 <HAL_RCC_OscConfig+0x334>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7ff fade 	bl	8001c28 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7ff fada 	bl	8001c28 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0b5      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	4b3e      	ldr	r3, [pc, #248]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002698:	4b39      	ldr	r3, [pc, #228]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	4a38      	ldr	r2, [pc, #224]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a1 	beq.w	80027f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ae:	4b34      	ldr	r3, [pc, #208]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d05c      	beq.n	8002774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d141      	bne.n	8002746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_RCC_OscConfig+0x478>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff faae 	bl	8001c28 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d0:	f7ff faaa 	bl	8001c28 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e087      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	3b01      	subs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	491b      	ldr	r1, [pc, #108]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <HAL_RCC_OscConfig+0x478>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff fa83 	bl	8001c28 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002726:	f7ff fa7f 	bl	8001c28 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e05c      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x416>
 8002744:	e054      	b.n	80027f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_RCC_OscConfig+0x478>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fa6c 	bl	8001c28 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7ff fa68 	bl	8001c28 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e045      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_OscConfig+0x470>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
 8002772:	e03d      	b.n	80027f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e038      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
 8002780:	40023800 	.word	0x40023800
 8002784:	40007000 	.word	0x40007000
 8002788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x4ec>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d028      	beq.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d121      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d11a      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d111      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	3b01      	subs	r3, #1
 80027d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7ff f99a 	bl	8001c28 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7ff f996 	bl	8001c28 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f8fa 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08012b74 	.word	0x08012b74
 80029c4:	20000004 	.word	0x20000004
 80029c8:	20000018 	.word	0x20000018

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b094      	sub	sp, #80	@ 0x50
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029dc:	2300      	movs	r3, #0
 80029de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e4:	4b79      	ldr	r3, [pc, #484]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x40>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	f200 80e1 	bhi.w	8002bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x34>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fe:	e0db      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b73      	ldr	r3, [pc, #460]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002a04:	e0db      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a06:	4b73      	ldr	r3, [pc, #460]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a0a:	e0d8      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a16:	4b6d      	ldr	r3, [pc, #436]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d063      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b6a      	ldr	r3, [pc, #424]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a3e:	4622      	mov	r2, r4
 8002a40:	462b      	mov	r3, r5
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	0159      	lsls	r1, r3, #5
 8002a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a50:	0150      	lsls	r0, r2, #5
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4621      	mov	r1, r4
 8002a58:	1a51      	subs	r1, r2, r1
 8002a5a:	6139      	str	r1, [r7, #16]
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a70:	4659      	mov	r1, fp
 8002a72:	018b      	lsls	r3, r1, #6
 8002a74:	4651      	mov	r1, sl
 8002a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	018a      	lsls	r2, r1, #6
 8002a7e:	4651      	mov	r1, sl
 8002a80:	ebb2 0801 	subs.w	r8, r2, r1
 8002a84:	4659      	mov	r1, fp
 8002a86:	eb63 0901 	sbc.w	r9, r3, r1
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9e:	4690      	mov	r8, r2
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	eb18 0303 	adds.w	r3, r8, r3
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	462b      	mov	r3, r5
 8002aac:	eb49 0303 	adc.w	r3, r9, r3
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002abe:	4629      	mov	r1, r5
 8002ac0:	024b      	lsls	r3, r1, #9
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac8:	4621      	mov	r1, r4
 8002aca:	024a      	lsls	r2, r1, #9
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002adc:	f7fd fee6 	bl	80008ac <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae8:	e058      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	2200      	movs	r2, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	4611      	mov	r1, r2
 8002af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b04:	4642      	mov	r2, r8
 8002b06:	464b      	mov	r3, r9
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	0159      	lsls	r1, r3, #5
 8002b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b16:	0150      	lsls	r0, r2, #5
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b22:	4649      	mov	r1, r9
 8002b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b40:	eb63 050b 	sbc.w	r5, r3, fp
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	00eb      	lsls	r3, r5, #3
 8002b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b52:	00e2      	lsls	r2, r4, #3
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	18e3      	adds	r3, r4, r3
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	464b      	mov	r3, r9
 8002b60:	eb45 0303 	adc.w	r3, r5, r3
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b72:	4629      	mov	r1, r5
 8002b74:	028b      	lsls	r3, r1, #10
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	028a      	lsls	r2, r1, #10
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b86:	2200      	movs	r2, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	61fa      	str	r2, [r7, #28]
 8002b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b90:	f7fd fe8c 	bl	80008ac <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3750      	adds	r7, #80	@ 0x50
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e022      	b.n	8002c30 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fd2f 	bl	8001660 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f814 	bl	8002c38 <HAL_SD_InitCard>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00a      	b.n	8002c30 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b08e      	sub	sp, #56	@ 0x38
 8002c3c:	af04      	add	r7, sp, #16
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002c54:	2376      	movs	r3, #118	@ 0x76
 8002c56:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681d      	ldr	r5, [r3, #0]
 8002c5c:	466c      	mov	r4, sp
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c70:	4628      	mov	r0, r5
 8002c72:	f001 fa5f 	bl	8004134 <SDIO_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e04f      	b.n	8002d28 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002c88:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <HAL_SD_InitCard+0xf8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fa97 	bl	80041c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_SD_InitCard+0xf8>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002c9e:	2002      	movs	r0, #2
 8002ca0:	f7fe ffce 	bl	8001c40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fe79 	bl	800399c <SD_PowerON>
 8002caa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02e      	b.n	8002d28 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fd98 	bl	8003800 <SD_InitCard>
 8002cd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01b      	b.n	8002d28 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 faf6 	bl	80042ea <SDMMC_CmdBlockLength>
 8002cfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00f      	beq.n	8002d26 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <HAL_SD_InitCard+0xfc>)
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3728      	adds	r7, #40	@ 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d30:	422580a0 	.word	0x422580a0
 8002d34:	004005ff 	.word	0x004005ff

08002d38 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b092      	sub	sp, #72	@ 0x48
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d46:	f7fe ff6f 	bl	8001c28 <HAL_GetTick>
 8002d4a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1c5      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	f040 81b8 	bne.w	80030e8 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d907      	bls.n	8002d9c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d90:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e1ac      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d002      	beq.n	8002dba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	025b      	lsls	r3, r3, #9
 8002dc4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002dc6:	2390      	movs	r3, #144	@ 0x90
 8002dc8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f107 0214 	add.w	r2, r7, #20
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fa56 	bl	8004292 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d90a      	bls.n	8002e02 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2202      	movs	r2, #2
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 faba 	bl	8004372 <SDMMC_CmdReadMultiBlock>
 8002dfe:	6478      	str	r0, [r7, #68]	@ 0x44
 8002e00:	e009      	b.n	8002e16 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fa8d 	bl	800432e <SDMMC_CmdReadSingleBlock>
 8002e14:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7e      	ldr	r2, [pc, #504]	@ (800301c <HAL_SD_ReadBlocks+0x2e4>)
 8002e22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e159      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e46:	e061      	b.n	8002f0c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03c      	beq.n	8002ed0 <HAL_SD_ReadBlocks+0x198>
 8002e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d039      	beq.n	8002ed0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e60:	e033      	b.n	8002eca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 f98f 	bl	800418a <SDIO_ReadFIFO>
 8002e6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	3301      	adds	r3, #1
 8002e7a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8e:	3301      	adds	r3, #1
 8002e90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e94:	3b01      	subs	r3, #1
 8002e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb0:	0e1b      	lsrs	r3, r3, #24
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eba:	3301      	adds	r3, #1
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	d9c8      	bls.n	8002e62 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ed0:	f7fe feaa 	bl	8001c28 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d902      	bls.n	8002ee6 <HAL_SD_ReadBlocks+0x1ae>
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d112      	bne.n	8002f0c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4c      	ldr	r2, [pc, #304]	@ (800301c <HAL_SD_ReadBlocks+0x2e4>)
 8002eec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0f4      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f12:	f240 332a 	movw	r3, #810	@ 0x32a
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d095      	beq.n	8002e48 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d022      	beq.n	8002f70 <HAL_SD_ReadBlocks+0x238>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d91f      	bls.n	8002f70 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d01b      	beq.n	8002f70 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fa7f 	bl	8004440 <SDMMC_CmdStopTransfer>
 8002f42:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a33      	ldr	r2, [pc, #204]	@ (800301c <HAL_SD_ReadBlocks+0x2e4>)
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0c2      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_SD_ReadBlocks+0x254>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d012      	beq.n	8002fb2 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	@ (800301c <HAL_SD_ReadBlocks+0x2e4>)
 8002f92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	f043 0208 	orr.w	r2, r3, #8
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0a1      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a15      	ldr	r2, [pc, #84]	@ (800301c <HAL_SD_ReadBlocks+0x2e4>)
 8002fc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	f043 0202 	orr.w	r2, r3, #2
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e087      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d064      	beq.n	80030be <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a08      	ldr	r2, [pc, #32]	@ (800301c <HAL_SD_ReadBlocks+0x2e4>)
 8002ffa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06d      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
 800301a:	bf00      	nop
 800301c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f8b0 	bl	800418a <SDIO_ReadFIFO>
 800302a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	b2da      	uxtb	r2, r3
 8003030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003032:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003036:	3301      	adds	r3, #1
 8003038:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800303a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303c:	3b01      	subs	r3, #1
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b2da      	uxtb	r2, r3
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800304a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304c:	3301      	adds	r3, #1
 800304e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003052:	3b01      	subs	r3, #1
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	b2da      	uxtb	r2, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003062:	3301      	adds	r3, #1
 8003064:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003068:	3b01      	subs	r3, #1
 800306a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800306c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306e:	0e1b      	lsrs	r3, r3, #24
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003078:	3301      	adds	r3, #1
 800307a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800307c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307e:	3b01      	subs	r3, #1
 8003080:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003082:	f7fe fdd1 	bl	8001c28 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800308e:	429a      	cmp	r2, r3
 8003090:	d902      	bls.n	8003098 <HAL_SD_ReadBlocks+0x360>
 8003092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003094:	2b00      	cmp	r3, #0
 8003096:	d112      	bne.n	80030be <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <HAL_SD_ReadBlocks+0x3c8>)
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e01b      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_SD_ReadBlocks+0x39a>
 80030cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1a6      	bne.n	8003020 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80030da:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e006      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3748      	adds	r7, #72	@ 0x48
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	004005ff 	.word	0x004005ff

08003104 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b092      	sub	sp, #72	@ 0x48
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003112:	f7fe fd89 	bl	8001c28 <HAL_GetTick>
 8003116:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e16d      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 8160 	bne.w	8003404 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800314a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	429a      	cmp	r2, r3
 8003156:	d907      	bls.n	8003168 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e154      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2203      	movs	r2, #3
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	2b01      	cmp	r3, #1
 800317e:	d002      	beq.n	8003186 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	025b      	lsls	r3, r3, #9
 8003190:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003192:	2390      	movs	r3, #144	@ 0x90
 8003194:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f107 0218 	add.w	r2, r7, #24
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f870 	bl	8004292 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d90a      	bls.n	80031ce <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f918 	bl	80043fa <SDMMC_CmdWriteMultiBlock>
 80031ca:	6478      	str	r0, [r7, #68]	@ 0x44
 80031cc:	e009      	b.n	80031e2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2210      	movs	r2, #16
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 f8eb 	bl	80043b6 <SDMMC_CmdWriteSingleBlock>
 80031e0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a8b      	ldr	r2, [pc, #556]	@ (800341c <HAL_SD_WriteBlocks+0x318>)
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f6:	431a      	orrs	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e101      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003212:	e065      	b.n	80032e0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d040      	beq.n	80032a4 <HAL_SD_WriteBlocks+0x1a0>
 8003222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03d      	beq.n	80032a4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003228:	2300      	movs	r3, #0
 800322a:	643b      	str	r3, [r7, #64]	@ 0x40
 800322c:	e037      	b.n	800329e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	3301      	adds	r3, #1
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800323a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323c:	3b01      	subs	r3, #1
 800323e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	021a      	lsls	r2, r3, #8
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800324c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800324e:	3301      	adds	r3, #1
 8003250:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003254:	3b01      	subs	r3, #1
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	041a      	lsls	r2, r3, #16
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003266:	3301      	adds	r3, #1
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800326a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326c:	3b01      	subs	r3, #1
 800326e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	061a      	lsls	r2, r3, #24
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800327c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327e:	3301      	adds	r3, #1
 8003280:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003284:	3b01      	subs	r3, #1
 8003286:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f107 0214 	add.w	r2, r7, #20
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 ff86 	bl	80041a4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800329a:	3301      	adds	r3, #1
 800329c:	643b      	str	r3, [r7, #64]	@ 0x40
 800329e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a0:	2b07      	cmp	r3, #7
 80032a2:	d9c4      	bls.n	800322e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80032a4:	f7fe fcc0 	bl	8001c28 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d902      	bls.n	80032ba <HAL_SD_WriteBlocks+0x1b6>
 80032b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d112      	bne.n	80032e0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a57      	ldr	r2, [pc, #348]	@ (800341c <HAL_SD_WriteBlocks+0x318>)
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e098      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e6:	f240 331a 	movw	r3, #794	@ 0x31a
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d091      	beq.n	8003214 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d022      	beq.n	8003344 <HAL_SD_WriteBlocks+0x240>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d91f      	bls.n	8003344 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	2b03      	cmp	r3, #3
 800330a:	d01b      	beq.n	8003344 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f001 f895 	bl	8004440 <SDMMC_CmdStopTransfer>
 8003316:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a3e      	ldr	r2, [pc, #248]	@ (800341c <HAL_SD_WriteBlocks+0x318>)
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800332a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e066      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_SD_WriteBlocks+0x25c>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2d      	ldr	r2, [pc, #180]	@ (800341c <HAL_SD_WriteBlocks+0x318>)
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	f043 0208 	orr.w	r2, r3, #8
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e045      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d012      	beq.n	80033ba <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a20      	ldr	r2, [pc, #128]	@ (800341c <HAL_SD_WriteBlocks+0x318>)
 800339a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	f043 0202 	orr.w	r2, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e02b      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d012      	beq.n	80033ee <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	@ (800341c <HAL_SD_WriteBlocks+0x318>)
 80033ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	f043 0210 	orr.w	r2, r3, #16
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e011      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80033f6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e006      	b.n	8003412 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003408:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3748      	adds	r7, #72	@ 0x48
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	004005ff 	.word	0x004005ff

08003420 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800342e:	0f9b      	lsrs	r3, r3, #30
 8003430:	b2da      	uxtb	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	b2da      	uxtb	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344c:	0e1b      	lsrs	r3, r3, #24
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	b2da      	uxtb	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	b2da      	uxtb	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	b2da      	uxtb	r2, r3
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003476:	b2da      	uxtb	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003480:	0d1b      	lsrs	r3, r3, #20
 8003482:	b29a      	uxth	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	b2da      	uxtb	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800349e:	0bdb      	lsrs	r3, r3, #15
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034b0:	0b9b      	lsrs	r3, r3, #14
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c2:	0b5b      	lsrs	r3, r3, #13
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d4:	0b1b      	lsrs	r3, r3, #12
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2200      	movs	r2, #0
 80034e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d163      	bne.n	80035b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f4:	009a      	lsls	r2, r3, #2
 80034f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034fa:	4013      	ands	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003500:	0f92      	lsrs	r2, r2, #30
 8003502:	431a      	orrs	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350c:	0edb      	lsrs	r3, r3, #27
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	b2da      	uxtb	r2, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351e:	0e1b      	lsrs	r3, r3, #24
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	b2da      	uxtb	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003530:	0d5b      	lsrs	r3, r3, #21
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	b2da      	uxtb	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003542:	0c9b      	lsrs	r3, r3, #18
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	b2da      	uxtb	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003554:	0bdb      	lsrs	r3, r3, #15
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	b2da      	uxtb	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	7e1b      	ldrb	r3, [r3, #24]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	3302      	adds	r3, #2
 8003578:	2201      	movs	r2, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003582:	fb03 f202 	mul.w	r2, r3, r2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	7a1b      	ldrb	r3, [r3, #8]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80035a4:	0a52      	lsrs	r2, r2, #9
 80035a6:	fb03 f202 	mul.w	r2, r3, r2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80035b6:	e031      	b.n	800361c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11d      	bne.n	80035fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	3301      	adds	r3, #1
 80035dc:	029a      	lsls	r2, r3, #10
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80035fa:	e00f      	b.n	800361c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a58      	ldr	r2, [pc, #352]	@ (8003764 <HAL_SD_GetCardCSD+0x344>)
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e09d      	b.n	8003758 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003620:	0b9b      	lsrs	r3, r3, #14
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003632:	09db      	lsrs	r3, r3, #7
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800363a:	b2da      	uxtb	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800364a:	b2da      	uxtb	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	0fdb      	lsrs	r3, r3, #31
 8003656:	b2da      	uxtb	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003660:	0f5b      	lsrs	r3, r3, #29
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	b2da      	uxtb	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	b2da      	uxtb	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	0d9b      	lsrs	r3, r3, #22
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	0d5b      	lsrs	r3, r3, #21
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	0c1b      	lsrs	r3, r3, #16
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	0bdb      	lsrs	r3, r3, #15
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	0b9b      	lsrs	r3, r3, #14
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	0b5b      	lsrs	r3, r3, #13
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003702:	0b1b      	lsrs	r3, r3, #12
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	b2da      	uxtb	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	b2da      	uxtb	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003746:	b2da      	uxtb	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	004005ff 	.word	0x004005ff

08003768 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f970 	bl	8003ab8 <SD_SendStatus>
 80037d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	0a5b      	lsrs	r3, r3, #9
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80037f6:	693b      	ldr	r3, [r7, #16]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003800:	b5b0      	push	{r4, r5, r7, lr}
 8003802:	b094      	sub	sp, #80	@ 0x50
 8003804:	af04      	add	r7, sp, #16
 8003806:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003808:	2301      	movs	r3, #1
 800380a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fce6 	bl	80041e2 <SDIO_GetPowerState>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800381c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003820:	e0b8      	b.n	8003994 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	2b03      	cmp	r3, #3
 8003828:	d02f      	beq.n	800388a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fecd 	bl	80045ce <SDMMC_CmdSendCID>
 8003834:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <SD_InitCard+0x40>
    {
      return errorstate;
 800383c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383e:	e0a9      	b.n	8003994 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fd10 	bl	800426c <SDIO_GetResponse>
 800384c:	4602      	mov	r2, r0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2104      	movs	r1, #4
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fd07 	bl	800426c <SDIO_GetResponse>
 800385e:	4602      	mov	r2, r0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2108      	movs	r1, #8
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fcfe 	bl	800426c <SDIO_GetResponse>
 8003870:	4602      	mov	r2, r0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	210c      	movs	r1, #12
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fcf5 	bl	800426c <SDIO_GetResponse>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	2b03      	cmp	r3, #3
 8003890:	d00d      	beq.n	80038ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f107 020e 	add.w	r2, r7, #14
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fed3 	bl	8004648 <SDMMC_CmdSetRelAdd>
 80038a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <SD_InitCard+0xae>
    {
      return errorstate;
 80038aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ac:	e072      	b.n	8003994 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d036      	beq.n	8003924 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80038b6:	89fb      	ldrh	r3, [r7, #14]
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f000 fe9d 	bl	800460a <SDMMC_CmdSendCSD>
 80038d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80038d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038da:	e05b      	b.n	8003994 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fcc2 	bl	800426c <SDIO_GetResponse>
 80038e8:	4602      	mov	r2, r0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2104      	movs	r1, #4
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fcb9 	bl	800426c <SDIO_GetResponse>
 80038fa:	4602      	mov	r2, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2108      	movs	r1, #8
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fcb0 	bl	800426c <SDIO_GetResponse>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	210c      	movs	r1, #12
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fca7 	bl	800426c <SDIO_GetResponse>
 800391e:	4602      	mov	r2, r0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2104      	movs	r1, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fc9e 	bl	800426c <SDIO_GetResponse>
 8003930:	4603      	mov	r3, r0
 8003932:	0d1a      	lsrs	r2, r3, #20
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fd6e 	bl	8003420 <HAL_SD_GetCardCSD>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800394a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800394e:	e021      	b.n	8003994 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	2200      	movs	r2, #0
 800395c:	461c      	mov	r4, r3
 800395e:	4615      	mov	r5, r2
 8003960:	4622      	mov	r2, r4
 8003962:	462b      	mov	r3, r5
 8003964:	4608      	mov	r0, r1
 8003966:	f000 fd8d 	bl	8004484 <SDMMC_CmdSelDesel>
 800396a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800396c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <SD_InitCard+0x176>
  {
    return errorstate;
 8003972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003974:	e00e      	b.n	8003994 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681d      	ldr	r5, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	466c      	mov	r4, sp
 800397e:	f103 0210 	add.w	r2, r3, #16
 8003982:	ca07      	ldmia	r2, {r0, r1, r2}
 8003984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003988:	3304      	adds	r3, #4
 800398a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800398c:	4628      	mov	r0, r5
 800398e:	f000 fbd1 	bl	8004134 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3740      	adds	r7, #64	@ 0x40
 8003998:	46bd      	mov	sp, r7
 800399a:	bdb0      	pop	{r4, r5, r7, pc}

0800399c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fd88 	bl	80044ca <SDMMC_CmdGoIdleState>
 80039ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	e072      	b.n	8003aac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fd9b 	bl	8004506 <SDMMC_CmdOperCond>
 80039d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fd71 	bl	80044ca <SDMMC_CmdGoIdleState>
 80039e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	e05b      	b.n	8003aac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d137      	bne.n	8003a72 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fd9b 	bl	8004544 <SDMMC_CmdAppCommand>
 8003a0e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02d      	beq.n	8003a72 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a16:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a1a:	e047      	b.n	8003aac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fd8e 	bl	8004544 <SDMMC_CmdAppCommand>
 8003a28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <SD_PowerON+0x98>
    {
      return errorstate;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	e03b      	b.n	8003aac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	491e      	ldr	r1, [pc, #120]	@ (8003ab4 <SD_PowerON+0x118>)
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fda4 	bl	8004588 <SDMMC_CmdAppOperCommand>
 8003a40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a4c:	e02e      	b.n	8003aac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fc09 	bl	800426c <SDIO_GetResponse>
 8003a5a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	0fdb      	lsrs	r3, r3, #31
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <SD_PowerON+0xcc>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <SD_PowerON+0xce>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]

    count++;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d802      	bhi.n	8003a82 <SD_PowerON+0xe6>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0cc      	beq.n	8003a1c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d902      	bls.n	8003a92 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003a8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a90:	e00c      	b.n	8003aac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003aa2:	e002      	b.n	8003aaa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	c1100000 	.word	0xc1100000

08003ab8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ac8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003acc:	e018      	b.n	8003b00 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f000 fdd5 	bl	800468a <SDMMC_CmdSendStatus>
 8003ae0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <SD_SendStatus+0x34>
  {
    return errorstate;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	e009      	b.n	8003b00 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fbba 	bl	800426c <SDIO_GetResponse>
 8003af8:	4602      	mov	r2, r0
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07b      	b.n	8003c12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2a:	d009      	beq.n	8003b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
 8003b32:	e005      	b.n	8003b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fdfa 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc4:	ea42 0103 	orr.w	r1, r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0104 	and.w	r1, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	f003 0210 	and.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b08c      	sub	sp, #48	@ 0x30
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x26>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e198      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x358>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c48:	f7fd ffee 	bl	8001c28 <HAL_GetTick>
 8003c4c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c5e:	887b      	ldrh	r3, [r7, #2]
 8003c60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d00f      	beq.n	8003c8a <HAL_SPI_TransmitReceive+0x70>
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c70:	d107      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x68>
 8003c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d003      	beq.n	8003c8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c88:	e16d      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x82>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x82>
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ca2:	e160      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d003      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	887a      	ldrh	r2, [r7, #2]
 8003cce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	887a      	ldrh	r2, [r7, #2]
 8003cda:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	d007      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d14:	d17c      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x10a>
 8003d1e:	8b7b      	ldrh	r3, [r7, #26]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d16a      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d48:	e057      	b.n	8003dfa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d11b      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x176>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x176>
 8003d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d113      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d78:	1c9a      	adds	r2, r3, #2
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d119      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x1b8>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d014      	beq.n	8003dd2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	b292      	uxth	r2, r2
 8003db4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dd2:	f7fd ff29 	bl	8001c28 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d80b      	bhi.n	8003dfa <HAL_SPI_TransmitReceive+0x1e0>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d007      	beq.n	8003dfa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003df8:	e0b5      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1a2      	bne.n	8003d4a <HAL_SPI_TransmitReceive+0x130>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d19d      	bne.n	8003d4a <HAL_SPI_TransmitReceive+0x130>
 8003e0e:	e080      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_SPI_TransmitReceive+0x204>
 8003e18:	8b7b      	ldrh	r3, [r7, #26]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d16f      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	7812      	ldrb	r2, [r2, #0]
 8003e2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e44:	e05b      	b.n	8003efe <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d11c      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x274>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d017      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x274>
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d114      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	7812      	ldrb	r2, [r2, #0]
 8003e70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d119      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x2b6>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d014      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ed0:	f7fd feaa 	bl	8001c28 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d803      	bhi.n	8003ee8 <HAL_SPI_TransmitReceive+0x2ce>
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d102      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x2d4>
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003efc:	e033      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d19e      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x22c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d199      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8b8 	bl	800408c <SPI_EndRxTxTransaction>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003f2e:	e01a      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5c:	e003      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3730      	adds	r7, #48	@ 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f8c:	f7fd fe4c 	bl	8001c28 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	4413      	add	r3, r2
 8003f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f9c:	f7fd fe44 	bl	8001c28 <HAL_GetTick>
 8003fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fa2:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	015b      	lsls	r3, r3, #5
 8003fa8:	0d1b      	lsrs	r3, r3, #20
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb2:	e054      	b.n	800405e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d050      	beq.n	800405e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fbc:	f7fd fe34 	bl	8001c28 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d902      	bls.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d13d      	bne.n	800404e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fea:	d111      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff4:	d004      	beq.n	8004000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffe:	d107      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004018:	d10f      	bne.n	800403a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e017      	b.n	800407e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3b01      	subs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	429a      	cmp	r2, r3
 800407a:	d19b      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000004 	.word	0x20000004

0800408c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2201      	movs	r2, #1
 80040a0:	2102      	movs	r1, #2
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff ff6a 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e032      	b.n	8004124 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040be:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <SPI_EndRxTxTransaction+0xa0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <SPI_EndRxTxTransaction+0xa4>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	0d5b      	lsrs	r3, r3, #21
 80040ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040dc:	d112      	bne.n	8004104 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2180      	movs	r1, #128	@ 0x80
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff ff47 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	3b01      	subs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411a:	2b80      	cmp	r3, #128	@ 0x80
 800411c:	d0f2      	beq.n	8004104 <SPI_EndRxTxTransaction+0x78>
 800411e:	e000      	b.n	8004122 <SPI_EndRxTxTransaction+0x96>
        break;
 8004120:	bf00      	nop
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000004 	.word	0x20000004
 8004130:	165e9f81 	.word	0x165e9f81

08004134 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004134:	b084      	sub	sp, #16
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	f107 001c 	add.w	r0, r7, #28
 8004142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800414a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800414c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800414e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004152:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004156:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800415a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800415e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800416e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	b004      	add	sp, #16
 8004188:	4770      	bx	lr

0800418a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2203      	movs	r2, #3
 80041d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0303 	and.w	r3, r3, #3
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800421c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004222:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004228:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004238:	f023 030f 	bic.w	r3, r3, #15
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	b2db      	uxtb	r3, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3314      	adds	r3, #20
 800427a:	461a      	mov	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
}  
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042b8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80042be:	431a      	orrs	r2, r3
                       Data->DPSM);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80042c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0

}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b088      	sub	sp, #32
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80042f8:	2310      	movs	r3, #16
 80042fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042fc:	2340      	movs	r3, #64	@ 0x40
 80042fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004308:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff74 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	2110      	movs	r1, #16
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f9d7 	bl	80046d0 <SDMMC_GetCmdResp1>
 8004322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004324:	69fb      	ldr	r3, [r7, #28]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b088      	sub	sp, #32
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800433c:	2311      	movs	r3, #17
 800433e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004340:	2340      	movs	r3, #64	@ 0x40
 8004342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004348:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800434c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	4619      	mov	r1, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff52 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800435a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435e:	2111      	movs	r1, #17
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f9b5 	bl	80046d0 <SDMMC_GetCmdResp1>
 8004366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004368:	69fb      	ldr	r3, [r7, #28]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b088      	sub	sp, #32
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004380:	2312      	movs	r3, #18
 8004382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004384:	2340      	movs	r3, #64	@ 0x40
 8004386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800438c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004392:	f107 0308 	add.w	r3, r7, #8
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff30 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	2112      	movs	r1, #18
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f993 	bl	80046d0 <SDMMC_GetCmdResp1>
 80043aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043ac:	69fb      	ldr	r3, [r7, #28]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80043c4:	2318      	movs	r3, #24
 80043c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043c8:	2340      	movs	r3, #64	@ 0x40
 80043ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ff0e 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80043e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e6:	2118      	movs	r1, #24
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f971 	bl	80046d0 <SDMMC_GetCmdResp1>
 80043ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043f0:	69fb      	ldr	r3, [r7, #28]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b088      	sub	sp, #32
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004408:	2319      	movs	r3, #25
 800440a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800440c:	2340      	movs	r3, #64	@ 0x40
 800440e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004418:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800441a:	f107 0308 	add.w	r3, r7, #8
 800441e:	4619      	mov	r1, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff feec 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442a:	2119      	movs	r1, #25
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f94f 	bl	80046d0 <SDMMC_GetCmdResp1>
 8004432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004434:	69fb      	ldr	r3, [r7, #28]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800444c:	230c      	movs	r3, #12
 800444e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004450:	2340      	movs	r3, #64	@ 0x40
 8004452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800445c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800445e:	f107 0308 	add.w	r3, r7, #8
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff feca 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800446a:	4a05      	ldr	r2, [pc, #20]	@ (8004480 <SDMMC_CmdStopTransfer+0x40>)
 800446c:	210c      	movs	r1, #12
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f92e 	bl	80046d0 <SDMMC_GetCmdResp1>
 8004474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004476:	69fb      	ldr	r3, [r7, #28]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	05f5e100 	.word	0x05f5e100

08004484 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	@ 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004494:	2307      	movs	r3, #7
 8004496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004498:	2340      	movs	r3, #64	@ 0x40
 800449a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044a4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044a6:	f107 0310 	add.w	r3, r7, #16
 80044aa:	4619      	mov	r1, r3
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fea6 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80044b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b6:	2107      	movs	r1, #7
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f909 	bl	80046d0 <SDMMC_GetCmdResp1>
 80044be:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3728      	adds	r7, #40	@ 0x28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044e8:	f107 0308 	add.w	r3, r7, #8
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fe85 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb23 	bl	8004b40 <SDMMC_GetCmdError>
 80044fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044fc:	69fb      	ldr	r3, [r7, #28]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b088      	sub	sp, #32
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800450e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004514:	2308      	movs	r3, #8
 8004516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004518:	2340      	movs	r3, #64	@ 0x40
 800451a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004524:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fe66 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fab6 	bl	8004aa4 <SDMMC_GetCmdResp7>
 8004538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800453a:	69fb      	ldr	r3, [r7, #28]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004552:	2337      	movs	r3, #55	@ 0x37
 8004554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004556:	2340      	movs	r3, #64	@ 0x40
 8004558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800455e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004562:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004564:	f107 0308 	add.w	r3, r7, #8
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fe47 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004574:	2137      	movs	r1, #55	@ 0x37
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8aa 	bl	80046d0 <SDMMC_GetCmdResp1>
 800457c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800457e:	69fb      	ldr	r3, [r7, #28]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800459c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800459e:	2329      	movs	r3, #41	@ 0x29
 80045a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045a2:	2340      	movs	r3, #64	@ 0x40
 80045a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fe21 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f9bd 	bl	800493c <SDMMC_GetCmdResp3>
 80045c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045c4:	69fb      	ldr	r3, [r7, #28]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80045da:	2302      	movs	r3, #2
 80045dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80045de:	23c0      	movs	r3, #192	@ 0xc0
 80045e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fe03 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f957 	bl	80048ac <SDMMC_GetCmdResp2>
 80045fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004600:	69fb      	ldr	r3, [r7, #28]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b088      	sub	sp, #32
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004618:	2309      	movs	r3, #9
 800461a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800461c:	23c0      	movs	r3, #192	@ 0xc0
 800461e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fde4 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f938 	bl	80048ac <SDMMC_GetCmdResp2>
 800463c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800463e:	69fb      	ldr	r3, [r7, #28]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3720      	adds	r7, #32
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004656:	2303      	movs	r3, #3
 8004658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800465a:	2340      	movs	r3, #64	@ 0x40
 800465c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004666:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004668:	f107 0308 	add.w	r3, r7, #8
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fdc5 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	2103      	movs	r1, #3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f99d 	bl	80049b8 <SDMMC_GetCmdResp6>
 800467e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004680:	69fb      	ldr	r3, [r7, #28]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b088      	sub	sp, #32
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004698:	230d      	movs	r3, #13
 800469a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800469c:	2340      	movs	r3, #64	@ 0x40
 800469e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fda4 	bl	80041fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80046b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ba:	210d      	movs	r1, #13
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f807 	bl	80046d0 <SDMMC_GetCmdResp1>
 80046c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046c4:	69fb      	ldr	r3, [r7, #28]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	460b      	mov	r3, r1
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80046de:	4b70      	ldr	r3, [pc, #448]	@ (80048a0 <SDMMC_GetCmdResp1+0x1d0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a70      	ldr	r2, [pc, #448]	@ (80048a4 <SDMMC_GetCmdResp1+0x1d4>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	0a5a      	lsrs	r2, r3, #9
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	fb02 f303 	mul.w	r3, r2, r3
 80046f0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	61fa      	str	r2, [r7, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80046fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004700:	e0c9      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004706:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ef      	beq.n	80046f2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ea      	bne.n	80046f2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2204      	movs	r2, #4
 800472c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800472e:	2304      	movs	r3, #4
 8004730:	e0b1      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004744:	2301      	movs	r3, #1
 8004746:	e0a6      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	22c5      	movs	r2, #197	@ 0xc5
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fd7f 	bl	8004252 <SDIO_GetCommandResponse>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	7afb      	ldrb	r3, [r7, #11]
 800475a:	4293      	cmp	r3, r2
 800475c:	d001      	beq.n	8004762 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800475e:	2301      	movs	r3, #1
 8004760:	e099      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004762:	2100      	movs	r1, #0
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fd81 	bl	800426c <SDIO_GetResponse>
 800476a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4b4e      	ldr	r3, [pc, #312]	@ (80048a8 <SDMMC_GetCmdResp1+0x1d8>)
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004776:	2300      	movs	r3, #0
 8004778:	e08d      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	da02      	bge.n	8004786 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004784:	e087      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004790:	2340      	movs	r3, #64	@ 0x40
 8004792:	e080      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	e079      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80047ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047b0:	e071      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80047bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047c0:	e069      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80047cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047d0:	e061      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80047dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047e0:	e059      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80047ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047f0:	e051      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80047fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004800:	e049      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800480c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004810:	e041      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800481c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004820:	e039      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800482c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004830:	e031      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800483c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004840:	e029      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800484c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004850:	e021      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800485c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004860:	e019      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800486c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004870:	e011      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800487c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004880:	e009      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800488c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004890:	e001      	b.n	8004896 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004892:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000004 	.word	0x20000004
 80048a4:	10624dd3 	.word	0x10624dd3
 80048a8:	fdffe008 	.word	0xfdffe008

080048ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004934 <SDMMC_GetCmdResp2+0x88>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <SDMMC_GetCmdResp2+0x8c>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0a5b      	lsrs	r3, r3, #9
 80048c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1e5a      	subs	r2, r3, #1
 80048ce:	60fa      	str	r2, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80048d8:	e026      	b.n	8004928 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0ef      	beq.n	80048ca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ea      	bne.n	80048ca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2204      	movs	r2, #4
 8004904:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004906:	2304      	movs	r3, #4
 8004908:	e00e      	b.n	8004928 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d004      	beq.n	8004920 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800491c:	2301      	movs	r3, #1
 800491e:	e003      	b.n	8004928 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	22c5      	movs	r2, #197	@ 0xc5
 8004924:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	20000004 	.word	0x20000004
 8004938:	10624dd3 	.word	0x10624dd3

0800493c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004944:	4b1a      	ldr	r3, [pc, #104]	@ (80049b0 <SDMMC_GetCmdResp3+0x74>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1a      	ldr	r2, [pc, #104]	@ (80049b4 <SDMMC_GetCmdResp3+0x78>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0a5b      	lsrs	r3, r3, #9
 8004950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1e5a      	subs	r2, r3, #1
 800495e:	60fa      	str	r2, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004964:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004968:	e01b      	b.n	80049a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ef      	beq.n	800495a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ea      	bne.n	800495a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2204      	movs	r2, #4
 8004994:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004996:	2304      	movs	r3, #4
 8004998:	e003      	b.n	80049a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	22c5      	movs	r2, #197	@ 0xc5
 800499e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000004 	.word	0x20000004
 80049b4:	10624dd3 	.word	0x10624dd3

080049b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	460b      	mov	r3, r1
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049c6:	4b35      	ldr	r3, [pc, #212]	@ (8004a9c <SDMMC_GetCmdResp6+0xe4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a35      	ldr	r2, [pc, #212]	@ (8004aa0 <SDMMC_GetCmdResp6+0xe8>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	1e5a      	subs	r2, r3, #1
 80049e0:	61fa      	str	r2, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80049ea:	e052      	b.n	8004a92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ef      	beq.n	80049dc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ea      	bne.n	80049dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2204      	movs	r2, #4
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a18:	2304      	movs	r3, #4
 8004a1a:	e03a      	b.n	8004a92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d004      	beq.n	8004a32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e02f      	b.n	8004a92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fc0d 	bl	8004252 <SDIO_GetCommandResponse>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d001      	beq.n	8004a46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e025      	b.n	8004a92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	22c5      	movs	r2, #197	@ 0xc5
 8004a4a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff fc0c 	bl	800426c <SDIO_GetResponse>
 8004a54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	0c1b      	lsrs	r3, r3, #16
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e011      	b.n	8004a92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a7c:	e009      	b.n	8004a92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a8c:	e001      	b.n	8004a92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000004 	.word	0x20000004
 8004aa0:	10624dd3 	.word	0x10624dd3

08004aa4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004aac:	4b22      	ldr	r3, [pc, #136]	@ (8004b38 <SDMMC_GetCmdResp7+0x94>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	@ (8004b3c <SDMMC_GetCmdResp7+0x98>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0a5b      	lsrs	r3, r3, #9
 8004ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004abc:	fb02 f303 	mul.w	r3, r2, r3
 8004ac0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1e5a      	subs	r2, r3, #1
 8004ac6:	60fa      	str	r2, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004acc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004ad0:	e02c      	b.n	8004b2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ef      	beq.n	8004ac2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1ea      	bne.n	8004ac2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d004      	beq.n	8004b02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2204      	movs	r2, #4
 8004afc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004afe:	2304      	movs	r3, #4
 8004b00:	e014      	b.n	8004b2c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e009      	b.n	8004b2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2240      	movs	r2, #64	@ 0x40
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b2a:	2300      	movs	r3, #0
  
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20000004 	.word	0x20000004
 8004b3c:	10624dd3 	.word	0x10624dd3

08004b40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b48:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <SDMMC_GetCmdError+0x50>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a11      	ldr	r2, [pc, #68]	@ (8004b94 <SDMMC_GetCmdError+0x54>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	0a5b      	lsrs	r3, r3, #9
 8004b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1e5a      	subs	r2, r3, #1
 8004b62:	60fa      	str	r2, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004b6c:	e009      	b.n	8004b82 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f1      	beq.n	8004b5e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	22c5      	movs	r2, #197	@ 0xc5
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000004 	.word	0x20000004
 8004b94:	10624dd3 	.word	0x10624dd3

08004b98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004b9c:	4904      	ldr	r1, [pc, #16]	@ (8004bb0 <MX_FATFS_Init+0x18>)
 8004b9e:	4805      	ldr	r0, [pc, #20]	@ (8004bb4 <MX_FATFS_Init+0x1c>)
 8004ba0:	f003 fb5e 	bl	8008260 <FATFS_LinkDriver>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4b03      	ldr	r3, [pc, #12]	@ (8004bb8 <MX_FATFS_Init+0x20>)
 8004baa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	200023e4 	.word	0x200023e4
 8004bb4:	08012b8c 	.word	0x08012b8c
 8004bb8:	200023e0 	.word	0x200023e0

08004bbc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004bc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004bd6:	f000 f86b 	bl	8004cb0 <BSP_SD_IsDetected>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e005      	b.n	8004bf0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004be4:	4804      	ldr	r0, [pc, #16]	@ (8004bf8 <BSP_SD_Init+0x2c>)
 8004be6:	f7fd fff7 	bl	8002bd8 <HAL_SD_Init>
 8004bea:	4603      	mov	r3, r0
 8004bec:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004bee:	79fb      	ldrb	r3, [r7, #7]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	200022f8 	.word	0x200022f8

08004bfc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	4806      	ldr	r0, [pc, #24]	@ (8004c34 <BSP_SD_ReadBlocks+0x38>)
 8004c1a:	f7fe f88d 	bl	8002d38 <HAL_SD_ReadBlocks>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200022f8 	.word	0x200022f8

08004c38 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	4806      	ldr	r0, [pc, #24]	@ (8004c70 <BSP_SD_WriteBlocks+0x38>)
 8004c56:	f7fe fa55 	bl	8003104 <HAL_SD_WriteBlocks>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	200022f8 	.word	0x200022f8

08004c74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004c78:	4805      	ldr	r0, [pc, #20]	@ (8004c90 <BSP_SD_GetCardState+0x1c>)
 8004c7a:	f7fe fda1 	bl	80037c0 <HAL_SD_GetCardState>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	200022f8 	.word	0x200022f8

08004c94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4803      	ldr	r0, [pc, #12]	@ (8004cac <BSP_SD_GetCardInfo+0x18>)
 8004ca0:	f7fe fd62 	bl	8003768 <HAL_SD_GetCardInfo>
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	200022f8 	.word	0x200022f8

08004cb0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	b2db      	uxtb	r3, r3
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <SD_CheckStatus+0x38>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004cdc:	f7ff ffca 	bl	8004c74 <BSP_SD_GetCardState>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <SD_CheckStatus+0x38>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <SD_CheckStatus+0x38>)
 8004cf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004cf6:	4b03      	ldr	r3, [pc, #12]	@ (8004d04 <SD_CheckStatus+0x38>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b2db      	uxtb	r3, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	2000001d 	.word	0x2000001d

08004d08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <SD_initialize+0x38>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004d18:	f7ff ff58 	bl	8004bcc <BSP_SD_Init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ffd1 	bl	8004ccc <SD_CheckStatus>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <SD_initialize+0x38>)
 8004d30:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004d32:	4b03      	ldr	r3, [pc, #12]	@ (8004d40 <SD_initialize+0x38>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b2db      	uxtb	r3, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	2000001d 	.word	0x2000001d

08004d44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ffbb 	bl	8004ccc <SD_CheckStatus>
 8004d56:	4603      	mov	r3, r0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004d74:	f04f 33ff 	mov.w	r3, #4294967295
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	68b8      	ldr	r0, [r7, #8]
 8004d7e:	f7ff ff3d 	bl	8004bfc <BSP_SD_ReadBlocks>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d107      	bne.n	8004d98 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004d88:	bf00      	nop
 8004d8a:	f7ff ff73 	bl	8004c74 <BSP_SD_GetCardState>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1fa      	bne.n	8004d8a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b086      	sub	sp, #24
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	4603      	mov	r3, r0
 8004db0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f7ff ff3a 	bl	8004c38 <BSP_SD_WriteBlocks>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d107      	bne.n	8004dda <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004dca:	bf00      	nop
 8004dcc:	f7ff ff52 	bl	8004c74 <BSP_SD_GetCardState>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1fa      	bne.n	8004dcc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08c      	sub	sp, #48	@ 0x30
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	603a      	str	r2, [r7, #0]
 8004dee:	71fb      	strb	r3, [r7, #7]
 8004df0:	460b      	mov	r3, r1
 8004df2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004dfa:	4b25      	ldr	r3, [pc, #148]	@ (8004e90 <SD_ioctl+0xac>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <SD_ioctl+0x28>
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e03c      	b.n	8004e86 <SD_ioctl+0xa2>

  switch (cmd)
 8004e0c:	79bb      	ldrb	r3, [r7, #6]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d834      	bhi.n	8004e7c <SD_ioctl+0x98>
 8004e12:	a201      	add	r2, pc, #4	@ (adr r2, 8004e18 <SD_ioctl+0x34>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e31 	.word	0x08004e31
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e63 	.word	0x08004e63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004e2e:	e028      	b.n	8004e82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e30:	f107 030c 	add.w	r3, r7, #12
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff2d 	bl	8004c94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004e46:	e01c      	b.n	8004e82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ff21 	bl	8004c94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004e60:	e00f      	b.n	8004e82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e62:	f107 030c 	add.w	r3, r7, #12
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff ff14 	bl	8004c94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	0a5a      	lsrs	r2, r3, #9
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004e7a:	e002      	b.n	8004e82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3730      	adds	r7, #48	@ 0x30
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	2000001d 	.word	0x2000001d

08004e94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <disk_status+0x30>)
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	79fa      	ldrb	r2, [r7, #7]
 8004eac:	4905      	ldr	r1, [pc, #20]	@ (8004ec4 <disk_status+0x30>)
 8004eae:	440a      	add	r2, r1
 8004eb0:	7a12      	ldrb	r2, [r2, #8]
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4798      	blx	r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20002610 	.word	0x20002610

08004ec8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <disk_initialize+0x4c>)
 8004eda:	5cd3      	ldrb	r3, [r2, r3]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d114      	bne.n	8004f0a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f14 <disk_initialize+0x4c>)
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	79fa      	ldrb	r2, [r7, #7]
 8004eee:	4909      	ldr	r1, [pc, #36]	@ (8004f14 <disk_initialize+0x4c>)
 8004ef0:	440a      	add	r2, r1
 8004ef2:	7a12      	ldrb	r2, [r2, #8]
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	4a03      	ldr	r2, [pc, #12]	@ (8004f14 <disk_initialize+0x4c>)
 8004f06:	2101      	movs	r1, #1
 8004f08:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20002610 	.word	0x20002610

08004f18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f54 <disk_read+0x3c>)
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	689c      	ldr	r4, [r3, #8]
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	4a07      	ldr	r2, [pc, #28]	@ (8004f54 <disk_read+0x3c>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	7a18      	ldrb	r0, [r3, #8]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	47a0      	blx	r4
 8004f44:	4603      	mov	r3, r0
 8004f46:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20002610 	.word	0x20002610

08004f58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f94 <disk_write+0x3c>)
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68dc      	ldr	r4, [r3, #12]
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	4a07      	ldr	r2, [pc, #28]	@ (8004f94 <disk_write+0x3c>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	7a18      	ldrb	r0, [r3, #8]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	47a0      	blx	r4
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20002610 	.word	0x20002610

08004f98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	603a      	str	r2, [r7, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	4a09      	ldr	r2, [pc, #36]	@ (8004fd0 <disk_ioctl+0x38>)
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	79fa      	ldrb	r2, [r7, #7]
 8004fb6:	4906      	ldr	r1, [pc, #24]	@ (8004fd0 <disk_ioctl+0x38>)
 8004fb8:	440a      	add	r2, r1
 8004fba:	7a10      	ldrb	r0, [r2, #8]
 8004fbc:	79b9      	ldrb	r1, [r7, #6]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	4798      	blx	r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20002610 	.word	0x20002610

08004fd4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004fe4:	89fb      	ldrh	r3, [r7, #14]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	b21a      	sxth	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b21b      	sxth	r3, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3303      	adds	r3, #3
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	3202      	adds	r2, #2
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	3201      	adds	r2, #1
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
	return rv;
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	887b      	ldrh	r3, [r7, #2]
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	0a1b      	lsrs	r3, r3, #8
 80050be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	1c53      	adds	r3, r2, #1
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	1c59      	adds	r1, r3, #1
 80050fc:	6179      	str	r1, [r7, #20]
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3b01      	subs	r3, #1
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f1      	bne.n	80050f2 <mem_cpy+0x1a>
	}
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800511a:	b480      	push	{r7}
 800511c:	b087      	sub	sp, #28
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	617a      	str	r2, [r7, #20]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3b01      	subs	r3, #1
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f3      	bne.n	800512a <mem_set+0x10>
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	@ 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	61fa      	str	r2, [r7, #28]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	61ba      	str	r2, [r7, #24]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	1acb      	subs	r3, r1, r3
 800517c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3b01      	subs	r3, #1
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <mem_cmp+0x40>
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0eb      	beq.n	8005168 <mem_cmp+0x18>

	return r;
 8005190:	697b      	ldr	r3, [r7, #20]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	@ 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80051a8:	e002      	b.n	80051b0 <chk_chr+0x12>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3301      	adds	r3, #1
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <chk_chr+0x26>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d1f2      	bne.n	80051aa <chk_chr+0xc>
	return *str;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	781b      	ldrb	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e029      	b.n	800523c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80051e8:	4a27      	ldr	r2, [pc, #156]	@ (8005288 <chk_lock+0xb4>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	4413      	add	r3, r2
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01d      	beq.n	8005232 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051f6:	4a24      	ldr	r2, [pc, #144]	@ (8005288 <chk_lock+0xb4>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	4413      	add	r3, r2
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d116      	bne.n	8005236 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005208:	4a1f      	ldr	r2, [pc, #124]	@ (8005288 <chk_lock+0xb4>)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005218:	429a      	cmp	r2, r3
 800521a:	d10c      	bne.n	8005236 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800521c:	4a1a      	ldr	r2, [pc, #104]	@ (8005288 <chk_lock+0xb4>)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	4413      	add	r3, r2
 8005224:	3308      	adds	r3, #8
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800522c:	429a      	cmp	r2, r3
 800522e:	d102      	bne.n	8005236 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005230:	e007      	b.n	8005242 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d9d2      	bls.n	80051e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d109      	bne.n	800525c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <chk_lock+0x80>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d101      	bne.n	8005258 <chk_lock+0x84>
 8005254:	2300      	movs	r3, #0
 8005256:	e010      	b.n	800527a <chk_lock+0xa6>
 8005258:	2312      	movs	r3, #18
 800525a:	e00e      	b.n	800527a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d108      	bne.n	8005274 <chk_lock+0xa0>
 8005262:	4a09      	ldr	r2, [pc, #36]	@ (8005288 <chk_lock+0xb4>)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	330c      	adds	r3, #12
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005272:	d101      	bne.n	8005278 <chk_lock+0xa4>
 8005274:	2310      	movs	r3, #16
 8005276:	e000      	b.n	800527a <chk_lock+0xa6>
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	200023f0 	.word	0x200023f0

0800528c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	e002      	b.n	800529e <enq_lock+0x12>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d806      	bhi.n	80052b2 <enq_lock+0x26>
 80052a4:	4a09      	ldr	r2, [pc, #36]	@ (80052cc <enq_lock+0x40>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4413      	add	r3, r2
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f2      	bne.n	8005298 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	200023f0 	.word	0x200023f0

080052d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e01f      	b.n	8005320 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80052e0:	4a41      	ldr	r2, [pc, #260]	@ (80053e8 <inc_lock+0x118>)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	4413      	add	r3, r2
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d113      	bne.n	800531a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80052f2:	4a3d      	ldr	r2, [pc, #244]	@ (80053e8 <inc_lock+0x118>)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4413      	add	r3, r2
 80052fa:	3304      	adds	r3, #4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005302:	429a      	cmp	r2, r3
 8005304:	d109      	bne.n	800531a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005306:	4a38      	ldr	r2, [pc, #224]	@ (80053e8 <inc_lock+0x118>)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	4413      	add	r3, r2
 800530e:	3308      	adds	r3, #8
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005316:	429a      	cmp	r2, r3
 8005318:	d006      	beq.n	8005328 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d9dc      	bls.n	80052e0 <inc_lock+0x10>
 8005326:	e000      	b.n	800532a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005328:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d132      	bne.n	8005396 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e002      	b.n	800533c <inc_lock+0x6c>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d806      	bhi.n	8005350 <inc_lock+0x80>
 8005342:	4a29      	ldr	r2, [pc, #164]	@ (80053e8 <inc_lock+0x118>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	4413      	add	r3, r2
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f2      	bne.n	8005336 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d101      	bne.n	800535a <inc_lock+0x8a>
 8005356:	2300      	movs	r3, #0
 8005358:	e040      	b.n	80053dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4922      	ldr	r1, [pc, #136]	@ (80053e8 <inc_lock+0x118>)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	440b      	add	r3, r1
 8005366:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	491e      	ldr	r1, [pc, #120]	@ (80053e8 <inc_lock+0x118>)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	440b      	add	r3, r1
 8005374:	3304      	adds	r3, #4
 8005376:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	491a      	ldr	r1, [pc, #104]	@ (80053e8 <inc_lock+0x118>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	440b      	add	r3, r1
 8005384:	3308      	adds	r3, #8
 8005386:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005388:	4a17      	ldr	r2, [pc, #92]	@ (80053e8 <inc_lock+0x118>)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	4413      	add	r3, r2
 8005390:	330c      	adds	r3, #12
 8005392:	2200      	movs	r2, #0
 8005394:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <inc_lock+0xe0>
 800539c:	4a12      	ldr	r2, [pc, #72]	@ (80053e8 <inc_lock+0x118>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	330c      	adds	r3, #12
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <inc_lock+0xe0>
 80053ac:	2300      	movs	r3, #0
 80053ae:	e015      	b.n	80053dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <inc_lock+0xf8>
 80053b6:	4a0c      	ldr	r2, [pc, #48]	@ (80053e8 <inc_lock+0x118>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4413      	add	r3, r2
 80053be:	330c      	adds	r3, #12
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	e001      	b.n	80053cc <inc_lock+0xfc>
 80053c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053cc:	4906      	ldr	r1, [pc, #24]	@ (80053e8 <inc_lock+0x118>)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	440b      	add	r3, r1
 80053d4:	330c      	adds	r3, #12
 80053d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	200023f0 	.word	0x200023f0

080053ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d825      	bhi.n	800544c <dec_lock+0x60>
		n = Files[i].ctr;
 8005400:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <dec_lock+0x74>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	4413      	add	r3, r2
 8005408:	330c      	adds	r3, #12
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005414:	d101      	bne.n	800541a <dec_lock+0x2e>
 8005416:	2300      	movs	r3, #0
 8005418:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800541a:	89fb      	ldrh	r3, [r7, #14]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <dec_lock+0x3a>
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	3b01      	subs	r3, #1
 8005424:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005426:	4a0e      	ldr	r2, [pc, #56]	@ (8005460 <dec_lock+0x74>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	4413      	add	r3, r2
 800542e:	330c      	adds	r3, #12
 8005430:	89fa      	ldrh	r2, [r7, #14]
 8005432:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005434:	89fb      	ldrh	r3, [r7, #14]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <dec_lock+0x5a>
 800543a:	4a09      	ldr	r2, [pc, #36]	@ (8005460 <dec_lock+0x74>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4413      	add	r3, r2
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	737b      	strb	r3, [r7, #13]
 800544a:	e001      	b.n	8005450 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800544c:	2302      	movs	r3, #2
 800544e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005450:	7b7b      	ldrb	r3, [r7, #13]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	200023f0 	.word	0x200023f0

08005464 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e010      	b.n	8005494 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005472:	4a0d      	ldr	r2, [pc, #52]	@ (80054a8 <clear_lock+0x44>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d105      	bne.n	800548e <clear_lock+0x2a>
 8005482:	4a09      	ldr	r2, [pc, #36]	@ (80054a8 <clear_lock+0x44>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3301      	adds	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d9eb      	bls.n	8005472 <clear_lock+0xe>
	}
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	200023f0 	.word	0x200023f0

080054ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	78db      	ldrb	r3, [r3, #3]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d034      	beq.n	800552a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7858      	ldrb	r0, [r3, #1]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054d0:	2301      	movs	r3, #1
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	f7ff fd40 	bl	8004f58 <disk_write>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
 80054e2:	e022      	b.n	800552a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	1ad2      	subs	r2, r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d217      	bcs.n	800552a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	789b      	ldrb	r3, [r3, #2]
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	e010      	b.n	8005524 <sync_window+0x78>
					wsect += fs->fsize;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7858      	ldrb	r0, [r3, #1]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005516:	2301      	movs	r3, #1
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	f7ff fd1d 	bl	8004f58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3b01      	subs	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d8eb      	bhi.n	8005502 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d01b      	beq.n	8005584 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ffad 	bl	80054ac <sync_window>
 8005552:	4603      	mov	r3, r0
 8005554:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d113      	bne.n	8005584 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7858      	ldrb	r0, [r3, #1]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005566:	2301      	movs	r3, #1
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	f7ff fcd5 	bl	8004f18 <disk_read>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ff87 	bl	80054ac <sync_window>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d159      	bne.n	800565c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d149      	bne.n	8005644 <sync_fs+0xb4>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	791b      	ldrb	r3, [r3, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d145      	bne.n	8005644 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	899b      	ldrh	r3, [r3, #12]
 80055c2:	461a      	mov	r2, r3
 80055c4:	2100      	movs	r1, #0
 80055c6:	f7ff fda8 	bl	800511a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3338      	adds	r3, #56	@ 0x38
 80055ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80055d2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fd37 	bl	800504a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3338      	adds	r3, #56	@ 0x38
 80055e0:	4921      	ldr	r1, [pc, #132]	@ (8005668 <sync_fs+0xd8>)
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fd4c 	bl	8005080 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3338      	adds	r3, #56	@ 0x38
 80055ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80055f0:	491e      	ldr	r1, [pc, #120]	@ (800566c <sync_fs+0xdc>)
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fd44 	bl	8005080 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3338      	adds	r3, #56	@ 0x38
 80055fc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7ff fd3a 	bl	8005080 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3338      	adds	r3, #56	@ 0x38
 8005610:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7ff fd30 	bl	8005080 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7858      	ldrb	r0, [r3, #1]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005638:	2301      	movs	r3, #1
 800563a:	f7ff fc8d 	bl	8004f58 <disk_write>
			fs->fsi_flag = 0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2200      	movs	r2, #0
 800564a:	2100      	movs	r1, #0
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fca3 	bl	8004f98 <disk_ioctl>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <sync_fs+0xcc>
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	41615252 	.word	0x41615252
 800566c:	61417272 	.word	0x61417272

08005670 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	3b02      	subs	r3, #2
 800567e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	3b02      	subs	r3, #2
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d301      	bcc.n	8005690 <clust2sect+0x20>
 800568c:	2300      	movs	r3, #0
 800568e:	e008      	b.n	80056a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	895b      	ldrh	r3, [r3, #10]
 8005694:	461a      	mov	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	fb03 f202 	mul.w	r2, r3, r2
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	4413      	add	r3, r2
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d904      	bls.n	80056ce <get_fat+0x20>
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80056ce:	2301      	movs	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e0ba      	b.n	800584a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80056d4:	f04f 33ff 	mov.w	r3, #4294967295
 80056d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	f000 8082 	beq.w	80057e8 <get_fat+0x13a>
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	f300 80a6 	bgt.w	8005836 <get_fat+0x188>
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d002      	beq.n	80056f4 <get_fat+0x46>
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d055      	beq.n	800579e <get_fat+0xf0>
 80056f2:	e0a0      	b.n	8005836 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	899b      	ldrh	r3, [r3, #12]
 800570a:	4619      	mov	r1, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005712:	4413      	add	r3, r2
 8005714:	4619      	mov	r1, r3
 8005716:	6938      	ldr	r0, [r7, #16]
 8005718:	f7ff ff0c 	bl	8005534 <move_window>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 808c 	bne.w	800583c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	60fa      	str	r2, [r7, #12]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	8992      	ldrh	r2, [r2, #12]
 800572e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005732:	fb01 f202 	mul.w	r2, r1, r2
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005740:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	899b      	ldrh	r3, [r3, #12]
 800574a:	4619      	mov	r1, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005752:	4413      	add	r3, r2
 8005754:	4619      	mov	r1, r3
 8005756:	6938      	ldr	r0, [r7, #16]
 8005758:	f7ff feec 	bl	8005534 <move_window>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d16e      	bne.n	8005840 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	899b      	ldrh	r3, [r3, #12]
 8005766:	461a      	mov	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	fbb3 f1f2 	udiv	r1, r3, r2
 800576e:	fb01 f202 	mul.w	r2, r1, r2
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4313      	orrs	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <get_fat+0xe6>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	e002      	b.n	800579a <get_fat+0xec>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579a:	617b      	str	r3, [r7, #20]
			break;
 800579c:	e055      	b.n	800584a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	899b      	ldrh	r3, [r3, #12]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	4619      	mov	r1, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80057b2:	4413      	add	r3, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f7ff febc 	bl	8005534 <move_window>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d140      	bne.n	8005844 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	8992      	ldrh	r2, [r2, #12]
 80057d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80057d4:	fb00 f202 	mul.w	r2, r0, r2
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	440b      	add	r3, r1
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fbf9 	bl	8004fd4 <ld_word>
 80057e2:	4603      	mov	r3, r0
 80057e4:	617b      	str	r3, [r7, #20]
			break;
 80057e6:	e030      	b.n	800584a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	899b      	ldrh	r3, [r3, #12]
 80057f0:	089b      	lsrs	r3, r3, #2
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	4619      	mov	r1, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80057fc:	4413      	add	r3, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	6938      	ldr	r0, [r7, #16]
 8005802:	f7ff fe97 	bl	8005534 <move_window>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d11d      	bne.n	8005848 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	8992      	ldrh	r2, [r2, #12]
 800581a:	fbb3 f0f2 	udiv	r0, r3, r2
 800581e:	fb00 f202 	mul.w	r2, r0, r2
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	440b      	add	r3, r1
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fbec 	bl	8005004 <ld_dword>
 800582c:	4603      	mov	r3, r0
 800582e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005832:	617b      	str	r3, [r7, #20]
			break;
 8005834:	e009      	b.n	800584a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005836:	2301      	movs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e006      	b.n	800584a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800583c:	bf00      	nop
 800583e:	e004      	b.n	800584a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005840:	bf00      	nop
 8005842:	e002      	b.n	800584a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005848:	bf00      	nop
		}
	}

	return val;
 800584a:	697b      	ldr	r3, [r7, #20]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b089      	sub	sp, #36	@ 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005860:	2302      	movs	r3, #2
 8005862:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b01      	cmp	r3, #1
 8005868:	f240 8109 	bls.w	8005a7e <put_fat+0x22a>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	f080 8103 	bcs.w	8005a7e <put_fat+0x22a>
		switch (fs->fs_type) {
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b03      	cmp	r3, #3
 800587e:	f000 80b6 	beq.w	80059ee <put_fat+0x19a>
 8005882:	2b03      	cmp	r3, #3
 8005884:	f300 80fb 	bgt.w	8005a7e <put_fat+0x22a>
 8005888:	2b01      	cmp	r3, #1
 800588a:	d003      	beq.n	8005894 <put_fat+0x40>
 800588c:	2b02      	cmp	r3, #2
 800588e:	f000 8083 	beq.w	8005998 <put_fat+0x144>
 8005892:	e0f4      	b.n	8005a7e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4413      	add	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	899b      	ldrh	r3, [r3, #12]
 80058aa:	4619      	mov	r1, r3
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80058b2:	4413      	add	r3, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff fe3c 	bl	8005534 <move_window>
 80058bc:	4603      	mov	r3, r0
 80058be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058c0:	7ffb      	ldrb	r3, [r7, #31]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 80d4 	bne.w	8005a70 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	61ba      	str	r2, [r7, #24]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	8992      	ldrh	r2, [r2, #12]
 80058d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80058dc:	fb00 f202 	mul.w	r2, r0, r2
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	440b      	add	r3, r1
 80058e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <put_fat+0xb8>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b25b      	sxtb	r3, r3
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	b25a      	sxtb	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	b25b      	sxtb	r3, r3
 8005904:	4313      	orrs	r3, r2
 8005906:	b25b      	sxtb	r3, r3
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e001      	b.n	8005910 <put_fat+0xbc>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	899b      	ldrh	r3, [r3, #12]
 8005922:	4619      	mov	r1, r3
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	fbb3 f3f1 	udiv	r3, r3, r1
 800592a:	4413      	add	r3, r2
 800592c:	4619      	mov	r1, r3
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fe00 	bl	8005534 <move_window>
 8005934:	4603      	mov	r3, r0
 8005936:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005938:	7ffb      	ldrb	r3, [r7, #31]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 809a 	bne.w	8005a74 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	899b      	ldrh	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005952:	fb00 f202 	mul.w	r2, r0, r2
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	440b      	add	r3, r1
 800595a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <put_fat+0x11a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	b2db      	uxtb	r3, r3
 800596c:	e00e      	b.n	800598c <put_fat+0x138>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	b25b      	sxtb	r3, r3
 8005974:	f023 030f 	bic.w	r3, r3, #15
 8005978:	b25a      	sxtb	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	b25b      	sxtb	r3, r3
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	b25b      	sxtb	r3, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	b25b      	sxtb	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	70da      	strb	r2, [r3, #3]
			break;
 8005996:	e072      	b.n	8005a7e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	899b      	ldrh	r3, [r3, #12]
 80059a0:	085b      	lsrs	r3, r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	4619      	mov	r1, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ac:	4413      	add	r3, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff fdbf 	bl	8005534 <move_window>
 80059b6:	4603      	mov	r3, r0
 80059b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059ba:	7ffb      	ldrb	r3, [r7, #31]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d15b      	bne.n	8005a78 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	8992      	ldrh	r2, [r2, #12]
 80059ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80059d2:	fb00 f202 	mul.w	r2, r0, r2
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	440b      	add	r3, r1
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	b292      	uxth	r2, r2
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fb32 	bl	800504a <st_word>
			fs->wflag = 1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	70da      	strb	r2, [r3, #3]
			break;
 80059ec:	e047      	b.n	8005a7e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	899b      	ldrh	r3, [r3, #12]
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4619      	mov	r1, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a02:	4413      	add	r3, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff fd94 	bl	8005534 <move_window>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a10:	7ffb      	ldrb	r3, [r7, #31]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d132      	bne.n	8005a7c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	8992      	ldrh	r2, [r2, #12]
 8005a2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a2e:	fb00 f202 	mul.w	r2, r0, r2
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	440b      	add	r3, r1
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fae4 	bl	8005004 <ld_dword>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005a42:	4323      	orrs	r3, r4
 8005a44:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	8992      	ldrh	r2, [r2, #12]
 8005a54:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a58:	fb00 f202 	mul.w	r2, r0, r2
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	440b      	add	r3, r1
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff fb0c 	bl	8005080 <st_dword>
			fs->wflag = 1;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	70da      	strb	r2, [r3, #3]
			break;
 8005a6e:	e006      	b.n	8005a7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a70:	bf00      	nop
 8005a72:	e004      	b.n	8005a7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a74:	bf00      	nop
 8005a76:	e002      	b.n	8005a7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a78:	bf00      	nop
 8005a7a:	e000      	b.n	8005a7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a7c:	bf00      	nop
		}
	}
	return res;
 8005a7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3724      	adds	r7, #36	@ 0x24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd90      	pop	{r4, r7, pc}

08005a88 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d904      	bls.n	8005aae <remove_chain+0x26>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d301      	bcc.n	8005ab2 <remove_chain+0x2a>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e04b      	b.n	8005b4a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	69b8      	ldr	r0, [r7, #24]
 8005ac0:	f7ff fec8 	bl	8005854 <put_fat>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005ac8:	7ffb      	ldrb	r3, [r7, #31]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <remove_chain+0x4a>
 8005ace:	7ffb      	ldrb	r3, [r7, #31]
 8005ad0:	e03b      	b.n	8005b4a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff fdea 	bl	80056ae <get_fat>
 8005ada:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d031      	beq.n	8005b46 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <remove_chain+0x64>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e02e      	b.n	8005b4a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d101      	bne.n	8005af8 <remove_chain+0x70>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e028      	b.n	8005b4a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005af8:	2200      	movs	r2, #0
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	69b8      	ldr	r0, [r7, #24]
 8005afe:	f7ff fea9 	bl	8005854 <put_fat>
 8005b02:	4603      	mov	r3, r0
 8005b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005b06:	7ffb      	ldrb	r3, [r7, #31]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <remove_chain+0x88>
 8005b0c:	7ffb      	ldrb	r3, [r7, #31]
 8005b0e:	e01c      	b.n	8005b4a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	3b02      	subs	r3, #2
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d20b      	bcs.n	8005b36 <remove_chain+0xae>
			fs->free_clst++;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	791b      	ldrb	r3, [r3, #4]
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3c6      	bcc.n	8005ad2 <remove_chain+0x4a>
 8005b44:	e000      	b.n	8005b48 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005b46:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b088      	sub	sp, #32
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10d      	bne.n	8005b84 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <create_chain+0x2c>
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d31b      	bcc.n	8005bb6 <create_chain+0x64>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e018      	b.n	8005bb6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fd91 	bl	80056ae <get_fat>
 8005b8c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d801      	bhi.n	8005b98 <create_chain+0x46>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e070      	b.n	8005c7a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d101      	bne.n	8005ba4 <create_chain+0x52>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e06a      	b.n	8005c7a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d201      	bcs.n	8005bb2 <create_chain+0x60>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e063      	b.n	8005c7a <create_chain+0x128>
		scl = clst;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d307      	bcc.n	8005bda <create_chain+0x88>
				ncl = 2;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d901      	bls.n	8005bda <create_chain+0x88>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e04f      	b.n	8005c7a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005bda:	69f9      	ldr	r1, [r7, #28]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fd66 	bl	80056ae <get_fat>
 8005be2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00e      	beq.n	8005c08 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d003      	beq.n	8005bf8 <create_chain+0xa6>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d101      	bne.n	8005bfc <create_chain+0xaa>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	e03e      	b.n	8005c7a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1da      	bne.n	8005bba <create_chain+0x68>
 8005c04:	2300      	movs	r3, #0
 8005c06:	e038      	b.n	8005c7a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005c08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	6938      	ldr	r0, [r7, #16]
 8005c12:	f7ff fe1f 	bl	8005854 <put_fat>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <create_chain+0xe2>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6938      	ldr	r0, [r7, #16]
 8005c2c:	f7ff fe12 	bl	8005854 <put_fat>
 8005c30:	4603      	mov	r3, r0
 8005c32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d116      	bne.n	8005c68 <create_chain+0x116>
		fs->last_clst = ncl;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	3b02      	subs	r3, #2
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d804      	bhi.n	8005c58 <create_chain+0x106>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	1e5a      	subs	r2, r3, #1
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	791b      	ldrb	r3, [r3, #4]
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	711a      	strb	r2, [r3, #4]
 8005c66:	e007      	b.n	8005c78 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d102      	bne.n	8005c74 <create_chain+0x122>
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c72:	e000      	b.n	8005c76 <create_chain+0x124>
 8005c74:	2301      	movs	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c78:	69fb      	ldr	r3, [r7, #28]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c96:	3304      	adds	r3, #4
 8005c98:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	899b      	ldrh	r3, [r3, #12]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	8952      	ldrh	r2, [r2, #10]
 8005caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1d1a      	adds	r2, r3, #4
 8005cb4:	613a      	str	r2, [r7, #16]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <clmt_clust+0x42>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e010      	b.n	8005ce6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d307      	bcc.n	8005cdc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005cda:	e7e9      	b.n	8005cb0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005cdc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b086      	sub	sp, #24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d08:	d204      	bcs.n	8005d14 <dir_sdi+0x22>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005d14:	2302      	movs	r3, #2
 8005d16:	e071      	b.n	8005dfc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <dir_sdi+0x46>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d902      	bls.n	8005d38 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10c      	bne.n	8005d58 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	8912      	ldrh	r2, [r2, #8]
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d301      	bcc.n	8005d4e <dir_sdi+0x5c>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e056      	b.n	8005dfc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	61da      	str	r2, [r3, #28]
 8005d56:	e02d      	b.n	8005db4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	895b      	ldrh	r3, [r3, #10]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	899b      	ldrh	r3, [r3, #12]
 8005d62:	fb02 f303 	mul.w	r3, r2, r3
 8005d66:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d68:	e019      	b.n	8005d9e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6979      	ldr	r1, [r7, #20]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fc9d 	bl	80056ae <get_fat>
 8005d74:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d101      	bne.n	8005d82 <dir_sdi+0x90>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e03c      	b.n	8005dfc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d904      	bls.n	8005d92 <dir_sdi+0xa0>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d301      	bcc.n	8005d96 <dir_sdi+0xa4>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e032      	b.n	8005dfc <dir_sdi+0x10a>
			ofs -= csz;
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d2e1      	bcs.n	8005d6a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005da6:	6979      	ldr	r1, [r7, #20]
 8005da8:	6938      	ldr	r0, [r7, #16]
 8005daa:	f7ff fc61 	bl	8005670 <clust2sect>
 8005dae:	4602      	mov	r2, r0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <dir_sdi+0xd4>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e01a      	b.n	8005dfc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69da      	ldr	r2, [r3, #28]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	899b      	ldrh	r3, [r3, #12]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dd6:	441a      	add	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	899b      	ldrh	r3, [r3, #12]
 8005de6:	461a      	mov	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dee:	fb00 f202 	mul.w	r2, r0, r2
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	18ca      	adds	r2, r1, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	3320      	adds	r3, #32
 8005e1a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <dir_next+0x28>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e2a:	d301      	bcc.n	8005e30 <dir_next+0x2c>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	e0bb      	b.n	8005fa8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	899b      	ldrh	r3, [r3, #12]
 8005e34:	461a      	mov	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e3c:	fb01 f202 	mul.w	r2, r1, r2
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 809d 	bne.w	8005f82 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	8912      	ldrh	r2, [r2, #8]
 8005e62:	4293      	cmp	r3, r2
 8005e64:	f0c0 808d 	bcc.w	8005f82 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	61da      	str	r2, [r3, #28]
 8005e6e:	2304      	movs	r3, #4
 8005e70:	e09a      	b.n	8005fa8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	899b      	ldrh	r3, [r3, #12]
 8005e76:	461a      	mov	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	8952      	ldrh	r2, [r2, #10]
 8005e82:	3a01      	subs	r2, #1
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d17b      	bne.n	8005f82 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	4619      	mov	r1, r3
 8005e92:	4610      	mov	r0, r2
 8005e94:	f7ff fc0b 	bl	80056ae <get_fat>
 8005e98:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d801      	bhi.n	8005ea4 <dir_next+0xa0>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e081      	b.n	8005fa8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d101      	bne.n	8005eb0 <dir_next+0xac>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e07b      	b.n	8005fa8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d359      	bcc.n	8005f6e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	e06e      	b.n	8005fa8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f7ff fe3d 	bl	8005b52 <create_chain>
 8005ed8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <dir_next+0xe0>
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	e061      	b.n	8005fa8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <dir_next+0xea>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e05c      	b.n	8005fa8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d101      	bne.n	8005efa <dir_next+0xf6>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e056      	b.n	8005fa8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f7ff fad6 	bl	80054ac <sync_window>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <dir_next+0x106>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e04e      	b.n	8005fa8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	899b      	ldrh	r3, [r3, #12]
 8005f14:	461a      	mov	r2, r3
 8005f16:	2100      	movs	r1, #0
 8005f18:	f7ff f8ff 	bl	800511a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	6979      	ldr	r1, [r7, #20]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fba4 	bl	8005670 <clust2sect>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f2e:	e012      	b.n	8005f56 <dir_next+0x152>
						fs->wflag = 1;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff fab8 	bl	80054ac <sync_window>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <dir_next+0x142>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e030      	b.n	8005fa8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	895b      	ldrh	r3, [r3, #10]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d3e6      	bcc.n	8005f30 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005f74:	6979      	ldr	r1, [r7, #20]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fb7a 	bl	8005670 <clust2sect>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	899b      	ldrh	r3, [r3, #12]
 8005f92:	461a      	mov	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f9a:	fb00 f202 	mul.w	r2, r0, r2
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	18ca      	adds	r2, r1, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fe95 	bl	8005cf2 <dir_sdi>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d12b      	bne.n	800602a <dir_alloc+0x7a>
		n = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff faa9 	bl	8005534 <move_window>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d11d      	bne.n	8006028 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2be5      	cmp	r3, #229	@ 0xe5
 8005ff4:	d004      	beq.n	8006000 <dir_alloc+0x50>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3301      	adds	r3, #1
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d102      	bne.n	8006014 <dir_alloc+0x64>
 800600e:	e00c      	b.n	800602a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006014:	2101      	movs	r1, #1
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fef4 	bl	8005e04 <dir_next>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0d7      	beq.n	8005fd6 <dir_alloc+0x26>
 8006026:	e000      	b.n	800602a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006028:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d101      	bne.n	8006034 <dir_alloc+0x84>
 8006030:	2307      	movs	r3, #7
 8006032:	75fb      	strb	r3, [r7, #23]
	return res;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	331a      	adds	r3, #26
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe ffc1 	bl	8004fd4 <ld_word>
 8006052:	4603      	mov	r3, r0
 8006054:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d109      	bne.n	8006072 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	3314      	adds	r3, #20
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe ffb6 	bl	8004fd4 <ld_word>
 8006068:	4603      	mov	r3, r0
 800606a:	041b      	lsls	r3, r3, #16
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	331a      	adds	r3, #26
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	b292      	uxth	r2, r2
 8006090:	4611      	mov	r1, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe ffd9 	bl	800504a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d109      	bne.n	80060b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f103 0214 	add.w	r2, r3, #20
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0c1b      	lsrs	r3, r3, #16
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7fe ffcb 	bl	800504a <st_word>
	}
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80060bc:	b590      	push	{r4, r7, lr}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	331a      	adds	r3, #26
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe ff82 	bl	8004fd4 <ld_word>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <cmp_lfn+0x1e>
 80060d6:	2300      	movs	r3, #0
 80060d8:	e059      	b.n	800618e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e2:	1e5a      	subs	r2, r3, #1
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80060f0:	2301      	movs	r3, #1
 80060f2:	81fb      	strh	r3, [r7, #14]
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e033      	b.n	8006162 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80060fa:	4a27      	ldr	r2, [pc, #156]	@ (8006198 <cmp_lfn+0xdc>)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	4413      	add	r3, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe ff63 	bl	8004fd4 <ld_word>
 800610e:	4603      	mov	r3, r0
 8006110:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006112:	89fb      	ldrh	r3, [r7, #14]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01a      	beq.n	800614e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2bfe      	cmp	r3, #254	@ 0xfe
 800611c:	d812      	bhi.n	8006144 <cmp_lfn+0x88>
 800611e:	89bb      	ldrh	r3, [r7, #12]
 8006120:	4618      	mov	r0, r3
 8006122:	f002 f8e9 	bl	80082f8 <ff_wtoupper>
 8006126:	4603      	mov	r3, r0
 8006128:	461c      	mov	r4, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	617a      	str	r2, [r7, #20]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4413      	add	r3, r2
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f002 f8dd 	bl	80082f8 <ff_wtoupper>
 800613e:	4603      	mov	r3, r0
 8006140:	429c      	cmp	r4, r3
 8006142:	d001      	beq.n	8006148 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006144:	2300      	movs	r3, #0
 8006146:	e022      	b.n	800618e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006148:	89bb      	ldrh	r3, [r7, #12]
 800614a:	81fb      	strh	r3, [r7, #14]
 800614c:	e006      	b.n	800615c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800614e:	89bb      	ldrh	r3, [r7, #12]
 8006150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006154:	4293      	cmp	r3, r2
 8006156:	d001      	beq.n	800615c <cmp_lfn+0xa0>
 8006158:	2300      	movs	r3, #0
 800615a:	e018      	b.n	800618e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	3301      	adds	r3, #1
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b0c      	cmp	r3, #12
 8006166:	d9c8      	bls.n	80060fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <cmp_lfn+0xd0>
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <cmp_lfn+0xd0>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <cmp_lfn+0xd0>
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800618c:	2301      	movs	r3, #1
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}
 8006196:	bf00      	nop
 8006198:	08012c20 	.word	0x08012c20

0800619c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	331a      	adds	r3, #26
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe ff12 	bl	8004fd4 <ld_word>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <pick_lfn+0x1e>
 80061b6:	2300      	movs	r3, #0
 80061b8:	e04d      	b.n	8006256 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80061d0:	2301      	movs	r3, #1
 80061d2:	81fb      	strh	r3, [r7, #14]
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	e028      	b.n	800622c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80061da:	4a21      	ldr	r2, [pc, #132]	@ (8006260 <pick_lfn+0xc4>)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	4413      	add	r3, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe fef3 	bl	8004fd4 <ld_word>
 80061ee:	4603      	mov	r3, r0
 80061f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80061f2:	89fb      	ldrh	r3, [r7, #14]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00f      	beq.n	8006218 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80061fc:	d901      	bls.n	8006202 <pick_lfn+0x66>
 80061fe:	2300      	movs	r3, #0
 8006200:	e029      	b.n	8006256 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006202:	89bb      	ldrh	r3, [r7, #12]
 8006204:	81fb      	strh	r3, [r7, #14]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	617a      	str	r2, [r7, #20]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	89fa      	ldrh	r2, [r7, #14]
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e006      	b.n	8006226 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006218:	89bb      	ldrh	r3, [r7, #12]
 800621a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800621e:	4293      	cmp	r3, r2
 8006220:	d001      	beq.n	8006226 <pick_lfn+0x8a>
 8006222:	2300      	movs	r3, #0
 8006224:	e017      	b.n	8006256 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b0c      	cmp	r3, #12
 8006230:	d9d3      	bls.n	80061da <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2bfe      	cmp	r3, #254	@ 0xfe
 8006242:	d901      	bls.n	8006248 <pick_lfn+0xac>
 8006244:	2300      	movs	r3, #0
 8006246:	e006      	b.n	8006256 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	2200      	movs	r2, #0
 8006252:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006254:	2301      	movs	r3, #1
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	08012c20 	.word	0x08012c20

08006264 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	460b      	mov	r3, r1
 8006274:	71fb      	strb	r3, [r7, #7]
 8006276:	4613      	mov	r3, r2
 8006278:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	330d      	adds	r3, #13
 800627e:	79ba      	ldrb	r2, [r7, #6]
 8006280:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	330b      	adds	r3, #11
 8006286:	220f      	movs	r2, #15
 8006288:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	330c      	adds	r3, #12
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	331a      	adds	r3, #26
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f7fe fed6 	bl	800504a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	1e5a      	subs	r2, r3, #1
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	82fb      	strh	r3, [r7, #22]
 80062b2:	2300      	movs	r3, #0
 80062b4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80062b6:	8afb      	ldrh	r3, [r7, #22]
 80062b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <put_lfn+0x6c>
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	61fa      	str	r2, [r7, #28]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80062d0:	4a17      	ldr	r2, [pc, #92]	@ (8006330 <put_lfn+0xcc>)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	4413      	add	r3, r2
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	8afa      	ldrh	r2, [r7, #22]
 80062e0:	4611      	mov	r1, r2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe feb1 	bl	800504a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80062e8:	8afb      	ldrh	r3, [r7, #22]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <put_lfn+0x90>
 80062ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062f2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	3301      	adds	r3, #1
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b0c      	cmp	r3, #12
 80062fe:	d9da      	bls.n	80062b6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006300:	8afb      	ldrh	r3, [r7, #22]
 8006302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006306:	4293      	cmp	r3, r2
 8006308:	d006      	beq.n	8006318 <put_lfn+0xb4>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <put_lfn+0xbc>
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800631e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	79fa      	ldrb	r2, [r7, #7]
 8006324:	701a      	strb	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	08012c20 	.word	0x08012c20

08006334 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08c      	sub	sp, #48	@ 0x30
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006342:	220b      	movs	r2, #11
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7fe fec6 	bl	80050d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b05      	cmp	r3, #5
 8006350:	d92b      	bls.n	80063aa <gen_numname+0x76>
		sr = seq;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006356:	e022      	b.n	800639e <gen_numname+0x6a>
			wc = *lfn++;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006362:	2300      	movs	r3, #0
 8006364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006366:	e017      	b.n	8006398 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	005a      	lsls	r2, r3, #1
 800636c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006376:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006378:	085b      	lsrs	r3, r3, #1
 800637a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <gen_numname+0x5e>
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800638c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006390:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	3301      	adds	r3, #1
 8006396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639a:	2b0f      	cmp	r3, #15
 800639c:	d9e4      	bls.n	8006368 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1d8      	bne.n	8006358 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80063aa:	2307      	movs	r3, #7
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	3330      	adds	r3, #48	@ 0x30
 80063ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80063be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063c2:	2b39      	cmp	r3, #57	@ 0x39
 80063c4:	d904      	bls.n	80063d0 <gen_numname+0x9c>
 80063c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063ca:	3307      	adds	r3, #7
 80063cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	1e5a      	subs	r2, r3, #1
 80063d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063d6:	3330      	adds	r3, #48	@ 0x30
 80063d8:	443b      	add	r3, r7
 80063da:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80063de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	091b      	lsrs	r3, r3, #4
 80063e6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1df      	bne.n	80063ae <gen_numname+0x7a>
	ns[i] = '~';
 80063ee:	f107 0214 	add.w	r2, r7, #20
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	4413      	add	r3, r2
 80063f6:	227e      	movs	r2, #126	@ 0x7e
 80063f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80063fa:	2300      	movs	r3, #0
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fe:	e002      	b.n	8006406 <gen_numname+0xd2>
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	3301      	adds	r3, #1
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
 8006406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640a:	429a      	cmp	r2, r3
 800640c:	d205      	bcs.n	800641a <gen_numname+0xe6>
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	4413      	add	r3, r2
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b20      	cmp	r3, #32
 8006418:	d1f2      	bne.n	8006400 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	2b07      	cmp	r3, #7
 800641e:	d807      	bhi.n	8006430 <gen_numname+0xfc>
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006426:	3330      	adds	r3, #48	@ 0x30
 8006428:	443b      	add	r3, r7
 800642a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800642e:	e000      	b.n	8006432 <gen_numname+0xfe>
 8006430:	2120      	movs	r1, #32
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	627a      	str	r2, [r7, #36]	@ 0x24
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	460a      	mov	r2, r1
 800643e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	2b07      	cmp	r3, #7
 8006444:	d9e9      	bls.n	800641a <gen_numname+0xe6>
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	3730      	adds	r7, #48	@ 0x30
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800645c:	230b      	movs	r3, #11
 800645e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	0852      	lsrs	r2, r2, #1
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	4313      	orrs	r3, r2
 800646a:	b2da      	uxtb	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	6079      	str	r1, [r7, #4]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	4413      	add	r3, r2
 8006476:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	3b01      	subs	r3, #1
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1ed      	bne.n	8006460 <sum_sfn+0x10>
	return sum;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800649c:	2304      	movs	r3, #4
 800649e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80064a6:	23ff      	movs	r3, #255	@ 0xff
 80064a8:	757b      	strb	r3, [r7, #21]
 80064aa:	23ff      	movs	r3, #255	@ 0xff
 80064ac:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80064ae:	e081      	b.n	80065b4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4619      	mov	r1, r3
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f7ff f83c 	bl	8005534 <move_window>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d17c      	bne.n	80065c0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80064ce:	7dbb      	ldrb	r3, [r7, #22]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80064d4:	2304      	movs	r3, #4
 80064d6:	75fb      	strb	r3, [r7, #23]
 80064d8:	e077      	b.n	80065ca <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	330b      	adds	r3, #11
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064e6:	73fb      	strb	r3, [r7, #15]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7bfa      	ldrb	r2, [r7, #15]
 80064ec:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80064ee:	7dbb      	ldrb	r3, [r7, #22]
 80064f0:	2be5      	cmp	r3, #229	@ 0xe5
 80064f2:	d00e      	beq.n	8006512 <dir_read+0x80>
 80064f4:	7dbb      	ldrb	r3, [r7, #22]
 80064f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80064f8:	d00b      	beq.n	8006512 <dir_read+0x80>
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	f023 0320 	bic.w	r3, r3, #32
 8006500:	2b08      	cmp	r3, #8
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	4293      	cmp	r3, r2
 8006510:	d002      	beq.n	8006518 <dir_read+0x86>
				ord = 0xFF;
 8006512:	23ff      	movs	r3, #255	@ 0xff
 8006514:	757b      	strb	r3, [r7, #21]
 8006516:	e044      	b.n	80065a2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d12f      	bne.n	800657e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800651e:	7dbb      	ldrb	r3, [r7, #22]
 8006520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00d      	beq.n	8006544 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	7b5b      	ldrb	r3, [r3, #13]
 800652e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006530:	7dbb      	ldrb	r3, [r7, #22]
 8006532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006536:	75bb      	strb	r3, [r7, #22]
 8006538:	7dbb      	ldrb	r3, [r7, #22]
 800653a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695a      	ldr	r2, [r3, #20]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006544:	7dba      	ldrb	r2, [r7, #22]
 8006546:	7d7b      	ldrb	r3, [r7, #21]
 8006548:	429a      	cmp	r2, r3
 800654a:	d115      	bne.n	8006578 <dir_read+0xe6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	330d      	adds	r3, #13
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	7d3a      	ldrb	r2, [r7, #20]
 8006556:	429a      	cmp	r2, r3
 8006558:	d10e      	bne.n	8006578 <dir_read+0xe6>
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f7ff fe19 	bl	800619c <pick_lfn>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <dir_read+0xe6>
 8006570:	7d7b      	ldrb	r3, [r7, #21]
 8006572:	3b01      	subs	r3, #1
 8006574:	b2db      	uxtb	r3, r3
 8006576:	e000      	b.n	800657a <dir_read+0xe8>
 8006578:	23ff      	movs	r3, #255	@ 0xff
 800657a:	757b      	strb	r3, [r7, #21]
 800657c:	e011      	b.n	80065a2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800657e:	7d7b      	ldrb	r3, [r7, #21]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d109      	bne.n	8006598 <dir_read+0x106>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff ff61 	bl	8006450 <sum_sfn>
 800658e:	4603      	mov	r3, r0
 8006590:	461a      	mov	r2, r3
 8006592:	7d3b      	ldrb	r3, [r7, #20]
 8006594:	4293      	cmp	r3, r2
 8006596:	d015      	beq.n	80065c4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f04f 32ff 	mov.w	r2, #4294967295
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80065a0:	e010      	b.n	80065c4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80065a2:	2100      	movs	r1, #0
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff fc2d 	bl	8005e04 <dir_next>
 80065aa:	4603      	mov	r3, r0
 80065ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <dir_read+0x136>
	while (dp->sect) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f47f af79 	bne.w	80064b0 <dir_read+0x1e>
 80065be:	e004      	b.n	80065ca <dir_read+0x138>
		if (res != FR_OK) break;
 80065c0:	bf00      	nop
 80065c2:	e002      	b.n	80065ca <dir_read+0x138>
					break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <dir_read+0x138>
		if (res != FR_OK) break;
 80065c8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <dir_read+0x144>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	61da      	str	r2, [r3, #28]
	return res;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80065ee:	2100      	movs	r1, #0
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fb7e 	bl	8005cf2 <dir_sdi>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <dir_find+0x24>
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	e0a9      	b.n	8006758 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006604:	23ff      	movs	r3, #255	@ 0xff
 8006606:	753b      	strb	r3, [r7, #20]
 8006608:	7d3b      	ldrb	r3, [r7, #20]
 800660a:	757b      	strb	r3, [r7, #21]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f04f 32ff 	mov.w	r2, #4294967295
 8006612:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4619      	mov	r1, r3
 800661a:	6938      	ldr	r0, [r7, #16]
 800661c:	f7fe ff8a 	bl	8005534 <move_window>
 8006620:	4603      	mov	r3, r0
 8006622:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 8090 	bne.w	800674c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006634:	7dbb      	ldrb	r3, [r7, #22]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <dir_find+0x60>
 800663a:	2304      	movs	r3, #4
 800663c:	75fb      	strb	r3, [r7, #23]
 800663e:	e08a      	b.n	8006756 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	330b      	adds	r3, #11
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	7bfa      	ldrb	r2, [r7, #15]
 8006652:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006654:	7dbb      	ldrb	r3, [r7, #22]
 8006656:	2be5      	cmp	r3, #229	@ 0xe5
 8006658:	d007      	beq.n	800666a <dir_find+0x8a>
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <dir_find+0x98>
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d006      	beq.n	8006678 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800666a:	23ff      	movs	r3, #255	@ 0xff
 800666c:	757b      	strb	r3, [r7, #21]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	631a      	str	r2, [r3, #48]	@ 0x30
 8006676:	e05e      	b.n	8006736 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b0f      	cmp	r3, #15
 800667c:	d136      	bne.n	80066ec <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d154      	bne.n	8006736 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800668c:	7dbb      	ldrb	r3, [r7, #22]
 800668e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	7b5b      	ldrb	r3, [r3, #13]
 800669c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800669e:	7dbb      	ldrb	r3, [r7, #22]
 80066a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a4:	75bb      	strb	r3, [r7, #22]
 80066a6:	7dbb      	ldrb	r3, [r7, #22]
 80066a8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80066b2:	7dba      	ldrb	r2, [r7, #22]
 80066b4:	7d7b      	ldrb	r3, [r7, #21]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d115      	bne.n	80066e6 <dir_find+0x106>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	330d      	adds	r3, #13
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	7d3a      	ldrb	r2, [r7, #20]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d10e      	bne.n	80066e6 <dir_find+0x106>
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7ff fcf2 	bl	80060bc <cmp_lfn>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <dir_find+0x106>
 80066de:	7d7b      	ldrb	r3, [r7, #21]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	e000      	b.n	80066e8 <dir_find+0x108>
 80066e6:	23ff      	movs	r3, #255	@ 0xff
 80066e8:	757b      	strb	r3, [r7, #21]
 80066ea:	e024      	b.n	8006736 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80066ec:	7d7b      	ldrb	r3, [r7, #21]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <dir_find+0x126>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff feaa 	bl	8006450 <sum_sfn>
 80066fc:	4603      	mov	r3, r0
 80066fe:	461a      	mov	r2, r3
 8006700:	7d3b      	ldrb	r3, [r7, #20]
 8006702:	4293      	cmp	r3, r2
 8006704:	d024      	beq.n	8006750 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <dir_find+0x14a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a18      	ldr	r0, [r3, #32]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3324      	adds	r3, #36	@ 0x24
 800671c:	220b      	movs	r2, #11
 800671e:	4619      	mov	r1, r3
 8006720:	f7fe fd16 	bl	8005150 <mem_cmp>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d014      	beq.n	8006754 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800672a:	23ff      	movs	r3, #255	@ 0xff
 800672c:	757b      	strb	r3, [r7, #21]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f04f 32ff 	mov.w	r2, #4294967295
 8006734:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006736:	2100      	movs	r1, #0
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fb63 	bl	8005e04 <dir_next>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f43f af65 	beq.w	8006614 <dir_find+0x34>
 800674a:	e004      	b.n	8006756 <dir_find+0x176>
		if (res != FR_OK) break;
 800674c:	bf00      	nop
 800674e:	e002      	b.n	8006756 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006750:	bf00      	nop
 8006752:	e000      	b.n	8006756 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006754:	bf00      	nop

	return res;
 8006756:	7dfb      	ldrb	r3, [r7, #23]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	@ 0x30
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006774:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <dir_register+0x20>
 800677c:	2306      	movs	r3, #6
 800677e:	e0e0      	b.n	8006942 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006780:	2300      	movs	r3, #0
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	e002      	b.n	800678c <dir_register+0x2c>
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	3301      	adds	r3, #1
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f4      	bne.n	8006786 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80067a2:	f107 030c 	add.w	r3, r7, #12
 80067a6:	220c      	movs	r2, #12
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fc95 	bl	80050d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d032      	beq.n	800681e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2240      	movs	r2, #64	@ 0x40
 80067bc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80067c0:	2301      	movs	r3, #1
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c4:	e016      	b.n	80067f4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	f107 010c 	add.w	r1, r7, #12
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	f7ff fdad 	bl	8006334 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff ff00 	bl	80065e0 <dir_find>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80067e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	3301      	adds	r3, #1
 80067f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	2b63      	cmp	r3, #99	@ 0x63
 80067f8:	d9e5      	bls.n	80067c6 <dir_register+0x66>
 80067fa:	e000      	b.n	80067fe <dir_register+0x9e>
			if (res != FR_OK) break;
 80067fc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	2b64      	cmp	r3, #100	@ 0x64
 8006802:	d101      	bne.n	8006808 <dir_register+0xa8>
 8006804:	2307      	movs	r3, #7
 8006806:	e09c      	b.n	8006942 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800680c:	2b04      	cmp	r3, #4
 800680e:	d002      	beq.n	8006816 <dir_register+0xb6>
 8006810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006814:	e095      	b.n	8006942 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006816:	7dfa      	ldrb	r2, [r7, #23]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <dir_register+0xd8>
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	330c      	adds	r3, #12
 800682c:	4a47      	ldr	r2, [pc, #284]	@ (800694c <dir_register+0x1ec>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	089b      	lsrs	r3, r3, #2
 8006834:	3301      	adds	r3, #1
 8006836:	e000      	b.n	800683a <dir_register+0xda>
 8006838:	2301      	movs	r3, #1
 800683a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800683c:	6a39      	ldr	r1, [r7, #32]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fbb6 	bl	8005fb0 <dir_alloc>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800684a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800684e:	2b00      	cmp	r3, #0
 8006850:	d148      	bne.n	80068e4 <dir_register+0x184>
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	3b01      	subs	r3, #1
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d042      	beq.n	80068e4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	015b      	lsls	r3, r3, #5
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff fa41 	bl	8005cf2 <dir_sdi>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800687a:	2b00      	cmp	r3, #0
 800687c:	d132      	bne.n	80068e4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3324      	adds	r3, #36	@ 0x24
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fde4 	bl	8006450 <sum_sfn>
 8006888:	4603      	mov	r3, r0
 800688a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4619      	mov	r1, r3
 8006892:	69f8      	ldr	r0, [r7, #28]
 8006894:	f7fe fe4e 	bl	8005534 <move_window>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800689e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d11d      	bne.n	80068e2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	6918      	ldr	r0, [r3, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a19      	ldr	r1, [r3, #32]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	7efb      	ldrb	r3, [r7, #27]
 80068b4:	f7ff fcd6 	bl	8006264 <put_lfn>
				fs->wflag = 1;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	2201      	movs	r2, #1
 80068bc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80068be:	2100      	movs	r1, #0
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fa9f 	bl	8005e04 <dir_next>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80068cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d107      	bne.n	80068e4 <dir_register+0x184>
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1d5      	bne.n	800688c <dir_register+0x12c>
 80068e0:	e000      	b.n	80068e4 <dir_register+0x184>
				if (res != FR_OK) break;
 80068e2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80068e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d128      	bne.n	800693e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	4619      	mov	r1, r3
 80068f2:	69f8      	ldr	r0, [r7, #28]
 80068f4:	f7fe fe1e 	bl	8005534 <move_window>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80068fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11b      	bne.n	800693e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	2220      	movs	r2, #32
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe fc03 	bl	800511a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a18      	ldr	r0, [r3, #32]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3324      	adds	r3, #36	@ 0x24
 800691c:	220b      	movs	r2, #11
 800691e:	4619      	mov	r1, r3
 8006920:	f7fe fbda 	bl	80050d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	330c      	adds	r3, #12
 8006930:	f002 0218 	and.w	r2, r2, #24
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2201      	movs	r2, #1
 800693c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800693e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006942:	4618      	mov	r0, r3
 8006944:	3730      	adds	r7, #48	@ 0x30
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	4ec4ec4f 	.word	0x4ec4ec4f

08006950 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80ca 	beq.w	8006b04 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d032      	beq.n	80069e0 <get_fileinfo+0x90>
			i = j = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006982:	e01b      	b.n	80069bc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fc79 	bl	8008280 <ff_convert>
 800698e:	4603      	mov	r3, r0
 8006990:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006992:	89fb      	ldrh	r3, [r7, #14]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <get_fileinfo+0x4e>
 8006998:	2300      	movs	r3, #0
 800699a:	61fb      	str	r3, [r7, #28]
 800699c:	e01a      	b.n	80069d4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80069a2:	d902      	bls.n	80069aa <get_fileinfo+0x5a>
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	e014      	b.n	80069d4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	61fa      	str	r2, [r7, #28]
 80069b0:	89fa      	ldrh	r2, [r7, #14]
 80069b2:	b2d1      	uxtb	r1, r2
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	4413      	add	r3, r2
 80069b8:	460a      	mov	r2, r1
 80069ba:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	1c59      	adds	r1, r3, #1
 80069c4:	61b9      	str	r1, [r7, #24]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	81fb      	strh	r3, [r7, #14]
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1d7      	bne.n	8006984 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	3316      	adds	r3, #22
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	3316      	adds	r3, #22
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80069f4:	e04d      	b.n	8006a92 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1a      	ldr	r2, [r3, #32]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	61f9      	str	r1, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d041      	beq.n	8006a90 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d101      	bne.n	8006a16 <get_fileinfo+0xc6>
 8006a12:	23e5      	movs	r3, #229	@ 0xe5
 8006a14:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	d10f      	bne.n	8006a3c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8006a1c:	89bb      	ldrh	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d105      	bne.n	8006a2e <get_fileinfo+0xde>
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	4413      	add	r3, r2
 8006a28:	3316      	adds	r3, #22
 8006a2a:	222e      	movs	r2, #46	@ 0x2e
 8006a2c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	61ba      	str	r2, [r7, #24]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	4413      	add	r3, r2
 8006a38:	222e      	movs	r2, #46	@ 0x2e
 8006a3a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	4413      	add	r3, r2
 8006a42:	3309      	adds	r3, #9
 8006a44:	7dfa      	ldrb	r2, [r7, #23]
 8006a46:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006a48:	89bb      	ldrh	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d11c      	bne.n	8006a88 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	2b40      	cmp	r3, #64	@ 0x40
 8006a52:	d913      	bls.n	8006a7c <get_fileinfo+0x12c>
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	2b5a      	cmp	r3, #90	@ 0x5a
 8006a58:	d810      	bhi.n	8006a7c <get_fileinfo+0x12c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d901      	bls.n	8006a6e <get_fileinfo+0x11e>
 8006a6a:	2310      	movs	r3, #16
 8006a6c:	e000      	b.n	8006a70 <get_fileinfo+0x120>
 8006a6e:	2308      	movs	r3, #8
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	3320      	adds	r3, #32
 8006a7a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	4413      	add	r3, r2
 8006a82:	3316      	adds	r3, #22
 8006a84:	7dfa      	ldrb	r2, [r7, #23]
 8006a86:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e000      	b.n	8006a92 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006a90:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2b0a      	cmp	r3, #10
 8006a96:	d9ae      	bls.n	80069f6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006a98:	89bb      	ldrh	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3316      	adds	r3, #22
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <get_fileinfo+0x16a>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	4413      	add	r3, r2
 8006ac0:	3309      	adds	r3, #9
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	7ada      	ldrb	r2, [r3, #11]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	331c      	adds	r3, #28
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fa94 	bl	8005004 <ld_dword>
 8006adc:	4602      	mov	r2, r0
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	3316      	adds	r3, #22
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe fa8b 	bl	8005004 <ld_dword>
 8006aee:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	80da      	strh	r2, [r3, #6]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	0c1b      	lsrs	r3, r3, #16
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	809a      	strh	r2, [r3, #4]
 8006b02:	e000      	b.n	8006b06 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006b04:	bf00      	nop
}
 8006b06:	3720      	adds	r7, #32
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	61ba      	str	r2, [r7, #24]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4413      	add	r3, r2
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006b3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b3c:	2b1f      	cmp	r3, #31
 8006b3e:	d940      	bls.n	8006bc2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006b40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b42:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b44:	d006      	beq.n	8006b54 <create_name+0x48>
 8006b46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b48:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b4a:	d110      	bne.n	8006b6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006b4c:	e002      	b.n	8006b54 <create_name+0x48>
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	3301      	adds	r3, #1
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	4413      	add	r3, r2
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b5e:	d0f6      	beq.n	8006b4e <create_name+0x42>
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b6a:	d0f0      	beq.n	8006b4e <create_name+0x42>
			break;
 8006b6c:	e02a      	b.n	8006bc4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2bfe      	cmp	r3, #254	@ 0xfe
 8006b72:	d901      	bls.n	8006b78 <create_name+0x6c>
 8006b74:	2306      	movs	r3, #6
 8006b76:	e17d      	b.n	8006e74 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006b78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b80:	2101      	movs	r1, #1
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 fb7c 	bl	8008280 <ff_convert>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006b8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <create_name+0x8a>
 8006b92:	2306      	movs	r3, #6
 8006b94:	e16e      	b.n	8006e74 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006b96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b9a:	d809      	bhi.n	8006bb0 <create_name+0xa4>
 8006b9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	488d      	ldr	r0, [pc, #564]	@ (8006dd8 <create_name+0x2cc>)
 8006ba2:	f7fe fafc 	bl	800519e <chk_chr>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <create_name+0xa4>
 8006bac:	2306      	movs	r3, #6
 8006bae:	e161      	b.n	8006e74 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	617a      	str	r2, [r7, #20]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006bbe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006bc0:	e7b4      	b.n	8006b2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006bc2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	441a      	add	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bd0:	2b1f      	cmp	r3, #31
 8006bd2:	d801      	bhi.n	8006bd8 <create_name+0xcc>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	e000      	b.n	8006bda <create_name+0xce>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006bde:	e011      	b.n	8006c04 <create_name+0xf8>
		w = lfn[di - 1];
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006be6:	3b01      	subs	r3, #1
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006bf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d002      	beq.n	8006bfe <create_name+0xf2>
 8006bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bfc:	d106      	bne.n	8006c0c <create_name+0x100>
		di--;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1ea      	bne.n	8006be0 <create_name+0xd4>
 8006c0a:	e000      	b.n	8006c0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006c0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <create_name+0x118>
 8006c20:	2306      	movs	r3, #6
 8006c22:	e127      	b.n	8006e74 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3324      	adds	r3, #36	@ 0x24
 8006c28:	220b      	movs	r2, #11
 8006c2a:	2120      	movs	r1, #32
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe fa74 	bl	800511a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006c32:	2300      	movs	r3, #0
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e002      	b.n	8006c3e <create_name+0x132>
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d0f5      	beq.n	8006c38 <create_name+0x12c>
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c58:	d0ee      	beq.n	8006c38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <create_name+0x168>
 8006c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c64:	f043 0303 	orr.w	r3, r3, #3
 8006c68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006c6c:	e002      	b.n	8006c74 <create_name+0x168>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <create_name+0x182>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006c80:	3b01      	subs	r3, #1
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c8c:	d1ef      	bne.n	8006c6e <create_name+0x162>

	i = b = 0; ni = 8;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006c94:	2300      	movs	r3, #0
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	2308      	movs	r3, #8
 8006c9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	61ba      	str	r2, [r7, #24]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006cac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8090 	beq.w	8006dd4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006cb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d006      	beq.n	8006cc8 <create_name+0x1bc>
 8006cba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cbe:	d10a      	bne.n	8006cd6 <create_name+0x1ca>
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d006      	beq.n	8006cd6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ccc:	f043 0303 	orr.w	r3, r3, #3
 8006cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cd4:	e07d      	b.n	8006dd2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006cd6:	6a3a      	ldr	r2, [r7, #32]
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d203      	bcs.n	8006ce6 <create_name+0x1da>
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d123      	bne.n	8006d2e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2b0b      	cmp	r3, #11
 8006cea:	d106      	bne.n	8006cfa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cf0:	f043 0303 	orr.w	r3, r3, #3
 8006cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cf8:	e075      	b.n	8006de6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d005      	beq.n	8006d0e <create_name+0x202>
 8006d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d06:	f043 0303 	orr.w	r3, r3, #3
 8006d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d866      	bhi.n	8006de4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	623b      	str	r3, [r7, #32]
 8006d1e:	230b      	movs	r3, #11
 8006d20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006d22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006d2c:	e051      	b.n	8006dd2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d30:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d32:	d914      	bls.n	8006d5e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006d34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 faa1 	bl	8008280 <ff_convert>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <create_name+0x246>
 8006d48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d4a:	3b80      	subs	r3, #128	@ 0x80
 8006d4c:	4a23      	ldr	r2, [pc, #140]	@ (8006ddc <create_name+0x2d0>)
 8006d4e:	5cd3      	ldrb	r3, [r2, r3]
 8006d50:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d56:	f043 0302 	orr.w	r3, r3, #2
 8006d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006d5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d007      	beq.n	8006d74 <create_name+0x268>
 8006d64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d66:	4619      	mov	r1, r3
 8006d68:	481d      	ldr	r0, [pc, #116]	@ (8006de0 <create_name+0x2d4>)
 8006d6a:	f7fe fa18 	bl	800519e <chk_chr>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006d74:	235f      	movs	r3, #95	@ 0x5f
 8006d76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d7c:	f043 0303 	orr.w	r3, r3, #3
 8006d80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d84:	e01b      	b.n	8006dbe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006d86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d88:	2b40      	cmp	r3, #64	@ 0x40
 8006d8a:	d909      	bls.n	8006da0 <create_name+0x294>
 8006d8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d8e:	2b5a      	cmp	r3, #90	@ 0x5a
 8006d90:	d806      	bhi.n	8006da0 <create_name+0x294>
					b |= 2;
 8006d92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d96:	f043 0302 	orr.w	r3, r3, #2
 8006d9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006d9e:	e00e      	b.n	8006dbe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006da2:	2b60      	cmp	r3, #96	@ 0x60
 8006da4:	d90b      	bls.n	8006dbe <create_name+0x2b2>
 8006da6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006da8:	2b7a      	cmp	r3, #122	@ 0x7a
 8006daa:	d808      	bhi.n	8006dbe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006dac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006db0:	f043 0301 	orr.w	r3, r3, #1
 8006db4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006db8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006dba:	3b20      	subs	r3, #32
 8006dbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	623a      	str	r2, [r7, #32]
 8006dc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006dc6:	b2d1      	uxtb	r1, r2
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	460a      	mov	r2, r1
 8006dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006dd2:	e763      	b.n	8006c9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006dd4:	bf00      	nop
 8006dd6:	e006      	b.n	8006de6 <create_name+0x2da>
 8006dd8:	0801167c 	.word	0x0801167c
 8006ddc:	08012ba0 	.word	0x08012ba0
 8006de0:	08011688 	.word	0x08011688
			if (si > di) break;			/* No extension */
 8006de4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006dec:	2be5      	cmp	r3, #229	@ 0xe5
 8006dee:	d103      	bne.n	8006df8 <create_name+0x2ec>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2205      	movs	r2, #5
 8006df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d104      	bne.n	8006e08 <create_name+0x2fc>
 8006dfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006e08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e0c:	f003 030c 	and.w	r3, r3, #12
 8006e10:	2b0c      	cmp	r3, #12
 8006e12:	d005      	beq.n	8006e20 <create_name+0x314>
 8006e14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d105      	bne.n	8006e2c <create_name+0x320>
 8006e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e24:	f043 0302 	orr.w	r3, r3, #2
 8006e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d117      	bne.n	8006e68 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006e38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d105      	bne.n	8006e50 <create_name+0x344>
 8006e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e48:	f043 0310 	orr.w	r3, r3, #16
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006e50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e54:	f003 030c 	and.w	r3, r3, #12
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d105      	bne.n	8006e68 <create_name+0x35c>
 8006e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e60:	f043 0308 	orr.w	r3, r3, #8
 8006e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006e6e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006e72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3728      	adds	r7, #40	@ 0x28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006e90:	e002      	b.n	8006e98 <follow_path+0x1c>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e9e:	d0f8      	beq.n	8006e92 <follow_path+0x16>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ea6:	d0f4      	beq.n	8006e92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b1f      	cmp	r3, #31
 8006eb4:	d80a      	bhi.n	8006ecc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2280      	movs	r2, #128	@ 0x80
 8006eba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fe ff16 	bl	8005cf2 <dir_sdi>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
 8006eca:	e048      	b.n	8006f5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ecc:	463b      	mov	r3, r7
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff fe1b 	bl	8006b0c <create_name>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d139      	bne.n	8006f54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff fb7d 	bl	80065e0 <dir_find>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006ef0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d12c      	bne.n	8006f58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d127      	bne.n	8006f58 <follow_path+0xdc>
 8006f08:	2305      	movs	r3, #5
 8006f0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006f0c:	e024      	b.n	8006f58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d121      	bne.n	8006f5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	799b      	ldrb	r3, [r3, #6]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006f24:	2305      	movs	r3, #5
 8006f26:	75fb      	strb	r3, [r7, #23]
 8006f28:	e019      	b.n	8006f5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	8992      	ldrh	r2, [r2, #12]
 8006f38:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f3c:	fb00 f202 	mul.w	r2, r0, r2
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	440b      	add	r3, r1
 8006f44:	4619      	mov	r1, r3
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff f879 	bl	800603e <ld_clust>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f52:	e7bb      	b.n	8006ecc <follow_path+0x50>
			if (res != FR_OK) break;
 8006f54:	bf00      	nop
 8006f56:	e002      	b.n	8006f5e <follow_path+0xe2>
				break;
 8006f58:	bf00      	nop
 8006f5a:	e000      	b.n	8006f5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f5c:	bf00      	nop
			}
		}
	}

	return res;
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f70:	f04f 33ff 	mov.w	r3, #4294967295
 8006f74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d031      	beq.n	8006fe2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e002      	b.n	8006f8c <get_ldnumber+0x24>
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b1f      	cmp	r3, #31
 8006f92:	d903      	bls.n	8006f9c <get_ldnumber+0x34>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f9a:	d1f4      	bne.n	8006f86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b3a      	cmp	r3, #58	@ 0x3a
 8006fa2:	d11c      	bne.n	8006fde <get_ldnumber+0x76>
			tp = *path;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	60fa      	str	r2, [r7, #12]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	3b30      	subs	r3, #48	@ 0x30
 8006fb4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b09      	cmp	r3, #9
 8006fba:	d80e      	bhi.n	8006fda <get_ldnumber+0x72>
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d10a      	bne.n	8006fda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d107      	bne.n	8006fda <get_ldnumber+0x72>
					vol = (int)i;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	e002      	b.n	8006fe4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006fde:	2300      	movs	r3, #0
 8006fe0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006fe2:	693b      	ldr	r3, [r7, #16]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	70da      	strb	r2, [r3, #3]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f04f 32ff 	mov.w	r2, #4294967295
 8007006:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fe fa92 	bl	8005534 <move_window>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <check_fs+0x2a>
 8007016:	2304      	movs	r3, #4
 8007018:	e038      	b.n	800708c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3338      	adds	r3, #56	@ 0x38
 800701e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd ffd6 	bl	8004fd4 <ld_word>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007030:	429a      	cmp	r2, r3
 8007032:	d001      	beq.n	8007038 <check_fs+0x48>
 8007034:	2303      	movs	r3, #3
 8007036:	e029      	b.n	800708c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800703e:	2be9      	cmp	r3, #233	@ 0xe9
 8007040:	d009      	beq.n	8007056 <check_fs+0x66>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007048:	2beb      	cmp	r3, #235	@ 0xeb
 800704a:	d11e      	bne.n	800708a <check_fs+0x9a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007052:	2b90      	cmp	r3, #144	@ 0x90
 8007054:	d119      	bne.n	800708a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3338      	adds	r3, #56	@ 0x38
 800705a:	3336      	adds	r3, #54	@ 0x36
 800705c:	4618      	mov	r0, r3
 800705e:	f7fd ffd1 	bl	8005004 <ld_dword>
 8007062:	4603      	mov	r3, r0
 8007064:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007068:	4a0a      	ldr	r2, [pc, #40]	@ (8007094 <check_fs+0xa4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d101      	bne.n	8007072 <check_fs+0x82>
 800706e:	2300      	movs	r3, #0
 8007070:	e00c      	b.n	800708c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3338      	adds	r3, #56	@ 0x38
 8007076:	3352      	adds	r3, #82	@ 0x52
 8007078:	4618      	mov	r0, r3
 800707a:	f7fd ffc3 	bl	8005004 <ld_dword>
 800707e:	4603      	mov	r3, r0
 8007080:	4a05      	ldr	r2, [pc, #20]	@ (8007098 <check_fs+0xa8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d101      	bne.n	800708a <check_fs+0x9a>
 8007086:	2300      	movs	r3, #0
 8007088:	e000      	b.n	800708c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800708a:	2302      	movs	r3, #2
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	00544146 	.word	0x00544146
 8007098:	33544146 	.word	0x33544146

0800709c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b096      	sub	sp, #88	@ 0x58
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7ff ff59 	bl	8006f68 <get_ldnumber>
 80070b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80070b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da01      	bge.n	80070c2 <find_volume+0x26>
 80070be:	230b      	movs	r3, #11
 80070c0:	e265      	b.n	800758e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80070c2:	4a9f      	ldr	r2, [pc, #636]	@ (8007340 <find_volume+0x2a4>)
 80070c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <find_volume+0x3a>
 80070d2:	230c      	movs	r3, #12
 80070d4:	e25b      	b.n	800758e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	f023 0301 	bic.w	r3, r3, #1
 80070e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01a      	beq.n	8007122 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80070ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fd fecf 	bl	8004e94 <disk_status>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10c      	bne.n	8007122 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <find_volume+0x82>
 800710e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800711a:	230a      	movs	r3, #10
 800711c:	e237      	b.n	800758e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800711e:	2300      	movs	r3, #0
 8007120:	e235      	b.n	800758e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800712a:	b2da      	uxtb	r2, r3
 800712c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	4618      	mov	r0, r3
 8007136:	f7fd fec7 	bl	8004ec8 <disk_initialize>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007140:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800714c:	2303      	movs	r3, #3
 800714e:	e21e      	b.n	800758e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d007      	beq.n	8007166 <find_volume+0xca>
 8007156:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007162:	230a      	movs	r3, #10
 8007164:	e213      	b.n	800758e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	7858      	ldrb	r0, [r3, #1]
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	330c      	adds	r3, #12
 800716e:	461a      	mov	r2, r3
 8007170:	2102      	movs	r1, #2
 8007172:	f7fd ff11 	bl	8004f98 <disk_ioctl>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <find_volume+0xe4>
 800717c:	2301      	movs	r3, #1
 800717e:	e206      	b.n	800758e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007182:	899b      	ldrh	r3, [r3, #12]
 8007184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007188:	d80d      	bhi.n	80071a6 <find_volume+0x10a>
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	899b      	ldrh	r3, [r3, #12]
 800718e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007192:	d308      	bcc.n	80071a6 <find_volume+0x10a>
 8007194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007196:	899b      	ldrh	r3, [r3, #12]
 8007198:	461a      	mov	r2, r3
 800719a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719c:	899b      	ldrh	r3, [r3, #12]
 800719e:	3b01      	subs	r3, #1
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <find_volume+0x10e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e1f1      	b.n	800758e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80071ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80071b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071b2:	f7ff ff1d 	bl	8006ff0 <check_fs>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80071bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d149      	bne.n	8007258 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80071c4:	2300      	movs	r3, #0
 80071c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80071c8:	e01e      	b.n	8007208 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80071d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80071d8:	4413      	add	r3, r2
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	3304      	adds	r3, #4
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d006      	beq.n	80071f4 <find_volume+0x158>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	3308      	adds	r3, #8
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fd ff0a 	bl	8005004 <ld_dword>
 80071f0:	4602      	mov	r2, r0
 80071f2:	e000      	b.n	80071f6 <find_volume+0x15a>
 80071f4:	2200      	movs	r2, #0
 80071f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	3358      	adds	r3, #88	@ 0x58
 80071fc:	443b      	add	r3, r7
 80071fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007204:	3301      	adds	r3, #1
 8007206:	643b      	str	r3, [r7, #64]	@ 0x40
 8007208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800720a:	2b03      	cmp	r3, #3
 800720c:	d9dd      	bls.n	80071ca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800720e:	2300      	movs	r3, #0
 8007210:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <find_volume+0x182>
 8007218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800721a:	3b01      	subs	r3, #1
 800721c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800721e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	3358      	adds	r3, #88	@ 0x58
 8007224:	443b      	add	r3, r7
 8007226:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800722a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800722c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <find_volume+0x1a2>
 8007232:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007234:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007236:	f7ff fedb 	bl	8006ff0 <check_fs>
 800723a:	4603      	mov	r3, r0
 800723c:	e000      	b.n	8007240 <find_volume+0x1a4>
 800723e:	2303      	movs	r3, #3
 8007240:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007244:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007248:	2b01      	cmp	r3, #1
 800724a:	d905      	bls.n	8007258 <find_volume+0x1bc>
 800724c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800724e:	3301      	adds	r3, #1
 8007250:	643b      	str	r3, [r7, #64]	@ 0x40
 8007252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007254:	2b03      	cmp	r3, #3
 8007256:	d9e2      	bls.n	800721e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007258:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800725c:	2b04      	cmp	r3, #4
 800725e:	d101      	bne.n	8007264 <find_volume+0x1c8>
 8007260:	2301      	movs	r3, #1
 8007262:	e194      	b.n	800758e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007264:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007268:	2b01      	cmp	r3, #1
 800726a:	d901      	bls.n	8007270 <find_volume+0x1d4>
 800726c:	230d      	movs	r3, #13
 800726e:	e18e      	b.n	800758e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007272:	3338      	adds	r3, #56	@ 0x38
 8007274:	330b      	adds	r3, #11
 8007276:	4618      	mov	r0, r3
 8007278:	f7fd feac 	bl	8004fd4 <ld_word>
 800727c:	4603      	mov	r3, r0
 800727e:	461a      	mov	r2, r3
 8007280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007282:	899b      	ldrh	r3, [r3, #12]
 8007284:	429a      	cmp	r2, r3
 8007286:	d001      	beq.n	800728c <find_volume+0x1f0>
 8007288:	230d      	movs	r3, #13
 800728a:	e180      	b.n	800758e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	3338      	adds	r3, #56	@ 0x38
 8007290:	3316      	adds	r3, #22
 8007292:	4618      	mov	r0, r3
 8007294:	f7fd fe9e 	bl	8004fd4 <ld_word>
 8007298:	4603      	mov	r3, r0
 800729a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800729c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <find_volume+0x214>
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	3338      	adds	r3, #56	@ 0x38
 80072a6:	3324      	adds	r3, #36	@ 0x24
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fd feab 	bl	8005004 <ld_dword>
 80072ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80072b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072b4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80072b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	789b      	ldrb	r3, [r3, #2]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d005      	beq.n	80072d4 <find_volume+0x238>
 80072c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ca:	789b      	ldrb	r3, [r3, #2]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d001      	beq.n	80072d4 <find_volume+0x238>
 80072d0:	230d      	movs	r3, #13
 80072d2:	e15c      	b.n	800758e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80072d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d6:	789b      	ldrb	r3, [r3, #2]
 80072d8:	461a      	mov	r2, r3
 80072da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072e8:	461a      	mov	r2, r3
 80072ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f0:	895b      	ldrh	r3, [r3, #10]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d008      	beq.n	8007308 <find_volume+0x26c>
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	895b      	ldrh	r3, [r3, #10]
 80072fa:	461a      	mov	r2, r3
 80072fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fe:	895b      	ldrh	r3, [r3, #10]
 8007300:	3b01      	subs	r3, #1
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <find_volume+0x270>
 8007308:	230d      	movs	r3, #13
 800730a:	e140      	b.n	800758e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800730c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730e:	3338      	adds	r3, #56	@ 0x38
 8007310:	3311      	adds	r3, #17
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd fe5e 	bl	8004fd4 <ld_word>
 8007318:	4603      	mov	r3, r0
 800731a:	461a      	mov	r2, r3
 800731c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	891b      	ldrh	r3, [r3, #8]
 8007324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007326:	8992      	ldrh	r2, [r2, #12]
 8007328:	0952      	lsrs	r2, r2, #5
 800732a:	b292      	uxth	r2, r2
 800732c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007330:	fb01 f202 	mul.w	r2, r1, r2
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <find_volume+0x2a8>
 800733c:	230d      	movs	r3, #13
 800733e:	e126      	b.n	800758e <find_volume+0x4f2>
 8007340:	200023e8 	.word	0x200023e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007346:	3338      	adds	r3, #56	@ 0x38
 8007348:	3313      	adds	r3, #19
 800734a:	4618      	mov	r0, r3
 800734c:	f7fd fe42 	bl	8004fd4 <ld_word>
 8007350:	4603      	mov	r3, r0
 8007352:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <find_volume+0x2cc>
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	3338      	adds	r3, #56	@ 0x38
 800735e:	3320      	adds	r3, #32
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd fe4f 	bl	8005004 <ld_dword>
 8007366:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	3338      	adds	r3, #56	@ 0x38
 800736c:	330e      	adds	r3, #14
 800736e:	4618      	mov	r0, r3
 8007370:	f7fd fe30 	bl	8004fd4 <ld_word>
 8007374:	4603      	mov	r3, r0
 8007376:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007378:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <find_volume+0x2e6>
 800737e:	230d      	movs	r3, #13
 8007380:	e105      	b.n	800758e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007382:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007386:	4413      	add	r3, r2
 8007388:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800738a:	8911      	ldrh	r1, [r2, #8]
 800738c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800738e:	8992      	ldrh	r2, [r2, #12]
 8007390:	0952      	lsrs	r2, r2, #5
 8007392:	b292      	uxth	r2, r2
 8007394:	fbb1 f2f2 	udiv	r2, r1, r2
 8007398:	b292      	uxth	r2, r2
 800739a:	4413      	add	r3, r2
 800739c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800739e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d201      	bcs.n	80073aa <find_volume+0x30e>
 80073a6:	230d      	movs	r3, #13
 80073a8:	e0f1      	b.n	800758e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80073aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073b2:	8952      	ldrh	r2, [r2, #10]
 80073b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <find_volume+0x328>
 80073c0:	230d      	movs	r3, #13
 80073c2:	e0e4      	b.n	800758e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80073c4:	2303      	movs	r3, #3
 80073c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d802      	bhi.n	80073da <find_volume+0x33e>
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d802      	bhi.n	80073ea <find_volume+0x34e>
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	1c9a      	adds	r2, r3, #2
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073f6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80073f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80073fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073fc:	441a      	add	r2, r3
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007402:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	441a      	add	r2, r3
 8007408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800740c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007410:	2b03      	cmp	r3, #3
 8007412:	d11e      	bne.n	8007452 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007416:	3338      	adds	r3, #56	@ 0x38
 8007418:	332a      	adds	r3, #42	@ 0x2a
 800741a:	4618      	mov	r0, r3
 800741c:	f7fd fdda 	bl	8004fd4 <ld_word>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <find_volume+0x38e>
 8007426:	230d      	movs	r3, #13
 8007428:	e0b1      	b.n	800758e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800742a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742c:	891b      	ldrh	r3, [r3, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <find_volume+0x39a>
 8007432:	230d      	movs	r3, #13
 8007434:	e0ab      	b.n	800758e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	3338      	adds	r3, #56	@ 0x38
 800743a:	332c      	adds	r3, #44	@ 0x2c
 800743c:	4618      	mov	r0, r3
 800743e:	f7fd fde1 	bl	8005004 <ld_dword>
 8007442:	4602      	mov	r2, r0
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007450:	e01f      	b.n	8007492 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007454:	891b      	ldrh	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <find_volume+0x3c2>
 800745a:	230d      	movs	r3, #13
 800745c:	e097      	b.n	800758e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007460:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007464:	441a      	add	r2, r3
 8007466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007468:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800746a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800746e:	2b02      	cmp	r3, #2
 8007470:	d103      	bne.n	800747a <find_volume+0x3de>
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	e00a      	b.n	8007490 <find_volume+0x3f4>
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	69da      	ldr	r2, [r3, #28]
 800747e:	4613      	mov	r3, r2
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	4413      	add	r3, r2
 8007484:	085a      	lsrs	r2, r3, #1
 8007486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007490:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	899b      	ldrh	r3, [r3, #12]
 800749a:	4619      	mov	r1, r3
 800749c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800749e:	440b      	add	r3, r1
 80074a0:	3b01      	subs	r3, #1
 80074a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074a4:	8989      	ldrh	r1, [r1, #12]
 80074a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d201      	bcs.n	80074b2 <find_volume+0x416>
 80074ae:	230d      	movs	r3, #13
 80074b0:	e06d      	b.n	800758e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80074b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b4:	f04f 32ff 	mov.w	r2, #4294967295
 80074b8:	619a      	str	r2, [r3, #24]
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	2280      	movs	r2, #128	@ 0x80
 80074c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80074c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d149      	bne.n	8007564 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	3338      	adds	r3, #56	@ 0x38
 80074d4:	3330      	adds	r3, #48	@ 0x30
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd fd7c 	bl	8004fd4 <ld_word>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d140      	bne.n	8007564 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80074e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e4:	3301      	adds	r3, #1
 80074e6:	4619      	mov	r1, r3
 80074e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074ea:	f7fe f823 	bl	8005534 <move_window>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d137      	bne.n	8007564 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80074f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f6:	2200      	movs	r2, #0
 80074f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80074fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fc:	3338      	adds	r3, #56	@ 0x38
 80074fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd fd66 	bl	8004fd4 <ld_word>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007510:	429a      	cmp	r2, r3
 8007512:	d127      	bne.n	8007564 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007516:	3338      	adds	r3, #56	@ 0x38
 8007518:	4618      	mov	r0, r3
 800751a:	f7fd fd73 	bl	8005004 <ld_dword>
 800751e:	4603      	mov	r3, r0
 8007520:	4a1d      	ldr	r2, [pc, #116]	@ (8007598 <find_volume+0x4fc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d11e      	bne.n	8007564 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	3338      	adds	r3, #56	@ 0x38
 800752a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd fd68 	bl	8005004 <ld_dword>
 8007534:	4603      	mov	r3, r0
 8007536:	4a19      	ldr	r2, [pc, #100]	@ (800759c <find_volume+0x500>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d113      	bne.n	8007564 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	3338      	adds	r3, #56	@ 0x38
 8007540:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007544:	4618      	mov	r0, r3
 8007546:	f7fd fd5d 	bl	8005004 <ld_dword>
 800754a:	4602      	mov	r2, r0
 800754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007552:	3338      	adds	r3, #56	@ 0x38
 8007554:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007558:	4618      	mov	r0, r3
 800755a:	f7fd fd53 	bl	8005004 <ld_dword>
 800755e:	4602      	mov	r2, r0
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007566:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800756a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800756c:	4b0c      	ldr	r3, [pc, #48]	@ (80075a0 <find_volume+0x504>)
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	4b0a      	ldr	r3, [pc, #40]	@ (80075a0 <find_volume+0x504>)
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <find_volume+0x504>)
 800757a:	881a      	ldrh	r2, [r3, #0]
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	4a08      	ldr	r2, [pc, #32]	@ (80075a4 <find_volume+0x508>)
 8007584:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007586:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007588:	f7fd ff6c 	bl	8005464 <clear_lock>
#endif
	return FR_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3758      	adds	r7, #88	@ 0x58
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	41615252 	.word	0x41615252
 800759c:	61417272 	.word	0x61417272
 80075a0:	200023ec 	.word	0x200023ec
 80075a4:	20002410 	.word	0x20002410

080075a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80075b2:	2309      	movs	r3, #9
 80075b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01c      	beq.n	80075f6 <validate+0x4e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d018      	beq.n	80075f6 <validate+0x4e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d013      	beq.n	80075f6 <validate+0x4e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	889a      	ldrh	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	88db      	ldrh	r3, [r3, #6]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d10c      	bne.n	80075f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd fc56 	bl	8004e94 <disk_status>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <validate+0x4e>
			res = FR_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <validate+0x5a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	e000      	b.n	8007604 <validate+0x5c>
 8007602:	2300      	movs	r3, #0
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	6013      	str	r3, [r2, #0]
	return res;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007626:	f107 0310 	add.w	r3, r7, #16
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fc9c 	bl	8006f68 <get_ldnumber>
 8007630:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	2b00      	cmp	r3, #0
 8007636:	da01      	bge.n	800763c <f_mount+0x28>
 8007638:	230b      	movs	r3, #11
 800763a:	e02b      	b.n	8007694 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800763c:	4a17      	ldr	r2, [pc, #92]	@ (800769c <f_mount+0x88>)
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007644:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800764c:	69b8      	ldr	r0, [r7, #24]
 800764e:	f7fd ff09 	bl	8005464 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	490d      	ldr	r1, [pc, #52]	@ (800769c <f_mount+0x88>)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <f_mount+0x66>
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d001      	beq.n	800767e <f_mount+0x6a>
 800767a:	2300      	movs	r3, #0
 800767c:	e00a      	b.n	8007694 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800767e:	f107 010c 	add.w	r1, r7, #12
 8007682:	f107 0308 	add.w	r3, r7, #8
 8007686:	2200      	movs	r2, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff fd07 	bl	800709c <find_volume>
 800768e:	4603      	mov	r3, r0
 8007690:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007692:	7dfb      	ldrb	r3, [r7, #23]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3720      	adds	r7, #32
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200023e8 	.word	0x200023e8

080076a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b09a      	sub	sp, #104	@ 0x68
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <f_open+0x18>
 80076b4:	2309      	movs	r3, #9
 80076b6:	e1b7      	b.n	8007a28 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80076c0:	79fa      	ldrb	r2, [r7, #7]
 80076c2:	f107 0114 	add.w	r1, r7, #20
 80076c6:	f107 0308 	add.w	r3, r7, #8
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fce6 	bl	800709c <find_volume>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80076d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f040 819b 	bne.w	8007a16 <f_open+0x376>
		dj.obj.fs = fs;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	f107 0318 	add.w	r3, r7, #24
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fbc5 	bl	8006e7c <follow_path>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80076f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d118      	bne.n	8007732 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007700:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007704:	b25b      	sxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	da03      	bge.n	8007712 <f_open+0x72>
				res = FR_INVALID_NAME;
 800770a:	2306      	movs	r3, #6
 800770c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007710:	e00f      	b.n	8007732 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	2b01      	cmp	r3, #1
 8007716:	bf8c      	ite	hi
 8007718:	2301      	movhi	r3, #1
 800771a:	2300      	movls	r3, #0
 800771c:	b2db      	uxtb	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	f107 0318 	add.w	r3, r7, #24
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd fd54 	bl	80051d4 <chk_lock>
 800772c:	4603      	mov	r3, r0
 800772e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	f003 031c 	and.w	r3, r3, #28
 8007738:	2b00      	cmp	r3, #0
 800773a:	d07f      	beq.n	800783c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800773c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007744:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007748:	2b04      	cmp	r3, #4
 800774a:	d10e      	bne.n	800776a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800774c:	f7fd fd9e 	bl	800528c <enq_lock>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d006      	beq.n	8007764 <f_open+0xc4>
 8007756:	f107 0318 	add.w	r3, r7, #24
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff f800 	bl	8006760 <dir_register>
 8007760:	4603      	mov	r3, r0
 8007762:	e000      	b.n	8007766 <f_open+0xc6>
 8007764:	2312      	movs	r3, #18
 8007766:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	f043 0308 	orr.w	r3, r3, #8
 8007770:	71fb      	strb	r3, [r7, #7]
 8007772:	e010      	b.n	8007796 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007774:	7fbb      	ldrb	r3, [r7, #30]
 8007776:	f003 0311 	and.w	r3, r3, #17
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <f_open+0xe6>
					res = FR_DENIED;
 800777e:	2307      	movs	r3, #7
 8007780:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007784:	e007      	b.n	8007796 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <f_open+0xf6>
 8007790:	2308      	movs	r3, #8
 8007792:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007796:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800779a:	2b00      	cmp	r3, #0
 800779c:	d168      	bne.n	8007870 <f_open+0x1d0>
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d063      	beq.n	8007870 <f_open+0x1d0>
				dw = GET_FATTIME();
 80077a8:	f7fd fa08 	bl	8004bbc <get_fattime>
 80077ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	330e      	adds	r3, #14
 80077b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fd fc63 	bl	8005080 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80077ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077bc:	3316      	adds	r3, #22
 80077be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd fc5d 	bl	8005080 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	330b      	adds	r3, #11
 80077ca:	2220      	movs	r2, #32
 80077cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe fc32 	bl	800603e <ld_clust>
 80077da:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077e0:	2200      	movs	r2, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fc4a 	bl	800607c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80077e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ea:	331c      	adds	r3, #28
 80077ec:	2100      	movs	r1, #0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fd fc46 	bl	8005080 <st_dword>
					fs->wflag = 1;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2201      	movs	r2, #1
 80077f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80077fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d037      	beq.n	8007870 <f_open+0x1d0>
						dw = fs->winsect;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007804:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007806:	f107 0318 	add.w	r3, r7, #24
 800780a:	2200      	movs	r2, #0
 800780c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe f93a 	bl	8005a88 <remove_chain>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800781a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800781e:	2b00      	cmp	r3, #0
 8007820:	d126      	bne.n	8007870 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007826:	4618      	mov	r0, r3
 8007828:	f7fd fe84 	bl	8005534 <move_window>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007836:	3a01      	subs	r2, #1
 8007838:	615a      	str	r2, [r3, #20]
 800783a:	e019      	b.n	8007870 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800783c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007840:	2b00      	cmp	r3, #0
 8007842:	d115      	bne.n	8007870 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007844:	7fbb      	ldrb	r3, [r7, #30]
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <f_open+0x1b6>
					res = FR_NO_FILE;
 800784e:	2304      	movs	r3, #4
 8007850:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007854:	e00c      	b.n	8007870 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <f_open+0x1d0>
 8007860:	7fbb      	ldrb	r3, [r7, #30]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <f_open+0x1d0>
						res = FR_DENIED;
 800786a:	2307      	movs	r3, #7
 800786c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007870:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007874:	2b00      	cmp	r3, #0
 8007876:	d126      	bne.n	80078c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007888:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	2b01      	cmp	r3, #1
 800789c:	bf8c      	ite	hi
 800789e:	2301      	movhi	r3, #1
 80078a0:	2300      	movls	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	f107 0318 	add.w	r3, r7, #24
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd fd0f 	bl	80052d0 <inc_lock>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <f_open+0x226>
 80078c0:	2302      	movs	r3, #2
 80078c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80078c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f040 80a3 	bne.w	8007a16 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078d4:	4611      	mov	r1, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fbb1 	bl	800603e <ld_clust>
 80078dc:	4602      	mov	r2, r0
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	331c      	adds	r3, #28
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd fb8c 	bl	8005004 <ld_dword>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	88da      	ldrh	r2, [r3, #6]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	79fa      	ldrb	r2, [r7, #7]
 800790a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3330      	adds	r3, #48	@ 0x30
 8007922:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f7fd fbf6 	bl	800511a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d06e      	beq.n	8007a16 <f_open+0x376>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d06a      	beq.n	8007a16 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	895b      	ldrh	r3, [r3, #10]
 800794c:	461a      	mov	r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	899b      	ldrh	r3, [r3, #12]
 8007952:	fb02 f303 	mul.w	r3, r2, r3
 8007956:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007964:	e016      	b.n	8007994 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800796a:	4618      	mov	r0, r3
 800796c:	f7fd fe9f 	bl	80056ae <get_fat>
 8007970:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007974:	2b01      	cmp	r3, #1
 8007976:	d802      	bhi.n	800797e <f_open+0x2de>
 8007978:	2302      	movs	r3, #2
 800797a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800797e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d102      	bne.n	800798c <f_open+0x2ec>
 8007986:	2301      	movs	r3, #1
 8007988:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800798c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800798e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007994:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007998:	2b00      	cmp	r3, #0
 800799a:	d103      	bne.n	80079a4 <f_open+0x304>
 800799c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800799e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d8e0      	bhi.n	8007966 <f_open+0x2c6>
				}
				fp->clust = clst;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80079aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d131      	bne.n	8007a16 <f_open+0x376>
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	899b      	ldrh	r3, [r3, #12]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80079be:	fb01 f202 	mul.w	r2, r1, r2
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d026      	beq.n	8007a16 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd fe4f 	bl	8005670 <clust2sect>
 80079d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80079d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <f_open+0x342>
						res = FR_INT_ERR;
 80079da:	2302      	movs	r3, #2
 80079dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80079e0:	e019      	b.n	8007a16 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	899b      	ldrh	r3, [r3, #12]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80079ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	7858      	ldrb	r0, [r3, #1]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a1a      	ldr	r2, [r3, #32]
 8007a04:	2301      	movs	r3, #1
 8007a06:	f7fd fa87 	bl	8004f18 <disk_read>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <f_open+0x376>
 8007a10:	2301      	movs	r3, #1
 8007a12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007a16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <f_open+0x384>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007a24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3768      	adds	r7, #104	@ 0x68
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08e      	sub	sp, #56	@ 0x38
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f107 0214 	add.w	r2, r7, #20
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fda9 	bl	80075a8 <validate>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007a5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d107      	bne.n	8007a74 <f_read+0x44>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	7d5b      	ldrb	r3, [r3, #21]
 8007a68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <f_read+0x4a>
 8007a74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a78:	e135      	b.n	8007ce6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	7d1b      	ldrb	r3, [r3, #20]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <f_read+0x5a>
 8007a86:	2307      	movs	r3, #7
 8007a88:	e12d      	b.n	8007ce6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	f240 811e 	bls.w	8007cdc <f_read+0x2ac>
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007aa4:	e11a      	b.n	8007cdc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	8992      	ldrh	r2, [r2, #12]
 8007aae:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab2:	fb01 f202 	mul.w	r2, r1, r2
 8007ab6:	1a9b      	subs	r3, r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 80d5 	bne.w	8007c68 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	8992      	ldrh	r2, [r2, #12]
 8007ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	8952      	ldrh	r2, [r2, #10]
 8007ace:	3a01      	subs	r2, #1
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d12f      	bne.n	8007b3a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ae8:	e013      	b.n	8007b12 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	4619      	mov	r1, r3
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7fe f8c2 	bl	8005c82 <clmt_clust>
 8007afe:	6338      	str	r0, [r7, #48]	@ 0x30
 8007b00:	e007      	b.n	8007b12 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f7fd fdcf 	bl	80056ae <get_fat>
 8007b10:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d804      	bhi.n	8007b22 <f_read+0xf2>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	755a      	strb	r2, [r3, #21]
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e0e1      	b.n	8007ce6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d104      	bne.n	8007b34 <f_read+0x104>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	755a      	strb	r2, [r3, #21]
 8007b30:	2301      	movs	r3, #1
 8007b32:	e0d8      	b.n	8007ce6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b38:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f7fd fd94 	bl	8005670 <clust2sect>
 8007b48:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d104      	bne.n	8007b5a <f_read+0x12a>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2202      	movs	r2, #2
 8007b54:	755a      	strb	r2, [r3, #21]
 8007b56:	2302      	movs	r3, #2
 8007b58:	e0c5      	b.n	8007ce6 <f_read+0x2b6>
			sect += csect;
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	4413      	add	r3, r2
 8007b60:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	899b      	ldrh	r3, [r3, #12]
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d041      	beq.n	8007bfa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	4413      	add	r3, r2
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	8952      	ldrh	r2, [r2, #10]
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d905      	bls.n	8007b90 <f_read+0x160>
					cc = fs->csize - csect;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	895b      	ldrh	r3, [r3, #10]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	7858      	ldrb	r0, [r3, #1]
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b9a:	f7fd f9bd 	bl	8004f18 <disk_read>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <f_read+0x17e>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	755a      	strb	r2, [r3, #21]
 8007baa:	2301      	movs	r3, #1
 8007bac:	e09b      	b.n	8007ce6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	7d1b      	ldrb	r3, [r3, #20]
 8007bb2:	b25b      	sxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	da18      	bge.n	8007bea <f_read+0x1ba>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d911      	bls.n	8007bea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1a      	ldr	r2, [r3, #32]
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	8992      	ldrh	r2, [r2, #12]
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
 8007bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd8:	18d0      	adds	r0, r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	899b      	ldrh	r3, [r3, #12]
 8007be4:	461a      	mov	r2, r3
 8007be6:	f7fd fa77 	bl	80050d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	899b      	ldrh	r3, [r3, #12]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007bf8:	e05c      	b.n	8007cb4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d02e      	beq.n	8007c62 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	7d1b      	ldrb	r3, [r3, #20]
 8007c08:	b25b      	sxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da18      	bge.n	8007c40 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	7858      	ldrb	r0, [r3, #1]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1a      	ldr	r2, [r3, #32]
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f7fd f99b 	bl	8004f58 <disk_write>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <f_read+0x202>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	755a      	strb	r2, [r3, #21]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e059      	b.n	8007ce6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	7d1b      	ldrb	r3, [r3, #20]
 8007c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	7858      	ldrb	r0, [r3, #1]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	f7fd f963 	bl	8004f18 <disk_read>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <f_read+0x232>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	755a      	strb	r2, [r3, #21]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e041      	b.n	8007ce6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	899b      	ldrh	r3, [r3, #12]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	8992      	ldrh	r2, [r2, #12]
 8007c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c7a:	fb01 f202 	mul.w	r2, r1, r2
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	1ac3      	subs	r3, r0, r3
 8007c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d901      	bls.n	8007c90 <f_read+0x260>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	8992      	ldrh	r2, [r2, #12]
 8007c9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ca2:	fb00 f202 	mul.w	r2, r0, r2
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	440b      	add	r3, r1
 8007caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cac:	4619      	mov	r1, r3
 8007cae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cb0:	f7fd fa12 	bl	80050d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb8:	4413      	add	r3, r2
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc2:	441a      	add	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	619a      	str	r2, [r3, #24]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cce:	441a      	add	r2, r3
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f47f aee1 	bne.w	8007aa6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3738      	adds	r7, #56	@ 0x38
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b086      	sub	sp, #24
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f107 0208 	add.w	r2, r7, #8
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fc52 	bl	80075a8 <validate>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d168      	bne.n	8007de0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	7d1b      	ldrb	r3, [r3, #20]
 8007d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d062      	beq.n	8007de0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7d1b      	ldrb	r3, [r3, #20]
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da15      	bge.n	8007d50 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	7858      	ldrb	r0, [r3, #1]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	2301      	movs	r3, #1
 8007d34:	f7fd f910 	bl	8004f58 <disk_write>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <f_sync+0x54>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e04f      	b.n	8007de2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	7d1b      	ldrb	r3, [r3, #20]
 8007d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007d50:	f7fc ff34 	bl	8004bbc <get_fattime>
 8007d54:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7fd fbe8 	bl	8005534 <move_window>
 8007d64:	4603      	mov	r3, r0
 8007d66:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d138      	bne.n	8007de0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d72:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	330b      	adds	r3, #11
 8007d78:	781a      	ldrb	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	330b      	adds	r3, #11
 8007d7e:	f042 0220 	orr.w	r2, r2, #32
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68f9      	ldr	r1, [r7, #12]
 8007d92:	f7fe f973 	bl	800607c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f103 021c 	add.w	r2, r3, #28
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f7fd f96c 	bl	8005080 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3316      	adds	r3, #22
 8007dac:	6939      	ldr	r1, [r7, #16]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fd f966 	bl	8005080 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3312      	adds	r3, #18
 8007db8:	2100      	movs	r1, #0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fd f945 	bl	800504a <st_word>
					fs->wflag = 1;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fd fbe1 	bl	8005590 <sync_fs>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	7d1b      	ldrb	r3, [r3, #20]
 8007dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff ff7b 	bl	8007cee <f_sync>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d118      	bne.n	8007e34 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f107 0208 	add.w	r2, r7, #8
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fbcc 	bl	80075a8 <validate>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10c      	bne.n	8007e34 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fd fae4 	bl	80053ec <dec_lock>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <f_opendir+0x14>
 8007e4e:	2309      	movs	r3, #9
 8007e50:	e064      	b.n	8007f1c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007e56:	f107 010c 	add.w	r1, r7, #12
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff f91c 	bl	800709c <find_volume>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d14f      	bne.n	8007f0e <f_opendir+0xd0>
		obj->fs = fs;
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fe ffff 	bl	8006e7c <follow_path>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d13d      	bne.n	8007f04 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db12      	blt.n	8007eba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	799b      	ldrb	r3, [r3, #6]
 8007e98:	f003 0310 	and.w	r3, r3, #16
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f7fe f8c8 	bl	800603e <ld_clust>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	609a      	str	r2, [r3, #8]
 8007eb4:	e001      	b.n	8007eba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007eb6:	2305      	movs	r3, #5
 8007eb8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d121      	bne.n	8007f04 <f_opendir+0xc6>
				obj->id = fs->id;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	88da      	ldrh	r2, [r3, #6]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7fd ff11 	bl	8005cf2 <dir_sdi>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d114      	bne.n	8007f04 <f_opendir+0xc6>
					if (obj->sclust) {
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00d      	beq.n	8007efe <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fd f9f3 	bl	80052d0 <inc_lock>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d105      	bne.n	8007f04 <f_opendir+0xc6>
 8007ef8:	2312      	movs	r3, #18
 8007efa:	75fb      	strb	r3, [r7, #23]
 8007efc:	e002      	b.n	8007f04 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2200      	movs	r2, #0
 8007f02:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d101      	bne.n	8007f0e <f_opendir+0xd0>
 8007f0a:	2305      	movs	r3, #5
 8007f0c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <f_opendir+0xdc>
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f107 0208 	add.w	r2, r7, #8
 8007f32:	4611      	mov	r1, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fb37 	bl	80075a8 <validate>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d110      	bne.n	8007f66 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d006      	beq.n	8007f5a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fd fa4b 	bl	80053ec <dec_lock>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f107 0208 	add.w	r2, r7, #8
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff fb10 	bl	80075a8 <validate>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d126      	bne.n	8007fe0 <f_readdir+0x70>
		if (!fno) {
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7fd fea9 	bl	8005cf2 <dir_sdi>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
 8007fa4:	e01c      	b.n	8007fe0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fe fa72 	bl	8006492 <dir_read>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d101      	bne.n	8007fbc <f_readdir+0x4c>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10e      	bne.n	8007fe0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7fe fcc3 	bl	8006950 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fd ff19 	bl	8005e04 <dir_next>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d101      	bne.n	8007fe0 <f_readdir+0x70>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b090      	sub	sp, #64	@ 0x40
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007ff4:	f107 0108 	add.w	r1, r7, #8
 8007ff8:	1d3b      	adds	r3, r7, #4
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff f84d 	bl	800709c <find_volume>
 8008002:	4603      	mov	r3, r0
 8008004:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8008008:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800800c:	2b00      	cmp	r3, #0
 800800e:	d11f      	bne.n	8008050 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	f107 0308 	add.w	r3, r7, #8
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe ff2f 	bl	8006e7c <follow_path>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008024:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008028:	2b00      	cmp	r3, #0
 800802a:	d111      	bne.n	8008050 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800802c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008030:	b25b      	sxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	da03      	bge.n	800803e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008036:	2306      	movs	r3, #6
 8008038:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800803c:	e008      	b.n	8008050 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <f_stat+0x66>
 8008044:	f107 0308 	add.w	r3, r7, #8
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fc80 	bl	8006950 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008050:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008054:	4618      	mov	r0, r3
 8008056:	3740      	adds	r7, #64	@ 0x40
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b092      	sub	sp, #72	@ 0x48
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008068:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800806c:	f107 030c 	add.w	r3, r7, #12
 8008070:	2200      	movs	r2, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff f812 	bl	800709c <find_volume>
 8008078:	4603      	mov	r3, r0
 800807a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800807e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008082:	2b00      	cmp	r3, #0
 8008084:	f040 8099 	bne.w	80081ba <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800808e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	3b02      	subs	r3, #2
 8008098:	429a      	cmp	r2, r3
 800809a:	d804      	bhi.n	80080a6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	e089      	b.n	80081ba <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d128      	bne.n	8008104 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80080b2:	2302      	movs	r3, #2
 80080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80080ba:	f107 0314 	add.w	r3, r7, #20
 80080be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fd faf4 	bl	80056ae <get_fat>
 80080c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ce:	d103      	bne.n	80080d8 <f_getfree+0x7c>
 80080d0:	2301      	movs	r3, #1
 80080d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80080d6:	e063      	b.n	80081a0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d103      	bne.n	80080e6 <f_getfree+0x8a>
 80080de:	2302      	movs	r3, #2
 80080e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80080e4:	e05c      	b.n	80081a0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80080e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <f_getfree+0x96>
 80080ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ee:	3301      	adds	r3, #1
 80080f0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	3301      	adds	r3, #1
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80080fe:	429a      	cmp	r2, r3
 8008100:	d3db      	bcc.n	80080ba <f_getfree+0x5e>
 8008102:	e04d      	b.n	80081a0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
 8008114:	2300      	movs	r3, #0
 8008116:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811a:	2b00      	cmp	r3, #0
 800811c:	d113      	bne.n	8008146 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800811e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008126:	4619      	mov	r1, r3
 8008128:	f7fd fa04 	bl	8005534 <move_window>
 800812c:	4603      	mov	r3, r0
 800812e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008132:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008136:	2b00      	cmp	r3, #0
 8008138:	d131      	bne.n	800819e <f_getfree+0x142>
							p = fs->win;
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	3338      	adds	r3, #56	@ 0x38
 800813e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008142:	899b      	ldrh	r3, [r3, #12]
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d10f      	bne.n	800816e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800814e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008150:	f7fc ff40 	bl	8004fd4 <ld_word>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <f_getfree+0x104>
 800815a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800815c:	3301      	adds	r3, #1
 800815e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	3302      	adds	r3, #2
 8008164:	633b      	str	r3, [r7, #48]	@ 0x30
 8008166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008168:	3b02      	subs	r3, #2
 800816a:	637b      	str	r3, [r7, #52]	@ 0x34
 800816c:	e010      	b.n	8008190 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800816e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008170:	f7fc ff48 	bl	8005004 <ld_dword>
 8008174:	4603      	mov	r3, r0
 8008176:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <f_getfree+0x128>
 800817e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008180:	3301      	adds	r3, #1
 8008182:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	3304      	adds	r3, #4
 8008188:	633b      	str	r3, [r7, #48]	@ 0x30
 800818a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818c:	3b04      	subs	r3, #4
 800818e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008192:	3b01      	subs	r3, #1
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1bd      	bne.n	8008118 <f_getfree+0xbc>
 800819c:	e000      	b.n	80081a0 <f_getfree+0x144>
							if (res != FR_OK) break;
 800819e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081a4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081aa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	791a      	ldrb	r2, [r3, #4]
 80081b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b2:	f042 0201 	orr.w	r2, r2, #1
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80081ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3748      	adds	r7, #72	@ 0x48
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80081d6:	2301      	movs	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80081de:	4b1f      	ldr	r3, [pc, #124]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 80081e0:	7a5b      	ldrb	r3, [r3, #9]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d131      	bne.n	800824c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80081e8:	4b1c      	ldr	r3, [pc, #112]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 80081ea:	7a5b      	ldrb	r3, [r3, #9]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	4b1a      	ldr	r3, [pc, #104]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 80081f2:	2100      	movs	r1, #0
 80081f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80081f6:	4b19      	ldr	r3, [pc, #100]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 80081f8:	7a5b      	ldrb	r3, [r3, #9]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	4a17      	ldr	r2, [pc, #92]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008206:	4b15      	ldr	r3, [pc, #84]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 8008208:	7a5b      	ldrb	r3, [r3, #9]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	461a      	mov	r2, r3
 800820e:	4b13      	ldr	r3, [pc, #76]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 8008210:	4413      	add	r3, r2
 8008212:	79fa      	ldrb	r2, [r7, #7]
 8008214:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008216:	4b11      	ldr	r3, [pc, #68]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 8008218:	7a5b      	ldrb	r3, [r3, #9]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	b2d1      	uxtb	r1, r2
 8008220:	4a0e      	ldr	r2, [pc, #56]	@ (800825c <FATFS_LinkDriverEx+0x94>)
 8008222:	7251      	strb	r1, [r2, #9]
 8008224:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008226:	7dbb      	ldrb	r3, [r7, #22]
 8008228:	3330      	adds	r3, #48	@ 0x30
 800822a:	b2da      	uxtb	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3301      	adds	r3, #1
 8008234:	223a      	movs	r2, #58	@ 0x3a
 8008236:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3302      	adds	r3, #2
 800823c:	222f      	movs	r2, #47	@ 0x2f
 800823e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	3303      	adds	r3, #3
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
}
 800824e:	4618      	mov	r0, r3
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20002610 	.word	0x20002610

08008260 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800826a:	2200      	movs	r2, #0
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff ffaa 	bl	80081c8 <FATFS_LinkDriverEx>
 8008274:	4603      	mov	r3, r0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008290:	d802      	bhi.n	8008298 <ff_convert+0x18>
		c = chr;
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	81fb      	strh	r3, [r7, #14]
 8008296:	e025      	b.n	80082e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	2bff      	cmp	r3, #255	@ 0xff
 80082a2:	d805      	bhi.n	80082b0 <ff_convert+0x30>
 80082a4:	88fb      	ldrh	r3, [r7, #6]
 80082a6:	3b80      	subs	r3, #128	@ 0x80
 80082a8:	4a12      	ldr	r2, [pc, #72]	@ (80082f4 <ff_convert+0x74>)
 80082aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082ae:	e000      	b.n	80082b2 <ff_convert+0x32>
 80082b0:	2300      	movs	r3, #0
 80082b2:	81fb      	strh	r3, [r7, #14]
 80082b4:	e016      	b.n	80082e4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80082b6:	2300      	movs	r3, #0
 80082b8:	81fb      	strh	r3, [r7, #14]
 80082ba:	e009      	b.n	80082d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80082bc:	89fb      	ldrh	r3, [r7, #14]
 80082be:	4a0d      	ldr	r2, [pc, #52]	@ (80082f4 <ff_convert+0x74>)
 80082c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d006      	beq.n	80082d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80082ca:	89fb      	ldrh	r3, [r7, #14]
 80082cc:	3301      	adds	r3, #1
 80082ce:	81fb      	strh	r3, [r7, #14]
 80082d0:	89fb      	ldrh	r3, [r7, #14]
 80082d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80082d4:	d9f2      	bls.n	80082bc <ff_convert+0x3c>
 80082d6:	e000      	b.n	80082da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80082d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80082da:	89fb      	ldrh	r3, [r7, #14]
 80082dc:	3380      	adds	r3, #128	@ 0x80
 80082de:	b29b      	uxth	r3, r3
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80082e4:	89fb      	ldrh	r3, [r7, #14]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	08012c30 	.word	0x08012c30

080082f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008308:	d201      	bcs.n	800830e <ff_wtoupper+0x16>
 800830a:	4b3e      	ldr	r3, [pc, #248]	@ (8008404 <ff_wtoupper+0x10c>)
 800830c:	e000      	b.n	8008310 <ff_wtoupper+0x18>
 800830e:	4b3e      	ldr	r3, [pc, #248]	@ (8008408 <ff_wtoupper+0x110>)
 8008310:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	617a      	str	r2, [r7, #20]
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800831c:	8a7b      	ldrh	r3, [r7, #18]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d068      	beq.n	80083f4 <ff_wtoupper+0xfc>
 8008322:	88fa      	ldrh	r2, [r7, #6]
 8008324:	8a7b      	ldrh	r3, [r7, #18]
 8008326:	429a      	cmp	r2, r3
 8008328:	d364      	bcc.n	80083f4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	1c9a      	adds	r2, r3, #2
 800832e:	617a      	str	r2, [r7, #20]
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	823b      	strh	r3, [r7, #16]
 8008334:	8a3b      	ldrh	r3, [r7, #16]
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	81fb      	strh	r3, [r7, #14]
 800833a:	8a3b      	ldrh	r3, [r7, #16]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008340:	88fa      	ldrh	r2, [r7, #6]
 8008342:	8a79      	ldrh	r1, [r7, #18]
 8008344:	8a3b      	ldrh	r3, [r7, #16]
 8008346:	440b      	add	r3, r1
 8008348:	429a      	cmp	r2, r3
 800834a:	da49      	bge.n	80083e0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	2b08      	cmp	r3, #8
 8008350:	d84f      	bhi.n	80083f2 <ff_wtoupper+0xfa>
 8008352:	a201      	add	r2, pc, #4	@ (adr r2, 8008358 <ff_wtoupper+0x60>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	0800837d 	.word	0x0800837d
 800835c:	0800838f 	.word	0x0800838f
 8008360:	080083a5 	.word	0x080083a5
 8008364:	080083ad 	.word	0x080083ad
 8008368:	080083b5 	.word	0x080083b5
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083c5 	.word	0x080083c5
 8008374:	080083cd 	.word	0x080083cd
 8008378:	080083d5 	.word	0x080083d5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800837c:	88fa      	ldrh	r2, [r7, #6]
 800837e:	8a7b      	ldrh	r3, [r7, #18]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	80fb      	strh	r3, [r7, #6]
 800838c:	e027      	b.n	80083de <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800838e:	88fa      	ldrh	r2, [r7, #6]
 8008390:	8a7b      	ldrh	r3, [r7, #18]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	b29b      	uxth	r3, r3
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	b29b      	uxth	r3, r3
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	80fb      	strh	r3, [r7, #6]
 80083a2:	e01c      	b.n	80083de <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	3b10      	subs	r3, #16
 80083a8:	80fb      	strh	r3, [r7, #6]
 80083aa:	e018      	b.n	80083de <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80083ac:	88fb      	ldrh	r3, [r7, #6]
 80083ae:	3b20      	subs	r3, #32
 80083b0:	80fb      	strh	r3, [r7, #6]
 80083b2:	e014      	b.n	80083de <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	3b30      	subs	r3, #48	@ 0x30
 80083b8:	80fb      	strh	r3, [r7, #6]
 80083ba:	e010      	b.n	80083de <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80083bc:	88fb      	ldrh	r3, [r7, #6]
 80083be:	3b1a      	subs	r3, #26
 80083c0:	80fb      	strh	r3, [r7, #6]
 80083c2:	e00c      	b.n	80083de <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80083c4:	88fb      	ldrh	r3, [r7, #6]
 80083c6:	3308      	adds	r3, #8
 80083c8:	80fb      	strh	r3, [r7, #6]
 80083ca:	e008      	b.n	80083de <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	3b50      	subs	r3, #80	@ 0x50
 80083d0:	80fb      	strh	r3, [r7, #6]
 80083d2:	e004      	b.n	80083de <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80083da:	80fb      	strh	r3, [r7, #6]
 80083dc:	bf00      	nop
			}
			break;
 80083de:	e008      	b.n	80083f2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80083e0:	89fb      	ldrh	r3, [r7, #14]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d195      	bne.n	8008312 <ff_wtoupper+0x1a>
 80083e6:	8a3b      	ldrh	r3, [r7, #16]
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4413      	add	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80083f0:	e78f      	b.n	8008312 <ff_wtoupper+0x1a>
			break;
 80083f2:	bf00      	nop
	}

	return chr;
 80083f4:	88fb      	ldrh	r3, [r7, #6]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	08012d30 	.word	0x08012d30
 8008408:	08012f24 	.word	0x08012f24

0800840c <toggle_LED>:
 *      Author: Admin
 */

#include "stm32f4xx_discovery_407.h"

int toggle_LED(char *replacerBuffer, unsigned int bufferLength){
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]

		//if (0 == strcmp(CGIPath, serverTestCGIPath)){
		if ((bufferLength <= 0) || NULL == replacerBuffer)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <toggle_LED+0x16>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <toggle_LED+0x1c>
		return -1;
 8008422:	f04f 33ff 	mov.w	r3, #4294967295
 8008426:	e03b      	b.n	80084a0 <toggle_LED+0x94>
		char pStatus=0;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]

				BSP_LED_Toggle(LED1);
 800842c:	2000      	movs	r0, #0
 800842e:	f7f9 fb7b 	bl	8001b28 <BSP_LED_Toggle>
				if (true == HAL_GPIO_ReadPin(LED1_GPIO_PORT, LED1_PIN)) {
 8008432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008436:	481c      	ldr	r0, [pc, #112]	@ (80084a8 <toggle_LED+0x9c>)
 8008438:	f7f9 ff06 	bl	8002248 <HAL_GPIO_ReadPin>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d10e      	bne.n	8008460 <toggle_LED+0x54>
					BSP_LED_On(LED1);
 8008442:	2000      	movs	r0, #0
 8008444:	f7f9 fb3c 	bl	8001ac0 <BSP_LED_On>
					BSP_LED_On(LED2);
 8008448:	2001      	movs	r0, #1
 800844a:	f7f9 fb39 	bl	8001ac0 <BSP_LED_On>
					BSP_LED_On(LED3);
 800844e:	2002      	movs	r0, #2
 8008450:	f7f9 fb36 	bl	8001ac0 <BSP_LED_On>
					BSP_LED_Off(LED4);
 8008454:	2003      	movs	r0, #3
 8008456:	f7f9 fb4d 	bl	8001af4 <BSP_LED_Off>
					pStatus = 1;
 800845a:	2301      	movs	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	e015      	b.n	800848c <toggle_LED+0x80>
				} else if (false == HAL_GPIO_ReadPin(LED1_GPIO_PORT, LED1_PIN)) {
 8008460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008464:	4810      	ldr	r0, [pc, #64]	@ (80084a8 <toggle_LED+0x9c>)
 8008466:	f7f9 feef 	bl	8002248 <HAL_GPIO_ReadPin>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10d      	bne.n	800848c <toggle_LED+0x80>
					BSP_LED_Off(LED1);
 8008470:	2000      	movs	r0, #0
 8008472:	f7f9 fb3f 	bl	8001af4 <BSP_LED_Off>
					BSP_LED_Off(LED2);
 8008476:	2001      	movs	r0, #1
 8008478:	f7f9 fb3c 	bl	8001af4 <BSP_LED_Off>
					BSP_LED_Off(LED3);
 800847c:	2002      	movs	r0, #2
 800847e:	f7f9 fb39 	bl	8001af4 <BSP_LED_Off>
					BSP_LED_On(LED4);
 8008482:	2003      	movs	r0, #3
 8008484:	f7f9 fb1c 	bl	8001ac0 <BSP_LED_On>
					pStatus = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
				}
				sprintf(replacerBuffer,"{  \"LEDstatus\":  %d }",pStatus);
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	461a      	mov	r2, r3
 8008490:	4906      	ldr	r1, [pc, #24]	@ (80084ac <toggle_LED+0xa0>)
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f007 f9e6 	bl	800f864 <siprintf>
				return strlen(replacerBuffer);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7f7 fea3 	bl	80001e4 <strlen>
 800849e:	4603      	mov	r3, r0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40020c00 	.word	0x40020c00
 80084ac:	080116dc 	.word	0x080116dc

080084b0 <Data>:
#include "LoremIpsum.h"
#include <stdio.h>
#include "string.h"
#include "stdlib.h"

int Data(char *DataBuffer){//781bytes
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	sprintf(DataBuffer,"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean vel turpis sit amet erat laoreet lacinia ut a risus. Nam sit amet est nec sapien volutpat vehicula. Fusce dignissim metus vel ipsum consectetur, ac tincidunt risus scelerisque. Integer sed justo nec turpis faucibus tincidunt sit amet ut dolor. Phasellus nec aliquam arcu, ac pharetra mauris. Donec ac sapien quis eros bibendum convallis. Etiam facilisis justo a lorem dapibus, nec commodo urna gravida. Integer non scelerisque turpis. Aenean dapibus sapien sed sapien elementum, non vulputate sapien dictum. Sed eget dui ultricies, luctus turpis a, egestas lorem. In in dui a est aliquam aliquam. Suspendisse potenti. Nullam vitae tincidunt justo. Integer pellentesque rutrum leo, eu vestibulum elit vulputate et.\r\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean vel turpis sit amet erat laoreet lacinia ut a risus. Nam sit amet est nec sapien volutpat vehicula. Fusce dignissim metus vel ipsum consectetur, ac tincidunt risus scelerisque. Integer sed justo nec turpis faucibus tincidunt sit amet ut dolor. Phasellus nec aliquam arcu, ac pharetra mauris. Donec ac sapien quis eros bibendum convallis. Etiam facilisis justo a lorem dapibus, nec commodo urna gravida. Integer non scelerisque turpis. Aenean dapibus sapien sed sapien elementum.\r\n");
 80084b8:	4905      	ldr	r1, [pc, #20]	@ (80084d0 <Data+0x20>)
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f007 f9d2 	bl	800f864 <siprintf>
//	char *temp=DataBuffer;
////	sprintf(temp,"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean vel turpis sit amet erat laoreet lacinia ut a risus. Nam sit amet est nec sapien volutpat vehicula. Fusce dignissim metus vel ipsum consectetur, ac tincidunt risus scelerisque. Integer sed justo nec turpis faucibus tincidunt sit amet ut dolor. Phasellus nec aliquam arcu, ac pharetra mauris. Donec ac sapien quis eros bibendum convallis. Etiam facilisis justo a lorem dapibus, nec commodo urna gravida. Integer non scelerisque turpis. Aenean dapibus sapien sed sapien elementum, non vulputate sapien dictum. Sed eget dui ultricies, luctus turpis a, egestas lorem. In in dui a est aliquam aliquam. Suspendisse potenti. Nullam vitae tincidunt justo. Integer pellentesque rutrum leo, eu vestibulum elit vulputate et.\r\n");
//    for (int i = 0; i < 2; ++i) {
//        strcat(DataBuffer, temp); // Append the original string
//    }
	return strlen(DataBuffer);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7f7 fe8f 	bl	80001e4 <strlen>
 80084c6:	4603      	mov	r3, r0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	080116f4 	.word	0x080116f4

080084d4 <ishex>:
#include "http_config.h"
#include "http_common.h"

// for URL decoding function
static inline int ishex(int x)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  return (x >= '0' && x <= '9') ||
         (x >= 'a' && x <= 'f') ||
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b2f      	cmp	r3, #47	@ 0x2f
 80084e0:	dd02      	ble.n	80084e8 <ishex+0x14>
  return (x >= '0' && x <= '9') ||
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b39      	cmp	r3, #57	@ 0x39
 80084e6:	dd0b      	ble.n	8008500 <ishex+0x2c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b60      	cmp	r3, #96	@ 0x60
 80084ec:	dd02      	ble.n	80084f4 <ishex+0x20>
         (x >= 'a' && x <= 'f') ||
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b66      	cmp	r3, #102	@ 0x66
 80084f2:	dd05      	ble.n	8008500 <ishex+0x2c>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b40      	cmp	r3, #64	@ 0x40
 80084f8:	dd04      	ble.n	8008504 <ishex+0x30>
         (x >= 'A' && x <= 'F');
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b46      	cmp	r3, #70	@ 0x46
 80084fe:	dc01      	bgt.n	8008504 <ishex+0x30>
         (x >= 'a' && x <= 'f') ||
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <ishex+0x32>
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <url_decode>:

//URL decoding function
int url_decode(const char *s, char *dec)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  char *o;
  const char *end = s + strlen(s);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7f7 fe60 	bl	80001e4 <strlen>
 8008524:	4602      	mov	r2, r0
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4413      	add	r3, r2
 800852a:	613b      	str	r3, [r7, #16]
  int c;

  for (o = dec; s <= end; o++)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	e039      	b.n	80085a6 <url_decode+0x92>
  {
    c = *s++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
    if (c == '+')
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008540:	d102      	bne.n	8008548 <url_decode+0x34>
      c = ' ';
 8008542:	2320      	movs	r3, #32
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	e024      	b.n	8008592 <url_decode+0x7e>
    else if (c == '%' && (!ishex(*s++) ||
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b25      	cmp	r3, #37	@ 0x25
 800854c:	d121      	bne.n	8008592 <url_decode+0x7e>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff ffbc 	bl	80084d4 <ishex>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d014      	beq.n	800858c <url_decode+0x78>
                          !ishex(*s++) ||
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff ffb2 	bl	80084d4 <ishex>
 8008570:	4603      	mov	r3, r0
    else if (c == '%' && (!ishex(*s++) ||
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <url_decode+0x78>
                          !sscanf(s - 2, "%2x", (unsigned int *)&c)))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3b02      	subs	r3, #2
 800857a:	f107 020c 	add.w	r2, r7, #12
 800857e:	490f      	ldr	r1, [pc, #60]	@ (80085bc <url_decode+0xa8>)
 8008580:	4618      	mov	r0, r3
 8008582:	f007 f98f 	bl	800f8a4 <siscanf>
 8008586:	4603      	mov	r3, r0
                          !ishex(*s++) ||
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <url_decode+0x7e>
      return -1;
 800858c:	f04f 33ff 	mov.w	r3, #4294967295
 8008590:	e010      	b.n	80085b4 <url_decode+0xa0>

    if (dec)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <url_decode+0x8c>
      *o = c;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	b2da      	uxtb	r2, r3
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	701a      	strb	r2, [r3, #0]
  for (o = dec; s <= end; o++)
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	3301      	adds	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d9c1      	bls.n	8008532 <url_decode+0x1e>
  }

  return o - dec;
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	1ad3      	subs	r3, r2, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	08011c24 	.word	0x08011c24

080085c0 <http_SSI_get_replacer_string>:
2) configuration is static and fixed at compile time. This can be adjusted in http_config.h 
*/
http_SSI_replacer_t http_SSI_replacer[HTTP_MAX_SSI_COUNT]; //hoping compiler to do its job and init to 0

int http_SSI_get_replacer_string(char *SSIString, char *replacerBuffer, unsigned int bufferLength)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e01e      	b.n	8008610 <http_SSI_get_replacer_string+0x50>
    { //find an empty slot and fill in the registration
        if (NULL != http_SSI_replacer[i].SSI_String)
 80085d2:	4a14      	ldr	r2, [pc, #80]	@ (8008624 <http_SSI_get_replacer_string+0x64>)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d015      	beq.n	800860a <http_SSI_get_replacer_string+0x4a>
        {
            if (0 == strcmp(SSIString, http_SSI_replacer[i].SSI_String))
 80085de:	4a11      	ldr	r2, [pc, #68]	@ (8008624 <http_SSI_get_replacer_string+0x64>)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085e6:	4619      	mov	r1, r3
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7f7 fdf1 	bl	80001d0 <strcmp>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <http_SSI_get_replacer_string+0x4a>
            {
                return http_SSI_replacer[i].SSI_stringReplacer(SSIString, replacerBuffer, bufferLength);
 80085f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008624 <http_SSI_get_replacer_string+0x64>)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	4413      	add	r3, r2
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	4798      	blx	r3
 8008606:	4603      	mov	r3, r0
 8008608:	e007      	b.n	800861a <http_SSI_get_replacer_string+0x5a>
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	3301      	adds	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2b04      	cmp	r3, #4
 8008614:	dddd      	ble.n	80085d2 <http_SSI_get_replacer_string+0x12>
            }
        }
    }
    return -1;
 8008616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	2000261c 	.word	0x2000261c

08008628 <http_SSI_register_replacer>:

http_SSI_replacerHandle_t http_SSI_register_replacer(const char *SSIString, http_SSI_replacer_cb SSIReplacerCb)
{
 8008628:	b590      	push	{r4, r7, lr}
 800862a:	b087      	sub	sp, #28
 800862c:	af02      	add	r7, sp, #8
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
    //find a uninitialized array element
    if ((NULL == SSIString) || (NULL == SSIReplacerCb))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <http_SSI_register_replacer+0x16>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <http_SSI_register_replacer+0x32>
    {
        PRINT_ERROR("NULL SSIString or CB (%p) \r\n", (void *)SSIString);
 800863e:	4b30      	ldr	r3, [pc, #192]	@ (8008700 <http_SSI_register_replacer+0xd8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68d8      	ldr	r0, [r3, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	4b2e      	ldr	r3, [pc, #184]	@ (8008704 <http_SSI_register_replacer+0xdc>)
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	2347      	movs	r3, #71	@ 0x47
 800864e:	4a2e      	ldr	r2, [pc, #184]	@ (8008708 <http_SSI_register_replacer+0xe0>)
 8008650:	492e      	ldr	r1, [pc, #184]	@ (800870c <http_SSI_register_replacer+0xe4>)
 8008652:	f007 f833 	bl	800f6bc <fiprintf>
        return 0;
 8008656:	2300      	movs	r3, #0
 8008658:	e04e      	b.n	80086f8 <http_SSI_register_replacer+0xd0>
    }
    else
    {
        int i = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	e039      	b.n	80086d8 <http_SSI_register_replacer+0xb0>
        { //find an empty slot and fill in the registration
            if (NULL == http_SSI_replacer[i].SSI_String)
 8008664:	4a2a      	ldr	r2, [pc, #168]	@ (8008710 <http_SSI_register_replacer+0xe8>)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d130      	bne.n	80086d2 <http_SSI_register_replacer+0xaa>
            {
                //allocate memory and copy string to it.
                http_SSI_replacer[i].SSI_String = (char *)malloc((size_t)strlen(SSIString) + 1);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7f7 fdb7 	bl	80001e4 <strlen>
 8008676:	4603      	mov	r3, r0
 8008678:	3301      	adds	r3, #1
 800867a:	4618      	mov	r0, r3
 800867c:	f006 febc 	bl	800f3f8 <malloc>
 8008680:	4603      	mov	r3, r0
 8008682:	4619      	mov	r1, r3
 8008684:	4a22      	ldr	r2, [pc, #136]	@ (8008710 <http_SSI_register_replacer+0xe8>)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                strncpy(http_SSI_replacer[i].SSI_String, SSIString, strlen(SSIString));
 800868c:	4a20      	ldr	r2, [pc, #128]	@ (8008710 <http_SSI_register_replacer+0xe8>)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7f7 fda5 	bl	80001e4 <strlen>
 800869a:	4603      	mov	r3, r0
 800869c:	461a      	mov	r2, r3
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4620      	mov	r0, r4
 80086a2:	f007 fa41 	bl	800fb28 <strncpy>
                http_SSI_replacer[i].SSI_String[strlen(SSIString)] = 0;
 80086a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008710 <http_SSI_register_replacer+0xe8>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7f7 fd98 	bl	80001e4 <strlen>
 80086b4:	4603      	mov	r3, r0
 80086b6:	4423      	add	r3, r4
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]

                http_SSI_replacer[i].SSI_stringReplacer = SSIReplacerCb;
 80086bc:	4a14      	ldr	r2, [pc, #80]	@ (8008710 <http_SSI_register_replacer+0xe8>)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	4413      	add	r3, r2
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	605a      	str	r2, [r3, #4]
                return &http_SSI_replacer[i];
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	4a10      	ldr	r2, [pc, #64]	@ (8008710 <http_SSI_register_replacer+0xe8>)
 80086ce:	4413      	add	r3, r2
 80086d0:	e012      	b.n	80086f8 <http_SSI_register_replacer+0xd0>
        for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3301      	adds	r3, #1
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b04      	cmp	r3, #4
 80086dc:	ddc2      	ble.n	8008664 <http_SSI_register_replacer+0x3c>
            }
        }
        PRINT_ERROR("no more slots to register(%d)\r\n", i);
 80086de:	4b08      	ldr	r3, [pc, #32]	@ (8008700 <http_SSI_register_replacer+0xd8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68d8      	ldr	r0, [r3, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	4b06      	ldr	r3, [pc, #24]	@ (8008704 <http_SSI_register_replacer+0xdc>)
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	235a      	movs	r3, #90	@ 0x5a
 80086ee:	4a06      	ldr	r2, [pc, #24]	@ (8008708 <http_SSI_register_replacer+0xe0>)
 80086f0:	4908      	ldr	r1, [pc, #32]	@ (8008714 <http_SSI_register_replacer+0xec>)
 80086f2:	f006 ffe3 	bl	800f6bc <fiprintf>
        return NULL;
 80086f6:	2300      	movs	r3, #0
    }
    return NULL; //Just a safety net.
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd90      	pop	{r4, r7, pc}
 8008700:	20001240 	.word	0x20001240
 8008704:	08012fe0 	.word	0x08012fe0
 8008708:	08011c28 	.word	0x08011c28
 800870c:	08011c54 	.word	0x08011c54
 8008710:	2000261c 	.word	0x2000261c
 8008714:	08011c84 	.word	0x08011c84

08008718 <http_SSI_deRegister_all>:
    deregisterHandle = NULL;
}

//deregister all registrations in one-go. Useful to implement a shutdown function
void http_SSI_deRegister_all(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
    int i = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	607b      	str	r3, [r7, #4]
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8008722:	2300      	movs	r3, #0
 8008724:	607b      	str	r3, [r7, #4]
 8008726:	e01a      	b.n	800875e <http_SSI_deRegister_all+0x46>
    { //find an empty slot and fill in the registration
        if (0 != http_SSI_replacer[i].SSI_String)
 8008728:	4a11      	ldr	r2, [pc, #68]	@ (8008770 <http_SSI_deRegister_all+0x58>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d011      	beq.n	8008758 <http_SSI_deRegister_all+0x40>
        {
            //free the string memory from heap
            free(http_SSI_replacer[i].SSI_String);
 8008734:	4a0e      	ldr	r2, [pc, #56]	@ (8008770 <http_SSI_deRegister_all+0x58>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800873c:	4618      	mov	r0, r3
 800873e:	f006 fe63 	bl	800f408 <free>
            http_SSI_replacer[i].SSI_String = NULL;
 8008742:	4a0b      	ldr	r2, [pc, #44]	@ (8008770 <http_SSI_deRegister_all+0x58>)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2100      	movs	r1, #0
 8008748:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            http_SSI_replacer[i].SSI_stringReplacer = NULL;
 800874c:	4a08      	ldr	r2, [pc, #32]	@ (8008770 <http_SSI_deRegister_all+0x58>)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	4413      	add	r3, r2
 8008754:	2200      	movs	r2, #0
 8008756:	605a      	str	r2, [r3, #4]
    for (i = 0; i < HTTP_MAX_SSI_COUNT; i++)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3301      	adds	r3, #1
 800875c:	607b      	str	r3, [r7, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b04      	cmp	r3, #4
 8008762:	dde1      	ble.n	8008728 <http_SSI_deRegister_all+0x10>
        }
    }
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	2000261c 	.word	0x2000261c

08008774 <http_CGI_exec_pathFunction>:
return actual buffer content length on success. -1 on failure
*/
http_CGI_pathFunction_t CGI_path[HTTP_MAX_CGI_SIZE]; //hoping compiler to do its job and init to 0

int http_CGI_exec_pathFunction(char *CGIPath, char *replacerBuffer, unsigned int bufferLength)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e02a      	b.n	80087dc <http_CGI_exec_pathFunction+0x68>
    {
        if (NULL != CGI_path[i].CGI_path)
 8008786:	491a      	ldr	r1, [pc, #104]	@ (80087f0 <http_CGI_exec_pathFunction+0x7c>)
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4613      	mov	r3, r2
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01d      	beq.n	80087d6 <http_CGI_exec_pathFunction+0x62>
        {
            if (0 == strcmp(CGIPath, CGI_path[i].CGI_path))
 800879a:	4915      	ldr	r1, [pc, #84]	@ (80087f0 <http_CGI_exec_pathFunction+0x7c>)
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4613      	mov	r3, r2
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4619      	mov	r1, r3
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7f7 fd0f 	bl	80001d0 <strcmp>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10e      	bne.n	80087d6 <http_CGI_exec_pathFunction+0x62>
            {
                return CGI_path[i].CGI_pathFunction(CGIPath, replacerBuffer, bufferLength);
 80087b8:	490d      	ldr	r1, [pc, #52]	@ (80087f0 <http_CGI_exec_pathFunction+0x7c>)
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4613      	mov	r3, r2
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	3304      	adds	r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	e007      	b.n	80087e6 <http_CGI_exec_pathFunction+0x72>
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	3301      	adds	r3, #1
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b04      	cmp	r3, #4
 80087e0:	ddd1      	ble.n	8008786 <http_CGI_exec_pathFunction+0x12>
            }
        }
    }
    return -1;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20002644 	.word	0x20002644

080087f4 <http_CGI_register_pathFunction>:

http_CGI_pathFunctionHandle_t http_CGI_register_pathFunction(const char *CGIPath, http_CGI_pathFunction_cb CGIPathFunctionCb, http_response_contenttype_t contentType)
{
 80087f4:	b590      	push	{r4, r7, lr}
 80087f6:	b089      	sub	sp, #36	@ 0x24
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	71fb      	strb	r3, [r7, #7]
    //find a uninitialized array element
    if ((NULL == CGIPath) || (NULL == CGIPathFunctionCb) )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <http_CGI_register_pathFunction+0x1a>
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10d      	bne.n	800882a <http_CGI_register_pathFunction+0x36>
    {
        PRINT_ERROR("ERROR: http_CGI_register_pathFunction - NULL CGIPath or CB (%p)\r\n", (void *)CGIPath);
 800880e:	4b41      	ldr	r3, [pc, #260]	@ (8008914 <http_CGI_register_pathFunction+0x120>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68d8      	ldr	r0, [r3, #12]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	4b3f      	ldr	r3, [pc, #252]	@ (8008918 <http_CGI_register_pathFunction+0x124>)
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	2349      	movs	r3, #73	@ 0x49
 800881e:	4a3f      	ldr	r2, [pc, #252]	@ (800891c <http_CGI_register_pathFunction+0x128>)
 8008820:	493f      	ldr	r1, [pc, #252]	@ (8008920 <http_CGI_register_pathFunction+0x12c>)
 8008822:	f006 ff4b 	bl	800f6bc <fiprintf>
        return 0;
 8008826:	2300      	movs	r3, #0
 8008828:	e06f      	b.n	800890a <http_CGI_register_pathFunction+0x116>
    }
    else
    {
        int i = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
        for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e05a      	b.n	80088ea <http_CGI_register_pathFunction+0xf6>
        { //find an empty slot and fill in the registration
            if (NULL == CGI_path[i].CGI_path)
 8008834:	493b      	ldr	r1, [pc, #236]	@ (8008924 <http_CGI_register_pathFunction+0x130>)
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4613      	mov	r3, r2
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d14d      	bne.n	80088e4 <http_CGI_register_pathFunction+0xf0>
            {
                //allocate memory and copy string to it.
                CGI_path[i].CGI_path = (char *)malloc((size_t)strlen(CGIPath) + 1);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7f7 fccb 	bl	80001e4 <strlen>
 800884e:	4603      	mov	r3, r0
 8008850:	3301      	adds	r3, #1
 8008852:	4618      	mov	r0, r3
 8008854:	f006 fdd0 	bl	800f3f8 <malloc>
 8008858:	4603      	mov	r3, r0
 800885a:	4618      	mov	r0, r3
 800885c:	4931      	ldr	r1, [pc, #196]	@ (8008924 <http_CGI_register_pathFunction+0x130>)
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4613      	mov	r3, r2
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	6018      	str	r0, [r3, #0]
                strncpy(CGI_path[i].CGI_path, CGIPath, strlen(CGIPath));
 800886c:	492d      	ldr	r1, [pc, #180]	@ (8008924 <http_CGI_register_pathFunction+0x130>)
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4613      	mov	r3, r2
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	681c      	ldr	r4, [r3, #0]
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7f7 fcb1 	bl	80001e4 <strlen>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	4620      	mov	r0, r4
 800888a:	f007 f94d 	bl	800fb28 <strncpy>
                CGI_path[i].CGI_path[strlen(CGIPath)] = 0;
 800888e:	4925      	ldr	r1, [pc, #148]	@ (8008924 <http_CGI_register_pathFunction+0x130>)
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4613      	mov	r3, r2
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	440b      	add	r3, r1
 800889c:	681c      	ldr	r4, [r3, #0]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7f7 fca0 	bl	80001e4 <strlen>
 80088a4:	4603      	mov	r3, r0
 80088a6:	4423      	add	r3, r4
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]

                CGI_path[i].CGI_pathFunction = CGIPathFunctionCb;
 80088ac:	491d      	ldr	r1, [pc, #116]	@ (8008924 <http_CGI_register_pathFunction+0x130>)
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4613      	mov	r3, r2
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	3304      	adds	r3, #4
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	601a      	str	r2, [r3, #0]
                CGI_path[i].contentType = contentType;
 80088c0:	4918      	ldr	r1, [pc, #96]	@ (8008924 <http_CGI_register_pathFunction+0x130>)
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	4613      	mov	r3, r2
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	3308      	adds	r3, #8
 80088d0:	79fa      	ldrb	r2, [r7, #7]
 80088d2:	701a      	strb	r2, [r3, #0]
                return &CGI_path[i];
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	4613      	mov	r3, r2
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4a11      	ldr	r2, [pc, #68]	@ (8008924 <http_CGI_register_pathFunction+0x130>)
 80088e0:	4413      	add	r3, r2
 80088e2:	e012      	b.n	800890a <http_CGI_register_pathFunction+0x116>
        for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3301      	adds	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	dda1      	ble.n	8008834 <http_CGI_register_pathFunction+0x40>
            }
        }
        PRINT_ERROR("ERROR: http_CGI_register_pathFunction - no more slots to register(%d)\r\n", i);
 80088f0:	4b08      	ldr	r3, [pc, #32]	@ (8008914 <http_CGI_register_pathFunction+0x120>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68d8      	ldr	r0, [r3, #12]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <http_CGI_register_pathFunction+0x124>)
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	235d      	movs	r3, #93	@ 0x5d
 8008900:	4a06      	ldr	r2, [pc, #24]	@ (800891c <http_CGI_register_pathFunction+0x128>)
 8008902:	4909      	ldr	r1, [pc, #36]	@ (8008928 <http_CGI_register_pathFunction+0x134>)
 8008904:	f006 feda 	bl	800f6bc <fiprintf>
        return NULL;
 8008908:	2300      	movs	r3, #0
    }
    return NULL; //Just a safety net.
}
 800890a:	4618      	mov	r0, r3
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd90      	pop	{r4, r7, pc}
 8008912:	bf00      	nop
 8008914:	20001240 	.word	0x20001240
 8008918:	08012ffc 	.word	0x08012ffc
 800891c:	08011cb8 	.word	0x08011cb8
 8008920:	08011cdc 	.word	0x08011cdc
 8008924:	20002644 	.word	0x20002644
 8008928:	08011d34 	.word	0x08011d34

0800892c <http_cgi_get_contentType>:
    }
}

//function to get contentType form a pathFunction handle
http_response_contenttype_t http_cgi_get_contentType(http_CGI_pathFunctionHandle_t pathFunctionHandle)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
    if (NULL != pathFunctionHandle)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <http_cgi_get_contentType+0x14>
    {
        return pathFunctionHandle->contentType;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	7a1b      	ldrb	r3, [r3, #8]
 800893e:	e000      	b.n	8008942 <http_cgi_get_contentType+0x16>
    }
    return 0; //no content type registered
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <http_CGI_get_pathFunctionHandle>:

//function to get pathFunction handle of a path
http_CGI_pathFunctionHandle_t http_CGI_get_pathFunctionHandle(char *CGIPath)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e023      	b.n	80089a6 <http_CGI_get_pathFunctionHandle+0x56>
    {
        if (NULL != CGI_path[i].CGI_path)
 800895e:	4916      	ldr	r1, [pc, #88]	@ (80089b8 <http_CGI_get_pathFunctionHandle+0x68>)
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4613      	mov	r3, r2
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d016      	beq.n	80089a0 <http_CGI_get_pathFunctionHandle+0x50>
        {
            if (0 == strcmp(CGIPath, CGI_path[i].CGI_path))
 8008972:	4911      	ldr	r1, [pc, #68]	@ (80089b8 <http_CGI_get_pathFunctionHandle+0x68>)
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	440b      	add	r3, r1
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7f7 fc23 	bl	80001d0 <strcmp>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d107      	bne.n	80089a0 <http_CGI_get_pathFunctionHandle+0x50>
            {
                return &CGI_path[i];
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4613      	mov	r3, r2
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4a07      	ldr	r2, [pc, #28]	@ (80089b8 <http_CGI_get_pathFunctionHandle+0x68>)
 800899c:	4413      	add	r3, r2
 800899e:	e006      	b.n	80089ae <http_CGI_get_pathFunctionHandle+0x5e>
    for (i = 0; i < HTTP_MAX_CGI_SIZE; i++)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	ddd8      	ble.n	800895e <http_CGI_get_pathFunctionHandle+0xe>
            }
        }
    }
    return NULL;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20002644 	.word	0x20002644

080089bc <http_file_init_fopsStruct>:
/*currently supporting only one file system at a time - should this go into http_server.c?*/
http_file_fops_t http_file_fops;

/*init a plain fops structure*/
void http_file_init_fopsStruct(http_file_fops_t *fops)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
    memset(fops, 0, sizeof(http_file_fops_t));
 80089c4:	2218      	movs	r2, #24
 80089c6:	2100      	movs	r1, #0
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f007 f889 	bl	800fae0 <memset>
}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <http_file_register_fops>:
/*function to register fops to http server*/
int http_file_register_fops(http_file_fops_t fops)
{
 80089d8:	b084      	sub	sp, #16
 80089da:	b4b0      	push	{r4, r5, r7}
 80089dc:	af00      	add	r7, sp, #0
 80089de:	f107 040c 	add.w	r4, r7, #12
 80089e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy((void*)&http_file_fops,(void*)&fops, sizeof(http_file_fops_t));
 80089e6:	4b08      	ldr	r3, [pc, #32]	@ (8008a08 <http_file_register_fops+0x30>)
 80089e8:	461d      	mov	r5, r3
 80089ea:	f107 040c 	add.w	r4, r7, #12
 80089ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089f6:	e885 0003 	stmia.w	r5, {r0, r1}
    return HTTP_SUCCESS;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bcb0      	pop	{r4, r5, r7}
 8008a02:	b004      	add	sp, #16
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20002680 	.word	0x20002680

08008a0c <http_localfs_init>:

/*initialize filesystem . increase array size and populate details below to add it to FS
  this is like mounting the fs. to be called only once. To call again, close all open files, deinit and then init.
*/
int http_localfs_init(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
    //init filesystem table to 0. Not necessary since it is a global array. implemented for future scalability
    memset(&http_local_filesystem, 0, HTTP_LOCAL_FILESYSTEM_NUMFILES * sizeof(http_localfs_filesystem_file_t));
 8008a10:	2264      	movs	r2, #100	@ 0x64
 8008a12:	2100      	movs	r1, #0
 8008a14:	4802      	ldr	r0, [pc, #8]	@ (8008a20 <http_localfs_init+0x14>)
 8008a16:	f007 f863 	bl	800fae0 <memset>
#ifdef HTTP_LOCALFS_INDEX
    //register default index file into the local file system.
    http_localfs_registerFile(path_index_html, (char *)&index_html, index_html_len, 0);
#endif
    return HTTP_SUCCESS;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20002698 	.word	0x20002698

08008a24 <http_localfs_registerFile>:

//file path should be static string.
int http_localfs_registerFile(const char *filePath, char *file, unsigned int fileLength, http_response_fileType_t optFileType)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	70fb      	strb	r3, [r7, #3]
    if (fileIndex != (HTTP_LOCAL_FILESYSTEM_NUMFILES))
 8008a32:	4b2a      	ldr	r3, [pc, #168]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b05      	cmp	r3, #5
 8008a38:	d03d      	beq.n	8008ab6 <http_localfs_registerFile+0x92>
    {
        http_local_filesystem[fileIndex].fileNumber = fileIndex;
 8008a3a:	4b28      	ldr	r3, [pc, #160]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b27      	ldr	r3, [pc, #156]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008a40:	6819      	ldr	r1, [r3, #0]
 8008a42:	4827      	ldr	r0, [pc, #156]	@ (8008ae0 <http_localfs_registerFile+0xbc>)
 8008a44:	4613      	mov	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4403      	add	r3, r0
 8008a4e:	3304      	adds	r3, #4
 8008a50:	6019      	str	r1, [r3, #0]
        http_local_filesystem[fileIndex].filePath = filePath;
 8008a52:	4b22      	ldr	r3, [pc, #136]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4922      	ldr	r1, [pc, #136]	@ (8008ae0 <http_localfs_registerFile+0xbc>)
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	601a      	str	r2, [r3, #0]
        http_local_filesystem[fileIndex].file = (char *)file;
 8008a66:	4b1d      	ldr	r3, [pc, #116]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	491d      	ldr	r1, [pc, #116]	@ (8008ae0 <http_localfs_registerFile+0xbc>)
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	3308      	adds	r3, #8
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	601a      	str	r2, [r3, #0]
        http_local_filesystem[fileIndex].fileLength = fileLength;
 8008a7c:	4b17      	ldr	r3, [pc, #92]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4817      	ldr	r0, [pc, #92]	@ (8008ae0 <http_localfs_registerFile+0xbc>)
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4403      	add	r3, r0
 8008a8e:	330c      	adds	r3, #12
 8008a90:	6019      	str	r1, [r3, #0]
        http_local_filesystem[fileIndex].optFileType = optFileType;
 8008a92:	4b12      	ldr	r3, [pc, #72]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4912      	ldr	r1, [pc, #72]	@ (8008ae0 <http_localfs_registerFile+0xbc>)
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	3310      	adds	r3, #16
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	701a      	strb	r2, [r3, #0]

        fileIndex++;
 8008aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	4a0b      	ldr	r2, [pc, #44]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008ab0:	6013      	str	r3, [r2, #0]
        return HTTP_SUCCESS;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e00e      	b.n	8008ad4 <http_localfs_registerFile+0xb0>
    }
    else
    {
        PRINT_ERROR("fileSystem Full(%d)\r\n", fileIndex);
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae4 <http_localfs_registerFile+0xc0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68d8      	ldr	r0, [r3, #12]
 8008abc:	4b07      	ldr	r3, [pc, #28]	@ (8008adc <http_localfs_registerFile+0xb8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	4b09      	ldr	r3, [pc, #36]	@ (8008ae8 <http_localfs_registerFile+0xc4>)
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	235e      	movs	r3, #94	@ 0x5e
 8008ac8:	4a08      	ldr	r2, [pc, #32]	@ (8008aec <http_localfs_registerFile+0xc8>)
 8008aca:	4909      	ldr	r1, [pc, #36]	@ (8008af0 <http_localfs_registerFile+0xcc>)
 8008acc:	f006 fdf6 	bl	800f6bc <fiprintf>
        return HTTP_FAILURE;
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	200026fc 	.word	0x200026fc
 8008ae0:	20002698 	.word	0x20002698
 8008ae4:	20001240 	.word	0x20001240
 8008ae8:	0801301c 	.word	0x0801301c
 8008aec:	08011d90 	.word	0x08011d90
 8008af0:	08011dc0 	.word	0x08011dc0

08008af4 <http_localfs_fopen>:

//returns a file pointer
http_localfs_filesystem_fp_t http_localfs_fopen(const char *fileName)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < fileIndex; i++)
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	e01e      	b.n	8008b40 <http_localfs_fopen+0x4c>
    {
        if (0 == strcmp(http_local_filesystem[i].filePath, fileName))
 8008b02:	4914      	ldr	r1, [pc, #80]	@ (8008b54 <http_localfs_fopen+0x60>)
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7f7 fb5b 	bl	80001d0 <strcmp>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10c      	bne.n	8008b3a <http_localfs_fopen+0x46>
        {
            http_localfs_filesystem_fp_t fp;
            fp = (http_localfs_filesystem_fp_t)malloc(sizeof(http_localfs_filesystem_fpRoot_t));
 8008b20:	2008      	movs	r0, #8
 8008b22:	f006 fc69 	bl	800f3f8 <malloc>
 8008b26:	4603      	mov	r3, r0
 8008b28:	60bb      	str	r3, [r7, #8]
            fp->fileNumber = i; //this can very well be pointer to that array address. but fileno is a standard convention
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	601a      	str	r2, [r3, #0]
            fp->filePosition = 0;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2200      	movs	r2, #0
 8008b34:	605a      	str	r2, [r3, #4]
            return fp;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	e008      	b.n	8008b4c <http_localfs_fopen+0x58>
    for (i = 0; i < fileIndex; i++)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	4b05      	ldr	r3, [pc, #20]	@ (8008b58 <http_localfs_fopen+0x64>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d3db      	bcc.n	8008b02 <http_localfs_fopen+0xe>
        }
    }
    return NULL;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20002698 	.word	0x20002698
 8008b58:	200026fc 	.word	0x200026fc

08008b5c <http_localfs_fclose>:

//function to close a file pointer after fops are done.
int http_localfs_fclose(http_localfs_filesystem_fp_t fp) //free the fp
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
    if (NULL == fp)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d102      	bne.n	8008b70 <http_localfs_fclose+0x14>
    {
        return HTTP_FAILURE;
 8008b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6e:	e003      	b.n	8008b78 <http_localfs_fclose+0x1c>
    }

    free(fp);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f006 fc49 	bl	800f408 <free>
    return HTTP_SUCCESS;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <http_localfs_deinit>:

//function to unmount the local file system. all FPs should be closed before calling this to avoid memory leaks
int http_localfs_deinit(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
    //but how to track and handle all fps that where malloced without much overhead?
    memset(&http_local_filesystem, 0, HTTP_LOCAL_FILESYSTEM_NUMFILES * sizeof(http_localfs_filesystem_file_t));
 8008b84:	2264      	movs	r2, #100	@ 0x64
 8008b86:	2100      	movs	r1, #0
 8008b88:	4804      	ldr	r0, [pc, #16]	@ (8008b9c <http_localfs_deinit+0x1c>)
 8008b8a:	f006 ffa9 	bl	800fae0 <memset>
    fileIndex=0;
 8008b8e:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <http_localfs_deinit+0x20>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
    return HTTP_SUCCESS;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20002698 	.word	0x20002698
 8008ba0:	200026fc 	.word	0x200026fc

08008ba4 <http_localfs_fgetc>:

/*regular fgetc implementation for the local file system. 
 reads the next character from stream and returns it as an unsigned char cast to an int, or EOF (-1) on end of file or error.
*/
int http_localfs_fgetc(http_localfs_filesystem_fp_t fp)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
    //input checking
    if (NULL == fp)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <http_localfs_fgetc+0x14>
    {
        return HTTP_FAILURE;
 8008bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb6:	e026      	b.n	8008c06 <http_localfs_fgetc+0x62>
    }
    //end of file
    if ((fp->filePosition + 1) == (unsigned int)http_local_filesystem[fp->fileNumber].fileLength)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	1c59      	adds	r1, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4814      	ldr	r0, [pc, #80]	@ (8008c14 <http_localfs_fgetc+0x70>)
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4403      	add	r3, r0
 8008bce:	330c      	adds	r3, #12
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4299      	cmp	r1, r3
 8008bd4:	d102      	bne.n	8008bdc <http_localfs_fgetc+0x38>
    {
        return -1; //EOF
 8008bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bda:	e014      	b.n	8008c06 <http_localfs_fgetc+0x62>
    }
    else
    { //regular file read
        unsigned char retChar = http_local_filesystem[fp->fileNumber].file[fp->filePosition];
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	490c      	ldr	r1, [pc, #48]	@ (8008c14 <http_localfs_fgetc+0x70>)
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	3308      	adds	r3, #8
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	73fb      	strb	r3, [r7, #15]
        fp->filePosition++;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	605a      	str	r2, [r3, #4]
        return (int)retChar;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	20002698 	.word	0x20002698

08008c18 <http_localfs_feof>:

//generic feof function. returns -1 if EOF
int http_localfs_feof(http_localfs_filesystem_fp_t fp)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    //end of file
    if (fp->filePosition == (unsigned int)(http_local_filesystem[fp->fileNumber].fileLength - 1))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6859      	ldr	r1, [r3, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	480a      	ldr	r0, [pc, #40]	@ (8008c54 <http_localfs_feof+0x3c>)
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4403      	add	r3, r0
 8008c34:	330c      	adds	r3, #12
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	d102      	bne.n	8008c44 <http_localfs_feof+0x2c>
    {
        return -1; //EOF
 8008c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c42:	e000      	b.n	8008c46 <http_localfs_feof+0x2e>
    }
    return 0;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20002698 	.word	0x20002698

08008c58 <http_localfs_fread>:

size_t http_localfs_fread(void *ptr, size_t size, size_t nmemb, http_localfs_filesystem_fp_t fp)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
    if (NULL == ptr)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <http_localfs_fread+0x1a>
    {
        return HTTP_FAILURE;
 8008c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c70:	e05f      	b.n	8008d32 <http_localfs_fread+0xda>
    }
    //end of file
    if ((fp->filePosition + 1) == (unsigned int)http_local_filesystem[fp->fileNumber].fileLength)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	1c59      	adds	r1, r3, #1
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	482f      	ldr	r0, [pc, #188]	@ (8008d3c <http_localfs_fread+0xe4>)
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4403      	add	r3, r0
 8008c88:	330c      	adds	r3, #12
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4299      	cmp	r1, r3
 8008c8e:	d102      	bne.n	8008c96 <http_localfs_fread+0x3e>
    {
        return -1; //EOF
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295
 8008c94:	e04d      	b.n	8008d32 <http_localfs_fread+0xda>
    }
    else
    {
        //calculate actual amount of data remaining in the file.
        unsigned int remainingLen = http_local_filesystem[fp->fileNumber].fileLength - (fp->filePosition + 1);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4928      	ldr	r1, [pc, #160]	@ (8008d3c <http_localfs_fread+0xe4>)
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
        //calculate requested data quantity
        unsigned int totalReadLength = (size * nmemb);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
 8008cbe:	613b      	str	r3, [r7, #16]

        if (remainingLen <= totalReadLength)
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d81b      	bhi.n	8008d00 <http_localfs_fread+0xa8>
        { //when size is smaller than actual file size
            memcpy(ptr, (void *)&http_local_filesystem[fp->fileNumber].file[fp->filePosition], remainingLen+1);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	491b      	ldr	r1, [pc, #108]	@ (8008d3c <http_localfs_fread+0xe4>)
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	3308      	adds	r3, #8
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	18d1      	adds	r1, r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f007 f83c 	bl	800fd66 <memcpy>
            fp->filePosition += remainingLen;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	441a      	add	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	605a      	str	r2, [r3, #4]
            return (size_t)remainingLen+1;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	e018      	b.n	8008d32 <http_localfs_fread+0xda>
        }
        else
        {
            memcpy(ptr, (void *)&http_local_filesystem[fp->fileNumber].file[fp->filePosition], totalReadLength);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	490d      	ldr	r1, [pc, #52]	@ (8008d3c <http_localfs_fread+0xe4>)
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	3308      	adds	r3, #8
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	4413      	add	r3, r2
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f007 f821 	bl	800fd66 <memcpy>
            fp->filePosition += totalReadLength;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	441a      	add	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
            return (size_t)totalReadLength;
 8008d30:	693b      	ldr	r3, [r7, #16]
        }
    }
    return -1;
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20002698 	.word	0x20002698

08008d40 <http_localfs_fseek>:
}

//Generic fseek function
// TODO: reusing  SEEK_SET, SEEK_CUR, and SEEK_END from stdio. need to see if this will work on embedded platforms
int http_localfs_fseek(http_localfs_filesystem_fp_t fp, long offset, int whence)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
    if (NULL == fp)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <http_localfs_fseek+0x18>
    {
        return -1;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	e062      	b.n	8008e1e <http_localfs_fseek+0xde>
    }
    switch (whence)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d04f      	beq.n	8008dfe <http_localfs_fseek+0xbe>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	dc5a      	bgt.n	8008e1a <http_localfs_fseek+0xda>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <http_localfs_fseek+0x32>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d02b      	beq.n	8008dc8 <http_localfs_fseek+0x88>
 8008d70:	e053      	b.n	8008e1a <http_localfs_fseek+0xda>
    {
    case SEEK_SET:
    {
        if (offset >= 0 && offset <= (http_local_filesystem[fp->fileNumber].fileLength - 1))
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	db11      	blt.n	8008d9c <http_localfs_fseek+0x5c>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	492b      	ldr	r1, [pc, #172]	@ (8008e2c <http_localfs_fseek+0xec>)
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	330c      	adds	r3, #12
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	da04      	bge.n	8008d9c <http_localfs_fseek+0x5c>
        {
            fp->filePosition = offset;
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	605a      	str	r2, [r3, #4]
            return 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e040      	b.n	8008e1e <http_localfs_fseek+0xde>
        }
        else if (offset >= 0)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	db0f      	blt.n	8008dc2 <http_localfs_fseek+0x82>
        {
            fp->filePosition = http_local_filesystem[fp->fileNumber].fileLength - 1;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4921      	ldr	r1, [pc, #132]	@ (8008e2c <http_localfs_fseek+0xec>)
 8008da8:	4613      	mov	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	330c      	adds	r3, #12
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	461a      	mov	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	605a      	str	r2, [r3, #4]
            return 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e02d      	b.n	8008e1e <http_localfs_fseek+0xde>
        }
        else
        {
            return -1;
 8008dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc6:	e02a      	b.n	8008e1e <http_localfs_fseek+0xde>
        }
        break;
    }
    case SEEK_CUR:
    {
        if (((fp->filePosition + offset) >= 0) && ((fp->filePosition + offset) < (unsigned int)http_local_filesystem[fp->fileNumber].fileLength))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	18d1      	adds	r1, r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	4815      	ldr	r0, [pc, #84]	@ (8008e2c <http_localfs_fseek+0xec>)
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4403      	add	r3, r0
 8008de0:	330c      	adds	r3, #12
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4299      	cmp	r1, r3
 8008de6:	d207      	bcs.n	8008df8 <http_localfs_fseek+0xb8>
        {
            fp->filePosition += offset;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	441a      	add	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	605a      	str	r2, [r3, #4]
            return 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	e012      	b.n	8008e1e <http_localfs_fseek+0xde>
        }
        else
        {
            return -1;
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfc:	e00f      	b.n	8008e1e <http_localfs_fseek+0xde>
        }
        break;
    }
    case SEEK_END:
    {
        if (offset > 0)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dd02      	ble.n	8008e0a <http_localfs_fseek+0xca>
        {
            return -1;
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	e009      	b.n	8008e1e <http_localfs_fseek+0xde>
        }
        else if ((fp->filePosition + offset) >= 0)
        {
            fp->filePosition += offset;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	441a      	add	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]
            return 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e001      	b.n	8008e1e <http_localfs_fseek+0xde>
            return 0;
        }
        break;
    }
    default:
        return -1;
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295
        break;
    }
    return -1;
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20002698 	.word	0x20002698

08008e30 <http_net_init_netopsStruct>:
*/
static http_net_netops_t http_net_netops;

/*init a plain fops structure*/
void http_net_init_netopsStruct(http_net_netops_t *netops)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
    if (NULL != netops)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d004      	beq.n	8008e48 <http_net_init_netopsStruct+0x18>
    {
        memset(netops, 0, sizeof(http_net_netops_t));
 8008e3e:	220c      	movs	r2, #12
 8008e40:	2100      	movs	r1, #0
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f006 fe4c 	bl	800fae0 <memset>
    }
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <http_net_register_netops>:
/*function to register fops to http server*/
http_net_netops_t *http_net_register_netops(http_net_netops_t netops)
{
 8008e50:	b490      	push	{r4, r7}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy((void *)&http_net_netops, (void *)&netops, sizeof(http_net_netops_t));
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <http_net_register_netops+0x28>)
 8008e5e:	461c      	mov	r4, r3
 8008e60:	1d3b      	adds	r3, r7, #4
 8008e62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return &http_net_netops;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	@ (8008e78 <http_net_register_netops+0x28>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bc90      	pop	{r4, r7}
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20002700 	.word	0x20002700

08008e7c <parseRequest_mapMethodToEnum>:

unsigned int httpFileType_DownloadList_size = 2;
const char *const httpFileType_DownloadList[] = {"shool", "download"};

static httpRequest_method_t parseRequest_mapMethodToEnum(char *method)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
    /*since most requesters send method in caps, toUpper is not applied */
    if (0 == strcmp(method, "GET"))
 8008e84:	492b      	ldr	r1, [pc, #172]	@ (8008f34 <parseRequest_mapMethodToEnum+0xb8>)
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7f7 f9a2 	bl	80001d0 <strcmp>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <parseRequest_mapMethodToEnum+0x1a>
        return GET;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e049      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "POST"))
 8008e96:	4928      	ldr	r1, [pc, #160]	@ (8008f38 <parseRequest_mapMethodToEnum+0xbc>)
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7f7 f999 	bl	80001d0 <strcmp>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <parseRequest_mapMethodToEnum+0x2c>
        return POST;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e040      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "PUT"))
 8008ea8:	4924      	ldr	r1, [pc, #144]	@ (8008f3c <parseRequest_mapMethodToEnum+0xc0>)
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f7 f990 	bl	80001d0 <strcmp>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <parseRequest_mapMethodToEnum+0x3e>
        return PUT;
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	e037      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "HEAD"))
 8008eba:	4921      	ldr	r1, [pc, #132]	@ (8008f40 <parseRequest_mapMethodToEnum+0xc4>)
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7f7 f987 	bl	80001d0 <strcmp>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <parseRequest_mapMethodToEnum+0x50>
        return HEAD;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e02e      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "DELETE"))
 8008ecc:	491d      	ldr	r1, [pc, #116]	@ (8008f44 <parseRequest_mapMethodToEnum+0xc8>)
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7f7 f97e 	bl	80001d0 <strcmp>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <parseRequest_mapMethodToEnum+0x62>
        return DELETE;
 8008eda:	2305      	movs	r3, #5
 8008edc:	e025      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "OPTIONS"))
 8008ede:	491a      	ldr	r1, [pc, #104]	@ (8008f48 <parseRequest_mapMethodToEnum+0xcc>)
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7f7 f975 	bl	80001d0 <strcmp>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <parseRequest_mapMethodToEnum+0x74>
        return OPTIONS;
 8008eec:	2306      	movs	r3, #6
 8008eee:	e01c      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "CONNECT"))
 8008ef0:	4916      	ldr	r1, [pc, #88]	@ (8008f4c <parseRequest_mapMethodToEnum+0xd0>)
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7f7 f96c 	bl	80001d0 <strcmp>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <parseRequest_mapMethodToEnum+0x86>
        return CONNECT;
 8008efe:	2307      	movs	r3, #7
 8008f00:	e013      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "TRACE"))
 8008f02:	4913      	ldr	r1, [pc, #76]	@ (8008f50 <parseRequest_mapMethodToEnum+0xd4>)
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7f7 f963 	bl	80001d0 <strcmp>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <parseRequest_mapMethodToEnum+0x98>
        return TRACE;
 8008f10:	2308      	movs	r3, #8
 8008f12:	e00a      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else if (0 == strcmp(method, "PATCH"))
 8008f14:	490f      	ldr	r1, [pc, #60]	@ (8008f54 <parseRequest_mapMethodToEnum+0xd8>)
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7f7 f95a 	bl	80001d0 <strcmp>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <parseRequest_mapMethodToEnum+0xaa>
        return PATCH;
 8008f22:	2309      	movs	r3, #9
 8008f24:	e001      	b.n	8008f2a <parseRequest_mapMethodToEnum+0xae>
    else
        return NONE;
 8008f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08011e40 	.word	0x08011e40
 8008f38:	08011e44 	.word	0x08011e44
 8008f3c:	08011e4c 	.word	0x08011e4c
 8008f40:	08011e50 	.word	0x08011e50
 8008f44:	08011e58 	.word	0x08011e58
 8008f48:	08011e60 	.word	0x08011e60
 8008f4c:	08011e68 	.word	0x08011e68
 8008f50:	08011e70 	.word	0x08011e70
 8008f54:	08011e78 	.word	0x08011e78

08008f58 <parseRequest_identifyFileClass>:

//identify whether the requested file is CGI/SSI or just for regular contents.
static httpRequest_fileClass_t parseRequest_identifyFileClass(char *path)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
    char *fileType = strrchr(path, '.'); //can hit some real corner case where there is no extension and thre is a . in path
 8008f60:	212e      	movs	r1, #46	@ 0x2e
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f006 fdf3 	bl	800fb4e <strrchr>
 8008f68:	60b8      	str	r0, [r7, #8]
    if (0 == fileType)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <parseRequest_identifyFileClass+0x1c>
    {
        return httpFileClass_none;
 8008f70:	2300      	movs	r3, #0
 8008f72:	e065      	b.n	8009040 <parseRequest_identifyFileClass+0xe8>
    }
    else
    {
        fileType += 1; //to remove the .
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	3301      	adds	r3, #1
 8008f78:	60bb      	str	r3, [r7, #8]
    }

    unsigned int i = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < httpFileType_SSIList_size; i++)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	e00f      	b.n	8008fa4 <parseRequest_identifyFileClass+0x4c>
    {
        if (0 == strcmp(httpFileType_SSIList[i], fileType))
 8008f84:	4a30      	ldr	r2, [pc, #192]	@ (8009048 <parseRequest_identifyFileClass+0xf0>)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7f7 f91e 	bl	80001d0 <strcmp>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <parseRequest_identifyFileClass+0x46>
            return httpFileClass_SSI;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e050      	b.n	8009040 <parseRequest_identifyFileClass+0xe8>
    for (i = 0; i < httpFileType_SSIList_size; i++)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	4b29      	ldr	r3, [pc, #164]	@ (800904c <parseRequest_identifyFileClass+0xf4>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d3ea      	bcc.n	8008f84 <parseRequest_identifyFileClass+0x2c>
    }

    for (i = 0; i < httpFileType_CGIList_size; i++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	e00f      	b.n	8008fd4 <parseRequest_identifyFileClass+0x7c>
    {
        if (0 == strcmp(httpFileType_CGIList[i], fileType))
 8008fb4:	4a26      	ldr	r2, [pc, #152]	@ (8009050 <parseRequest_identifyFileClass+0xf8>)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f7 f906 	bl	80001d0 <strcmp>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <parseRequest_identifyFileClass+0x76>
            return httpFileClass_CGI;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e038      	b.n	8009040 <parseRequest_identifyFileClass+0xe8>
    for (i = 0; i < httpFileType_CGIList_size; i++)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8009054 <parseRequest_identifyFileClass+0xfc>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d3ea      	bcc.n	8008fb4 <parseRequest_identifyFileClass+0x5c>
    }

    for (i = 0; i < httpFileType_customList_size; i++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	e00f      	b.n	8009004 <parseRequest_identifyFileClass+0xac>
     {
            if (0 == strcmp(httpFileType_customList[i], fileType))
 8008fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8009058 <parseRequest_identifyFileClass+0x100>)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7f7 f8ee 	bl	80001d0 <strcmp>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <parseRequest_identifyFileClass+0xa6>
                return httpFileClass_Custom;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e020      	b.n	8009040 <parseRequest_identifyFileClass+0xe8>
    for (i = 0; i < httpFileType_customList_size; i++)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	4b15      	ldr	r3, [pc, #84]	@ (800905c <parseRequest_identifyFileClass+0x104>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	429a      	cmp	r2, r3
 800900c:	d3ea      	bcc.n	8008fe4 <parseRequest_identifyFileClass+0x8c>
     }
    for (i = 0; i < httpFileType_DownloadList_size; i++)
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e00f      	b.n	8009034 <parseRequest_identifyFileClass+0xdc>
     {
            if (0 == strcmp(httpFileType_DownloadList[i], fileType))
 8009014:	4a12      	ldr	r2, [pc, #72]	@ (8009060 <parseRequest_identifyFileClass+0x108>)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	4618      	mov	r0, r3
 8009020:	f7f7 f8d6 	bl	80001d0 <strcmp>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <parseRequest_identifyFileClass+0xd6>
                return httpFileClass_Download;
 800902a:	2304      	movs	r3, #4
 800902c:	e008      	b.n	8009040 <parseRequest_identifyFileClass+0xe8>
    for (i = 0; i < httpFileType_DownloadList_size; i++)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	4b0b      	ldr	r3, [pc, #44]	@ (8009064 <parseRequest_identifyFileClass+0x10c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	429a      	cmp	r2, r3
 800903c:	d3ea      	bcc.n	8009014 <parseRequest_identifyFileClass+0xbc>
     }

    return httpFileClass_none;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	08013038 	.word	0x08013038
 800904c:	200011e0 	.word	0x200011e0
 8009050:	08013048 	.word	0x08013048
 8009054:	200011e4 	.word	0x200011e4
 8009058:	08013054 	.word	0x08013054
 800905c:	200011e8 	.word	0x200011e8
 8009060:	08013060 	.word	0x08013060
 8009064:	200011ec 	.word	0x200011ec

08009068 <parseRquest_identifyRequest>:
int parseRquest_identifyRequest(unsigned char *requestBuffer, http_request_t *httpRequest)
{
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	b095      	sub	sp, #84	@ 0x54
 800906e:	af00      	add	r7, sp, #0
 8009070:	6278      	str	r0, [r7, #36]	@ 0x24
 8009072:	6239      	str	r1, [r7, #32]
 8009074:	466b      	mov	r3, sp
 8009076:	461e      	mov	r6, r3
    /*TODO: suppot Query parsing*/
	printf("Request Buffer : %s",requestBuffer);
 8009078:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800907a:	4877      	ldr	r0, [pc, #476]	@ (8009258 <parseRquest_identifyRequest+0x1f0>)
 800907c:	f006 fb4e 	bl	800f71c <iprintf>
    const char *startOfPath = strchr((char*)requestBuffer, ' ') + 1;
 8009080:	2120      	movs	r1, #32
 8009082:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009084:	f006 fd43 	bl	800fb0e <strchr>
 8009088:	4603      	mov	r3, r0
 800908a:	3301      	adds	r3, #1
 800908c:	64bb      	str	r3, [r7, #72]	@ 0x48
////        {
////                endOfQuery = strchr(startOfQuery, '\n'); //if none of the above, Query ends at newline
////        }
////        //
//    }
    if (strstr((char*)requestBuffer, "HTTP/1."))
 800908e:	4973      	ldr	r1, [pc, #460]	@ (800925c <parseRquest_identifyRequest+0x1f4>)
 8009090:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009092:	f006 fdcf 	bl	800fc34 <strstr>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <parseRquest_identifyRequest+0x40>
    { //if there is a HTTP version mentioned, path ends there
        endOfPath = strchr(startOfPath, ' ');
 800909c:	2120      	movs	r1, #32
 800909e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80090a0:	f006 fd35 	bl	800fb0e <strchr>
 80090a4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80090a6:	e004      	b.n	80090b2 <parseRquest_identifyRequest+0x4a>
        //startOfQuery = -1; //AK query dosen't exist
    }
    else
    {
        endOfPath = strchr(startOfPath, '\n'); //if none of the above, path ends at newline
 80090a8:	210a      	movs	r1, #10
 80090aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80090ac:	f006 fd2f 	bl	800fb0e <strchr>
 80090b0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        //startOfQuery = -1; //AK query dosen't exist
    }
    //getting enough memory
    //TODO: will this work in embedded?
    char *methordToken = strtok((char*)requestBuffer, " ");
 80090b2:	496b      	ldr	r1, [pc, #428]	@ (8009260 <parseRquest_identifyRequest+0x1f8>)
 80090b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80090b6:	f006 fd61 	bl	800fb7c <strtok>
 80090ba:	6478      	str	r0, [r7, #68]	@ 0x44
    char method[strlen(methordToken) + 1];
 80090bc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80090be:	f7f7 f891 	bl	80001e4 <strlen>
 80090c2:	4603      	mov	r3, r0
 80090c4:	1c5d      	adds	r5, r3, #1
 80090c6:	462b      	mov	r3, r5
 80090c8:	3b01      	subs	r3, #1
 80090ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80090cc:	2300      	movs	r3, #0
 80090ce:	46a8      	mov	r8, r5
 80090d0:	4699      	mov	r9, r3
 80090d2:	f04f 0200 	mov.w	r2, #0
 80090d6:	f04f 0300 	mov.w	r3, #0
 80090da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090e6:	2300      	movs	r3, #0
 80090e8:	61bd      	str	r5, [r7, #24]
 80090ea:	61fb      	str	r3, [r7, #28]
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80090f8:	4649      	mov	r1, r9
 80090fa:	00cb      	lsls	r3, r1, #3
 80090fc:	4641      	mov	r1, r8
 80090fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009102:	4641      	mov	r1, r8
 8009104:	00ca      	lsls	r2, r1, #3
 8009106:	1deb      	adds	r3, r5, #7
 8009108:	08db      	lsrs	r3, r3, #3
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	ebad 0d03 	sub.w	sp, sp, r3
 8009110:	466b      	mov	r3, sp
 8009112:	3300      	adds	r3, #0
 8009114:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char path[endOfPath - startOfPath];
 8009116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800911a:	1ad4      	subs	r4, r2, r3
 800911c:	1e63      	subs	r3, r4, #1
 800911e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009120:	4622      	mov	r2, r4
 8009122:	2300      	movs	r3, #0
 8009124:	613a      	str	r2, [r7, #16]
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8009134:	4649      	mov	r1, r9
 8009136:	00cb      	lsls	r3, r1, #3
 8009138:	4641      	mov	r1, r8
 800913a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800913e:	4641      	mov	r1, r8
 8009140:	00ca      	lsls	r2, r1, #3
 8009142:	4622      	mov	r2, r4
 8009144:	2300      	movs	r3, #0
 8009146:	60ba      	str	r2, [r7, #8]
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8009156:	4649      	mov	r1, r9
 8009158:	00cb      	lsls	r3, r1, #3
 800915a:	4641      	mov	r1, r8
 800915c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009160:	4641      	mov	r1, r8
 8009162:	00ca      	lsls	r2, r1, #3
 8009164:	4623      	mov	r3, r4
 8009166:	3307      	adds	r3, #7
 8009168:	08db      	lsrs	r3, r3, #3
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	ebad 0d03 	sub.w	sp, sp, r3
 8009170:	466b      	mov	r3, sp
 8009172:	3300      	adds	r3, #0
 8009174:	637b      	str	r3, [r7, #52]	@ 0x34
//    strncpy(query, startOfQuery, endOfQuery - startOfQuery);
//    }
//    //

    //copying internally
    strncpy(method, methordToken, strlen(methordToken));
 8009176:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009178:	f7f7 f834 	bl	80001e4 <strlen>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009182:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009184:	f006 fcd0 	bl	800fb28 <strncpy>
    strncpy(path, startOfPath, endOfPath - startOfPath);
 8009188:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800918a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	461a      	mov	r2, r3
 8009190:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009192:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009194:	f006 fcc8 	bl	800fb28 <strncpy>

	
    //null termination
	method[sizeof(method)-1] = 0; //-1 to delete trailing space
 8009198:	1e6b      	subs	r3, r5, #1
 800919a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800919c:	2100      	movs	r1, #0
 800919e:	54d1      	strb	r1, [r2, r3]
    path[sizeof(path)] = 0; 
 80091a0:	4622      	mov	r2, r4
 80091a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a4:	2100      	movs	r1, #0
 80091a6:	5499      	strb	r1, [r3, r2]
	//parse and copy method for returning.
    httpRequest->method = parseRequest_mapMethodToEnum(method);
 80091a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80091aa:	f7ff fe67 	bl	8008e7c <parseRequest_mapMethodToEnum>
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	705a      	strb	r2, [r3, #1]

    //decode URL and copy path for returning.
    char decodedURL[sizeof(path)];
 80091b6:	4621      	mov	r1, r4
 80091b8:	460b      	mov	r3, r1
 80091ba:	3b01      	subs	r3, #1
 80091bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80091be:	2300      	movs	r3, #0
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	607b      	str	r3, [r7, #4]
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091d0:	4628      	mov	r0, r5
 80091d2:	00c3      	lsls	r3, r0, #3
 80091d4:	4620      	mov	r0, r4
 80091d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80091da:	4620      	mov	r0, r4
 80091dc:	00c2      	lsls	r2, r0, #3
 80091de:	2300      	movs	r3, #0
 80091e0:	468a      	mov	sl, r1
 80091e2:	469b      	mov	fp, r3
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091f8:	1dcb      	adds	r3, r1, #7
 80091fa:	08db      	lsrs	r3, r3, #3
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	ebad 0d03 	sub.w	sp, sp, r3
 8009202:	466b      	mov	r3, sp
 8009204:	3300      	adds	r3, #0
 8009206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    url_decode(path, decodedURL);
 8009208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800920a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800920c:	f7ff f982 	bl	8008514 <url_decode>
    
	if(0==strcmp(decodedURL,"/")){ //redirect / to configured ROOT page.
 8009210:	4914      	ldr	r1, [pc, #80]	@ (8009264 <parseRquest_identifyRequest+0x1fc>)
 8009212:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009214:	f7f6 ffdc 	bl	80001d0 <strcmp>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d107      	bne.n	800922e <parseRquest_identifyRequest+0x1c6>
		strncpy(httpRequest->httpFilePath, HTTP_SERVER_ROOT_PAGE, HTTP_MAX_PATH_LENGTH);
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	3302      	adds	r3, #2
 8009222:	2264      	movs	r2, #100	@ 0x64
 8009224:	4910      	ldr	r1, [pc, #64]	@ (8009268 <parseRquest_identifyRequest+0x200>)
 8009226:	4618      	mov	r0, r3
 8009228:	f006 fc7e 	bl	800fb28 <strncpy>
 800922c:	e006      	b.n	800923c <parseRquest_identifyRequest+0x1d4>
	}
	else{
		strncpy(httpRequest->httpFilePath, decodedURL, HTTP_MAX_PATH_LENGTH);
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	3302      	adds	r3, #2
 8009232:	2264      	movs	r2, #100	@ 0x64
 8009234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009236:	4618      	mov	r0, r3
 8009238:	f006 fc76 	bl	800fb28 <strncpy>
	}

    //decode file type and add copy it for returning
    httpRequest->fileClass = parseRequest_identifyFileClass(path);
 800923c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800923e:	f7ff fe8b 	bl	8008f58 <parseRequest_identifyFileClass>
 8009242:	4603      	mov	r3, r0
 8009244:	461a      	mov	r2, r3
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	701a      	strb	r2, [r3, #0]

    //return success
    return HTTP_SUCCESS;
 800924a:	2300      	movs	r3, #0
 800924c:	46b5      	mov	sp, r6
}
 800924e:	4618      	mov	r0, r3
 8009250:	3754      	adds	r7, #84	@ 0x54
 8009252:	46bd      	mov	sp, r7
 8009254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009258:	08011e80 	.word	0x08011e80
 800925c:	08011e94 	.word	0x08011e94
 8009260:	08011e9c 	.word	0x08011e9c
 8009264:	08011ea0 	.word	0x08011ea0
 8009268:	08011ea4 	.word	0x08011ea4

0800926c <http_response_getFileType>:
#include "http_config.h"
#include <stdio.h>
#include <string.h>

http_response_fileType_t http_response_getFileType(char *requestPath)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af02      	add	r7, sp, #8
 8009272:	6078      	str	r0, [r7, #4]
    char *fileType;
    fileType = strrchr(requestPath, '.');
 8009274:	212e      	movs	r1, #46	@ 0x2e
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f006 fc69 	bl	800fb4e <strrchr>
 800927c:	60f8      	str	r0, [r7, #12]
    if (0 == fileType)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10d      	bne.n	80092a0 <http_response_getFileType+0x34>
    {
        PRINT_ERROR("File type  unknown(%s)\r\n", requestPath);
 8009284:	4b69      	ldr	r3, [pc, #420]	@ (800942c <http_response_getFileType+0x1c0>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68d8      	ldr	r0, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	4b68      	ldr	r3, [pc, #416]	@ (8009430 <http_response_getFileType+0x1c4>)
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	2332      	movs	r3, #50	@ 0x32
 8009294:	4a67      	ldr	r2, [pc, #412]	@ (8009434 <http_response_getFileType+0x1c8>)
 8009296:	4968      	ldr	r1, [pc, #416]	@ (8009438 <http_response_getFileType+0x1cc>)
 8009298:	f006 fa10 	bl	800f6bc <fiprintf>
        return HTTP_fileType_unknown;
 800929c:	2300      	movs	r3, #0
 800929e:	e0c0      	b.n	8009422 <http_response_getFileType+0x1b6>
    }

    fileType += 1;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3301      	adds	r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]

    if (0 == strcmp(fileType, "shtml"))
 80092a6:	4965      	ldr	r1, [pc, #404]	@ (800943c <http_response_getFileType+0x1d0>)
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f7f6 ff91 	bl	80001d0 <strcmp>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <http_response_getFileType+0x4c>
        return HTTP_fileType_SHTML;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0b4      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "shtm"))
 80092b8:	4961      	ldr	r1, [pc, #388]	@ (8009440 <http_response_getFileType+0x1d4>)
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7f6 ff88 	bl	80001d0 <strcmp>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <http_response_getFileType+0x5e>
        return HTTP_fileType_SHTM;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e0ab      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "ssi"))
 80092ca:	495e      	ldr	r1, [pc, #376]	@ (8009444 <http_response_getFileType+0x1d8>)
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7f6 ff7f 	bl	80001d0 <strcmp>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <http_response_getFileType+0x70>
        return HTTP_fileType_SSI;
 80092d8:	2304      	movs	r3, #4
 80092da:	e0a2      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "xml"))
 80092dc:	495a      	ldr	r1, [pc, #360]	@ (8009448 <http_response_getFileType+0x1dc>)
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7f6 ff76 	bl	80001d0 <strcmp>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <http_response_getFileType+0x82>
        return HTTP_fileType_XML;
 80092ea:	2305      	movs	r3, #5
 80092ec:	e099      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "cgi"))
 80092ee:	4957      	ldr	r1, [pc, #348]	@ (800944c <http_response_getFileType+0x1e0>)
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7f6 ff6d 	bl	80001d0 <strcmp>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <http_response_getFileType+0x94>
        return HTTP_fileType_CGI;
 80092fc:	2306      	movs	r3, #6
 80092fe:	e090      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "sh"))
 8009300:	4953      	ldr	r1, [pc, #332]	@ (8009450 <http_response_getFileType+0x1e4>)
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7f6 ff64 	bl	80001d0 <strcmp>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <http_response_getFileType+0xa6>
        return HTTP_fileType_SH;
 800930e:	2307      	movs	r3, #7
 8009310:	e087      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "exe"))
 8009312:	4950      	ldr	r1, [pc, #320]	@ (8009454 <http_response_getFileType+0x1e8>)
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f7f6 ff5b 	bl	80001d0 <strcmp>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <http_response_getFileType+0xb8>
        return HTTP_fileType_EXE;
 8009320:	2308      	movs	r3, #8
 8009322:	e07e      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "html"))
 8009324:	494c      	ldr	r1, [pc, #304]	@ (8009458 <http_response_getFileType+0x1ec>)
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7f6 ff52 	bl	80001d0 <strcmp>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <http_response_getFileType+0xca>
        return HTTP_fileType_HTML;
 8009332:	2309      	movs	r3, #9
 8009334:	e075      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "htm"))
 8009336:	4949      	ldr	r1, [pc, #292]	@ (800945c <http_response_getFileType+0x1f0>)
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f7f6 ff49 	bl	80001d0 <strcmp>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <http_response_getFileType+0xdc>
        return HTTP_fileType_HTM;
 8009344:	230a      	movs	r3, #10
 8009346:	e06c      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "txt"))
 8009348:	4945      	ldr	r1, [pc, #276]	@ (8009460 <http_response_getFileType+0x1f4>)
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7f6 ff40 	bl	80001d0 <strcmp>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <http_response_getFileType+0xee>
        return HTTP_fileType_TXT;
 8009356:	2302      	movs	r3, #2
 8009358:	e063      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "css"))
 800935a:	4942      	ldr	r1, [pc, #264]	@ (8009464 <http_response_getFileType+0x1f8>)
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7f6 ff37 	bl	80001d0 <strcmp>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <http_response_getFileType+0x100>
        return HTTP_fileType_CSS;
 8009368:	230b      	movs	r3, #11
 800936a:	e05a      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "js"))
 800936c:	493e      	ldr	r1, [pc, #248]	@ (8009468 <http_response_getFileType+0x1fc>)
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7f6 ff2e 	bl	80001d0 <strcmp>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <http_response_getFileType+0x112>
        return HTTP_fileType_JS;
 800937a:	230c      	movs	r3, #12
 800937c:	e051      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "json"))
 800937e:	493b      	ldr	r1, [pc, #236]	@ (800946c <http_response_getFileType+0x200>)
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7f6 ff25 	bl	80001d0 <strcmp>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <http_response_getFileType+0x124>
        return HTTP_fileType_JSON;
 800938c:	230d      	movs	r3, #13
 800938e:	e048      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "jpeg"))
 8009390:	4937      	ldr	r1, [pc, #220]	@ (8009470 <http_response_getFileType+0x204>)
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7f6 ff1c 	bl	80001d0 <strcmp>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <http_response_getFileType+0x136>
        return HTTP_fileType_JPEG;
 800939e:	230e      	movs	r3, #14
 80093a0:	e03f      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "jpg"))
 80093a2:	4934      	ldr	r1, [pc, #208]	@ (8009474 <http_response_getFileType+0x208>)
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7f6 ff13 	bl	80001d0 <strcmp>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <http_response_getFileType+0x148>
        return HTTP_fileType_JPEG;
 80093b0:	230e      	movs	r3, #14
 80093b2:	e036      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "png"))
 80093b4:	4930      	ldr	r1, [pc, #192]	@ (8009478 <http_response_getFileType+0x20c>)
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7f6 ff0a 	bl	80001d0 <strcmp>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <http_response_getFileType+0x15a>
        return HTTP_fileType_PNG;
 80093c2:	230f      	movs	r3, #15
 80093c4:	e02d      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "bin"))
 80093c6:	492d      	ldr	r1, [pc, #180]	@ (800947c <http_response_getFileType+0x210>)
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7f6 ff01 	bl	80001d0 <strcmp>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <http_response_getFileType+0x16c>
        return HTTP_fileType_BIN;
 80093d4:	2310      	movs	r3, #16
 80093d6:	e024      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "csv"))
 80093d8:	4929      	ldr	r1, [pc, #164]	@ (8009480 <http_response_getFileType+0x214>)
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7f6 fef8 	bl	80001d0 <strcmp>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <http_response_getFileType+0x17e>
        return HTTP_fileType_CSV;
 80093e6:	2311      	movs	r3, #17
 80093e8:	e01b      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "gif"))
 80093ea:	4926      	ldr	r1, [pc, #152]	@ (8009484 <http_response_getFileType+0x218>)
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7f6 feef 	bl	80001d0 <strcmp>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <http_response_getFileType+0x190>
        return HTTP_fileType_GIF;
 80093f8:	2312      	movs	r3, #18
 80093fa:	e012      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "ico"))
 80093fc:	4922      	ldr	r1, [pc, #136]	@ (8009488 <http_response_getFileType+0x21c>)
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f7f6 fee6 	bl	80001d0 <strcmp>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <http_response_getFileType+0x1a2>
        return HTTP_fileType_ICO;
 800940a:	2313      	movs	r3, #19
 800940c:	e009      	b.n	8009422 <http_response_getFileType+0x1b6>
    else if (0 == strcmp(fileType, "zip"))
 800940e:	491f      	ldr	r1, [pc, #124]	@ (800948c <http_response_getFileType+0x220>)
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f7f6 fedd 	bl	80001d0 <strcmp>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <http_response_getFileType+0x1b4>
        return HTTP_fileType_ZIP;
 800941c:	2314      	movs	r3, #20
 800941e:	e000      	b.n	8009422 <http_response_getFileType+0x1b6>
    else
        return HTTP_fileType_unknown;
 8009420:	2300      	movs	r3, #0

    PRINT_ERROR("unhandled condition(%s)\r\n", requestPath);
    return HTTP_FAILURE;
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20001240 	.word	0x20001240
 8009430:	08013068 	.word	0x08013068
 8009434:	08011eb0 	.word	0x08011eb0
 8009438:	08011ed8 	.word	0x08011ed8
 800943c:	08011f04 	.word	0x08011f04
 8009440:	08011f0c 	.word	0x08011f0c
 8009444:	08011f14 	.word	0x08011f14
 8009448:	08011f18 	.word	0x08011f18
 800944c:	08011f1c 	.word	0x08011f1c
 8009450:	08011f20 	.word	0x08011f20
 8009454:	08011f24 	.word	0x08011f24
 8009458:	08011f28 	.word	0x08011f28
 800945c:	08011f30 	.word	0x08011f30
 8009460:	08011f34 	.word	0x08011f34
 8009464:	08011f38 	.word	0x08011f38
 8009468:	08011f3c 	.word	0x08011f3c
 800946c:	08011f40 	.word	0x08011f40
 8009470:	08011f48 	.word	0x08011f48
 8009474:	08011f50 	.word	0x08011f50
 8009478:	08011f54 	.word	0x08011f54
 800947c:	08011f58 	.word	0x08011f58
 8009480:	08011f5c 	.word	0x08011f5c
 8009484:	08011f60 	.word	0x08011f60
 8009488:	08011f64 	.word	0x08011f64
 800948c:	08011f68 	.word	0x08011f68

08009490 <http_response_get_contentType_string>:

http_response_contenttype_t http_response_get_contentType_string(http_response_fileType_t fileType, char *buffer, unsigned int bufferLength)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af02      	add	r7, sp, #8
 8009496:	4603      	mov	r3, r0
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	73fb      	strb	r3, [r7, #15]
    if ((NULL == buffer) || (bufferLength <= 0))
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <http_response_get_contentType_string+0x1a>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10d      	bne.n	80094c6 <http_response_get_contentType_string+0x36>
    {
        PRINT_ERROR("NULL buffer or zero length(%d)\r\n", bufferLength);
 80094aa:	4b7d      	ldr	r3, [pc, #500]	@ (80096a0 <http_response_get_contentType_string+0x210>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68d8      	ldr	r0, [r3, #12]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	4b7b      	ldr	r3, [pc, #492]	@ (80096a4 <http_response_get_contentType_string+0x214>)
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	236d      	movs	r3, #109	@ 0x6d
 80094ba:	4a7b      	ldr	r2, [pc, #492]	@ (80096a8 <http_response_get_contentType_string+0x218>)
 80094bc:	497b      	ldr	r1, [pc, #492]	@ (80096ac <http_response_get_contentType_string+0x21c>)
 80094be:	f006 f8fd 	bl	800f6bc <fiprintf>
        return HTTP_FAILURE;
 80094c2:	23ff      	movs	r3, #255	@ 0xff
 80094c4:	e0e7      	b.n	8009696 <http_response_get_contentType_string+0x206>
    }
    else
    {
        if ((fileType == HTTP_fileType_SHTML) || (fileType == HTTP_fileType_SHTM) ||
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d017      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d014      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d011      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
            (fileType == HTTP_fileType_SSI) || (fileType == HTTP_fileType_XML) ||
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b05      	cmp	r3, #5
 80094dc:	d00e      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	2b07      	cmp	r3, #7
 80094e2:	d00b      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
            (fileType == HTTP_fileType_SH) || (fileType == HTTP_fileType_EXE) ||
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	2b08      	cmp	r3, #8
 80094e8:	d008      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	2b09      	cmp	r3, #9
 80094ee:	d005      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
            (fileType == HTTP_fileType_HTML) || (fileType == HTTP_fileType_HTM) ||
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	2b0a      	cmp	r3, #10
 80094f4:	d002      	beq.n	80094fc <http_response_get_contentType_string+0x6c>
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d10b      	bne.n	8009514 <http_response_get_contentType_string+0x84>
            (fileType == HTTP_fileType_SHTM))
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_HTML, bufferLength);
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	496c      	ldr	r1, [pc, #432]	@ (80096b0 <http_response_get_contentType_string+0x220>)
 8009500:	68b8      	ldr	r0, [r7, #8]
 8009502:	f006 fb11 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4413      	add	r3, r2
 800950c:	2200      	movs	r2, #0
 800950e:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_html;
 8009510:	2302      	movs	r3, #2
 8009512:	e0c0      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_TXT)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d10b      	bne.n	8009532 <http_response_get_contentType_string+0xa2>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, bufferLength);
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4965      	ldr	r1, [pc, #404]	@ (80096b4 <http_response_get_contentType_string+0x224>)
 800951e:	68b8      	ldr	r0, [r7, #8]
 8009520:	f006 fb02 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4413      	add	r3, r2
 800952a:	2200      	movs	r2, #0
 800952c:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_plaintext;
 800952e:	2301      	movs	r3, #1
 8009530:	e0b1      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_CSS)
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b0b      	cmp	r3, #11
 8009536:	d10b      	bne.n	8009550 <http_response_get_contentType_string+0xc0>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSS, bufferLength);
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	495f      	ldr	r1, [pc, #380]	@ (80096b8 <http_response_get_contentType_string+0x228>)
 800953c:	68b8      	ldr	r0, [r7, #8]
 800953e:	f006 faf3 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4413      	add	r3, r2
 8009548:	2200      	movs	r2, #0
 800954a:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_css;
 800954c:	2303      	movs	r3, #3
 800954e:	e0a2      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_JS)
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b0c      	cmp	r3, #12
 8009554:	d10b      	bne.n	800956e <http_response_get_contentType_string+0xde>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_JS, bufferLength);
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	4958      	ldr	r1, [pc, #352]	@ (80096bc <http_response_get_contentType_string+0x22c>)
 800955a:	68b8      	ldr	r0, [r7, #8]
 800955c:	f006 fae4 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4413      	add	r3, r2
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_js;
 800956a:	2309      	movs	r3, #9
 800956c:	e093      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_JSON)
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	2b0d      	cmp	r3, #13
 8009572:	d10b      	bne.n	800958c <http_response_get_contentType_string+0xfc>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_JSON, bufferLength);
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4952      	ldr	r1, [pc, #328]	@ (80096c0 <http_response_get_contentType_string+0x230>)
 8009578:	68b8      	ldr	r0, [r7, #8]
 800957a:	f006 fad5 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4413      	add	r3, r2
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_json;
 8009588:	2308      	movs	r3, #8
 800958a:	e084      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_JPEG)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b0e      	cmp	r3, #14
 8009590:	d10b      	bne.n	80095aa <http_response_get_contentType_string+0x11a>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_JPEG, bufferLength);
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	494b      	ldr	r1, [pc, #300]	@ (80096c4 <http_response_get_contentType_string+0x234>)
 8009596:	68b8      	ldr	r0, [r7, #8]
 8009598:	f006 fac6 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_jpeg;
 80095a6:	2305      	movs	r3, #5
 80095a8:	e075      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_PNG)
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	2b0f      	cmp	r3, #15
 80095ae:	d10b      	bne.n	80095c8 <http_response_get_contentType_string+0x138>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_PNG, bufferLength);
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4945      	ldr	r1, [pc, #276]	@ (80096c8 <http_response_get_contentType_string+0x238>)
 80095b4:	68b8      	ldr	r0, [r7, #8]
 80095b6:	f006 fab7 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4413      	add	r3, r2
 80095c0:	2200      	movs	r2, #0
 80095c2:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_png;
 80095c4:	2306      	movs	r3, #6
 80095c6:	e066      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_BIN)
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	2b10      	cmp	r3, #16
 80095cc:	d10b      	bne.n	80095e6 <http_response_get_contentType_string+0x156>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_BIN, bufferLength);
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	493e      	ldr	r1, [pc, #248]	@ (80096cc <http_response_get_contentType_string+0x23c>)
 80095d2:	68b8      	ldr	r0, [r7, #8]
 80095d4:	f006 faa8 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_bin;
 80095e2:	230b      	movs	r3, #11
 80095e4:	e057      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_CSV)
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b11      	cmp	r3, #17
 80095ea:	d10b      	bne.n	8009604 <http_response_get_contentType_string+0x174>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSV, bufferLength);
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	4938      	ldr	r1, [pc, #224]	@ (80096d0 <http_response_get_contentType_string+0x240>)
 80095f0:	68b8      	ldr	r0, [r7, #8]
 80095f2:	f006 fa99 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4413      	add	r3, r2
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_csv;
 8009600:	2304      	movs	r3, #4
 8009602:	e048      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_GIF)
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	2b12      	cmp	r3, #18
 8009608:	d10b      	bne.n	8009622 <http_response_get_contentType_string+0x192>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_GIF, bufferLength);
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	4931      	ldr	r1, [pc, #196]	@ (80096d4 <http_response_get_contentType_string+0x244>)
 800960e:	68b8      	ldr	r0, [r7, #8]
 8009610:	f006 fa8a 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4413      	add	r3, r2
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_gif;
 800961e:	2307      	movs	r3, #7
 8009620:	e039      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_ICO)
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b13      	cmp	r3, #19
 8009626:	d10b      	bne.n	8009640 <http_response_get_contentType_string+0x1b0>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_ICO, bufferLength);
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	492b      	ldr	r1, [pc, #172]	@ (80096d8 <http_response_get_contentType_string+0x248>)
 800962c:	68b8      	ldr	r0, [r7, #8]
 800962e:	f006 fa7b 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_ico;
 800963c:	230c      	movs	r3, #12
 800963e:	e02a      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_ZIP)
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	2b14      	cmp	r3, #20
 8009644:	d10b      	bne.n	800965e <http_response_get_contentType_string+0x1ce>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_ZIP, bufferLength);
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	4924      	ldr	r1, [pc, #144]	@ (80096dc <http_response_get_contentType_string+0x24c>)
 800964a:	68b8      	ldr	r0, [r7, #8]
 800964c:	f006 fa6c 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4413      	add	r3, r2
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_zip;
 800965a:	230a      	movs	r3, #10
 800965c:	e01b      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
        else if (fileType == HTTP_fileType_unknown)
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10b      	bne.n	800967c <http_response_get_contentType_string+0x1ec>
        {
            strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, bufferLength);
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	4913      	ldr	r1, [pc, #76]	@ (80096b4 <http_response_get_contentType_string+0x224>)
 8009668:	68b8      	ldr	r0, [r7, #8]
 800966a:	f006 fa5d 	bl	800fb28 <strncpy>
            buffer[bufferLength] = 0;
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4413      	add	r3, r2
 8009674:	2200      	movs	r2, #0
 8009676:	701a      	strb	r2, [r3, #0]
            return HTTP_contentType_plaintext;
 8009678:	2301      	movs	r3, #1
 800967a:	e00c      	b.n	8009696 <http_response_get_contentType_string+0x206>
        }
    }

    PRINT_ERROR("unhandled condition(%d)\r\n", fileType);
 800967c:	4b08      	ldr	r3, [pc, #32]	@ (80096a0 <http_response_get_contentType_string+0x210>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68d8      	ldr	r0, [r3, #12]
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	4b07      	ldr	r3, [pc, #28]	@ (80096a4 <http_response_get_contentType_string+0x214>)
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	23c6      	movs	r3, #198	@ 0xc6
 800968c:	4a06      	ldr	r2, [pc, #24]	@ (80096a8 <http_response_get_contentType_string+0x218>)
 800968e:	4914      	ldr	r1, [pc, #80]	@ (80096e0 <http_response_get_contentType_string+0x250>)
 8009690:	f006 f814 	bl	800f6bc <fiprintf>
    return HTTP_FAILURE;
 8009694:	23ff      	movs	r3, #255	@ 0xff
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20001240 	.word	0x20001240
 80096a4:	08013084 	.word	0x08013084
 80096a8:	08011eb0 	.word	0x08011eb0
 80096ac:	08011f6c 	.word	0x08011f6c
 80096b0:	08011fa0 	.word	0x08011fa0
 80096b4:	08011fac 	.word	0x08011fac
 80096b8:	08011fb8 	.word	0x08011fb8
 80096bc:	08011fc4 	.word	0x08011fc4
 80096c0:	08011fdc 	.word	0x08011fdc
 80096c4:	08011ff0 	.word	0x08011ff0
 80096c8:	08011ffc 	.word	0x08011ffc
 80096cc:	08012008 	.word	0x08012008
 80096d0:	08012024 	.word	0x08012024
 80096d4:	08012030 	.word	0x08012030
 80096d8:	0801203c 	.word	0x0801203c
 80096dc:	0801204c 	.word	0x0801204c
 80096e0:	0801205c 	.word	0x0801205c

080096e4 <http_response_contentTypeToString>:

int http_response_contentTypeToString(http_response_contenttype_t contentType, char *buffer, unsigned int length)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af02      	add	r7, sp, #8
 80096ea:	4603      	mov	r3, r0
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	73fb      	strb	r3, [r7, #15]
    if ((NULL == buffer) || (0 == length))
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <http_response_contentTypeToString+0x1a>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10e      	bne.n	800971c <http_response_contentTypeToString+0x38>
    {
        PRINT_ERROR("NULL buffer or 0 length(%d)\r\n", length);
 80096fe:	4b4a      	ldr	r3, [pc, #296]	@ (8009828 <http_response_contentTypeToString+0x144>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68d8      	ldr	r0, [r3, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	4b48      	ldr	r3, [pc, #288]	@ (800982c <http_response_contentTypeToString+0x148>)
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	23ce      	movs	r3, #206	@ 0xce
 800970e:	4a48      	ldr	r2, [pc, #288]	@ (8009830 <http_response_contentTypeToString+0x14c>)
 8009710:	4948      	ldr	r1, [pc, #288]	@ (8009834 <http_response_contentTypeToString+0x150>)
 8009712:	f005 ffd3 	bl	800f6bc <fiprintf>
        return HTTP_FAILURE;
 8009716:	f04f 33ff 	mov.w	r3, #4294967295
 800971a:	e080      	b.n	800981e <http_response_contentTypeToString+0x13a>
    }

    switch (contentType)
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	2b0c      	cmp	r3, #12
 8009720:	d86a      	bhi.n	80097f8 <http_response_contentTypeToString+0x114>
 8009722:	a201      	add	r2, pc, #4	@ (adr r2, 8009728 <http_response_contentTypeToString+0x44>)
 8009724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009728:	0800975d 	.word	0x0800975d
 800972c:	08009769 	.word	0x08009769
 8009730:	08009775 	.word	0x08009775
 8009734:	08009781 	.word	0x08009781
 8009738:	0800978d 	.word	0x0800978d
 800973c:	08009799 	.word	0x08009799
 8009740:	080097a5 	.word	0x080097a5
 8009744:	080097b1 	.word	0x080097b1
 8009748:	080097bd 	.word	0x080097bd
 800974c:	080097c9 	.word	0x080097c9
 8009750:	080097d5 	.word	0x080097d5
 8009754:	080097e1 	.word	0x080097e1
 8009758:	080097ed 	.word	0x080097ed
    {
    case HTTP_contentType_unknown:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, length);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	4936      	ldr	r1, [pc, #216]	@ (8009838 <http_response_contentTypeToString+0x154>)
 8009760:	68b8      	ldr	r0, [r7, #8]
 8009762:	f006 f9e1 	bl	800fb28 <strncpy>
        break;
 8009766:	e059      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_plaintext:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, length);
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	4933      	ldr	r1, [pc, #204]	@ (8009838 <http_response_contentTypeToString+0x154>)
 800976c:	68b8      	ldr	r0, [r7, #8]
 800976e:	f006 f9db 	bl	800fb28 <strncpy>
        break;
 8009772:	e053      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_html:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_HTML, length);
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	4931      	ldr	r1, [pc, #196]	@ (800983c <http_response_contentTypeToString+0x158>)
 8009778:	68b8      	ldr	r0, [r7, #8]
 800977a:	f006 f9d5 	bl	800fb28 <strncpy>
        break;
 800977e:	e04d      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_css:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSS, length);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	492f      	ldr	r1, [pc, #188]	@ (8009840 <http_response_contentTypeToString+0x15c>)
 8009784:	68b8      	ldr	r0, [r7, #8]
 8009786:	f006 f9cf 	bl	800fb28 <strncpy>
        break;
 800978a:	e047      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_csv:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_CSV, length);
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	492d      	ldr	r1, [pc, #180]	@ (8009844 <http_response_contentTypeToString+0x160>)
 8009790:	68b8      	ldr	r0, [r7, #8]
 8009792:	f006 f9c9 	bl	800fb28 <strncpy>
        break;
 8009796:	e041      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_jpeg:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_JPEG, length);
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	492b      	ldr	r1, [pc, #172]	@ (8009848 <http_response_contentTypeToString+0x164>)
 800979c:	68b8      	ldr	r0, [r7, #8]
 800979e:	f006 f9c3 	bl	800fb28 <strncpy>
        break;
 80097a2:	e03b      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_png:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PNG, length);
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	4929      	ldr	r1, [pc, #164]	@ (800984c <http_response_contentTypeToString+0x168>)
 80097a8:	68b8      	ldr	r0, [r7, #8]
 80097aa:	f006 f9bd 	bl	800fb28 <strncpy>
        break;
 80097ae:	e035      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_gif:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_GIF, length);
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4927      	ldr	r1, [pc, #156]	@ (8009850 <http_response_contentTypeToString+0x16c>)
 80097b4:	68b8      	ldr	r0, [r7, #8]
 80097b6:	f006 f9b7 	bl	800fb28 <strncpy>
        break;
 80097ba:	e02f      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_json:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_JSON, length);
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	4925      	ldr	r1, [pc, #148]	@ (8009854 <http_response_contentTypeToString+0x170>)
 80097c0:	68b8      	ldr	r0, [r7, #8]
 80097c2:	f006 f9b1 	bl	800fb28 <strncpy>
        break;
 80097c6:	e029      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_js:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_JS, length);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	4923      	ldr	r1, [pc, #140]	@ (8009858 <http_response_contentTypeToString+0x174>)
 80097cc:	68b8      	ldr	r0, [r7, #8]
 80097ce:	f006 f9ab 	bl	800fb28 <strncpy>
        break;
 80097d2:	e023      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_zip:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_ZIP, length);
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	4921      	ldr	r1, [pc, #132]	@ (800985c <http_response_contentTypeToString+0x178>)
 80097d8:	68b8      	ldr	r0, [r7, #8]
 80097da:	f006 f9a5 	bl	800fb28 <strncpy>
        break;
 80097de:	e01d      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_bin:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_BIN, length);
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	491f      	ldr	r1, [pc, #124]	@ (8009860 <http_response_contentTypeToString+0x17c>)
 80097e4:	68b8      	ldr	r0, [r7, #8]
 80097e6:	f006 f99f 	bl	800fb28 <strncpy>
        break;
 80097ea:	e017      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    case HTTP_contentType_ico:
    {
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_ICO, length);
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	491d      	ldr	r1, [pc, #116]	@ (8009864 <http_response_contentTypeToString+0x180>)
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f006 f999 	bl	800fb28 <strncpy>
        break;
 80097f6:	e011      	b.n	800981c <http_response_contentTypeToString+0x138>
    }
    default:
    {
        PRINT_ERROR("unhandled case. passing default(%d)\r\n", contentType);
 80097f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009828 <http_response_contentTypeToString+0x144>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68d8      	ldr	r0, [r3, #12]
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	4b0a      	ldr	r3, [pc, #40]	@ (800982c <http_response_contentTypeToString+0x148>)
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	f240 1317 	movw	r3, #279	@ 0x117
 800980a:	4a09      	ldr	r2, [pc, #36]	@ (8009830 <http_response_contentTypeToString+0x14c>)
 800980c:	4916      	ldr	r1, [pc, #88]	@ (8009868 <http_response_contentTypeToString+0x184>)
 800980e:	f005 ff55 	bl	800f6bc <fiprintf>
        strncpy(buffer, HTTP_RES_CONTENT_TYPE_PLAINTEXT, length);
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4908      	ldr	r1, [pc, #32]	@ (8009838 <http_response_contentTypeToString+0x154>)
 8009816:	68b8      	ldr	r0, [r7, #8]
 8009818:	f006 f986 	bl	800fb28 <strncpy>
    }
    }

    //PRINT_ERROR("unhandled case(%d)\r\n", contentType);
    return HTTP_SUCCESS;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20001240 	.word	0x20001240
 800982c:	080130ac 	.word	0x080130ac
 8009830:	08011eb0 	.word	0x08011eb0
 8009834:	0801208c 	.word	0x0801208c
 8009838:	08011fac 	.word	0x08011fac
 800983c:	08011fa0 	.word	0x08011fa0
 8009840:	08011fb8 	.word	0x08011fb8
 8009844:	08012024 	.word	0x08012024
 8009848:	08011ff0 	.word	0x08011ff0
 800984c:	08011ffc 	.word	0x08011ffc
 8009850:	08012030 	.word	0x08012030
 8009854:	08011fdc 	.word	0x08011fdc
 8009858:	08011fc4 	.word	0x08011fc4
 800985c:	0801204c 	.word	0x0801204c
 8009860:	08012008 	.word	0x08012008
 8009864:	0801203c 	.word	0x0801203c
 8009868:	080120c0 	.word	0x080120c0

0800986c <http_response_response_header>:
    - if path is null, response content type will be used. 
    - if response content type is also null, then no content type will be included in the response. 
*/

int http_response_response_header(HTTP_response_headerRequest_t headerRequest)
{
 800986c:	b084      	sub	sp, #16
 800986e:	b5b0      	push	{r4, r5, r7, lr}
 8009870:	b0bc      	sub	sp, #240	@ 0xf0
 8009872:	af02      	add	r7, sp, #8
 8009874:	f107 04f8 	add.w	r4, r7, #248	@ 0xf8
 8009878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if ((NULL == headerRequest.headerBuffer) || (headerRequest.bufferLength <= 0))
 800987c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <http_response_response_header+0x20>
 8009884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009888:	2b00      	cmp	r3, #0
 800988a:	d110      	bne.n	80098ae <http_response_response_header+0x42>
    {
        PRINT_ERROR(" null buffer or 0 length(%d)\r\n", (int)headerRequest.bufferLength);
 800988c:	4bcb      	ldr	r3, [pc, #812]	@ (8009bbc <http_response_response_header+0x350>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68d8      	ldr	r0, [r3, #12]
 8009892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	4bc9      	ldr	r3, [pc, #804]	@ (8009bc0 <http_response_response_header+0x354>)
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	f240 132d 	movw	r3, #301	@ 0x12d
 80098a0:	4ac8      	ldr	r2, [pc, #800]	@ (8009bc4 <http_response_response_header+0x358>)
 80098a2:	49c9      	ldr	r1, [pc, #804]	@ (8009bc8 <http_response_response_header+0x35c>)
 80098a4:	f005 ff0a 	bl	800f6bc <fiprintf>
        return HTTP_FAILURE;
 80098a8:	f04f 33ff 	mov.w	r3, #4294967295
 80098ac:	e208      	b.n	8009cc0 <http_response_response_header+0x454>
    }

    char responseLine[HTTP_RESPONSE_LINE1_LENGTH];
    char contentTypeLine[HTTP_RESPONSE_CONTTYPE_LENGTH];
    char contentLengthLine[HTTP_RESPONSE_CONLEN_LENGTH];
    char contentTypeLineDone = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    char contentLengthLineDone = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6

    responseLine[0] = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    contentTypeLine[0] = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    contentLengthLine[0] = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    headerRequest.headerBuffer[0] = 0;
 80098cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]

    //sprint response line 1
    //TODO: handle all responses
    switch (headerRequest.responseCode)
 80098d4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 80098d8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80098dc:	f000 809a 	beq.w	8009a14 <http_response_response_header+0x1a8>
 80098e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80098e4:	f300 809e 	bgt.w	8009a24 <http_response_response_header+0x1b8>
 80098e8:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80098ec:	f280 809a 	bge.w	8009a24 <http_response_response_header+0x1b8>
 80098f0:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 80098f4:	dc0b      	bgt.n	800990e <http_response_response_header+0xa2>
 80098f6:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 80098fa:	d05b      	beq.n	80099b4 <http_response_response_header+0x148>
 80098fc:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8009900:	f300 8090 	bgt.w	8009a24 <http_response_response_header+0x1b8>
 8009904:	2bc8      	cmp	r3, #200	@ 0xc8
 8009906:	d045      	beq.n	8009994 <http_response_response_header+0x128>
 8009908:	2bcc      	cmp	r3, #204	@ 0xcc
 800990a:	d04b      	beq.n	80099a4 <http_response_response_header+0x138>
 800990c:	e08a      	b.n	8009a24 <http_response_response_header+0x1b8>
 800990e:	f2a3 1393 	subw	r3, r3, #403	@ 0x193
 8009912:	2b1c      	cmp	r3, #28
 8009914:	f200 8086 	bhi.w	8009a24 <http_response_response_header+0x1b8>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <http_response_response_header+0xb4>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	080099c5 	.word	0x080099c5
 8009924:	080099d5 	.word	0x080099d5
 8009928:	08009a25 	.word	0x08009a25
 800992c:	08009a25 	.word	0x08009a25
 8009930:	08009a25 	.word	0x08009a25
 8009934:	08009a25 	.word	0x08009a25
 8009938:	08009a25 	.word	0x08009a25
 800993c:	08009a25 	.word	0x08009a25
 8009940:	08009a25 	.word	0x08009a25
 8009944:	08009a25 	.word	0x08009a25
 8009948:	080099e5 	.word	0x080099e5
 800994c:	080099f5 	.word	0x080099f5
 8009950:	08009a25 	.word	0x08009a25
 8009954:	08009a25 	.word	0x08009a25
 8009958:	08009a25 	.word	0x08009a25
 800995c:	08009a25 	.word	0x08009a25
 8009960:	08009a25 	.word	0x08009a25
 8009964:	08009a25 	.word	0x08009a25
 8009968:	08009a25 	.word	0x08009a25
 800996c:	08009a25 	.word	0x08009a25
 8009970:	08009a25 	.word	0x08009a25
 8009974:	08009a25 	.word	0x08009a25
 8009978:	08009a25 	.word	0x08009a25
 800997c:	08009a25 	.word	0x08009a25
 8009980:	08009a25 	.word	0x08009a25
 8009984:	08009a25 	.word	0x08009a25
 8009988:	08009a25 	.word	0x08009a25
 800998c:	08009a25 	.word	0x08009a25
 8009990:	08009a05 	.word	0x08009a05
    {
    case HTTP_RESCODE_successSuccess: //200 OK
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SUCCESS_SUCCESS);
 8009994:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009998:	4a8c      	ldr	r2, [pc, #560]	@ (8009bcc <http_response_response_header+0x360>)
 800999a:	2132      	movs	r1, #50	@ 0x32
 800999c:	4618      	mov	r0, r3
 800999e:	f005 ff2d 	bl	800f7fc <sniprintf>
        break;
 80099a2:	e055      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_successNocontent: //204
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SUCCESS_NOCONTENT);
 80099a4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80099a8:	4a89      	ldr	r2, [pc, #548]	@ (8009bd0 <http_response_response_header+0x364>)
 80099aa:	2132      	movs	r1, #50	@ 0x32
 80099ac:	4618      	mov	r0, r3
 80099ae:	f005 ff25 	bl	800f7fc <sniprintf>
        break;
 80099b2:	e04d      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_redirectNotmodified: //304
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_REDIRECT_NOTMODIFIED);
 80099b4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80099b8:	4a86      	ldr	r2, [pc, #536]	@ (8009bd4 <http_response_response_header+0x368>)
 80099ba:	2132      	movs	r1, #50	@ 0x32
 80099bc:	4618      	mov	r0, r3
 80099be:	f005 ff1d 	bl	800f7fc <sniprintf>
        break;
 80099c2:	e045      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorForbidden: // 403
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_FORBIDDEN);
 80099c4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80099c8:	4a83      	ldr	r2, [pc, #524]	@ (8009bd8 <http_response_response_header+0x36c>)
 80099ca:	2132      	movs	r1, #50	@ 0x32
 80099cc:	4618      	mov	r0, r3
 80099ce:	f005 ff15 	bl	800f7fc <sniprintf>
        break;
 80099d2:	e03d      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorNotfound: // 401
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_NOTFOUND);
 80099d4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80099d8:	4a80      	ldr	r2, [pc, #512]	@ (8009bdc <http_response_response_header+0x370>)
 80099da:	2132      	movs	r1, #50	@ 0x32
 80099dc:	4618      	mov	r0, r3
 80099de:	f005 ff0d 	bl	800f7fc <sniprintf>
        break;
 80099e2:	e035      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorPayloadlarge: //413
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_PAYLOADLARGE);
 80099e4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80099e8:	4a7d      	ldr	r2, [pc, #500]	@ (8009be0 <http_response_response_header+0x374>)
 80099ea:	2132      	movs	r1, #50	@ 0x32
 80099ec:	4618      	mov	r0, r3
 80099ee:	f005 ff05 	bl	800f7fc <sniprintf>
        break;
 80099f2:	e02d      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorUritoolong: //414
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_URITOOLONG);
 80099f4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80099f8:	4a7a      	ldr	r2, [pc, #488]	@ (8009be4 <http_response_response_header+0x378>)
 80099fa:	2132      	movs	r1, #50	@ 0x32
 80099fc:	4618      	mov	r0, r3
 80099fe:	f005 fefd 	bl	800f7fc <sniprintf>
        break;
 8009a02:	e025      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_cerrorHeadertoolarge: ///431
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_CERROR_HEADERTOOLARGE);
 8009a04:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009a08:	4a77      	ldr	r2, [pc, #476]	@ (8009be8 <http_response_response_header+0x37c>)
 8009a0a:	2132      	movs	r1, #50	@ 0x32
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f005 fef5 	bl	800f7fc <sniprintf>
        break;
 8009a12:	e01d      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    case HTTP_RESCODE_serrorInternalerror: //500
    {
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SERROR_INTERNALERROR);
 8009a14:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009a18:	4a74      	ldr	r2, [pc, #464]	@ (8009bec <http_response_response_header+0x380>)
 8009a1a:	2132      	movs	r1, #50	@ 0x32
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f005 feed 	bl	800f7fc <sniprintf>
        break;
 8009a22:	e015      	b.n	8009a50 <http_response_response_header+0x1e4>
    }
    default:
    {
        PRINT_ERROR("default case. passing default\r\n(%d)", (int)headerRequest.responseCode);
 8009a24:	4b65      	ldr	r3, [pc, #404]	@ (8009bbc <http_response_response_header+0x350>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68d8      	ldr	r0, [r3, #12]
 8009a2a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	4b63      	ldr	r3, [pc, #396]	@ (8009bc0 <http_response_response_header+0x354>)
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	f240 136f 	movw	r3, #367	@ 0x16f
 8009a38:	4a62      	ldr	r2, [pc, #392]	@ (8009bc4 <http_response_response_header+0x358>)
 8009a3a:	496d      	ldr	r1, [pc, #436]	@ (8009bf0 <http_response_response_header+0x384>)
 8009a3c:	f005 fe3e 	bl	800f6bc <fiprintf>
        snprintf(responseLine, HTTP_RESPONSE_LINE1_LENGTH, HTTP_RES_HTTP_VERSION " " HTTP_RESSTRING_SERROR_NOTIMPLEMENTED);
 8009a40:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009a44:	4a6b      	ldr	r2, [pc, #428]	@ (8009bf4 <http_response_response_header+0x388>)
 8009a46:	2132      	movs	r1, #50	@ 0x32
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f005 fed7 	bl	800f7fc <sniprintf>
        break;
 8009a4e:	bf00      	nop
    }
    }

    //handle content type here
    if (0 != headerRequest.contentType)
 8009a50:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d025      	beq.n	8009aa4 <http_response_response_header+0x238>
    {
        char lcontentTypeLine[HTTP_RESPONSE_CONTTYPE_LENGTH];
        int retVal;
        retVal = http_response_contentTypeToString(headerRequest.contentType, lcontentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH);
 8009a58:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8009a5c:	1d39      	adds	r1, r7, #4
 8009a5e:	2232      	movs	r2, #50	@ 0x32
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fe3f 	bl	80096e4 <http_response_contentTypeToString>
 8009a66:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        if (retVal < 0)
 8009a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	da0d      	bge.n	8009a8e <http_response_response_header+0x222>
        {
            PRINT_ERROR("error converting contentType to string(%d)\r\n", (int)headerRequest.contentType);
 8009a72:	4b52      	ldr	r3, [pc, #328]	@ (8009bbc <http_response_response_header+0x350>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68d8      	ldr	r0, [r3, #12]
 8009a78:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	4b50      	ldr	r3, [pc, #320]	@ (8009bc0 <http_response_response_header+0x354>)
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	f240 137d 	movw	r3, #381	@ 0x17d
 8009a86:	4a4f      	ldr	r2, [pc, #316]	@ (8009bc4 <http_response_response_header+0x358>)
 8009a88:	495b      	ldr	r1, [pc, #364]	@ (8009bf8 <http_response_response_header+0x38c>)
 8009a8a:	f005 fe17 	bl	800f6bc <fiprintf>
        }
        snprintf(contentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH, HTTP_RESHEADER_CONTENT_TYPE ": %s", lcontentTypeLine);
 8009a8e:	1d3b      	adds	r3, r7, #4
 8009a90:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8009a94:	4a59      	ldr	r2, [pc, #356]	@ (8009bfc <http_response_response_header+0x390>)
 8009a96:	2132      	movs	r1, #50	@ 0x32
 8009a98:	f005 feb0 	bl	800f7fc <sniprintf>
        contentTypeLineDone = 1;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8009aa2:	e031      	b.n	8009b08 <http_response_response_header+0x29c>
    }
    else if (NULL != headerRequest.filePath)
 8009aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d02d      	beq.n	8009b08 <http_response_response_header+0x29c>
    {
        http_response_fileType_t fileType;
        char lcontentTypeLine[HTTP_RESPONSE_CONTTYPE_LENGTH];

        fileType = http_response_getFileType(headerRequest.filePath);
 8009aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff fbdb 	bl	800926c <http_response_getFileType>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
        int retval;
        retval = http_response_get_contentType_string(fileType, lcontentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH);
 8009abc:	1d39      	adds	r1, r7, #4
 8009abe:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8009ac2:	2232      	movs	r2, #50	@ 0x32
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fce3 	bl	8009490 <http_response_get_contentType_string>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        if (retval < 0)
 8009ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da0d      	bge.n	8009af4 <http_response_response_header+0x288>
        {
            PRINT_ERROR("error converting contentType to string(%d)\r\n", (int)fileType);
 8009ad8:	4b38      	ldr	r3, [pc, #224]	@ (8009bbc <http_response_response_header+0x350>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68d8      	ldr	r0, [r3, #12]
 8009ade:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	4b36      	ldr	r3, [pc, #216]	@ (8009bc0 <http_response_response_header+0x354>)
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8009aec:	4a35      	ldr	r2, [pc, #212]	@ (8009bc4 <http_response_response_header+0x358>)
 8009aee:	4942      	ldr	r1, [pc, #264]	@ (8009bf8 <http_response_response_header+0x38c>)
 8009af0:	f005 fde4 	bl	800f6bc <fiprintf>
        }
        snprintf(contentTypeLine, HTTP_RESPONSE_CONTTYPE_LENGTH, HTTP_RESHEADER_CONTENT_TYPE ": %s", lcontentTypeLine);
 8009af4:	1d3b      	adds	r3, r7, #4
 8009af6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8009afa:	4a40      	ldr	r2, [pc, #256]	@ (8009bfc <http_response_response_header+0x390>)
 8009afc:	2132      	movs	r1, #50	@ 0x32
 8009afe:	f005 fe7d 	bl	800f7fc <sniprintf>
        contentTypeLineDone = 1;
 8009b02:	2301      	movs	r3, #1
 8009b04:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    }

    //handle content length and transfer encoding.

    if (transferEnc_chunked == headerRequest.transferEncoding)
 8009b08:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d10a      	bne.n	8009b26 <http_response_response_header+0x2ba>
    {
        snprintf(contentLengthLine, HTTP_RESPONSE_CONLEN_LENGTH, HTTP_RESHEADER_TRANSFER_ENCODING ": chunked");
 8009b10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009b14:	4a3a      	ldr	r2, [pc, #232]	@ (8009c00 <http_response_response_header+0x394>)
 8009b16:	2132      	movs	r1, #50	@ 0x32
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f005 fe6f 	bl	800f7fc <sniprintf>
        contentLengthLineDone = 1;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8009b24:	e00e      	b.n	8009b44 <http_response_response_header+0x2d8>
    }
    else if (0 != headerRequest.bodyLength) //content length is applicable only when there is content
 8009b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <http_response_response_header+0x2d8>
    {
        snprintf(contentLengthLine, HTTP_RESPONSE_CONLEN_LENGTH, HTTP_RESHEADER_CONTENT_LENGTH ": %d", headerRequest.bodyLength);
 8009b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b32:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8009b36:	4a33      	ldr	r2, [pc, #204]	@ (8009c04 <http_response_response_header+0x398>)
 8009b38:	2132      	movs	r1, #50	@ 0x32
 8009b3a:	f005 fe5f 	bl	800f7fc <sniprintf>
        contentLengthLineDone = 1;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
    }

    //final Assembly
    if (headerRequest.bufferLength < (strlen(responseLine) + strlen(contentTypeLine) + strlen(contentLengthLine)))
 8009b44:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 8009b48:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7f6 fb49 	bl	80001e4 <strlen>
 8009b52:	4605      	mov	r5, r0
 8009b54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7f6 fb43 	bl	80001e4 <strlen>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	441d      	add	r5, r3
 8009b62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f6 fb3c 	bl	80001e4 <strlen>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	442b      	add	r3, r5
 8009b70:	429c      	cmp	r4, r3
 8009b72:	d24b      	bcs.n	8009c0c <http_response_response_header+0x3a0>
    {
        PRINT_ERROR("total header length > provided buffer(%d)\r\n", (int)(strlen(responseLine) + strlen(contentTypeLine) + strlen(contentLengthLine)));
 8009b74:	4b11      	ldr	r3, [pc, #68]	@ (8009bbc <http_response_response_header+0x350>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68dd      	ldr	r5, [r3, #12]
 8009b7a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7f6 fb30 	bl	80001e4 <strlen>
 8009b84:	4604      	mov	r4, r0
 8009b86:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f6 fb2a 	bl	80001e4 <strlen>
 8009b90:	4603      	mov	r3, r0
 8009b92:	441c      	add	r4, r3
 8009b94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f6 fb23 	bl	80001e4 <strlen>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4423      	add	r3, r4
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	4b06      	ldr	r3, [pc, #24]	@ (8009bc0 <http_response_response_header+0x354>)
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	f44f 73d1 	mov.w	r3, #418	@ 0x1a2
 8009bac:	4a05      	ldr	r2, [pc, #20]	@ (8009bc4 <http_response_response_header+0x358>)
 8009bae:	4916      	ldr	r1, [pc, #88]	@ (8009c08 <http_response_response_header+0x39c>)
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f005 fd83 	bl	800f6bc <fiprintf>
        return HTTP_FAILURE;
 8009bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bba:	e081      	b.n	8009cc0 <http_response_response_header+0x454>
 8009bbc:	20001240 	.word	0x20001240
 8009bc0:	080130d0 	.word	0x080130d0
 8009bc4:	08011eb0 	.word	0x08011eb0
 8009bc8:	080120fc 	.word	0x080120fc
 8009bcc:	08012130 	.word	0x08012130
 8009bd0:	08012140 	.word	0x08012140
 8009bd4:	08012158 	.word	0x08012158
 8009bd8:	08012174 	.word	0x08012174
 8009bdc:	0801218c 	.word	0x0801218c
 8009be0:	080121a4 	.word	0x080121a4
 8009be4:	080121c4 	.word	0x080121c4
 8009be8:	080121e0 	.word	0x080121e0
 8009bec:	08012210 	.word	0x08012210
 8009bf0:	08012234 	.word	0x08012234
 8009bf4:	0801226c 	.word	0x0801226c
 8009bf8:	0801228c 	.word	0x0801228c
 8009bfc:	080122cc 	.word	0x080122cc
 8009c00:	080122e0 	.word	0x080122e0
 8009c04:	080122fc 	.word	0x080122fc
 8009c08:	08012310 	.word	0x08012310
    }

    int printedChar;
    printedChar = snprintf(headerRequest.headerBuffer, headerRequest.bufferLength, "%s\r\n", responseLine);
 8009c0c:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8009c10:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8009c14:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009c18:	4a2d      	ldr	r2, [pc, #180]	@ (8009cd0 <http_response_response_header+0x464>)
 8009c1a:	f005 fdef 	bl	800f7fc <sniprintf>
 8009c1e:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
    if (0 != contentTypeLineDone)
 8009c22:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d019      	beq.n	8009c5e <http_response_response_header+0x3f2>
    {
        headerRequest.bufferLength -= printedChar + 1;
 8009c2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8009c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        printedChar += snprintf((headerRequest.headerBuffer + printedChar), headerRequest.bufferLength, "%s\r\n", contentTypeLine);
 8009c3a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8009c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c42:	18d0      	adds	r0, r2, r3
 8009c44:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8009c48:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009c4c:	4a20      	ldr	r2, [pc, #128]	@ (8009cd0 <http_response_response_header+0x464>)
 8009c4e:	f005 fdd5 	bl	800f7fc <sniprintf>
 8009c52:	4602      	mov	r2, r0
 8009c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c58:	4413      	add	r3, r2
 8009c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    }
    if (0 != contentLengthLineDone)
 8009c5e:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d019      	beq.n	8009c9a <http_response_response_header+0x42e>
    {
        headerRequest.bufferLength -= printedChar + 1;
 8009c66:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8009c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	3b01      	subs	r3, #1
 8009c72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        printedChar += snprintf((headerRequest.headerBuffer + printedChar), headerRequest.bufferLength, "%s\r\n", contentLengthLine);
 8009c76:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8009c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c7e:	18d0      	adds	r0, r2, r3
 8009c80:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8009c84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009c88:	4a11      	ldr	r2, [pc, #68]	@ (8009cd0 <http_response_response_header+0x464>)
 8009c8a:	f005 fdb7 	bl	800f7fc <sniprintf>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c94:	4413      	add	r3, r2
 8009c96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    }

    printedChar += snprintf((headerRequest.headerBuffer + printedChar), headerRequest.bufferLength, "\r\n");
 8009c9a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8009c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8009ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd4 <http_response_response_header+0x468>)
 8009caa:	4618      	mov	r0, r3
 8009cac:	f005 fda6 	bl	800f7fc <sniprintf>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return printedChar; //to return actual buffer length
 8009cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	37e8      	adds	r7, #232	@ 0xe8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009cca:	b004      	add	sp, #16
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	08012350 	.word	0x08012350
 8009cd4:	08012358 	.word	0x08012358

08009cd8 <http_response_initReponseStruct>:

void http_response_initReponseStruct(HTTP_response_headerRequest_t *responseHeader)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]

    if (NULL != responseHeader)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d004      	beq.n	8009cf0 <http_response_initReponseStruct+0x18>
    {
        memset(responseHeader, 0, sizeof(HTTP_response_headerRequest_t));
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	2100      	movs	r1, #0
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f005 fef8 	bl	800fae0 <memset>
    }
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <http_server_send404>:
 - netops and fops should have been registered
 - file system should be mounted and files should be registered
 */

static int http_server_send404(HTTP_response_headerRequest_t *httpResponse,
		int socket, http_net_netops_t *netops) {
 8009cf8:	b5b0      	push	{r4, r5, r7, lr}
 8009cfa:	b08a      	sub	sp, #40	@ 0x28
 8009cfc:	af04      	add	r7, sp, #16
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
	httpResponse->responseCode = HTTP_RESCODE_cerrorNotfound;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 8009d0a:	801a      	strh	r2, [r3, #0]
	int retBufLen = http_response_response_header(*httpResponse);
 8009d0c:	68fc      	ldr	r4, [r7, #12]
 8009d0e:	466d      	mov	r5, sp
 8009d10:	f104 0310 	add.w	r3, r4, #16
 8009d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009d1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009d1e:	f7ff fda5 	bl	800986c <http_response_response_header>
 8009d22:	6178      	str	r0, [r7, #20]

	//check retval write and disconnect
	if (retBufLen <= 0) {
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dc0e      	bgt.n	8009d48 <http_server_send404+0x50>
		PRINT_ERROR("error forming 404 header (%d)\r\n", retBufLen);
 8009d2a:	4b10      	ldr	r3, [pc, #64]	@ (8009d6c <http_server_send404+0x74>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68d8      	ldr	r0, [r3, #12]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	4b0e      	ldr	r3, [pc, #56]	@ (8009d70 <http_server_send404+0x78>)
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	2344      	movs	r3, #68	@ 0x44
 8009d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009d74 <http_server_send404+0x7c>)
 8009d3c:	490e      	ldr	r1, [pc, #56]	@ (8009d78 <http_server_send404+0x80>)
 8009d3e:	f005 fcbd 	bl	800f6bc <fiprintf>
		return -1;
 8009d42:	f04f 33ff 	mov.w	r3, #4294967295
 8009d46:	e00c      	b.n	8009d62 <http_server_send404+0x6a>
	}
	netops->http_net_write(socket, (unsigned char*) httpResponse->headerBuffer,
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685c      	ldr	r4, [r3, #4]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6899      	ldr	r1, [r3, #8]
 8009d50:	2364      	movs	r3, #100	@ 0x64
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	68b8      	ldr	r0, [r7, #8]
 8009d56:	47a0      	blx	r4
			retBufLen, HTTP_SERVER_TIMOUT_MS);
	netops->http_net_disconnect(socket);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	4798      	blx	r3
	return 0;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bdb0      	pop	{r4, r5, r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20001240 	.word	0x20001240
 8009d70:	080130f0 	.word	0x080130f0
 8009d74:	0801235c 	.word	0x0801235c
 8009d78:	08012380 	.word	0x08012380

08009d7c <http_server_send501>:

static int http_server_send501(HTTP_response_headerRequest_t *httpResponse,
		int socket, http_net_netops_t *netops) {
 8009d7c:	b5b0      	push	{r4, r5, r7, lr}
 8009d7e:	b08a      	sub	sp, #40	@ 0x28
 8009d80:	af04      	add	r7, sp, #16
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
	httpResponse->responseCode = HTTP_RESCODE_serrorNotimplemented;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8009d8e:	801a      	strh	r2, [r3, #0]
	int retBufLen = http_response_response_header(*httpResponse);
 8009d90:	68fc      	ldr	r4, [r7, #12]
 8009d92:	466d      	mov	r5, sp
 8009d94:	f104 0310 	add.w	r3, r4, #16
 8009d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009d9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009da2:	f7ff fd63 	bl	800986c <http_response_response_header>
 8009da6:	6178      	str	r0, [r7, #20]

	//check retval write and disconnect
	if (retBufLen <= 0) {
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dc0e      	bgt.n	8009dcc <http_server_send501+0x50>
		PRINT_ERROR("error forming 501 header (%d)\r\n", retBufLen);
 8009dae:	4b10      	ldr	r3, [pc, #64]	@ (8009df0 <http_server_send501+0x74>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68d8      	ldr	r0, [r3, #12]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	4b0e      	ldr	r3, [pc, #56]	@ (8009df4 <http_server_send501+0x78>)
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	2354      	movs	r3, #84	@ 0x54
 8009dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8009df8 <http_server_send501+0x7c>)
 8009dc0:	490e      	ldr	r1, [pc, #56]	@ (8009dfc <http_server_send501+0x80>)
 8009dc2:	f005 fc7b 	bl	800f6bc <fiprintf>
		return -1;
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dca:	e00c      	b.n	8009de6 <http_server_send501+0x6a>
	}
	netops->http_net_write(socket, (unsigned char*) httpResponse->headerBuffer,
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685c      	ldr	r4, [r3, #4]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6899      	ldr	r1, [r3, #8]
 8009dd4:	2364      	movs	r3, #100	@ 0x64
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	68b8      	ldr	r0, [r7, #8]
 8009dda:	47a0      	blx	r4
			retBufLen, HTTP_SERVER_TIMOUT_MS);
	netops->http_net_disconnect(socket);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	68b8      	ldr	r0, [r7, #8]
 8009de2:	4798      	blx	r3
	return 0;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bdb0      	pop	{r4, r5, r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20001240 	.word	0x20001240
 8009df4:	08013104 	.word	0x08013104
 8009df8:	0801235c 	.word	0x0801235c
 8009dfc:	080123b4 	.word	0x080123b4

08009e00 <http_server_send_serverError500>:

static int http_server_send_serverError500(
		HTTP_response_headerRequest_t *httpResponse, int socket,
		http_net_netops_t *netops) {
 8009e00:	b5b0      	push	{r4, r5, r7, lr}
 8009e02:	b08a      	sub	sp, #40	@ 0x28
 8009e04:	af04      	add	r7, sp, #16
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
	httpResponse->responseCode = HTTP_RESCODE_serrorInternalerror;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009e12:	801a      	strh	r2, [r3, #0]
	int retBufLen = http_response_response_header(*httpResponse);
 8009e14:	68fc      	ldr	r4, [r7, #12]
 8009e16:	466d      	mov	r5, sp
 8009e18:	f104 0310 	add.w	r3, r4, #16
 8009e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009e22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009e26:	f7ff fd21 	bl	800986c <http_response_response_header>
 8009e2a:	6178      	str	r0, [r7, #20]

	//check retval write and disconnect
	if (retBufLen <= 0) {
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dc0e      	bgt.n	8009e50 <http_server_send_serverError500+0x50>
		PRINT_ERROR("error forming 500 header (%d)\r\n", retBufLen);
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <http_server_send_serverError500+0x74>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68d8      	ldr	r0, [r3, #12]
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009e78 <http_server_send_serverError500+0x78>)
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	2365      	movs	r3, #101	@ 0x65
 8009e42:	4a0e      	ldr	r2, [pc, #56]	@ (8009e7c <http_server_send_serverError500+0x7c>)
 8009e44:	490e      	ldr	r1, [pc, #56]	@ (8009e80 <http_server_send_serverError500+0x80>)
 8009e46:	f005 fc39 	bl	800f6bc <fiprintf>
		return -1;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4e:	e00c      	b.n	8009e6a <http_server_send_serverError500+0x6a>
	}
	netops->http_net_write(socket, (unsigned char*) httpResponse->headerBuffer,
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685c      	ldr	r4, [r3, #4]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6899      	ldr	r1, [r3, #8]
 8009e58:	2364      	movs	r3, #100	@ 0x64
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	68b8      	ldr	r0, [r7, #8]
 8009e5e:	47a0      	blx	r4
			retBufLen, HTTP_SERVER_TIMOUT_MS);
	netops->http_net_disconnect(socket);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	68b8      	ldr	r0, [r7, #8]
 8009e66:	4798      	blx	r3
	return 0;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bdb0      	pop	{r4, r5, r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20001240 	.word	0x20001240
 8009e78:	08013118 	.word	0x08013118
 8009e7c:	0801235c 	.word	0x0801235c
 8009e80:	080123e8 	.word	0x080123e8

08009e84 <http_server_findNreplace>:

//helper function to find and replace a string . This function will overwrite contents of the original input buffer.
//So, make sure there is enough space left to process the replacement.
//returns number of replacements done.
static int http_server_findNreplace(char *buffer, int bufferLen, char *find,
		char *replace) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
	int count = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]

	//null terminate the buffer before proceeding. This should have been done at the source as well.
	buffer[bufferLen] = 0;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
	unsigned int replaceLen = strlen(replace);
 8009ea0:	6838      	ldr	r0, [r7, #0]
 8009ea2:	f7f6 f99f 	bl	80001e4 <strlen>
 8009ea6:	61b8      	str	r0, [r7, #24]
	unsigned int findLen = strlen(find);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7f6 f99b 	bl	80001e4 <strlen>
 8009eae:	6178      	str	r0, [r7, #20]

	char *position = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	613b      	str	r3, [r7, #16]
	do {
		//find occurrance of the string
		position = strstr(buffer, find);
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f005 febc 	bl	800fc34 <strstr>
 8009ebc:	6138      	str	r0, [r7, #16]
		if (NULL == position)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <http_server_findNreplace+0x44>
			return count;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	e016      	b.n	8009ef6 <http_server_findNreplace+0x72>
		sprintf(position, "%s%s", replace, (position + findLen));
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	4413      	add	r3, r2
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	490b      	ldr	r1, [pc, #44]	@ (8009f00 <http_server_findNreplace+0x7c>)
 8009ed2:	6938      	ldr	r0, [r7, #16]
 8009ed4:	f005 fcc6 	bl	800f864 <siprintf>
		position += replaceLen; //to avoid recurssive replace
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	4413      	add	r3, r2
 8009ede:	613b      	str	r3, [r7, #16]
		count++;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	61fb      	str	r3, [r7, #28]
	} while (strlen(position) > findLen); //do while there is still more content left in the buffer
 8009ee6:	6938      	ldr	r0, [r7, #16]
 8009ee8:	f7f6 f97c 	bl	80001e4 <strlen>
 8009eec:	4602      	mov	r2, r0
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d3df      	bcc.n	8009eb4 <http_server_findNreplace+0x30>

	return count;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	0801241c 	.word	0x0801241c

08009f04 <http_server_writeChunkedBody>:

static int http_server_writeChunkedBody(int socket, char *buffer, int length,
		http_net_netops_t *netops) {
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b08b      	sub	sp, #44	@ 0x2c
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]
	char chunkedHeader[20];
	sprintf(chunkedHeader, "%04X\r\n", length);
 8009f12:	f107 0314 	add.w	r3, r7, #20
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	4912      	ldr	r1, [pc, #72]	@ (8009f64 <http_server_writeChunkedBody+0x60>)
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f005 fca2 	bl	800f864 <siprintf>
	//write size
	netops->http_net_write(socket, (unsigned char*) chunkedHeader,
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685c      	ldr	r4, [r3, #4]
			strlen(chunkedHeader), HTTP_SERVER_TIMOUT_MS);
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7f6 f95b 	bl	80001e4 <strlen>
 8009f2e:	4603      	mov	r3, r0
	netops->http_net_write(socket, (unsigned char*) chunkedHeader,
 8009f30:	461a      	mov	r2, r3
 8009f32:	f107 0114 	add.w	r1, r7, #20
 8009f36:	2364      	movs	r3, #100	@ 0x64
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	47a0      	blx	r4
	//write contents
	netops->http_net_write(socket, (unsigned char*) buffer, length,
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685c      	ldr	r4, [r3, #4]
 8009f40:	2364      	movs	r3, #100	@ 0x64
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	68b9      	ldr	r1, [r7, #8]
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	47a0      	blx	r4
	HTTP_SERVER_TIMOUT_MS);
	netops->http_net_write(socket, (unsigned char*) "\r\n", 2,
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685c      	ldr	r4, [r3, #4]
 8009f4e:	2364      	movs	r3, #100	@ 0x64
 8009f50:	2202      	movs	r2, #2
 8009f52:	4905      	ldr	r1, [pc, #20]	@ (8009f68 <http_server_writeChunkedBody+0x64>)
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	47a0      	blx	r4
	HTTP_SERVER_TIMOUT_MS);
	return 0;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	372c      	adds	r7, #44	@ 0x2c
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd90      	pop	{r4, r7, pc}
 8009f62:	bf00      	nop
 8009f64:	08012424 	.word	0x08012424
 8009f68:	0801242c 	.word	0x0801242c

08009f6c <http_server_findNseekBack>:

static int http_server_findNseekBack(char *buffer, void *fp) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	int bufferLen = strlen(buffer) - 1; //0 indexed buffer length
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7f6 f934 	bl	80001e4 <strlen>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	613b      	str	r3, [r7, #16]
	if (buffer[bufferLen] == '<') {
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	4413      	add	r3, r2
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b3c      	cmp	r3, #60	@ 0x3c
 8009f8c:	d10c      	bne.n	8009fa8 <http_server_findNseekBack+0x3c>
		http_file_fops.fseek(fp, -1, SEEK_END);
 8009f8e:	4b42      	ldr	r3, [pc, #264]	@ (800a098 <http_server_findNseekBack+0x12c>)
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f04f 31ff 	mov.w	r1, #4294967295
 8009f98:	6838      	ldr	r0, [r7, #0]
 8009f9a:	4798      	blx	r3
		buffer[bufferLen] = '\0';
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	e072      	b.n	800a08e <http_server_findNseekBack+0x122>
	} else if (strcmp(&(buffer[bufferLen - 1]), "<-")) {
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4413      	add	r3, r2
 8009fb0:	493a      	ldr	r1, [pc, #232]	@ (800a09c <http_server_findNseekBack+0x130>)
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f6 f90c 	bl	80001d0 <strcmp>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00d      	beq.n	8009fda <http_server_findNseekBack+0x6e>
		http_file_fops.fseek(fp, -2, SEEK_END);
 8009fbe:	4b36      	ldr	r3, [pc, #216]	@ (800a098 <http_server_findNseekBack+0x12c>)
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f06f 0101 	mvn.w	r1, #1
 8009fc8:	6838      	ldr	r0, [r7, #0]
 8009fca:	4798      	blx	r3
		buffer[bufferLen - 1] = '\0';
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	701a      	strb	r2, [r3, #0]
 8009fd8:	e059      	b.n	800a08e <http_server_findNseekBack+0x122>
	} else if (strcmp(&(buffer[bufferLen - 2]), "<--")) {
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	3b02      	subs	r3, #2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	492f      	ldr	r1, [pc, #188]	@ (800a0a0 <http_server_findNseekBack+0x134>)
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7f6 f8f3 	bl	80001d0 <strcmp>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00d      	beq.n	800a00c <http_server_findNseekBack+0xa0>
		http_file_fops.fseek(fp, -3, SEEK_END);
 8009ff0:	4b29      	ldr	r3, [pc, #164]	@ (800a098 <http_server_findNseekBack+0x12c>)
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	f06f 0102 	mvn.w	r1, #2
 8009ffa:	6838      	ldr	r0, [r7, #0]
 8009ffc:	4798      	blx	r3
		buffer[bufferLen - 2] = '\0';
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	3b02      	subs	r3, #2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	4413      	add	r3, r2
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	e040      	b.n	800a08e <http_server_findNseekBack+0x122>
	} else if (strcmp(&(buffer[bufferLen - 3]), "<--#")) {
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	3b03      	subs	r3, #3
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	4923      	ldr	r1, [pc, #140]	@ (800a0a4 <http_server_findNseekBack+0x138>)
 800a016:	4618      	mov	r0, r3
 800a018:	f7f6 f8da 	bl	80001d0 <strcmp>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00d      	beq.n	800a03e <http_server_findNseekBack+0xd2>
		http_file_fops.fseek(fp, -4, SEEK_END);
 800a022:	4b1d      	ldr	r3, [pc, #116]	@ (800a098 <http_server_findNseekBack+0x12c>)
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2202      	movs	r2, #2
 800a028:	f06f 0103 	mvn.w	r1, #3
 800a02c:	6838      	ldr	r0, [r7, #0]
 800a02e:	4798      	blx	r3
		buffer[bufferLen - 3] = '\0';
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	3b03      	subs	r3, #3
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	4413      	add	r3, r2
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	e027      	b.n	800a08e <http_server_findNseekBack+0x122>
	} else {
		char *position = 0, *pPosition = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
		do {
			pPosition = position;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	60fb      	str	r3, [r7, #12]
			position = strstr(buffer, "<!--#");
 800a04a:	4917      	ldr	r1, [pc, #92]	@ (800a0a8 <http_server_findNseekBack+0x13c>)
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f005 fdf1 	bl	800fc34 <strstr>
 800a052:	6178      	str	r0, [r7, #20]
		} while (NULL != position);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f5      	bne.n	800a046 <http_server_findNseekBack+0xda>

		if (NULL != pPosition) {
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d016      	beq.n	800a08e <http_server_findNseekBack+0x122>
			unsigned int pPositionIndex = (buffer - pPosition);
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	60bb      	str	r3, [r7, #8]
			if (NULL != strstr(pPosition + 5, "#-->")) {
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3305      	adds	r3, #5
 800a06c:	490f      	ldr	r1, [pc, #60]	@ (800a0ac <http_server_findNseekBack+0x140>)
 800a06e:	4618      	mov	r0, r3
 800a070:	f005 fde0 	bl	800fc34 <strstr>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <http_server_findNseekBack+0x112>
				return 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e008      	b.n	800a090 <http_server_findNseekBack+0x124>
			} else {
				http_file_fops.fseek(fp, (0 - pPositionIndex), SEEK_END);
 800a07e:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <http_server_findNseekBack+0x12c>)
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	4252      	negs	r2, r2
 800a086:	4611      	mov	r1, r2
 800a088:	2202      	movs	r2, #2
 800a08a:	6838      	ldr	r0, [r7, #0]
 800a08c:	4798      	blx	r3
			}
		}
	}
	return 0;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20002680 	.word	0x20002680
 800a09c:	08012430 	.word	0x08012430
 800a0a0:	08012434 	.word	0x08012434
 800a0a4:	08012438 	.word	0x08012438
 800a0a8:	08012440 	.word	0x08012440
 800a0ac:	08012448 	.word	0x08012448

0800a0b0 <http_server>:

int http_server(int socket, http_net_netops_t *netops) {
 800a0b0:	b5b0      	push	{r4, r5, r7, lr}
 800a0b2:	f5ad 5de2 	sub.w	sp, sp, #7232	@ 0x1c40
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af04      	add	r7, sp, #16
 800a0ba:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a0be:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800a0c2:	6018      	str	r0, [r3, #0]
 800a0c4:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a0c8:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a0cc:	6019      	str	r1, [r3, #0]
	unsigned char httpReadBuffer[HTTP_SERVER_READ_BUFFER_SIZE ];
	char httpHeaderBuffer[HTTP_SERVER_HEADER_BUFFER_SIZE ];
	if ((NULL == netops->http_net_read) || (NULL == netops->http_net_write)) {
 800a0ce:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a0d2:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d007      	beq.n	800a0ee <http_server+0x3e>
 800a0de:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a0e2:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10f      	bne.n	800a10e <http_server+0x5e>
		PRINT_ERROR("netops read not initialized(%s)\r\n", "nullNetops");
 800a0ee:	4bb3      	ldr	r3, [pc, #716]	@ (800a3bc <http_server+0x30c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68d8      	ldr	r0, [r3, #12]
 800a0f4:	4bb2      	ldr	r3, [pc, #712]	@ (800a3c0 <http_server+0x310>)
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	4bb2      	ldr	r3, [pc, #712]	@ (800a3c4 <http_server+0x314>)
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	23bc      	movs	r3, #188	@ 0xbc
 800a0fe:	4ab2      	ldr	r2, [pc, #712]	@ (800a3c8 <http_server+0x318>)
 800a100:	49b2      	ldr	r1, [pc, #712]	@ (800a3cc <http_server+0x31c>)
 800a102:	f005 fadb 	bl	800f6bc <fiprintf>
		return -1;
 800a106:	f04f 33ff 	mov.w	r3, #4294967295
 800a10a:	f001 bc1e 	b.w	800b94a <http_server+0x189a>
	}
	//read one byte less to null terminate and make a string out of it.
	int byteCount = netops->http_net_read(socket,
 800a10e:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a112:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681c      	ldr	r4, [r3, #0]
 800a11a:	f507 51be 	add.w	r1, r7, #6080	@ 0x17c0
 800a11e:	f101 0108 	add.w	r1, r1, #8
 800a122:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a126:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800a12a:	2364      	movs	r3, #100	@ 0x64
 800a12c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800a130:	6800      	ldr	r0, [r0, #0]
 800a132:	47a0      	blx	r4
 800a134:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a138:	f103 031c 	add.w	r3, r3, #28
 800a13c:	6018      	str	r0, [r3, #0]
			(unsigned char*) &httpReadBuffer, HTTP_SERVER_READ_BUFFER_SIZE - 1,
			HTTP_SERVER_TIMOUT_MS);
	if (byteCount <= 0) {
 800a13e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a142:	f103 031c 	add.w	r3, r3, #28
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dc13      	bgt.n	800a174 <http_server+0xc4>
		PRINT_ERROR("netops read timedout(%d)\r\n", byteCount);
 800a14c:	4b9b      	ldr	r3, [pc, #620]	@ (800a3bc <http_server+0x30c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68d8      	ldr	r0, [r3, #12]
 800a152:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a156:	f103 031c 	add.w	r3, r3, #28
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	4b99      	ldr	r3, [pc, #612]	@ (800a3c4 <http_server+0x314>)
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	23c4      	movs	r3, #196	@ 0xc4
 800a164:	4a98      	ldr	r2, [pc, #608]	@ (800a3c8 <http_server+0x318>)
 800a166:	499a      	ldr	r1, [pc, #616]	@ (800a3d0 <http_server+0x320>)
 800a168:	f005 faa8 	bl	800f6bc <fiprintf>
		return -1; //most probably a timeout error to read from client
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	f001 bbeb 	b.w	800b94a <http_server+0x189a>
	}
	httpReadBuffer[byteCount] = 0;
 800a174:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a178:	f103 0318 	add.w	r3, r3, #24
 800a17c:	f5a3 628e 	sub.w	r2, r3, #1136	@ 0x470
 800a180:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a184:	f103 031c 	add.w	r3, r3, #28
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4413      	add	r3, r2
 800a18c:	2200      	movs	r2, #0
 800a18e:	701a      	strb	r2, [r3, #0]
	//now the request headers are in buffer. time to parse the request
	http_request_t http_request;
	parseRquest_identifyRequest(httpReadBuffer, &http_request);
 800a190:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800a194:	f507 53be 	add.w	r3, r7, #6080	@ 0x17c0
 800a198:	f103 0308 	add.w	r3, r3, #8
 800a19c:	4611      	mov	r1, r2
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe ff62 	bl	8009068 <parseRquest_identifyRequest>
	void *fp;
	int retBufLen = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a1aa:	f102 0218 	add.w	r2, r2, #24
 800a1ae:	6013      	str	r3, [r2, #0]
	HTTP_response_headerRequest_t httpResponse;
	http_response_initReponseStruct(&httpResponse);
 800a1b0:	f507 53b2 	add.w	r3, r7, #5696	@ 0x1640
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fd8f 	bl	8009cd8 <http_response_initReponseStruct>
	httpResponse.headerBuffer = (char*) &httpHeaderBuffer;
 800a1ba:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a1be:	f103 0318 	add.w	r3, r3, #24
 800a1c2:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a1c6:	f507 52b6 	add.w	r2, r7, #5824	@ 0x16c0
 800a1ca:	f102 0208 	add.w	r2, r2, #8
 800a1ce:	609a      	str	r2, [r3, #8]
	httpResponse.bufferLength = HTTP_SERVER_HEADER_BUFFER_SIZE;
 800a1d0:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a1d4:	f103 0318 	add.w	r3, r3, #24
 800a1d8:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a1dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1e0:	60da      	str	r2, [r3, #12]

	switch (http_request.method) {
 800a1e2:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a1e6:	f103 0318 	add.w	r3, r3, #24
 800a1ea:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 800a1ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	f041 8379 	bne.w	800b8ea <http_server+0x183a>
	case GET:
		switch (http_request.fileClass) {
 800a1f8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a1fc:	f103 0318 	add.w	r3, r3, #24
 800a200:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	2b04      	cmp	r3, #4
 800a208:	f201 833f 	bhi.w	800b88a <http_server+0x17da>
 800a20c:	a201      	add	r2, pc, #4	@ (adr r2, 800a214 <http_server+0x164>)
 800a20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a229 	.word	0x0800a229
 800a218:	0800a5f3 	.word	0x0800a5f3
 800a21c:	0800ad51 	.word	0x0800ad51
 800a220:	0800b011 	.word	0x0800b011
 800a224:	0800b4d7 	.word	0x0800b4d7
		case httpFileClass_none: //regular File processing flow
			if (NULL != http_file_fops.fopen) { //else FS is not mounted
 800a228:	4b6a      	ldr	r3, [pc, #424]	@ (800a3d4 <http_server+0x324>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00c      	beq.n	800a24a <http_server+0x19a>
				fp = http_file_fops.fopen(http_request.httpFilePath);
 800a230:	4b68      	ldr	r3, [pc, #416]	@ (800a3d4 <http_server+0x324>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800a238:	3202      	adds	r2, #2
 800a23a:	4610      	mov	r0, r2
 800a23c:	4798      	blx	r3
 800a23e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a242:	f103 0314 	add.w	r3, r3, #20
 800a246:	6018      	str	r0, [r3, #0]
 800a248:	e011      	b.n	800a26e <http_server+0x1be>
			} else {
				PRINT_ERROR("fops not mounted(%d)\r\n", httpFileClass_none);
 800a24a:	4b5c      	ldr	r3, [pc, #368]	@ (800a3bc <http_server+0x30c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68d8      	ldr	r0, [r3, #12]
 800a250:	2300      	movs	r3, #0
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	4b5b      	ldr	r3, [pc, #364]	@ (800a3c4 <http_server+0x314>)
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	23d9      	movs	r3, #217	@ 0xd9
 800a25a:	4a5b      	ldr	r2, [pc, #364]	@ (800a3c8 <http_server+0x318>)
 800a25c:	495e      	ldr	r1, [pc, #376]	@ (800a3d8 <http_server+0x328>)
 800a25e:	f005 fa2d 	bl	800f6bc <fiprintf>
				fp = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a268:	f102 0214 	add.w	r2, r2, #20
 800a26c:	6013      	str	r3, [r2, #0]
			}
			if (NULL == fp) { //file not found due to missing file or missing FS
 800a26e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a272:	f103 0314 	add.w	r3, r3, #20
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d130      	bne.n	800a2de <http_server+0x22e>
				int retval = http_server_send404(&httpResponse, socket, netops);
 800a27c:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a280:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800a284:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a288:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800a28c:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	6819      	ldr	r1, [r3, #0]
 800a294:	f7ff fd30 	bl	8009cf8 <http_server_send404>
 800a298:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800a29c:	f103 0310 	add.w	r3, r3, #16
 800a2a0:	6018      	str	r0, [r3, #0]
				if (retval < 0) {
 800a2a2:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800a2a6:	f103 0310 	add.w	r3, r3, #16
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	da13      	bge.n	800a2d8 <http_server+0x228>
					PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 800a2b0:	4b42      	ldr	r3, [pc, #264]	@ (800a3bc <http_server+0x30c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68d8      	ldr	r0, [r3, #12]
 800a2b6:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800a2ba:	f103 0310 	add.w	r3, r3, #16
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	4b40      	ldr	r3, [pc, #256]	@ (800a3c4 <http_server+0x314>)
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	23df      	movs	r3, #223	@ 0xdf
 800a2c8:	4a3f      	ldr	r2, [pc, #252]	@ (800a3c8 <http_server+0x318>)
 800a2ca:	4944      	ldr	r1, [pc, #272]	@ (800a3dc <http_server+0x32c>)
 800a2cc:	f005 f9f6 	bl	800f6bc <fiprintf>
					return -1;
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	f001 bb39 	b.w	800b94a <http_server+0x189a>
				}
				return 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f001 bb36 	b.w	800b94a <http_server+0x189a>
			} else { //file found . do read, determine if chunking is required, write accordingly and disconnect
				char freadBuffer[HTTP_SERVER_FREAD_BUFFER_SIZE ];
				int readLen = http_file_fops.fread(&freadBuffer,
 800a2de:	4b3d      	ldr	r3, [pc, #244]	@ (800a3d4 <http_server+0x324>)
 800a2e0:	689c      	ldr	r4, [r3, #8]
 800a2e2:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800a2e6:	380c      	subs	r0, #12
 800a2e8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a2ec:	f103 0314 	add.w	r3, r3, #20
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a2f8:	47a0      	blx	r4
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800a300:	f102 0214 	add.w	r2, r2, #20
 800a304:	6013      	str	r3, [r2, #0]
						sizeof(freadBuffer), 1, fp);
				if (http_file_fops.eof(fp)) { //complete contents has been read to buffer. no chunking required
 800a306:	4b33      	ldr	r3, [pc, #204]	@ (800a3d4 <http_server+0x324>)
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a30e:	f102 0214 	add.w	r2, r2, #20
 800a312:	6810      	ldr	r0, [r2, #0]
 800a314:	4798      	blx	r3
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 809d 	beq.w	800a458 <http_server+0x3a8>
					httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800a31e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a322:	f103 0318 	add.w	r3, r3, #24
 800a326:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a32a:	22c8      	movs	r2, #200	@ 0xc8
 800a32c:	801a      	strh	r2, [r3, #0]
					httpResponse.bodyLength = readLen;
 800a32e:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800a332:	f103 0314 	add.w	r3, r3, #20
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a33c:	f103 0318 	add.w	r3, r3, #24
 800a340:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a344:	605a      	str	r2, [r3, #4]
					httpResponse.filePath = http_request.httpFilePath;
 800a346:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a34a:	f103 0318 	add.w	r3, r3, #24
 800a34e:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a352:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800a356:	3202      	adds	r2, #2
 800a358:	615a      	str	r2, [r3, #20]
					retBufLen = http_response_response_header(httpResponse);
 800a35a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a35e:	f103 0318 	add.w	r3, r3, #24
 800a362:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800a366:	466d      	mov	r5, sp
 800a368:	f104 0310 	add.w	r3, r4, #16
 800a36c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a36e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a372:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a376:	f7ff fa79 	bl	800986c <http_response_response_header>
 800a37a:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a37e:	f103 0318 	add.w	r3, r3, #24
 800a382:	6018      	str	r0, [r3, #0]
					//check retval write and disconnect
					if (retBufLen <= 0) {
 800a384:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a388:	f103 0318 	add.w	r3, r3, #24
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	dc28      	bgt.n	800a3e4 <http_server+0x334>
						PRINT_ERROR("error forming 200 header (%d)\r\n",
 800a392:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <http_server+0x30c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68d8      	ldr	r0, [r3, #12]
 800a398:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a39c:	f103 0318 	add.w	r3, r3, #24
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	4b07      	ldr	r3, [pc, #28]	@ (800a3c4 <http_server+0x314>)
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	23ee      	movs	r3, #238	@ 0xee
 800a3aa:	4a07      	ldr	r2, [pc, #28]	@ (800a3c8 <http_server+0x318>)
 800a3ac:	490c      	ldr	r1, [pc, #48]	@ (800a3e0 <http_server+0x330>)
 800a3ae:	f005 f985 	bl	800f6bc <fiprintf>
								retBufLen);
						return -1;
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b6:	f001 bac8 	b.w	800b94a <http_server+0x189a>
 800a3ba:	bf00      	nop
 800a3bc:	20001240 	.word	0x20001240
 800a3c0:	08012488 	.word	0x08012488
 800a3c4:	08013138 	.word	0x08013138
 800a3c8:	0801235c 	.word	0x0801235c
 800a3cc:	08012450 	.word	0x08012450
 800a3d0:	08012494 	.word	0x08012494
 800a3d4:	20002680 	.word	0x20002680
 800a3d8:	080124c4 	.word	0x080124c4
 800a3dc:	08012380 	.word	0x08012380
 800a3e0:	080124f0 	.word	0x080124f0
					}
					netops->http_net_write(socket,
 800a3e4:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a3e8:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685c      	ldr	r4, [r3, #4]
 800a3f0:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800a3f4:	f101 0108 	add.w	r1, r1, #8
 800a3f8:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a3fc:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800a400:	2364      	movs	r3, #100	@ 0x64
 800a402:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a406:	f102 0218 	add.w	r2, r2, #24
 800a40a:	6812      	ldr	r2, [r2, #0]
 800a40c:	6800      	ldr	r0, [r0, #0]
 800a40e:	47a0      	blx	r4
							(unsigned char*) httpHeaderBuffer, retBufLen,
							HTTP_SERVER_TIMOUT_MS); //write header
					netops->http_net_write(socket, (unsigned char*) freadBuffer,
 800a410:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a414:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685c      	ldr	r4, [r3, #4]
 800a41c:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800a420:	390c      	subs	r1, #12
 800a422:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a426:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800a42a:	2364      	movs	r3, #100	@ 0x64
 800a42c:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800a430:	f102 0214 	add.w	r2, r2, #20
 800a434:	6812      	ldr	r2, [r2, #0]
 800a436:	6800      	ldr	r0, [r0, #0]
 800a438:	47a0      	blx	r4
							readLen, HTTP_SERVER_TIMOUT_MS);        //
					netops->http_net_disconnect(socket);
 800a43a:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a43e:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800a44a:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800a44e:	6810      	ldr	r0, [r2, #0]
 800a450:	4798      	blx	r3
					return 0;
 800a452:	2300      	movs	r3, #0
 800a454:	f001 ba79 	b.w	800b94a <http_server+0x189a>
				} else {                           //time to do chunked encoding
					httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800a458:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a45c:	f103 0318 	add.w	r3, r3, #24
 800a460:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a464:	22c8      	movs	r2, #200	@ 0xc8
 800a466:	801a      	strh	r2, [r3, #0]
					httpResponse.bodyLength = 0;
 800a468:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a46c:	f103 0318 	add.w	r3, r3, #24
 800a470:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a474:	2200      	movs	r2, #0
 800a476:	605a      	str	r2, [r3, #4]
					httpResponse.transferEncoding = transferEnc_chunked; //set chunked encoding since we dont know actual length yet
 800a478:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a47c:	f103 0318 	add.w	r3, r3, #24
 800a480:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a484:	2201      	movs	r2, #1
 800a486:	741a      	strb	r2, [r3, #16]
					httpResponse.filePath = http_request.httpFilePath; //path to be used for contentType
 800a488:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a48c:	f103 0318 	add.w	r3, r3, #24
 800a490:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a494:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800a498:	3202      	adds	r2, #2
 800a49a:	615a      	str	r2, [r3, #20]
					retBufLen = http_response_response_header(httpResponse);
 800a49c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a4a0:	f103 0318 	add.w	r3, r3, #24
 800a4a4:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800a4a8:	466d      	mov	r5, sp
 800a4aa:	f104 0310 	add.w	r3, r4, #16
 800a4ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a4b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a4b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a4b8:	f7ff f9d8 	bl	800986c <http_response_response_header>
 800a4bc:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a4c0:	f103 0318 	add.w	r3, r3, #24
 800a4c4:	6018      	str	r0, [r3, #0]
					//check retval write and disconnect
					if (retBufLen <= 0) {
 800a4c6:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a4ca:	f103 0318 	add.w	r3, r3, #24
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dc14      	bgt.n	800a4fe <http_server+0x44e>
						PRINT_ERROR("error forming 200 header (%d)\r\n",
 800a4d4:	4b7f      	ldr	r3, [pc, #508]	@ (800a6d4 <http_server+0x624>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68d8      	ldr	r0, [r3, #12]
 800a4da:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a4de:	f103 0318 	add.w	r3, r3, #24
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	4b7c      	ldr	r3, [pc, #496]	@ (800a6d8 <http_server+0x628>)
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	f240 1301 	movw	r3, #257	@ 0x101
 800a4ee:	4a7b      	ldr	r2, [pc, #492]	@ (800a6dc <http_server+0x62c>)
 800a4f0:	497b      	ldr	r1, [pc, #492]	@ (800a6e0 <http_server+0x630>)
 800a4f2:	f005 f8e3 	bl	800f6bc <fiprintf>
								retBufLen);
						return -1;
 800a4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fa:	f001 ba26 	b.w	800b94a <http_server+0x189a>
					}
					//send out the response header
					netops->http_net_write(socket,
 800a4fe:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a502:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685c      	ldr	r4, [r3, #4]
 800a50a:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800a50e:	f101 0108 	add.w	r1, r1, #8
 800a512:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a516:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800a51a:	2364      	movs	r3, #100	@ 0x64
 800a51c:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a520:	f102 0218 	add.w	r2, r2, #24
 800a524:	6812      	ldr	r2, [r2, #0]
 800a526:	6800      	ldr	r0, [r0, #0]
 800a528:	47a0      	blx	r4
							(unsigned char*) httpHeaderBuffer, retBufLen,
							HTTP_SERVER_TIMOUT_MS); //write header

					http_server_writeChunkedBody(socket, (char*) freadBuffer,
 800a52a:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a52e:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a532:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800a536:	390c      	subs	r1, #12
 800a538:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800a53c:	f6a2 4034 	subw	r0, r2, #3124	@ 0xc34
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800a546:	f102 0214 	add.w	r2, r2, #20
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	6800      	ldr	r0, [r0, #0]
 800a54e:	f7ff fcd9 	bl	8009f04 <http_server_writeChunkedBody>
							readLen, netops);
					do { //now read and write remaining contents
						readLen = http_file_fops.fread(&freadBuffer,
 800a552:	4b64      	ldr	r3, [pc, #400]	@ (800a6e4 <http_server+0x634>)
 800a554:	689c      	ldr	r4, [r3, #8]
 800a556:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800a55a:	380c      	subs	r0, #12
 800a55c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a560:	f103 0314 	add.w	r3, r3, #20
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2201      	movs	r2, #1
 800a568:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a56c:	47a0      	blx	r4
 800a56e:	4603      	mov	r3, r0
 800a570:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800a574:	f102 0214 	add.w	r2, r2, #20
 800a578:	6013      	str	r3, [r2, #0]
								sizeof(freadBuffer), 1, fp);
						http_server_writeChunkedBody(socket,
 800a57a:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a57e:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a582:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800a586:	390c      	subs	r1, #12
 800a588:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800a58c:	f6a2 4034 	subw	r0, r2, #3124	@ 0xc34
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800a596:	f102 0214 	add.w	r2, r2, #20
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	6800      	ldr	r0, [r0, #0]
 800a59e:	f7ff fcb1 	bl	8009f04 <http_server_writeChunkedBody>
								(char*) freadBuffer, readLen, netops);
					} while (!http_file_fops.eof(fp));
 800a5a2:	4b50      	ldr	r3, [pc, #320]	@ (800a6e4 <http_server+0x634>)
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a5aa:	f102 0214 	add.w	r2, r2, #20
 800a5ae:	6810      	ldr	r0, [r2, #0]
 800a5b0:	4798      	blx	r3
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0cc      	beq.n	800a552 <http_server+0x4a2>

					//send last 0\r\n\r\n
					netops->http_net_write(socket, (unsigned char*) "0\r\n\r\n",
 800a5b8:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a5bc:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685c      	ldr	r4, [r3, #4]
 800a5c4:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a5c8:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800a5cc:	2364      	movs	r3, #100	@ 0x64
 800a5ce:	2205      	movs	r2, #5
 800a5d0:	4945      	ldr	r1, [pc, #276]	@ (800a6e8 <http_server+0x638>)
 800a5d2:	6800      	ldr	r0, [r0, #0]
 800a5d4:	47a0      	blx	r4
							5, HTTP_SERVER_TIMOUT_MS);
					netops->http_net_disconnect(socket);
 800a5d6:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a5da:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800a5e6:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800a5ea:	6810      	ldr	r0, [r2, #0]
 800a5ec:	4798      	blx	r3
				}
			}
			break;
 800a5ee:	f001 b97b 	b.w	800b8e8 <http_server+0x1838>
		case httpFileClass_SSI: {
			if (NULL != http_file_fops.fopen) { //else FS is not mounted
 800a5f2:	4b3c      	ldr	r3, [pc, #240]	@ (800a6e4 <http_server+0x634>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00c      	beq.n	800a614 <http_server+0x564>
				fp = http_file_fops.fopen(http_request.httpFilePath);
 800a5fa:	4b3a      	ldr	r3, [pc, #232]	@ (800a6e4 <http_server+0x634>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800a602:	3202      	adds	r2, #2
 800a604:	4610      	mov	r0, r2
 800a606:	4798      	blx	r3
 800a608:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a60c:	f103 0314 	add.w	r3, r3, #20
 800a610:	6018      	str	r0, [r3, #0]
 800a612:	e012      	b.n	800a63a <http_server+0x58a>
			} else {
				PRINT_ERROR("fops not mounted(%d)\r\n", httpFileClass_none);
 800a614:	4b2f      	ldr	r3, [pc, #188]	@ (800a6d4 <http_server+0x624>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68d8      	ldr	r0, [r3, #12]
 800a61a:	2300      	movs	r3, #0
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	4b2e      	ldr	r3, [pc, #184]	@ (800a6d8 <http_server+0x628>)
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	f44f 738f 	mov.w	r3, #286	@ 0x11e
 800a626:	4a2d      	ldr	r2, [pc, #180]	@ (800a6dc <http_server+0x62c>)
 800a628:	4930      	ldr	r1, [pc, #192]	@ (800a6ec <http_server+0x63c>)
 800a62a:	f005 f847 	bl	800f6bc <fiprintf>
				fp = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a634:	f102 0214 	add.w	r2, r2, #20
 800a638:	6013      	str	r3, [r2, #0]
			}
			if (NULL == fp) { //file not found due to missing file or missing FS
 800a63a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a63e:	f103 0314 	add.w	r3, r3, #20
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d131      	bne.n	800a6ac <http_server+0x5fc>
				int retval = http_server_send404(&httpResponse, socket, netops);
 800a648:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a64c:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800a650:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a654:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800a658:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	6819      	ldr	r1, [r3, #0]
 800a660:	f7ff fb4a 	bl	8009cf8 <http_server_send404>
 800a664:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800a668:	f103 0318 	add.w	r3, r3, #24
 800a66c:	6018      	str	r0, [r3, #0]
				if (retval < 0) {
 800a66e:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800a672:	f103 0318 	add.w	r3, r3, #24
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da14      	bge.n	800a6a6 <http_server+0x5f6>
					PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 800a67c:	4b15      	ldr	r3, [pc, #84]	@ (800a6d4 <http_server+0x624>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68d8      	ldr	r0, [r3, #12]
 800a682:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800a686:	f103 0318 	add.w	r3, r3, #24
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	4b12      	ldr	r3, [pc, #72]	@ (800a6d8 <http_server+0x628>)
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	f44f 7392 	mov.w	r3, #292	@ 0x124
 800a696:	4a11      	ldr	r2, [pc, #68]	@ (800a6dc <http_server+0x62c>)
 800a698:	4915      	ldr	r1, [pc, #84]	@ (800a6f0 <http_server+0x640>)
 800a69a:	f005 f80f 	bl	800f6bc <fiprintf>
					return -1;
 800a69e:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a2:	f001 b952 	b.w	800b94a <http_server+0x189a>
				}
				return 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f001 b94f 	b.w	800b94a <http_server+0x189a>
				struct {
					char SSIString[HTTP_MAX_SSI_LENGTH + 12]; //string and <!--##-->
					char SSIReplacementString[HTTP_MAX_SSI_REPLACE_LENGTH];
				} ssiReplacements[HTTP_MAX_SSI_COUNT];

				int ssiCount = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a6b2:	f102 0210 	add.w	r2, r2, #16
 800a6b6:	6013      	str	r3, [r2, #0]
				//compute all replacement string irrespective of occurrence. optimize by computing only required strings
				//this has to be computed ahead of time to avoid the replacement strings changing while we process this in server
				int i = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a6be:	f102 020c 	add.w	r2, r2, #12
 800a6c2:	6013      	str	r3, [r2, #0]
				for (i = 0; i < HTTP_MAX_SSI_COUNT; i++) { //iterate through the http_SSI_replacer to look for registered strings
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a6ca:	f102 020c 	add.w	r2, r2, #12
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	e0b4      	b.n	800a83c <http_server+0x78c>
 800a6d2:	bf00      	nop
 800a6d4:	20001240 	.word	0x20001240
 800a6d8:	08013138 	.word	0x08013138
 800a6dc:	0801235c 	.word	0x0801235c
 800a6e0:	080124f0 	.word	0x080124f0
 800a6e4:	20002680 	.word	0x20002680
 800a6e8:	08012524 	.word	0x08012524
 800a6ec:	080124c4 	.word	0x080124c4
 800a6f0:	08012380 	.word	0x08012380
					if (NULL != http_SSI_replacer[i].SSI_String) {
 800a6f4:	4ab2      	ldr	r2, [pc, #712]	@ (800a9c0 <http_server+0x910>)
 800a6f6:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a6fa:	f103 030c 	add.w	r3, r3, #12
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 808e 	beq.w	800a826 <http_server+0x776>
						snprintf(ssiReplacements[ssiCount].SSIString,
 800a70a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800a70e:	3b14      	subs	r3, #20
 800a710:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a714:	f102 0210 	add.w	r2, r2, #16
 800a718:	6812      	ldr	r2, [r2, #0]
 800a71a:	21b1      	movs	r1, #177	@ 0xb1
 800a71c:	fb01 f202 	mul.w	r2, r1, r2
 800a720:	1898      	adds	r0, r3, r2
 800a722:	4aa7      	ldr	r2, [pc, #668]	@ (800a9c0 <http_server+0x910>)
 800a724:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a728:	f103 030c 	add.w	r3, r3, #12
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a732:	4aa4      	ldr	r2, [pc, #656]	@ (800a9c4 <http_server+0x914>)
 800a734:	211b      	movs	r1, #27
 800a736:	f005 f861 	bl	800f7fc <sniprintf>
								(HTTP_MAX_SSI_LENGTH + 12), "<!--#%s#-->",
								http_SSI_replacer[i].SSI_String);
						http_SSI_get_replacer_string(
 800a73a:	4aa1      	ldr	r2, [pc, #644]	@ (800a9c0 <http_server+0x910>)
 800a73c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a740:	f103 030c 	add.w	r3, r3, #12
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
								http_SSI_replacer[i].SSI_String,
								ssiReplacements[ssiCount].SSIReplacementString,
 800a74a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800a74e:	3b14      	subs	r3, #20
 800a750:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a754:	f102 0210 	add.w	r2, r2, #16
 800a758:	6812      	ldr	r2, [r2, #0]
 800a75a:	21b1      	movs	r1, #177	@ 0xb1
 800a75c:	fb01 f202 	mul.w	r2, r1, r2
 800a760:	3218      	adds	r2, #24
 800a762:	4413      	add	r3, r2
 800a764:	3303      	adds	r3, #3
						http_SSI_get_replacer_string(
 800a766:	2296      	movs	r2, #150	@ 0x96
 800a768:	4619      	mov	r1, r3
 800a76a:	f7fd ff29 	bl	80085c0 <http_SSI_get_replacer_string>
								HTTP_MAX_SSI_REPLACE_LENGTH);
						if (HTTP_MAX_SSI_LENGTH
								> strlen(ssiReplacements[ssiCount].SSIString)) {
 800a76e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800a772:	3b14      	subs	r3, #20
 800a774:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a778:	f102 0210 	add.w	r2, r2, #16
 800a77c:	6812      	ldr	r2, [r2, #0]
 800a77e:	21b1      	movs	r1, #177	@ 0xb1
 800a780:	fb01 f202 	mul.w	r2, r1, r2
 800a784:	4413      	add	r3, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7f5 fd2c 	bl	80001e4 <strlen>
 800a78c:	4603      	mov	r3, r0
						if (HTTP_MAX_SSI_LENGTH
 800a78e:	2b0e      	cmp	r3, #14
 800a790:	d81c      	bhi.n	800a7cc <http_server+0x71c>
							//should we sned a server error here???
							PRINT_ERROR(
 800a792:	4b8d      	ldr	r3, [pc, #564]	@ (800a9c8 <http_server+0x918>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68dc      	ldr	r4, [r3, #12]
 800a798:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800a79c:	3b14      	subs	r3, #20
 800a79e:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a7a2:	f102 0210 	add.w	r2, r2, #16
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	21b1      	movs	r1, #177	@ 0xb1
 800a7aa:	fb01 f202 	mul.w	r2, r1, r2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7f5 fd17 	bl	80001e4 <strlen>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	4b84      	ldr	r3, [pc, #528]	@ (800a9cc <http_server+0x91c>)
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	f240 1341 	movw	r3, #321	@ 0x141
 800a7c2:	4a83      	ldr	r2, [pc, #524]	@ (800a9d0 <http_server+0x920>)
 800a7c4:	4983      	ldr	r1, [pc, #524]	@ (800a9d4 <http_server+0x924>)
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f004 ff78 	bl	800f6bc <fiprintf>
									"registered SSI string is larger than HTTP_MAX_SSI_LENGTH. replacements might be messed up. increase HTTP_MAX_SSI_LENGTH in config (%d)\r\n",
									(int )strlen(
											ssiReplacements[ssiCount].SSIString));
						}
						if (HTTP_MAX_SSI_REPLACE_LENGTH
								< strlen(http_SSI_replacer[i].SSI_String)) {
 800a7cc:	4a7c      	ldr	r2, [pc, #496]	@ (800a9c0 <http_server+0x910>)
 800a7ce:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a7d2:	f103 030c 	add.w	r3, r3, #12
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f5 fd01 	bl	80001e4 <strlen>
 800a7e2:	4603      	mov	r3, r0
						if (HTTP_MAX_SSI_REPLACE_LENGTH
 800a7e4:	2b96      	cmp	r3, #150	@ 0x96
 800a7e6:	d913      	bls.n	800a810 <http_server+0x760>
							PRINT_ERROR(
 800a7e8:	4b77      	ldr	r3, [pc, #476]	@ (800a9c8 <http_server+0x918>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68d8      	ldr	r0, [r3, #12]
 800a7ee:	4a74      	ldr	r2, [pc, #464]	@ (800a9c0 <http_server+0x910>)
 800a7f0:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a7f4:	f103 030c 	add.w	r3, r3, #12
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	4b72      	ldr	r3, [pc, #456]	@ (800a9cc <http_server+0x91c>)
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800a808:	4a71      	ldr	r2, [pc, #452]	@ (800a9d0 <http_server+0x920>)
 800a80a:	4973      	ldr	r1, [pc, #460]	@ (800a9d8 <http_server+0x928>)
 800a80c:	f004 ff56 	bl	800f6bc <fiprintf>
									"replacement string for %s is larger than HTTP_MAX_SSI_REPLACE_LENGTH. modify config to avoid partial replacement\r\n",
									http_SSI_replacer[i].SSI_String);
						}
						ssiCount++;
 800a810:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a814:	f103 0310 	add.w	r3, r3, #16
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3301      	adds	r3, #1
 800a81c:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a820:	f102 0210 	add.w	r2, r2, #16
 800a824:	6013      	str	r3, [r2, #0]
				for (i = 0; i < HTTP_MAX_SSI_COUNT; i++) { //iterate through the http_SSI_replacer to look for registered strings
 800a826:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a82a:	f103 030c 	add.w	r3, r3, #12
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a836:	f102 020c 	add.w	r2, r2, #12
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a840:	f103 030c 	add.w	r3, r3, #12
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b04      	cmp	r3, #4
 800a848:	f77f af54 	ble.w	800a6f4 <http_server+0x644>
					}
				}

				//populating only half the buffer to have space for replacements.
				//leaving last location for null terminating so that we can process it as a string
				int readLen = http_file_fops.fread(&freadBuffer,
 800a84c:	4b63      	ldr	r3, [pc, #396]	@ (800a9dc <http_server+0x92c>)
 800a84e:	689c      	ldr	r4, [r3, #8]
 800a850:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800a854:	380c      	subs	r0, #12
 800a856:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a85a:	f103 0314 	add.w	r3, r3, #20
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2201      	movs	r2, #1
 800a862:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800a866:	47a0      	blx	r4
 800a868:	4603      	mov	r3, r0
 800a86a:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800a86e:	6013      	str	r3, [r2, #0]
						(HTTP_SERVER_FREAD_BUFFER_SIZE / 2) - 1, 1, fp);
				freadBuffer[readLen] = 0;
 800a870:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a874:	f2a3 622c 	subw	r2, r3, #1580	@ 0x62c
 800a878:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4413      	add	r3, r2
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
				if (http_file_fops.eof(fp)) { //complete contents has been read to buffer. no chunking required
 800a884:	4b55      	ldr	r3, [pc, #340]	@ (800a9dc <http_server+0x92c>)
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a88c:	f102 0214 	add.w	r2, r2, #20
 800a890:	6810      	ldr	r0, [r2, #0]
 800a892:	4798      	blx	r3
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	f000 80e1 	beq.w	800aa5e <http_server+0x9ae>
					for (i = 0; i < ssiCount; i++) { //search and replace all occurrences of the SSI string with replacement contens
 800a89c:	2300      	movs	r3, #0
 800a89e:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a8a2:	f102 020c 	add.w	r2, r2, #12
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	e02c      	b.n	800a904 <http_server+0x854>
						http_server_findNreplace((char*) &freadBuffer,
						HTTP_SERVER_FREAD_BUFFER_SIZE,
								ssiReplacements[i].SSIString,
 800a8aa:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800a8ae:	3b14      	subs	r3, #20
 800a8b0:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a8b4:	f102 020c 	add.w	r2, r2, #12
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	21b1      	movs	r1, #177	@ 0xb1
 800a8bc:	fb01 f202 	mul.w	r2, r1, r2
 800a8c0:	1899      	adds	r1, r3, r2
								ssiReplacements[i].SSIReplacementString);
 800a8c2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800a8c6:	3b14      	subs	r3, #20
 800a8c8:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a8cc:	f102 020c 	add.w	r2, r2, #12
 800a8d0:	6812      	ldr	r2, [r2, #0]
 800a8d2:	20b1      	movs	r0, #177	@ 0xb1
 800a8d4:	fb00 f202 	mul.w	r2, r0, r2
 800a8d8:	3218      	adds	r2, #24
 800a8da:	4413      	add	r3, r2
 800a8dc:	3303      	adds	r3, #3
						http_server_findNreplace((char*) &freadBuffer,
 800a8de:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800a8e2:	380c      	subs	r0, #12
 800a8e4:	460a      	mov	r2, r1
 800a8e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a8ea:	f7ff facb 	bl	8009e84 <http_server_findNreplace>
					for (i = 0; i < ssiCount; i++) { //search and replace all occurrences of the SSI string with replacement contens
 800a8ee:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a8f2:	f103 030c 	add.w	r3, r3, #12
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a8fe:	f102 020c 	add.w	r2, r2, #12
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a908:	f103 030c 	add.w	r3, r3, #12
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a912:	f103 0310 	add.w	r3, r3, #16
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	dbc6      	blt.n	800a8aa <http_server+0x7fa>
					}

					//form the header, and write header followed by processed contents
					httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800a91c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a920:	f103 0318 	add.w	r3, r3, #24
 800a924:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a928:	22c8      	movs	r2, #200	@ 0xc8
 800a92a:	801a      	strh	r2, [r3, #0]
					httpResponse.bodyLength = strlen(freadBuffer);
 800a92c:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800a930:	3b0c      	subs	r3, #12
 800a932:	4618      	mov	r0, r3
 800a934:	f7f5 fc56 	bl	80001e4 <strlen>
 800a938:	4602      	mov	r2, r0
 800a93a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a93e:	f103 0318 	add.w	r3, r3, #24
 800a942:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a946:	605a      	str	r2, [r3, #4]
					httpResponse.filePath = http_request.httpFilePath;
 800a948:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a94c:	f103 0318 	add.w	r3, r3, #24
 800a950:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800a954:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800a958:	3202      	adds	r2, #2
 800a95a:	615a      	str	r2, [r3, #20]
					retBufLen = http_response_response_header(httpResponse);
 800a95c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a960:	f103 0318 	add.w	r3, r3, #24
 800a964:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800a968:	466d      	mov	r5, sp
 800a96a:	f104 0310 	add.w	r3, r4, #16
 800a96e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a970:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a974:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a978:	f7fe ff78 	bl	800986c <http_response_response_header>
 800a97c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a980:	f103 0318 	add.w	r3, r3, #24
 800a984:	6018      	str	r0, [r3, #0]
					//check retval write and disconnect
					if (retBufLen <= 0) {
 800a986:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a98a:	f103 0318 	add.w	r3, r3, #24
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	dc27      	bgt.n	800a9e4 <http_server+0x934>
						PRINT_ERROR("error forming 200 header (%d)\r\n",
 800a994:	4b0c      	ldr	r3, [pc, #48]	@ (800a9c8 <http_server+0x918>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68d8      	ldr	r0, [r3, #12]
 800a99a:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a99e:	f103 0318 	add.w	r3, r3, #24
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	9301      	str	r3, [sp, #4]
 800a9a6:	4b09      	ldr	r3, [pc, #36]	@ (800a9cc <http_server+0x91c>)
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 800a9ae:	4a08      	ldr	r2, [pc, #32]	@ (800a9d0 <http_server+0x920>)
 800a9b0:	490b      	ldr	r1, [pc, #44]	@ (800a9e0 <http_server+0x930>)
 800a9b2:	f004 fe83 	bl	800f6bc <fiprintf>
								retBufLen);
						return -1;
 800a9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ba:	f000 bfc6 	b.w	800b94a <http_server+0x189a>
 800a9be:	bf00      	nop
 800a9c0:	2000261c 	.word	0x2000261c
 800a9c4:	0801252c 	.word	0x0801252c
 800a9c8:	20001240 	.word	0x20001240
 800a9cc:	08013138 	.word	0x08013138
 800a9d0:	0801235c 	.word	0x0801235c
 800a9d4:	08012538 	.word	0x08012538
 800a9d8:	080125d4 	.word	0x080125d4
 800a9dc:	20002680 	.word	0x20002680
 800a9e0:	080124f0 	.word	0x080124f0
					}
					netops->http_net_write(socket,
 800a9e4:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a9e8:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685c      	ldr	r4, [r3, #4]
 800a9f0:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800a9f4:	f101 0108 	add.w	r1, r1, #8
 800a9f8:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800a9fc:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800aa00:	2364      	movs	r3, #100	@ 0x64
 800aa02:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800aa06:	f102 0218 	add.w	r2, r2, #24
 800aa0a:	6812      	ldr	r2, [r2, #0]
 800aa0c:	6800      	ldr	r0, [r0, #0]
 800aa0e:	47a0      	blx	r4
							(unsigned char*) httpHeaderBuffer, retBufLen,
							HTTP_SERVER_TIMOUT_MS); //write header
					//now write the modified contents file into netstream
					netops->http_net_write(socket, (unsigned char*) freadBuffer,
 800aa10:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800aa14:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685c      	ldr	r4, [r3, #4]
							httpResponse.bodyLength, HTTP_SERVER_TIMOUT_MS); //
 800aa1c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aa20:	f103 0318 	add.w	r3, r3, #24
 800aa24:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aa28:	685b      	ldr	r3, [r3, #4]
					netops->http_net_write(socket, (unsigned char*) freadBuffer,
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800aa30:	390c      	subs	r1, #12
 800aa32:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800aa36:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800aa3a:	2364      	movs	r3, #100	@ 0x64
 800aa3c:	6800      	ldr	r0, [r0, #0]
 800aa3e:	47a0      	blx	r4
					netops->http_net_disconnect(socket);
 800aa40:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800aa44:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800aa50:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800aa54:	6810      	ldr	r0, [r2, #0]
 800aa56:	4798      	blx	r3
					return 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f000 bf76 	b.w	800b94a <http_server+0x189a>
				} else {                                   //time to do chunking
					httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800aa5e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aa62:	f103 0318 	add.w	r3, r3, #24
 800aa66:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aa6a:	22c8      	movs	r2, #200	@ 0xc8
 800aa6c:	801a      	strh	r2, [r3, #0]
					httpResponse.bodyLength = 0;
 800aa6e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aa72:	f103 0318 	add.w	r3, r3, #24
 800aa76:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	605a      	str	r2, [r3, #4]
					httpResponse.transferEncoding = transferEnc_chunked; //set chunked encoding since we dont know actual length yet
 800aa7e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aa82:	f103 0318 	add.w	r3, r3, #24
 800aa86:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	741a      	strb	r2, [r3, #16]
					httpResponse.filePath = http_request.httpFilePath; //path to be used for contentType
 800aa8e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aa92:	f103 0318 	add.w	r3, r3, #24
 800aa96:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aa9a:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800aa9e:	3202      	adds	r2, #2
 800aaa0:	615a      	str	r2, [r3, #20]
					retBufLen = http_response_response_header(httpResponse);
 800aaa2:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aaa6:	f103 0318 	add.w	r3, r3, #24
 800aaaa:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800aaae:	466d      	mov	r5, sp
 800aab0:	f104 0310 	add.w	r3, r4, #16
 800aab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aab6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800aaba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800aabe:	f7fe fed5 	bl	800986c <http_response_response_header>
 800aac2:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800aac6:	f103 0318 	add.w	r3, r3, #24
 800aaca:	6018      	str	r0, [r3, #0]
					//check retval write and disconnect
					if (retBufLen <= 0) {
 800aacc:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800aad0:	f103 0318 	add.w	r3, r3, #24
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	dc14      	bgt.n	800ab04 <http_server+0xa54>
						PRINT_ERROR("error forming 200 header (%d)\r\n",
 800aada:	4bc2      	ldr	r3, [pc, #776]	@ (800ade4 <http_server+0xd34>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68d8      	ldr	r0, [r3, #12]
 800aae0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800aae4:	f103 0318 	add.w	r3, r3, #24
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	9301      	str	r3, [sp, #4]
 800aaec:	4bbe      	ldr	r3, [pc, #760]	@ (800ade8 <http_server+0xd38>)
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800aaf4:	4abd      	ldr	r2, [pc, #756]	@ (800adec <http_server+0xd3c>)
 800aaf6:	49be      	ldr	r1, [pc, #760]	@ (800adf0 <http_server+0xd40>)
 800aaf8:	f004 fde0 	bl	800f6bc <fiprintf>
								retBufLen);
						return -1;
 800aafc:	f04f 33ff 	mov.w	r3, #4294967295
 800ab00:	f000 bf23 	b.w	800b94a <http_server+0x189a>
					}
					//send out the response header
					netops->http_net_write(socket,
 800ab04:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ab08:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	685c      	ldr	r4, [r3, #4]
 800ab10:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800ab14:	f101 0108 	add.w	r1, r1, #8
 800ab18:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ab1c:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800ab20:	2364      	movs	r3, #100	@ 0x64
 800ab22:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800ab26:	f102 0218 	add.w	r2, r2, #24
 800ab2a:	6812      	ldr	r2, [r2, #0]
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	47a0      	blx	r4
							(unsigned char*) httpHeaderBuffer, retBufLen,
							HTTP_SERVER_TIMOUT_MS); //write header

					//search for partial SSI strings and seek back to read in next round
					http_server_findNseekBack((char*) freadBuffer, fp);
 800ab30:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800ab34:	3b0c      	subs	r3, #12
 800ab36:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ab3a:	f102 0214 	add.w	r2, r2, #20
 800ab3e:	6811      	ldr	r1, [r2, #0]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff fa13 	bl	8009f6c <http_server_findNseekBack>

					//now do the replacement in buffer
					for (i = 0; i < ssiCount; i++) { //search and replace all occurrences of the SSI string with replacement contens
 800ab46:	2300      	movs	r3, #0
 800ab48:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ab4c:	f102 020c 	add.w	r2, r2, #12
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	e02c      	b.n	800abae <http_server+0xafe>
						http_server_findNreplace((char*) &freadBuffer,
						HTTP_SERVER_FREAD_BUFFER_SIZE,
								ssiReplacements[i].SSIString,
 800ab54:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ab58:	3b14      	subs	r3, #20
 800ab5a:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ab5e:	f102 020c 	add.w	r2, r2, #12
 800ab62:	6812      	ldr	r2, [r2, #0]
 800ab64:	21b1      	movs	r1, #177	@ 0xb1
 800ab66:	fb01 f202 	mul.w	r2, r1, r2
 800ab6a:	1899      	adds	r1, r3, r2
								ssiReplacements[i].SSIReplacementString);
 800ab6c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ab70:	3b14      	subs	r3, #20
 800ab72:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ab76:	f102 020c 	add.w	r2, r2, #12
 800ab7a:	6812      	ldr	r2, [r2, #0]
 800ab7c:	20b1      	movs	r0, #177	@ 0xb1
 800ab7e:	fb00 f202 	mul.w	r2, r0, r2
 800ab82:	3218      	adds	r2, #24
 800ab84:	4413      	add	r3, r2
 800ab86:	3303      	adds	r3, #3
						http_server_findNreplace((char*) &freadBuffer,
 800ab88:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800ab8c:	380c      	subs	r0, #12
 800ab8e:	460a      	mov	r2, r1
 800ab90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ab94:	f7ff f976 	bl	8009e84 <http_server_findNreplace>
					for (i = 0; i < ssiCount; i++) { //search and replace all occurrences of the SSI string with replacement contens
 800ab98:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ab9c:	f103 030c 	add.w	r3, r3, #12
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3301      	adds	r3, #1
 800aba4:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800aba8:	f102 020c 	add.w	r2, r2, #12
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800abb2:	f103 030c 	add.w	r3, r3, #12
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800abbc:	f103 0310 	add.w	r3, r3, #16
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	dbc6      	blt.n	800ab54 <http_server+0xaa4>
					}
					int repBufLength = strlen(freadBuffer);
 800abc6:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800abca:	3b0c      	subs	r3, #12
 800abcc:	4618      	mov	r0, r3
 800abce:	f7f5 fb09 	bl	80001e4 <strlen>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800abd8:	f102 021c 	add.w	r2, r2, #28
 800abdc:	6013      	str	r3, [r2, #0]
					//first write the contents we have read already
					http_server_writeChunkedBody(socket, freadBuffer,
 800abde:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800abe2:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800abe6:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800abea:	390c      	subs	r1, #12
 800abec:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800abf0:	f6a2 4034 	subw	r0, r2, #3124	@ 0xc34
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800abfa:	f102 021c 	add.w	r2, r2, #28
 800abfe:	6812      	ldr	r2, [r2, #0]
 800ac00:	6800      	ldr	r0, [r0, #0]
 800ac02:	f7ff f97f 	bl	8009f04 <http_server_writeChunkedBody>
							repBufLength, netops);
					do { //now read and write remaining contents
						readLen = http_file_fops.fread(&freadBuffer,
 800ac06:	4b7b      	ldr	r3, [pc, #492]	@ (800adf4 <http_server+0xd44>)
 800ac08:	689c      	ldr	r4, [r3, #8]
 800ac0a:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800ac0e:	380c      	subs	r0, #12
 800ac10:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ac14:	f103 0314 	add.w	r3, r3, #20
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800ac20:	47a0      	blx	r4
 800ac22:	4603      	mov	r3, r0
 800ac24:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800ac28:	6013      	str	r3, [r2, #0]
								(HTTP_SERVER_FREAD_BUFFER_SIZE / 2) - 1, 1, fp);
						freadBuffer[readLen] = 0;
 800ac2a:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ac2e:	f2a3 622c 	subw	r2, r3, #1580	@ 0x62c
 800ac32:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4413      	add	r3, r2
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]

						//search for incomplete comment in teh end and do a seek
						//now do the replacement in buffer
						for (i = 0; i < ssiCount; i++) { //search and replace all occurrences of the SSI string with replacement contens
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ac44:	f102 020c 	add.w	r2, r2, #12
 800ac48:	6013      	str	r3, [r2, #0]
 800ac4a:	e02c      	b.n	800aca6 <http_server+0xbf6>
							http_server_findNreplace((char*) &freadBuffer,
							HTTP_SERVER_FREAD_BUFFER_SIZE,
									ssiReplacements[i].SSIString,
 800ac4c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ac50:	3b14      	subs	r3, #20
 800ac52:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ac56:	f102 020c 	add.w	r2, r2, #12
 800ac5a:	6812      	ldr	r2, [r2, #0]
 800ac5c:	21b1      	movs	r1, #177	@ 0xb1
 800ac5e:	fb01 f202 	mul.w	r2, r1, r2
 800ac62:	1899      	adds	r1, r3, r2
									ssiReplacements[i].SSIReplacementString);
 800ac64:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ac68:	3b14      	subs	r3, #20
 800ac6a:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ac6e:	f102 020c 	add.w	r2, r2, #12
 800ac72:	6812      	ldr	r2, [r2, #0]
 800ac74:	20b1      	movs	r0, #177	@ 0xb1
 800ac76:	fb00 f202 	mul.w	r2, r0, r2
 800ac7a:	3218      	adds	r2, #24
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3303      	adds	r3, #3
							http_server_findNreplace((char*) &freadBuffer,
 800ac80:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800ac84:	380c      	subs	r0, #12
 800ac86:	460a      	mov	r2, r1
 800ac88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ac8c:	f7ff f8fa 	bl	8009e84 <http_server_findNreplace>
						for (i = 0; i < ssiCount; i++) { //search and replace all occurrences of the SSI string with replacement contens
 800ac90:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ac94:	f103 030c 	add.w	r3, r3, #12
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800aca0:	f102 020c 	add.w	r2, r2, #12
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800acaa:	f103 030c 	add.w	r3, r3, #12
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800acb4:	f103 0310 	add.w	r3, r3, #16
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	429a      	cmp	r2, r3
 800acbc:	dbc6      	blt.n	800ac4c <http_server+0xb9c>
						}
						repBufLength = strlen(freadBuffer);
 800acbe:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800acc2:	3b0c      	subs	r3, #12
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7f5 fa8d 	bl	80001e4 <strlen>
 800acca:	4603      	mov	r3, r0
 800accc:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800acd0:	f102 021c 	add.w	r2, r2, #28
 800acd4:	6013      	str	r3, [r2, #0]

						http_server_writeChunkedBody(socket, freadBuffer,
 800acd6:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800acda:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800acde:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800ace2:	390c      	subs	r1, #12
 800ace4:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800ace8:	f6a2 4034 	subw	r0, r2, #3124	@ 0xc34
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f507 52de 	add.w	r2, r7, #7104	@ 0x1bc0
 800acf2:	f102 021c 	add.w	r2, r2, #28
 800acf6:	6812      	ldr	r2, [r2, #0]
 800acf8:	6800      	ldr	r0, [r0, #0]
 800acfa:	f7ff f903 	bl	8009f04 <http_server_writeChunkedBody>
								repBufLength, netops);
					} while (!http_file_fops.eof(fp));
 800acfe:	4b3d      	ldr	r3, [pc, #244]	@ (800adf4 <http_server+0xd44>)
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ad06:	f102 0214 	add.w	r2, r2, #20
 800ad0a:	6810      	ldr	r0, [r2, #0]
 800ad0c:	4798      	blx	r3
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f43f af78 	beq.w	800ac06 <http_server+0xb56>

					//send last 0\r\n\r\n
					netops->http_net_write(socket, (unsigned char*) "0\r\n\r\n",
 800ad16:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ad1a:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685c      	ldr	r4, [r3, #4]
 800ad22:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ad26:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800ad2a:	2364      	movs	r3, #100	@ 0x64
 800ad2c:	2205      	movs	r2, #5
 800ad2e:	4932      	ldr	r1, [pc, #200]	@ (800adf8 <http_server+0xd48>)
 800ad30:	6800      	ldr	r0, [r0, #0]
 800ad32:	47a0      	blx	r4
							5, HTTP_SERVER_TIMOUT_MS);
					netops->http_net_disconnect(socket);
 800ad34:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ad38:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800ad44:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800ad48:	6810      	ldr	r0, [r2, #0]
 800ad4a:	4798      	blx	r3
				}
			}
		}
			break;
 800ad4c:	f000 bdcc 	b.w	800b8e8 <http_server+0x1838>
		case httpFileClass_CGI: { //no suport for chunked CGI output
			http_CGI_pathFunctionHandle_t cgiPathFunctionHandle = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800ad56:	f102 0214 	add.w	r2, r2, #20
 800ad5a:	6013      	str	r3, [r2, #0]
			cgiPathFunctionHandle = http_CGI_get_pathFunctionHandle(
 800ad5c:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800ad60:	3302      	adds	r3, #2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd fdf4 	bl	8008950 <http_CGI_get_pathFunctionHandle>
 800ad68:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ad6c:	f103 0314 	add.w	r3, r3, #20
 800ad70:	6018      	str	r0, [r3, #0]
					http_request.httpFilePath);
			if (NULL == cgiPathFunctionHandle) { //404 case
 800ad72:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ad76:	f103 0314 	add.w	r3, r3, #20
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d13f      	bne.n	800ae00 <http_server+0xd50>
				int retval = http_server_send404(&httpResponse, socket, netops);
 800ad80:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ad84:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800ad88:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ad8c:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800ad90:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800ad94:	6812      	ldr	r2, [r2, #0]
 800ad96:	6819      	ldr	r1, [r3, #0]
 800ad98:	f7fe ffae 	bl	8009cf8 <http_server_send404>
 800ad9c:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ada0:	f103 0304 	add.w	r3, r3, #4
 800ada4:	6018      	str	r0, [r3, #0]
				if (retval < 0) {
 800ada6:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800adaa:	f103 0304 	add.w	r3, r3, #4
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	da14      	bge.n	800adde <http_server+0xd2e>
					PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 800adb4:	4b0b      	ldr	r3, [pc, #44]	@ (800ade4 <http_server+0xd34>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68d8      	ldr	r0, [r3, #12]
 800adba:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800adbe:	f103 0304 	add.w	r3, r3, #4
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	4b08      	ldr	r3, [pc, #32]	@ (800ade8 <http_server+0xd38>)
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	f240 13b1 	movw	r3, #433	@ 0x1b1
 800adce:	4a07      	ldr	r2, [pc, #28]	@ (800adec <http_server+0xd3c>)
 800add0:	490a      	ldr	r1, [pc, #40]	@ (800adfc <http_server+0xd4c>)
 800add2:	f004 fc73 	bl	800f6bc <fiprintf>
					return -1;
 800add6:	f04f 33ff 	mov.w	r3, #4294967295
 800adda:	f000 bdb6 	b.w	800b94a <http_server+0x189a>
				}
				return 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	f000 bdb3 	b.w	800b94a <http_server+0x189a>
 800ade4:	20001240 	.word	0x20001240
 800ade8:	08013138 	.word	0x08013138
 800adec:	0801235c 	.word	0x0801235c
 800adf0:	080124f0 	.word	0x080124f0
 800adf4:	20002680 	.word	0x20002680
 800adf8:	08012524 	.word	0x08012524
 800adfc:	08012380 	.word	0x08012380
			} else { //time to execute cgi
				unsigned char cgiBuffer[HTTP_SERVER_CGI_BUFFER_SIZE ];
				int retBufLength = http_CGI_exec_pathFunction(
 800ae00:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800ae04:	3b0c      	subs	r3, #12
 800ae06:	f507 52b3 	add.w	r2, r7, #5728	@ 0x1660
 800ae0a:	1c90      	adds	r0, r2, #2
 800ae0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae10:	4619      	mov	r1, r3
 800ae12:	f7fd fcaf 	bl	8008774 <http_CGI_exec_pathFunction>
 800ae16:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae1a:	f103 0310 	add.w	r3, r3, #16
 800ae1e:	6018      	str	r0, [r3, #0]
						http_request.httpFilePath, (char*) &cgiBuffer,
						HTTP_SERVER_CGI_BUFFER_SIZE);
				if (retBufLength < 0) { //send an internal error response
 800ae20:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae24:	f103 0310 	add.w	r3, r3, #16
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	da46      	bge.n	800aebc <http_server+0xe0c>
					PRINT_ERROR("error executing pathFunction (%s - %d)\r\n",
 800ae2e:	4ba8      	ldr	r3, [pc, #672]	@ (800b0d0 <http_server+0x1020>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68d8      	ldr	r0, [r3, #12]
 800ae34:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae38:	f103 0310 	add.w	r3, r3, #16
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	9302      	str	r3, [sp, #8]
 800ae40:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800ae44:	3302      	adds	r3, #2
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	4ba2      	ldr	r3, [pc, #648]	@ (800b0d4 <http_server+0x1024>)
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800ae50:	4aa1      	ldr	r2, [pc, #644]	@ (800b0d8 <http_server+0x1028>)
 800ae52:	49a2      	ldr	r1, [pc, #648]	@ (800b0dc <http_server+0x102c>)
 800ae54:	f004 fc32 	bl	800f6bc <fiprintf>
							http_request.httpFilePath, retBufLength);
					int retval = http_server_send_serverError500(&httpResponse,
 800ae58:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ae5c:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800ae60:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800ae64:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800ae68:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800ae6c:	6812      	ldr	r2, [r2, #0]
 800ae6e:	6819      	ldr	r1, [r3, #0]
 800ae70:	f7fe ffc6 	bl	8009e00 <http_server_send_serverError500>
 800ae74:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae78:	f103 0308 	add.w	r3, r3, #8
 800ae7c:	6018      	str	r0, [r3, #0]
							socket, netops);
					if (retval < 0) {
 800ae7e:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae82:	f103 0308 	add.w	r3, r3, #8
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	da14      	bge.n	800aeb6 <http_server+0xe06>
						PRINT_ERROR("error forming 500 header (%d)\r\n",
 800ae8c:	4b90      	ldr	r3, [pc, #576]	@ (800b0d0 <http_server+0x1020>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68d8      	ldr	r0, [r3, #12]
 800ae92:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae96:	f103 0308 	add.w	r3, r3, #8
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	4b8d      	ldr	r3, [pc, #564]	@ (800b0d4 <http_server+0x1024>)
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800aea6:	4a8c      	ldr	r2, [pc, #560]	@ (800b0d8 <http_server+0x1028>)
 800aea8:	498d      	ldr	r1, [pc, #564]	@ (800b0e0 <http_server+0x1030>)
 800aeaa:	f004 fc07 	bl	800f6bc <fiprintf>
								retval);
						return -1;
 800aeae:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb2:	f000 bd4a 	b.w	800b94a <http_server+0x189a>
					}
					return 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f000 bd47 	b.w	800b94a <http_server+0x189a>
				} else {
					httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800aebc:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aec0:	f103 0318 	add.w	r3, r3, #24
 800aec4:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aec8:	22c8      	movs	r2, #200	@ 0xc8
 800aeca:	801a      	strh	r2, [r3, #0]
					httpResponse.bodyLength = retBufLength;
 800aecc:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800aed0:	f103 0310 	add.w	r3, r3, #16
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aeda:	f103 0318 	add.w	r3, r3, #24
 800aede:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aee2:	605a      	str	r2, [r3, #4]
					httpResponse.filePath = NULL;
 800aee4:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aee8:	f103 0318 	add.w	r3, r3, #24
 800aeec:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800aef0:	2200      	movs	r2, #0
 800aef2:	615a      	str	r2, [r3, #20]
					http_response_contenttype_t contentType =
							http_cgi_get_contentType(
 800aef4:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800aef8:	3302      	adds	r3, #2
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fd fd28 	bl	8008950 <http_CGI_get_pathFunctionHandle>
 800af00:	4603      	mov	r3, r0
 800af02:	4618      	mov	r0, r3
 800af04:	f7fd fd12 	bl	800892c <http_cgi_get_contentType>
 800af08:	4603      	mov	r3, r0
 800af0a:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800af0e:	f102 020f 	add.w	r2, r2, #15
 800af12:	7013      	strb	r3, [r2, #0]
									http_CGI_get_pathFunctionHandle(
											http_request.httpFilePath));
					httpResponse.contentType = contentType;
 800af14:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800af18:	f103 0318 	add.w	r3, r3, #24
 800af1c:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800af20:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800af24:	f102 020f 	add.w	r2, r2, #15
 800af28:	7812      	ldrb	r2, [r2, #0]
 800af2a:	761a      	strb	r2, [r3, #24]
					retBufLen = http_response_response_header(httpResponse);
 800af2c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800af30:	f103 0318 	add.w	r3, r3, #24
 800af34:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800af38:	466d      	mov	r5, sp
 800af3a:	f104 0310 	add.w	r3, r4, #16
 800af3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800af44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af48:	f7fe fc90 	bl	800986c <http_response_response_header>
 800af4c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af50:	f103 0318 	add.w	r3, r3, #24
 800af54:	6018      	str	r0, [r3, #0]
					//check retval write and disconnect
					if (retBufLen < 0) {
 800af56:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af5a:	f103 0318 	add.w	r3, r3, #24
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	da14      	bge.n	800af8e <http_server+0xede>
						PRINT_ERROR("error forming 200 header (%d)\r\n",
 800af64:	4b5a      	ldr	r3, [pc, #360]	@ (800b0d0 <http_server+0x1020>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68d8      	ldr	r0, [r3, #12]
 800af6a:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af6e:	f103 0318 	add.w	r3, r3, #24
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	4b57      	ldr	r3, [pc, #348]	@ (800b0d4 <http_server+0x1024>)
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	f240 13d1 	movw	r3, #465	@ 0x1d1
 800af7e:	4a56      	ldr	r2, [pc, #344]	@ (800b0d8 <http_server+0x1028>)
 800af80:	4958      	ldr	r1, [pc, #352]	@ (800b0e4 <http_server+0x1034>)
 800af82:	f004 fb9b 	bl	800f6bc <fiprintf>
								retBufLen);
						return -1;
 800af86:	f04f 33ff 	mov.w	r3, #4294967295
 800af8a:	f000 bcde 	b.w	800b94a <http_server+0x189a>
					}
					netops->http_net_write(socket,
 800af8e:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800af92:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685c      	ldr	r4, [r3, #4]
 800af9a:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800af9e:	f101 0108 	add.w	r1, r1, #8
 800afa2:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800afa6:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800afaa:	2364      	movs	r3, #100	@ 0x64
 800afac:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800afb0:	f102 0218 	add.w	r2, r2, #24
 800afb4:	6812      	ldr	r2, [r2, #0]
 800afb6:	6800      	ldr	r0, [r0, #0]
 800afb8:	47a0      	blx	r4
							(unsigned char*) httpHeaderBuffer, retBufLen,
							HTTP_SERVER_TIMOUT_MS); //write header
					if (retBufLen != 0) { //case where operation was successful but no content to pass on.
 800afba:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800afbe:	f103 0318 	add.w	r3, r3, #24
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d014      	beq.n	800aff2 <http_server+0xf42>
						netops->http_net_write(socket,
 800afc8:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800afcc:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	685c      	ldr	r4, [r3, #4]
 800afd4:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800afd8:	390c      	subs	r1, #12
 800afda:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800afde:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800afe2:	2364      	movs	r3, #100	@ 0x64
 800afe4:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800afe8:	f102 0210 	add.w	r2, r2, #16
 800afec:	6812      	ldr	r2, [r2, #0]
 800afee:	6800      	ldr	r0, [r0, #0]
 800aff0:	47a0      	blx	r4
								(unsigned char*) cgiBuffer, retBufLength,
								HTTP_SERVER_TIMOUT_MS);
					}
					netops->http_net_disconnect(socket);
 800aff2:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800aff6:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800b002:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800b006:	6810      	ldr	r0, [r2, #0]
 800b008:	4798      	blx	r3
					return 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	f000 bc9d 	b.w	800b94a <http_server+0x189a>
				}
			}
		}
			break;
		case httpFileClass_Custom: {
			printf(http_request.httpFilePath);
 800b010:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b014:	3302      	adds	r3, #2
 800b016:	4618      	mov	r0, r3
 800b018:	f004 fb80 	bl	800f71c <iprintf>
			printf("\r\n");
 800b01c:	4832      	ldr	r0, [pc, #200]	@ (800b0e8 <http_server+0x1038>)
 800b01e:	f004 fbe5 	bl	800f7ec <puts>

			char customBuffer[HTTP_SERVER_CGI_BUFFER_SIZE];
			int retBufLength;
			int downloading=0;
 800b022:	2300      	movs	r3, #0
 800b024:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b028:	f102 0204 	add.w	r2, r2, #4
 800b02c:	6013      	str	r3, [r2, #0]
			if (strstr(http_request.httpFilePath,"GPS")){
 800b02e:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b032:	3302      	adds	r3, #2
 800b034:	492d      	ldr	r1, [pc, #180]	@ (800b0ec <http_server+0x103c>)
 800b036:	4618      	mov	r0, r3
 800b038:	f004 fdfc 	bl	800fc34 <strstr>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d010      	beq.n	800b064 <http_server+0xfb4>
				printf("running GPS...");
 800b042:	482b      	ldr	r0, [pc, #172]	@ (800b0f0 <http_server+0x1040>)
 800b044:	f004 fb6a 	bl	800f71c <iprintf>
				retBufLength = toggle_LED((char*) &customBuffer , HTTP_SERVER_CGI_BUFFER_SIZE);
 800b048:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800b04c:	3b0c      	subs	r3, #12
 800b04e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b052:	4618      	mov	r0, r3
 800b054:	f7fd f9da 	bl	800840c <toggle_LED>
 800b058:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b05c:	f103 0308 	add.w	r3, r3, #8
 800b060:	6018      	str	r0, [r3, #0]
 800b062:	e06d      	b.n	800b140 <http_server+0x1090>
			}
			else if (strstr(http_request.httpFilePath,"imu")){
 800b064:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b068:	3302      	adds	r3, #2
 800b06a:	4922      	ldr	r1, [pc, #136]	@ (800b0f4 <http_server+0x1044>)
 800b06c:	4618      	mov	r0, r3
 800b06e:	f004 fde1 	bl	800fc34 <strstr>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d010      	beq.n	800b09a <http_server+0xfea>
				printf("reading...");
 800b078:	481f      	ldr	r0, [pc, #124]	@ (800b0f8 <http_server+0x1048>)
 800b07a:	f004 fb4f 	bl	800f71c <iprintf>
				retBufLength = imu_readings((char*) &customBuffer , HTTP_SERVER_CGI_BUFFER_SIZE);
 800b07e:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800b082:	3b0c      	subs	r3, #12
 800b084:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b088:	4618      	mov	r0, r3
 800b08a:	f000 ff51 	bl	800bf30 <imu_readings>
 800b08e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b092:	f103 0308 	add.w	r3, r3, #8
 800b096:	6018      	str	r0, [r3, #0]
 800b098:	e052      	b.n	800b140 <http_server+0x1090>
			}
			else if (strstr(http_request.httpFilePath,"documents")){
 800b09a:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b09e:	3302      	adds	r3, #2
 800b0a0:	4916      	ldr	r1, [pc, #88]	@ (800b0fc <http_server+0x104c>)
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f004 fdc6 	bl	800fc34 <strstr>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d02a      	beq.n	800b104 <http_server+0x1054>
				printf("reading...");
 800b0ae:	4812      	ldr	r0, [pc, #72]	@ (800b0f8 <http_server+0x1048>)
 800b0b0:	f004 fb34 	bl	800f71c <iprintf>
				retBufLength = list_dir((char*)customBuffer,"/");
 800b0b4:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800b0b8:	3b0c      	subs	r3, #12
 800b0ba:	4911      	ldr	r1, [pc, #68]	@ (800b100 <http_server+0x1050>)
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7f5 fde7 	bl	8000c90 <list_dir>
 800b0c2:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b0c6:	f103 0308 	add.w	r3, r3, #8
 800b0ca:	6018      	str	r0, [r3, #0]
 800b0cc:	e038      	b.n	800b140 <http_server+0x1090>
 800b0ce:	bf00      	nop
 800b0d0:	20001240 	.word	0x20001240
 800b0d4:	08013138 	.word	0x08013138
 800b0d8:	0801235c 	.word	0x0801235c
 800b0dc:	0801265c 	.word	0x0801265c
 800b0e0:	080123e8 	.word	0x080123e8
 800b0e4:	080124f0 	.word	0x080124f0
 800b0e8:	08012698 	.word	0x08012698
 800b0ec:	0801269c 	.word	0x0801269c
 800b0f0:	080126a0 	.word	0x080126a0
 800b0f4:	080126b0 	.word	0x080126b0
 800b0f8:	080126b4 	.word	0x080126b4
 800b0fc:	080126c0 	.word	0x080126c0
 800b100:	080126cc 	.word	0x080126cc
			}
			else if (strstr(http_request.httpFilePath,"download")){
 800b104:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b108:	3302      	adds	r3, #2
 800b10a:	49c0      	ldr	r1, [pc, #768]	@ (800b40c <http_server+0x135c>)
 800b10c:	4618      	mov	r0, r3
 800b10e:	f004 fd91 	bl	800fc34 <strstr>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d013      	beq.n	800b140 <http_server+0x1090>
				downloading=1;
 800b118:	2301      	movs	r3, #1
 800b11a:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b11e:	f102 0204 	add.w	r2, r2, #4
 800b122:	6013      	str	r3, [r2, #0]
				printf("downloading...\n");
 800b124:	48ba      	ldr	r0, [pc, #744]	@ (800b410 <http_server+0x1360>)
 800b126:	f004 fb61 	bl	800f7ec <puts>
				retBufLength = Data((char*) &customBuffer);
 800b12a:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800b12e:	3b0c      	subs	r3, #12
 800b130:	4618      	mov	r0, r3
 800b132:	f7fd f9bd 	bl	80084b0 <Data>
 800b136:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b13a:	f103 0308 	add.w	r3, r3, #8
 800b13e:	6018      	str	r0, [r3, #0]
//				printf((char*)(retBufLength*1300));
//				printf("\n");
			}

			if (retBufLength < 0) { //send an internal error response
 800b140:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b144:	f103 0308 	add.w	r3, r3, #8
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	da44      	bge.n	800b1d8 <http_server+0x1128>
				PRINT_ERROR("error executing pathFunction (%s - %d)\r\n",
 800b14e:	4bb1      	ldr	r3, [pc, #708]	@ (800b414 <http_server+0x1364>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68d8      	ldr	r0, [r3, #12]
 800b154:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b158:	f103 0308 	add.w	r3, r3, #8
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	9302      	str	r3, [sp, #8]
 800b160:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b164:	3302      	adds	r3, #2
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	4bab      	ldr	r3, [pc, #684]	@ (800b418 <http_server+0x1368>)
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800b170:	4aaa      	ldr	r2, [pc, #680]	@ (800b41c <http_server+0x136c>)
 800b172:	49ab      	ldr	r1, [pc, #684]	@ (800b420 <http_server+0x1370>)
 800b174:	f004 faa2 	bl	800f6bc <fiprintf>
						http_request.httpFilePath, retBufLength);
				int retval = http_server_send_serverError500(&httpResponse,
 800b178:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b17c:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800b180:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b184:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800b188:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800b18c:	6812      	ldr	r2, [r2, #0]
 800b18e:	6819      	ldr	r1, [r3, #0]
 800b190:	f7fe fe36 	bl	8009e00 <http_server_send_serverError500>
 800b194:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b198:	f103 0318 	add.w	r3, r3, #24
 800b19c:	6018      	str	r0, [r3, #0]
						socket, netops);
				if (retval < 0) {
 800b19e:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b1a2:	f103 0318 	add.w	r3, r3, #24
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	da13      	bge.n	800b1d4 <http_server+0x1124>
					PRINT_ERROR("error forming 500 header (%d)\r\n", retval);
 800b1ac:	4b99      	ldr	r3, [pc, #612]	@ (800b414 <http_server+0x1364>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68d8      	ldr	r0, [r3, #12]
 800b1b2:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b1b6:	f103 0318 	add.w	r3, r3, #24
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	4b96      	ldr	r3, [pc, #600]	@ (800b418 <http_server+0x1368>)
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800b1c6:	4a95      	ldr	r2, [pc, #596]	@ (800b41c <http_server+0x136c>)
 800b1c8:	4996      	ldr	r1, [pc, #600]	@ (800b424 <http_server+0x1374>)
 800b1ca:	f004 fa77 	bl	800f6bc <fiprintf>
					return -1;
 800b1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d2:	e3ba      	b.n	800b94a <http_server+0x189a>
				}
				return 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e3b8      	b.n	800b94a <http_server+0x189a>
			} else {
				if(downloading==0){
 800b1d8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b1dc:	f103 0304 	add.w	r3, r3, #4
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f040 809e 	bne.w	800b324 <http_server+0x1274>
					httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800b1e8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b1ec:	f103 0318 	add.w	r3, r3, #24
 800b1f0:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b1f4:	22c8      	movs	r2, #200	@ 0xc8
 800b1f6:	801a      	strh	r2, [r3, #0]
					httpResponse.bodyLength = retBufLength;
 800b1f8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b1fc:	f103 0308 	add.w	r3, r3, #8
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b206:	f103 0318 	add.w	r3, r3, #24
 800b20a:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b20e:	605a      	str	r2, [r3, #4]
					httpResponse.filePath = NULL;
 800b210:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b214:	f103 0318 	add.w	r3, r3, #24
 800b218:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b21c:	2200      	movs	r2, #0
 800b21e:	615a      	str	r2, [r3, #20]
					http_response_contenttype_t contentType = HTTP_contentType_json;
 800b220:	2308      	movs	r3, #8
 800b222:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800b226:	f102 021e 	add.w	r2, r2, #30
 800b22a:	7013      	strb	r3, [r2, #0]
					httpResponse.contentType = contentType;
 800b22c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b230:	f103 0318 	add.w	r3, r3, #24
 800b234:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b238:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800b23c:	f102 021e 	add.w	r2, r2, #30
 800b240:	7812      	ldrb	r2, [r2, #0]
 800b242:	761a      	strb	r2, [r3, #24]
					retBufLen = http_response_response_header(httpResponse);
 800b244:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b248:	f103 0318 	add.w	r3, r3, #24
 800b24c:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800b250:	466d      	mov	r5, sp
 800b252:	f104 0310 	add.w	r3, r4, #16
 800b256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b258:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b25c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b260:	f7fe fb04 	bl	800986c <http_response_response_header>
 800b264:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b268:	f103 0318 	add.w	r3, r3, #24
 800b26c:	6018      	str	r0, [r3, #0]
					//check retval write and disconnect
					if (retBufLen < 0) {
 800b26e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b272:	f103 0318 	add.w	r3, r3, #24
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da13      	bge.n	800b2a4 <http_server+0x11f4>
						PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 800b27c:	4b65      	ldr	r3, [pc, #404]	@ (800b414 <http_server+0x1364>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68d8      	ldr	r0, [r3, #12]
 800b282:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b286:	f103 0318 	add.w	r3, r3, #24
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	4b62      	ldr	r3, [pc, #392]	@ (800b418 <http_server+0x1368>)
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	f240 2312 	movw	r3, #530	@ 0x212
 800b296:	4a61      	ldr	r2, [pc, #388]	@ (800b41c <http_server+0x136c>)
 800b298:	4963      	ldr	r1, [pc, #396]	@ (800b428 <http_server+0x1378>)
 800b29a:	f004 fa0f 	bl	800f6bc <fiprintf>
						return -1;
 800b29e:	f04f 33ff 	mov.w	r3, #4294967295
 800b2a2:	e352      	b.n	800b94a <http_server+0x189a>
					}
					netops->http_net_write(socket,
 800b2a4:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b2a8:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	685c      	ldr	r4, [r3, #4]
 800b2b0:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800b2b4:	f101 0108 	add.w	r1, r1, #8
 800b2b8:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b2bc:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800b2c0:	2364      	movs	r3, #100	@ 0x64
 800b2c2:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b2c6:	f102 0218 	add.w	r2, r2, #24
 800b2ca:	6812      	ldr	r2, [r2, #0]
 800b2cc:	6800      	ldr	r0, [r0, #0]
 800b2ce:	47a0      	blx	r4
							(unsigned char*) httpHeaderBuffer, retBufLen,
							HTTP_SERVER_TIMOUT_MS); //write header
					if (retBufLen != 0) { //case where operation was successful but no content to pass on.
 800b2d0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b2d4:	f103 0318 	add.w	r3, r3, #24
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d014      	beq.n	800b308 <http_server+0x1258>
						netops->http_net_write(socket, (unsigned char*) customBuffer,
 800b2de:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b2e2:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685c      	ldr	r4, [r3, #4]
 800b2ea:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800b2ee:	390c      	subs	r1, #12
 800b2f0:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b2f4:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800b2f8:	2364      	movs	r3, #100	@ 0x64
 800b2fa:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b2fe:	f102 0208 	add.w	r2, r2, #8
 800b302:	6812      	ldr	r2, [r2, #0]
 800b304:	6800      	ldr	r0, [r0, #0]
 800b306:	47a0      	blx	r4
								HTTP_SERVER_TIMOUT_MS);
					}



					netops->http_net_disconnect(socket);
 800b308:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b30c:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800b318:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800b31c:	6810      	ldr	r0, [r2, #0]
 800b31e:	4798      	blx	r3
					return 0;
 800b320:	2300      	movs	r3, #0
 800b322:	e312      	b.n	800b94a <http_server+0x189a>
				}else{
					httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800b324:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b328:	f103 0318 	add.w	r3, r3, #24
 800b32c:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b330:	22c8      	movs	r2, #200	@ 0xc8
 800b332:	801a      	strh	r2, [r3, #0]
					httpResponse.bodyLength = retBufLength*1300;
 800b334:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b338:	f103 0308 	add.w	r3, r3, #8
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f240 5214 	movw	r2, #1300	@ 0x514
 800b342:	fb02 f303 	mul.w	r3, r2, r3
 800b346:	461a      	mov	r2, r3
 800b348:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b34c:	f103 0318 	add.w	r3, r3, #24
 800b350:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b354:	605a      	str	r2, [r3, #4]
//					httpResponse.bodyLength = 0;
					httpResponse.filePath = NULL;
 800b356:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b35a:	f103 0318 	add.w	r3, r3, #24
 800b35e:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b362:	2200      	movs	r2, #0
 800b364:	615a      	str	r2, [r3, #20]
					http_response_contenttype_t contentType = HTTP_contentType_plaintext;
 800b366:	2301      	movs	r3, #1
 800b368:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800b36c:	f102 021f 	add.w	r2, r2, #31
 800b370:	7013      	strb	r3, [r2, #0]
					httpResponse.contentType = contentType;
 800b372:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b376:	f103 0318 	add.w	r3, r3, #24
 800b37a:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b37e:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800b382:	f102 021f 	add.w	r2, r2, #31
 800b386:	7812      	ldrb	r2, [r2, #0]
 800b388:	761a      	strb	r2, [r3, #24]
					httpResponse.transferEncoding=transferEnc_chunked;
 800b38a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b38e:	f103 0318 	add.w	r3, r3, #24
 800b392:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b396:	2201      	movs	r2, #1
 800b398:	741a      	strb	r2, [r3, #16]
					httpResponse.contentDisposition = "attachment; filename=\"1MBfile.txt\"";
 800b39a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b39e:	f103 0318 	add.w	r3, r3, #24
 800b3a2:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b3a6:	4a21      	ldr	r2, [pc, #132]	@ (800b42c <http_server+0x137c>)
 800b3a8:	61da      	str	r2, [r3, #28]
					retBufLen = http_response_response_header(httpResponse);
 800b3aa:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b3ae:	f103 0318 	add.w	r3, r3, #24
 800b3b2:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800b3b6:	466d      	mov	r5, sp
 800b3b8:	f104 0310 	add.w	r3, r4, #16
 800b3bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b3be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b3c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b3c6:	f7fe fa51 	bl	800986c <http_response_response_header>
 800b3ca:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b3ce:	f103 0318 	add.w	r3, r3, #24
 800b3d2:	6018      	str	r0, [r3, #0]
					//check retval write and disconnect
					if (retBufLen < 0) {
 800b3d4:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b3d8:	f103 0318 	add.w	r3, r3, #24
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	da26      	bge.n	800b430 <http_server+0x1380>
						PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 800b3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b414 <http_server+0x1364>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68d8      	ldr	r0, [r3, #12]
 800b3e8:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b3ec:	f103 0318 	add.w	r3, r3, #24
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	9301      	str	r3, [sp, #4]
 800b3f4:	4b08      	ldr	r3, [pc, #32]	@ (800b418 <http_server+0x1368>)
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	f240 232e 	movw	r3, #558	@ 0x22e
 800b3fc:	4a07      	ldr	r2, [pc, #28]	@ (800b41c <http_server+0x136c>)
 800b3fe:	490a      	ldr	r1, [pc, #40]	@ (800b428 <http_server+0x1378>)
 800b400:	f004 f95c 	bl	800f6bc <fiprintf>
						return -1;
 800b404:	f04f 33ff 	mov.w	r3, #4294967295
 800b408:	e29f      	b.n	800b94a <http_server+0x189a>
 800b40a:	bf00      	nop
 800b40c:	080126d0 	.word	0x080126d0
 800b410:	080126dc 	.word	0x080126dc
 800b414:	20001240 	.word	0x20001240
 800b418:	08013138 	.word	0x08013138
 800b41c:	0801235c 	.word	0x0801235c
 800b420:	0801265c 	.word	0x0801265c
 800b424:	080123e8 	.word	0x080123e8
 800b428:	080124f0 	.word	0x080124f0
 800b42c:	080126ec 	.word	0x080126ec
					}
					netops->http_net_write(socket,
 800b430:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b434:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	685c      	ldr	r4, [r3, #4]
 800b43c:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800b440:	f101 0108 	add.w	r1, r1, #8
 800b444:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b448:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800b44c:	2364      	movs	r3, #100	@ 0x64
 800b44e:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b452:	f102 0218 	add.w	r2, r2, #24
 800b456:	6812      	ldr	r2, [r2, #0]
 800b458:	6800      	ldr	r0, [r0, #0]
 800b45a:	47a0      	blx	r4
							(unsigned char*) httpHeaderBuffer, retBufLen,
							HTTP_SERVER_TIMOUT_MS); //write header
					int j=0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b462:	6013      	str	r3, [r2, #0]
					if (retBufLen != 0) { //case where operation was successful but no content to pass on.
 800b464:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b468:	f103 0318 	add.w	r3, r3, #24
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d023      	beq.n	800b4ba <http_server+0x140a>
					    while (j<=1300) {
 800b472:	e01b      	b.n	800b4ac <http_server+0x13fc>
						netops->http_net_write(socket, (unsigned char*) customBuffer,
 800b474:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b478:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685c      	ldr	r4, [r3, #4]
 800b480:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800b484:	390c      	subs	r1, #12
 800b486:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b48a:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800b48e:	2364      	movs	r3, #100	@ 0x64
 800b490:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b494:	f102 0208 	add.w	r2, r2, #8
 800b498:	6812      	ldr	r2, [r2, #0]
 800b49a:	6800      	ldr	r0, [r0, #0]
 800b49c:	47a0      	blx	r4
								retBufLength,
								HTTP_SERVER_TIMOUT_MS);
						j+=1;
 800b49e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b4aa:	6013      	str	r3, [r2, #0]
					    while (j<=1300) {
 800b4ac:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f240 5214 	movw	r2, #1300	@ 0x514
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	dddc      	ble.n	800b474 <http_server+0x13c4>
					    }
					}
					netops->http_net_disconnect(socket);
 800b4ba:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b4be:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800b4ca:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800b4ce:	6810      	ldr	r0, [r2, #0]
 800b4d0:	4798      	blx	r3
					return 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e239      	b.n	800b94a <http_server+0x189a>
//        	return strlen(replacerBuffer);

			}
			break;
		case httpFileClass_Download: {
					printf(http_request.httpFilePath);
 800b4d6:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b4da:	3302      	adds	r3, #2
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f004 f91d 	bl	800f71c <iprintf>
					printf("downloading log\r\n");
 800b4e2:	48b3      	ldr	r0, [pc, #716]	@ (800b7b0 <http_server+0x1700>)
 800b4e4:	f004 f982 	bl	800f7ec <puts>

					char customBuffer[HTTP_SERVER_CGI_BUFFER_SIZE];
					int retBufLength;
					char* req = http_request.httpFilePath;
 800b4e8:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b4f2:	f102 0214 	add.w	r2, r2, #20
 800b4f6:	6013      	str	r3, [r2, #0]
					    memmove(req, req + 1, strlen(req));
 800b4f8:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b4fc:	f103 0314 	add.w	r3, r3, #20
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	1c5c      	adds	r4, r3, #1
 800b504:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b508:	f103 0314 	add.w	r3, r3, #20
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	f7f4 fe69 	bl	80001e4 <strlen>
 800b512:	4603      	mov	r3, r0
 800b514:	461a      	mov	r2, r3
 800b516:	4621      	mov	r1, r4
 800b518:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b51c:	f103 0314 	add.w	r3, r3, #20
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	f004 fac3 	bl	800faac <memmove>
					    // Find the first dot
					    char *first_dot = strchr(req, '.');
 800b526:	212e      	movs	r1, #46	@ 0x2e
 800b528:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b52c:	f103 0314 	add.w	r3, r3, #20
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	f004 faec 	bl	800fb0e <strchr>
 800b536:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b53a:	f103 0310 	add.w	r3, r3, #16
 800b53e:	6018      	str	r0, [r3, #0]

					    if (first_dot != NULL) {
 800b540:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b544:	f103 0310 	add.w	r3, r3, #16
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d01c      	beq.n	800b588 <http_server+0x14d8>
					        // Find the second dot
					        char *second_dot = strchr(first_dot + 1, '.');
 800b54e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b552:	f103 0310 	add.w	r3, r3, #16
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3301      	adds	r3, #1
 800b55a:	212e      	movs	r1, #46	@ 0x2e
 800b55c:	4618      	mov	r0, r3
 800b55e:	f004 fad6 	bl	800fb0e <strchr>
 800b562:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b566:	f103 030c 	add.w	r3, r3, #12
 800b56a:	6018      	str	r0, [r3, #0]

					        if (second_dot != NULL) {
 800b56c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b570:	f103 030c 	add.w	r3, r3, #12
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <http_server+0x14d8>
					            // Truncate the string after the second dot
					            *(second_dot) = '\0';
 800b57a:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b57e:	f103 030c 	add.w	r3, r3, #12
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2200      	movs	r2, #0
 800b586:	701a      	strb	r2, [r3, #0]
					        }
					    }
						FILINFO fno;
						f_stat(req, &fno);
 800b588:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b58c:	3b0c      	subs	r3, #12
 800b58e:	4619      	mov	r1, r3
 800b590:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b594:	f103 0314 	add.w	r3, r3, #20
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	f7fc fd26 	bl	8007fea <f_stat>
						retBufLength = fno.fsize;
 800b59e:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b5a2:	f6a3 332c 	subw	r3, r3, #2860	@ 0xb2c
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b5ac:	f102 0208 	add.w	r2, r2, #8
 800b5b0:	6013      	str	r3, [r2, #0]


					if (retBufLength < 0) { //send an internal error response
 800b5b2:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b5b6:	f103 0308 	add.w	r3, r3, #8
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	da3e      	bge.n	800b63e <http_server+0x158e>
						PRINT_ERROR("error executing pathFunction (%s - %d)\r\n",
 800b5c0:	4b7c      	ldr	r3, [pc, #496]	@ (800b7b4 <http_server+0x1704>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68d8      	ldr	r0, [r3, #12]
 800b5c6:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b5ca:	f103 0308 	add.w	r3, r3, #8
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	9302      	str	r3, [sp, #8]
 800b5d2:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	4b77      	ldr	r3, [pc, #476]	@ (800b7b8 <http_server+0x1708>)
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	f240 2361 	movw	r3, #609	@ 0x261
 800b5e2:	4a76      	ldr	r2, [pc, #472]	@ (800b7bc <http_server+0x170c>)
 800b5e4:	4976      	ldr	r1, [pc, #472]	@ (800b7c0 <http_server+0x1710>)
 800b5e6:	f004 f869 	bl	800f6bc <fiprintf>
								http_request.httpFilePath, retBufLength);
						int retval = http_server_send_serverError500(&httpResponse,
 800b5ea:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b5ee:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800b5f2:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b5f6:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800b5fa:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800b5fe:	6812      	ldr	r2, [r2, #0]
 800b600:	6819      	ldr	r1, [r3, #0]
 800b602:	f7fe fbfd 	bl	8009e00 <http_server_send_serverError500>
 800b606:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b60a:	6018      	str	r0, [r3, #0]
								socket, netops);
						if (retval < 0) {
 800b60c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	da11      	bge.n	800b63a <http_server+0x158a>
							PRINT_ERROR("error forming 500 header (%d)\r\n", retval);
 800b616:	4b67      	ldr	r3, [pc, #412]	@ (800b7b4 <http_server+0x1704>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68d8      	ldr	r0, [r3, #12]
 800b61c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	4b64      	ldr	r3, [pc, #400]	@ (800b7b8 <http_server+0x1708>)
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	f240 2366 	movw	r3, #614	@ 0x266
 800b62c:	4a63      	ldr	r2, [pc, #396]	@ (800b7bc <http_server+0x170c>)
 800b62e:	4965      	ldr	r1, [pc, #404]	@ (800b7c4 <http_server+0x1714>)
 800b630:	f004 f844 	bl	800f6bc <fiprintf>
							return -1;
 800b634:	f04f 33ff 	mov.w	r3, #4294967295
 800b638:	e187      	b.n	800b94a <http_server+0x189a>
						}
						return 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	e185      	b.n	800b94a <http_server+0x189a>
					} else {
							httpResponse.responseCode = HTTP_RESCODE_successSuccess; //200 OK
 800b63e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b642:	f103 0318 	add.w	r3, r3, #24
 800b646:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b64a:	22c8      	movs	r2, #200	@ 0xc8
 800b64c:	801a      	strh	r2, [r3, #0]
							httpResponse.bodyLength = retBufLength;
 800b64e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b652:	f103 0308 	add.w	r3, r3, #8
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b65c:	f103 0318 	add.w	r3, r3, #24
 800b660:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b664:	605a      	str	r2, [r3, #4]
		//					httpResponse.bodyLength = 0;
							httpResponse.filePath = NULL;
 800b666:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b66a:	f103 0318 	add.w	r3, r3, #24
 800b66e:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b672:	2200      	movs	r2, #0
 800b674:	615a      	str	r2, [r3, #20]
							http_response_contenttype_t contentType = HTTP_contentType_plaintext;
 800b676:	2301      	movs	r3, #1
 800b678:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b67c:	f102 0207 	add.w	r2, r2, #7
 800b680:	7013      	strb	r3, [r2, #0]
							httpResponse.contentType = contentType;
 800b682:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b686:	f103 0318 	add.w	r3, r3, #24
 800b68a:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b68e:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b692:	f102 0207 	add.w	r2, r2, #7
 800b696:	7812      	ldrb	r2, [r2, #0]
 800b698:	761a      	strb	r2, [r3, #24]
							httpResponse.transferEncoding=transferEnc_chunked;
 800b69a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b69e:	f103 0318 	add.w	r3, r3, #24
 800b6a2:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	741a      	strb	r2, [r3, #16]
							httpResponse.contentDisposition = "attachment; filename=\"1MBfile.txt\"";
 800b6aa:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b6ae:	f103 0318 	add.w	r3, r3, #24
 800b6b2:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800b6b6:	4a44      	ldr	r2, [pc, #272]	@ (800b7c8 <http_server+0x1718>)
 800b6b8:	61da      	str	r2, [r3, #28]
							retBufLen = http_response_response_header(httpResponse);
 800b6ba:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b6be:	f103 0318 	add.w	r3, r3, #24
 800b6c2:	f5a3 64bf 	sub.w	r4, r3, #1528	@ 0x5f8
 800b6c6:	466d      	mov	r5, sp
 800b6c8:	f104 0310 	add.w	r3, r4, #16
 800b6cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b6ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b6d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b6d6:	f7fe f8c9 	bl	800986c <http_response_response_header>
 800b6da:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b6de:	f103 0318 	add.w	r3, r3, #24
 800b6e2:	6018      	str	r0, [r3, #0]
							//check retval write and disconnect
							if (retBufLen < 0) {
 800b6e4:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b6e8:	f103 0318 	add.w	r3, r3, #24
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	da13      	bge.n	800b71a <http_server+0x166a>
								PRINT_ERROR("error forming 200 header (%d)\r\n", retBufLen);
 800b6f2:	4b30      	ldr	r3, [pc, #192]	@ (800b7b4 <http_server+0x1704>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68d8      	ldr	r0, [r3, #12]
 800b6f8:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b6fc:	f103 0318 	add.w	r3, r3, #24
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	4b2c      	ldr	r3, [pc, #176]	@ (800b7b8 <http_server+0x1708>)
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	f240 2376 	movw	r3, #630	@ 0x276
 800b70c:	4a2b      	ldr	r2, [pc, #172]	@ (800b7bc <http_server+0x170c>)
 800b70e:	492f      	ldr	r1, [pc, #188]	@ (800b7cc <http_server+0x171c>)
 800b710:	f003 ffd4 	bl	800f6bc <fiprintf>
								return -1;
 800b714:	f04f 33ff 	mov.w	r3, #4294967295
 800b718:	e117      	b.n	800b94a <http_server+0x189a>
							}
							netops->http_net_write(socket,
 800b71a:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b71e:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685c      	ldr	r4, [r3, #4]
 800b726:	f507 51b6 	add.w	r1, r7, #5824	@ 0x16c0
 800b72a:	f101 0108 	add.w	r1, r1, #8
 800b72e:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b732:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800b736:	2364      	movs	r3, #100	@ 0x64
 800b738:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b73c:	f102 0218 	add.w	r2, r2, #24
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	6800      	ldr	r0, [r0, #0]
 800b744:	47a0      	blx	r4
									(unsigned char*) httpHeaderBuffer, retBufLen,
									HTTP_SERVER_TIMOUT_MS); //write header
						    FRESULT res;
						    FIL file;
						    uint8_t bytes_read;
						    uint8_t FILE_BUFFER_SIZE=200;
 800b746:	23c8      	movs	r3, #200	@ 0xc8
 800b748:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b74c:	f102 0206 	add.w	r2, r2, #6
 800b750:	7013      	strb	r3, [r2, #0]
						    char file_buffer[1000] = {0};
 800b752:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b756:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	3304      	adds	r3, #4
 800b760:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b764:	2100      	movs	r1, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f004 f9ba 	bl	800fae0 <memset>
						        res = f_open(&file, req, FA_READ);
 800b76c:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800b770:	3b0c      	subs	r3, #12
 800b772:	2201      	movs	r2, #1
 800b774:	f507 51e0 	add.w	r1, r7, #7168	@ 0x1c00
 800b778:	f101 0114 	add.w	r1, r1, #20
 800b77c:	6809      	ldr	r1, [r1, #0]
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fb ff8e 	bl	80076a0 <f_open>
 800b784:	4603      	mov	r3, r0
 800b786:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b78a:	f102 0205 	add.w	r2, r2, #5
 800b78e:	7013      	strb	r3, [r2, #0]
						        if (res == FR_OK) {
 800b790:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b794:	f103 0305 	add.w	r3, r3, #5
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d167      	bne.n	800b86e <http_server+0x17be>
						            // Read the file in chunks and send it to the client
									if (retBufLen != 0) { //case where operation was successful but no content to pass on.
 800b79e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b7a2:	f103 0318 	add.w	r3, r3, #24
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d05a      	beq.n	800b862 <http_server+0x17b2>
						            while ((res = f_read(&file, file_buffer, FILE_BUFFER_SIZE, &bytes_read)) == FR_OK && bytes_read > 0) {
 800b7ac:	e032      	b.n	800b814 <http_server+0x1764>
 800b7ae:	bf00      	nop
 800b7b0:	08012710 	.word	0x08012710
 800b7b4:	20001240 	.word	0x20001240
 800b7b8:	08013138 	.word	0x08013138
 800b7bc:	0801235c 	.word	0x0801235c
 800b7c0:	0801265c 	.word	0x0801265c
 800b7c4:	080123e8 	.word	0x080123e8
 800b7c8:	080126ec 	.word	0x080126ec
 800b7cc:	080124f0 	.word	0x080124f0
						                // Send the file data to the client
						                sprintf(customBuffer,file_buffer);
 800b7d0:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800b7d4:	3a14      	subs	r2, #20
 800b7d6:	f107 0318 	add.w	r3, r7, #24
 800b7da:	3b0c      	subs	r3, #12
 800b7dc:	4611      	mov	r1, r2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f004 f840 	bl	800f864 <siprintf>
											netops->http_net_write(socket, (unsigned char*) customBuffer,
 800b7e4:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b7e8:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	685c      	ldr	r4, [r3, #4]
													strlen(customBuffer),
 800b7f0:	f107 0318 	add.w	r3, r7, #24
 800b7f4:	3b0c      	subs	r3, #12
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7f4 fcf4 	bl	80001e4 <strlen>
 800b7fc:	4603      	mov	r3, r0
											netops->http_net_write(socket, (unsigned char*) customBuffer,
 800b7fe:	461a      	mov	r2, r3
 800b800:	f107 0118 	add.w	r1, r7, #24
 800b804:	390c      	subs	r1, #12
 800b806:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b80a:	f6a3 4034 	subw	r0, r3, #3124	@ 0xc34
 800b80e:	2364      	movs	r3, #100	@ 0x64
 800b810:	6800      	ldr	r0, [r0, #0]
 800b812:	47a0      	blx	r4
						            while ((res = f_read(&file, file_buffer, FILE_BUFFER_SIZE, &bytes_read)) == FR_OK && bytes_read > 0) {
 800b814:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b818:	f103 0306 	add.w	r3, r3, #6
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	f507 53b1 	add.w	r3, r7, #5664	@ 0x1620
 800b822:	f103 031f 	add.w	r3, r3, #31
 800b826:	f507 710e 	add.w	r1, r7, #568	@ 0x238
 800b82a:	3914      	subs	r1, #20
 800b82c:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 800b830:	380c      	subs	r0, #12
 800b832:	f7fc f8fd 	bl	8007a30 <f_read>
 800b836:	4603      	mov	r3, r0
 800b838:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b83c:	f102 0205 	add.w	r2, r2, #5
 800b840:	7013      	strb	r3, [r2, #0]
 800b842:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b846:	f103 0305 	add.w	r3, r3, #5
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d108      	bne.n	800b862 <http_server+0x17b2>
 800b850:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b854:	f103 0318 	add.w	r3, r3, #24
 800b858:	f2a3 53f9 	subw	r3, r3, #1529	@ 0x5f9
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1b6      	bne.n	800b7d0 <http_server+0x1720>
													HTTP_SERVER_TIMOUT_MS);
										}
						            }
						            f_close(&file);
 800b862:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800b866:	3b0c      	subs	r3, #12
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fc fabe 	bl	8007dea <f_close>
						        }
							netops->http_net_disconnect(socket);
 800b86e:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b872:	f6a3 4338 	subw	r3, r3, #3128	@ 0xc38
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f607 4238 	addw	r2, r7, #3128	@ 0xc38
 800b87e:	f6a2 4234 	subw	r2, r2, #3124	@ 0xc34
 800b882:	6810      	ldr	r0, [r2, #0]
 800b884:	4798      	blx	r3
							return 0;
 800b886:	2300      	movs	r3, #0
 800b888:	e05f      	b.n	800b94a <http_server+0x189a>

					}
					break;
			default:
			{
				int retval = http_server_send404(&httpResponse, socket, netops);
 800b88a:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b88e:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800b892:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b896:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800b89a:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800b89e:	6812      	ldr	r2, [r2, #0]
 800b8a0:	6819      	ldr	r1, [r3, #0]
 800b8a2:	f7fe fa29 	bl	8009cf8 <http_server_send404>
 800b8a6:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800b8aa:	f103 030c 	add.w	r3, r3, #12
 800b8ae:	6018      	str	r0, [r3, #0]
				if (retval < 0) {
 800b8b0:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800b8b4:	f103 030c 	add.w	r3, r3, #12
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	da13      	bge.n	800b8e6 <http_server+0x1836>
					PRINT_ERROR("error forming 404 header (%d)\r\n", retval);
 800b8be:	4b26      	ldr	r3, [pc, #152]	@ (800b958 <http_server+0x18a8>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68d8      	ldr	r0, [r3, #12]
 800b8c4:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800b8c8:	f103 030c 	add.w	r3, r3, #12
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	9301      	str	r3, [sp, #4]
 800b8d0:	4b22      	ldr	r3, [pc, #136]	@ (800b95c <http_server+0x18ac>)
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	f240 239b 	movw	r3, #667	@ 0x29b
 800b8d8:	4a21      	ldr	r2, [pc, #132]	@ (800b960 <http_server+0x18b0>)
 800b8da:	4922      	ldr	r1, [pc, #136]	@ (800b964 <http_server+0x18b4>)
 800b8dc:	f003 feee 	bl	800f6bc <fiprintf>
					return -1;
 800b8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e4:	e031      	b.n	800b94a <http_server+0x189a>
				}
				break;
 800b8e6:	bf00      	nop
			}
		}
			break;
 800b8e8:	e02e      	b.n	800b948 <http_server+0x1898>
		default: //currently supporting only GET. for all other requests, respond with not implemented.
		{
			int retval = http_server_send501(&httpResponse, socket, netops);
 800b8ea:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b8ee:	f6a3 4238 	subw	r2, r3, #3128	@ 0xc38
 800b8f2:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 800b8f6:	f6a3 4334 	subw	r3, r3, #3124	@ 0xc34
 800b8fa:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 800b8fe:	6812      	ldr	r2, [r2, #0]
 800b900:	6819      	ldr	r1, [r3, #0]
 800b902:	f7fe fa3b 	bl	8009d7c <http_server_send501>
 800b906:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800b90a:	f103 0308 	add.w	r3, r3, #8
 800b90e:	6018      	str	r0, [r3, #0]
			if (retval < 0) {
 800b910:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800b914:	f103 0308 	add.w	r3, r3, #8
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	da13      	bge.n	800b946 <http_server+0x1896>
				PRINT_ERROR("error forming 501 header (%d)\r\n", retval);
 800b91e:	4b0e      	ldr	r3, [pc, #56]	@ (800b958 <http_server+0x18a8>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68d8      	ldr	r0, [r3, #12]
 800b924:	f507 53de 	add.w	r3, r7, #7104	@ 0x1bc0
 800b928:	f103 0308 	add.w	r3, r3, #8
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	9301      	str	r3, [sp, #4]
 800b930:	4b0a      	ldr	r3, [pc, #40]	@ (800b95c <http_server+0x18ac>)
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	f240 23a6 	movw	r3, #678	@ 0x2a6
 800b938:	4a09      	ldr	r2, [pc, #36]	@ (800b960 <http_server+0x18b0>)
 800b93a:	490b      	ldr	r1, [pc, #44]	@ (800b968 <http_server+0x18b8>)
 800b93c:	f003 febe 	bl	800f6bc <fiprintf>
				return -1;
 800b940:	f04f 33ff 	mov.w	r3, #4294967295
 800b944:	e001      	b.n	800b94a <http_server+0x189a>
			}
			break;
 800b946:	bf00      	nop
		}
		}
		return 0;
 800b948:	2300      	movs	r3, #0
	}
 800b94a:	4618      	mov	r0, r3
 800b94c:	f507 57e1 	add.w	r7, r7, #7200	@ 0x1c20
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bdb0      	pop	{r4, r5, r7, pc}
 800b956:	bf00      	nop
 800b958:	20001240 	.word	0x20001240
 800b95c:	08013138 	.word	0x08013138
 800b960:	0801235c 	.word	0x0801235c
 800b964:	08012380 	.word	0x08012380
 800b968:	080123b4 	.word	0x080123b4

0800b96c <http_localfs_fopen_w>:
static size_t http_localfs_fread_w(void *ptr, size_t size, size_t nmemb, void *fp);
static int http_localfs_fgetc_w(void *fp);
static int http_localfs_fseek_w(void *fp, long offset, int whence);
static int http_localfs_feof_w(void *fp);

static void *http_localfs_fopen_w(const char *filename) { return (void *)http_localfs_fopen(filename); }
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7fd f8bd 	bl	8008af4 <http_localfs_fopen>
 800b97a:	4603      	mov	r3, r0
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <http_localfs_fclose_w>:
static int http_localfs_fclose_w(void *fp) { return http_localfs_fclose((http_localfs_filesystem_fp_t)fp); }
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7fd f8e5 	bl	8008b5c <http_localfs_fclose>
 800b992:	4603      	mov	r3, r0
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <http_localfs_fread_w>:
static size_t http_localfs_fread_w(void *ptr, size_t size, size_t nmemb, void *fp) { return http_localfs_fread(ptr, size, nmemb, (http_localfs_filesystem_fp_t)fp); }
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f7fd f951 	bl	8008c58 <http_localfs_fread>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <http_localfs_fgetc_w>:
static int http_localfs_fgetc_w(void *fp) { return http_localfs_fgetc((http_localfs_filesystem_fp_t)fp); }
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7fd f8eb 	bl	8008ba4 <http_localfs_fgetc>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <http_localfs_fseek_w>:
static int http_localfs_fseek_w(void *fp, long offset, int whence) { return http_localfs_fseek((http_localfs_filesystem_fp_t)fp, offset, whence); }
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f7fd f9a9 	bl	8008d40 <http_localfs_fseek>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <http_localfs_feof_w>:
static int http_localfs_feof_w(void *fp) { return http_localfs_feof((http_localfs_filesystem_fp_t)fp); }
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7fd f909 	bl	8008c18 <http_localfs_feof>
 800ba06:	4603      	mov	r3, r0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <tcpServerSocketEventHandler>:
extern SOCKET tcp_server_socket;

int integerValue=0;

void tcpServerSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	4603      	mov	r3, r0
 800ba18:	603a      	str	r2, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	71bb      	strb	r3, [r7, #6]
	//TODO: check if this is HTTP socket
	switch (u8Msg) {
 800ba20:	79bb      	ldrb	r3, [r7, #6]
 800ba22:	2b07      	cmp	r3, #7
 800ba24:	d006      	beq.n	800ba34 <tcpServerSocketEventHandler+0x24>
 800ba26:	2b07      	cmp	r3, #7
 800ba28:	dc2a      	bgt.n	800ba80 <tcpServerSocketEventHandler+0x70>
 800ba2a:	2b05      	cmp	r3, #5
 800ba2c:	d02a      	beq.n	800ba84 <tcpServerSocketEventHandler+0x74>
 800ba2e:	2b06      	cmp	r3, #6
 800ba30:	d004      	beq.n	800ba3c <tcpServerSocketEventHandler+0x2c>
				PRINT_ERROR("ERROR >> Receive error for Rx socket (Err=%ld).\r\n",gi32HTTPSrvRxLen);
			}
			gbHTTPSrvRecvDone=true;
		}
		break;
		default: break;
 800ba32:	e025      	b.n	800ba80 <tcpServerSocketEventHandler+0x70>
			gbHTTPSrvSendDone=true;
 800ba34:	4b16      	ldr	r3, [pc, #88]	@ (800ba90 <tcpServerSocketEventHandler+0x80>)
 800ba36:	2201      	movs	r2, #1
 800ba38:	701a      	strb	r2, [r3, #0]
		break;
 800ba3a:	e024      	b.n	800ba86 <tcpServerSocketEventHandler+0x76>
			tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]
			gi32HTTPSrvRxLen = pstrRx->s16BufferSize;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba46:	461a      	mov	r2, r3
 800ba48:	4b12      	ldr	r3, [pc, #72]	@ (800ba94 <tcpServerSocketEventHandler+0x84>)
 800ba4a:	601a      	str	r2, [r3, #0]
			if((gi32HTTPSrvRxLen<0) && (gi32HTTPSrvRxLen!=SOCK_ERR_TIMEOUT)) {
 800ba4c:	4b11      	ldr	r3, [pc, #68]	@ (800ba94 <tcpServerSocketEventHandler+0x84>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	da11      	bge.n	800ba78 <tcpServerSocketEventHandler+0x68>
 800ba54:	4b0f      	ldr	r3, [pc, #60]	@ (800ba94 <tcpServerSocketEventHandler+0x84>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f113 0f0d 	cmn.w	r3, #13
 800ba5c:	d00c      	beq.n	800ba78 <tcpServerSocketEventHandler+0x68>
				PRINT_ERROR("ERROR >> Receive error for Rx socket (Err=%ld).\r\n",gi32HTTPSrvRxLen);
 800ba5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba98 <tcpServerSocketEventHandler+0x88>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68d8      	ldr	r0, [r3, #12]
 800ba64:	4b0b      	ldr	r3, [pc, #44]	@ (800ba94 <tcpServerSocketEventHandler+0x84>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba9c <tcpServerSocketEventHandler+0x8c>)
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	2362      	movs	r3, #98	@ 0x62
 800ba70:	4a0b      	ldr	r2, [pc, #44]	@ (800baa0 <tcpServerSocketEventHandler+0x90>)
 800ba72:	490c      	ldr	r1, [pc, #48]	@ (800baa4 <tcpServerSocketEventHandler+0x94>)
 800ba74:	f003 fe22 	bl	800f6bc <fiprintf>
			gbHTTPSrvRecvDone=true;
 800ba78:	4b0b      	ldr	r3, [pc, #44]	@ (800baa8 <tcpServerSocketEventHandler+0x98>)
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	701a      	strb	r2, [r3, #0]
		break;
 800ba7e:	e002      	b.n	800ba86 <tcpServerSocketEventHandler+0x76>
		default: break;
 800ba80:	bf00      	nop
 800ba82:	e000      	b.n	800ba86 <tcpServerSocketEventHandler+0x76>
		break;
 800ba84:	bf00      	nop
	}
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20002714 	.word	0x20002714
 800ba94:	20002718 	.word	0x20002718
 800ba98:	20001240 	.word	0x20001240
 800ba9c:	08013144 	.word	0x08013144
 800baa0:	08012730 	.word	0x08012730
 800baa4:	08012760 	.word	0x08012760
 800baa8:	20002715 	.word	0x20002715

0800baac <http_server_WINC15x0_net_read>:

int http_server_WINC15x0_net_read(int socket, unsigned char *readBuffer, int readBufferLength, int timeoutMs){
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af02      	add	r7, sp, #8
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
	//as of now, read is meant only for HTTP request headers. So, in case there is more data coming fro host
	//allocate a larger buffer in config. Later to accomodate post and other data input methods, we will implement
	// a RX FIFO pool.
	
	gbHTTPSrvRecvDone=false;
 800baba:	4b19      	ldr	r3, [pc, #100]	@ (800bb20 <http_server_WINC15x0_net_read+0x74>)
 800babc:	2200      	movs	r2, #0
 800babe:	701a      	strb	r2, [r3, #0]
	if (SOCK_ERR_NO_ERROR!=recv(socket,readBuffer,readBufferLength,timeoutMs)){
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	b258      	sxtb	r0, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	68b9      	ldr	r1, [r7, #8]
 800bacc:	f003 faea 	bl	800f0a4 <recv>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00f      	beq.n	800baf6 <http_server_WINC15x0_net_read+0x4a>
		PRINT_ERROR("ERROR >> recv failed\r\n");
 800bad6:	4b13      	ldr	r3, [pc, #76]	@ (800bb24 <http_server_WINC15x0_net_read+0x78>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68d8      	ldr	r0, [r3, #12]
 800badc:	4b12      	ldr	r3, [pc, #72]	@ (800bb28 <http_server_WINC15x0_net_read+0x7c>)
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	2372      	movs	r3, #114	@ 0x72
 800bae2:	4a12      	ldr	r2, [pc, #72]	@ (800bb2c <http_server_WINC15x0_net_read+0x80>)
 800bae4:	4912      	ldr	r1, [pc, #72]	@ (800bb30 <http_server_WINC15x0_net_read+0x84>)
 800bae6:	f003 fde9 	bl	800f6bc <fiprintf>
		return -1;
 800baea:	f04f 33ff 	mov.w	r3, #4294967295
 800baee:	e012      	b.n	800bb16 <http_server_WINC15x0_net_read+0x6a>
	}
	//call handle_events until we get rx callback
	while (false==gbHTTPSrvRecvDone){
		m2m_wifi_handle_events(NULL);
 800baf0:	2000      	movs	r0, #0
 800baf2:	f001 fb2b 	bl	800d14c <m2m_wifi_handle_events>
	while (false==gbHTTPSrvRecvDone){
 800baf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bb20 <http_server_WINC15x0_net_read+0x74>)
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	f083 0301 	eor.w	r3, r3, #1
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1f5      	bne.n	800baf0 <http_server_WINC15x0_net_read+0x44>
	}
	
	//length will be updated in the callback
	if (gi32HTTPSrvRxLen>0){
 800bb04:	4b0b      	ldr	r3, [pc, #44]	@ (800bb34 <http_server_WINC15x0_net_read+0x88>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dd02      	ble.n	800bb12 <http_server_WINC15x0_net_read+0x66>
		return gi32HTTPSrvRxLen;
 800bb0c:	4b09      	ldr	r3, [pc, #36]	@ (800bb34 <http_server_WINC15x0_net_read+0x88>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	e001      	b.n	800bb16 <http_server_WINC15x0_net_read+0x6a>
	}

	return -1;
 800bb12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20002715 	.word	0x20002715
 800bb24:	20001240 	.word	0x20001240
 800bb28:	08013160 	.word	0x08013160
 800bb2c:	08012730 	.word	0x08012730
 800bb30:	080127a8 	.word	0x080127a8
 800bb34:	20002718 	.word	0x20002718

0800bb38 <http_server_WINC15x0_net_write>:
int http_server_WINC15x0_net_write(int socket, unsigned char *writeBuffer, int writeBufferLength, int timeoutMs){
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
	//static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
	gbHTTPSrvSendDone=false;
 800bb46:	4b15      	ldr	r3, [pc, #84]	@ (800bb9c <http_server_WINC15x0_net_write+0x64>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	701a      	strb	r2, [r3, #0]
	if (SOCK_ERR_NO_ERROR!=send(socket,writeBuffer,writeBufferLength,timeoutMs)){
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	b258      	sxtb	r0, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	68b9      	ldr	r1, [r7, #8]
 800bb5a:	f003 fa2d 	bl	800efb8 <send>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00f      	beq.n	800bb84 <http_server_WINC15x0_net_write+0x4c>
		PRINT_ERROR("ERROR >> send error");
 800bb64:	4b0e      	ldr	r3, [pc, #56]	@ (800bba0 <http_server_WINC15x0_net_write+0x68>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68d8      	ldr	r0, [r3, #12]
 800bb6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bba4 <http_server_WINC15x0_net_write+0x6c>)
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	2385      	movs	r3, #133	@ 0x85
 800bb70:	4a0d      	ldr	r2, [pc, #52]	@ (800bba8 <http_server_WINC15x0_net_write+0x70>)
 800bb72:	490e      	ldr	r1, [pc, #56]	@ (800bbac <http_server_WINC15x0_net_write+0x74>)
 800bb74:	f003 fda2 	bl	800f6bc <fiprintf>
		return -1;
 800bb78:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7c:	e00a      	b.n	800bb94 <http_server_WINC15x0_net_write+0x5c>
	}
	//wait for send callback . Not essential. but let us do it for now.
	while (false==gbHTTPSrvSendDone){
		m2m_wifi_handle_events(NULL);
 800bb7e:	2000      	movs	r0, #0
 800bb80:	f001 fae4 	bl	800d14c <m2m_wifi_handle_events>
	while (false==gbHTTPSrvSendDone){
 800bb84:	4b05      	ldr	r3, [pc, #20]	@ (800bb9c <http_server_WINC15x0_net_write+0x64>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f083 0301 	eor.w	r3, r3, #1
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1f5      	bne.n	800bb7e <http_server_WINC15x0_net_write+0x46>
	}

	//TODO: figure out how to get actual send length from callback
	//this length will be updated in the callback
	//return gu32MQTTBrokerSendLen;
	return writeBufferLength;
 800bb92:	687b      	ldr	r3, [r7, #4]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20002714 	.word	0x20002714
 800bba0:	20001240 	.word	0x20001240
 800bba4:	08013180 	.word	0x08013180
 800bba8:	08012730 	.word	0x08012730
 800bbac:	080127d4 	.word	0x080127d4

0800bbb0 <http_server_WINC15x0_net_disconnect>:

void http_server_WINC15x0_net_disconnect(int socket){
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	close(socket);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	b25b      	sxtb	r3, r3
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f003 faf7 	bl	800f1b0 <close>
	tcp_server_socket=-1;
 800bbc2:	4b03      	ldr	r3, [pc, #12]	@ (800bbd0 <http_server_WINC15x0_net_disconnect+0x20>)
 800bbc4:	22ff      	movs	r2, #255	@ 0xff
 800bbc6:	701a      	strb	r2, [r3, #0]
}
 800bbc8:	bf00      	nop
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20000000 	.word	0x20000000

0800bbd4 <http_server_timerVal_SSI_replacer_cb>:

/*callbacks to replace SSI string timerVal*/
int http_server_timerVal_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength);
int http_server_timerVal_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
	if (0 != strcmp("timerVal", SSIString)) //not a mandatory check
 800bbe0:	68f9      	ldr	r1, [r7, #12]
 800bbe2:	480f      	ldr	r0, [pc, #60]	@ (800bc20 <http_server_timerVal_SSI_replacer_cb+0x4c>)
 800bbe4:	f7f4 faf4 	bl	80001d0 <strcmp>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d005      	beq.n	800bbfa <http_server_timerVal_SSI_replacer_cb+0x26>
	{
		printf("SSI string missmatch in timerVal callback\r\n");
 800bbee:	480d      	ldr	r0, [pc, #52]	@ (800bc24 <http_server_timerVal_SSI_replacer_cb+0x50>)
 800bbf0:	f003 fdfc 	bl	800f7ec <puts>
		return -1;
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf8:	e00d      	b.n	800bc16 <http_server_timerVal_SSI_replacer_cb+0x42>
	}
	sprintf(replacerBuffer,"%lu",HAL_GetTick());
 800bbfa:	f7f6 f815 	bl	8001c28 <HAL_GetTick>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	461a      	mov	r2, r3
 800bc02:	4909      	ldr	r1, [pc, #36]	@ (800bc28 <http_server_timerVal_SSI_replacer_cb+0x54>)
 800bc04:	68b8      	ldr	r0, [r7, #8]
 800bc06:	f003 fe2d 	bl	800f864 <siprintf>
	replacerBuffer[bufferLength] = 0;
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4413      	add	r3, r2
 800bc10:	2200      	movs	r2, #0
 800bc12:	701a      	strb	r2, [r3, #0]
	return 0;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	080127fc 	.word	0x080127fc
 800bc24:	08012808 	.word	0x08012808
 800bc28:	08012834 	.word	0x08012834

0800bc2c <http_server_timerValCallCount_SSI_replacer_cb>:

int http_server_timerValCallCount_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength);
int http_server_timerValCallCount_SSI_replacer_cb(const char *SSIString, char *replacerBuffer, unsigned int bufferLength)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
	if (0 != strcmp("timerValCC", SSIString)) //not a mandatory check
 800bc38:	68f9      	ldr	r1, [r7, #12]
 800bc3a:	4811      	ldr	r0, [pc, #68]	@ (800bc80 <http_server_timerValCallCount_SSI_replacer_cb+0x54>)
 800bc3c:	f7f4 fac8 	bl	80001d0 <strcmp>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d005      	beq.n	800bc52 <http_server_timerValCallCount_SSI_replacer_cb+0x26>
	{
		printf("SSI string missmatch in timerVal callback\r\n");
 800bc46:	480f      	ldr	r0, [pc, #60]	@ (800bc84 <http_server_timerValCallCount_SSI_replacer_cb+0x58>)
 800bc48:	f003 fdd0 	bl	800f7ec <puts>
		return -1;
 800bc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc50:	e011      	b.n	800bc76 <http_server_timerValCallCount_SSI_replacer_cb+0x4a>
	}
	timerValCC++;
 800bc52:	4b0d      	ldr	r3, [pc, #52]	@ (800bc88 <http_server_timerValCallCount_SSI_replacer_cb+0x5c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3301      	adds	r3, #1
 800bc58:	4a0b      	ldr	r2, [pc, #44]	@ (800bc88 <http_server_timerValCallCount_SSI_replacer_cb+0x5c>)
 800bc5a:	6013      	str	r3, [r2, #0]
	sprintf(replacerBuffer,"%lu",timerValCC);
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc88 <http_server_timerValCallCount_SSI_replacer_cb+0x5c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	461a      	mov	r2, r3
 800bc62:	490a      	ldr	r1, [pc, #40]	@ (800bc8c <http_server_timerValCallCount_SSI_replacer_cb+0x60>)
 800bc64:	68b8      	ldr	r0, [r7, #8]
 800bc66:	f003 fdfd 	bl	800f864 <siprintf>
	replacerBuffer[bufferLength] = 0;
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4413      	add	r3, r2
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]
	return 0;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	08012838 	.word	0x08012838
 800bc84:	08012808 	.word	0x08012808
 800bc88:	2000270c 	.word	0x2000270c
 800bc8c:	08012834 	.word	0x08012834

0800bc90 <httpServerTest_cgiPathFunction>:


int httpServerTest_cgiPathFunction(const char *CGIPath, char *replacerBuffer, unsigned int bufferLength);
int httpServerTest_cgiPathFunction(const char *CGIPath, char *replacerBuffer, unsigned int bufferLength)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
	printf(CGIPath);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f003 fd3d 	bl	800f71c <iprintf>

	if (0 == strcmp(CGIPath, serverTestCGIPath)){
 800bca2:	4b39      	ldr	r3, [pc, #228]	@ (800bd88 <httpServerTest_cgiPathFunction+0xf8>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4619      	mov	r1, r3
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f7f4 fa91 	bl	80001d0 <strcmp>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d148      	bne.n	800bd46 <httpServerTest_cgiPathFunction+0xb6>
	if ((bufferLength <= 0) || NULL == replacerBuffer)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <httpServerTest_cgiPathFunction+0x30>
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <httpServerTest_cgiPathFunction+0x36>
	return -1;
 800bcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc4:	e05c      	b.n	800bd80 <httpServerTest_cgiPathFunction+0xf0>
	char pStatus=0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]

	printf("CGI func called !!!!!!!!!!!!!!!!!!!!");
 800bcca:	4830      	ldr	r0, [pc, #192]	@ (800bd8c <httpServerTest_cgiPathFunction+0xfc>)
 800bccc:	f003 fd26 	bl	800f71c <iprintf>
	BSP_LED_Toggle(LED1);
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f7f5 ff29 	bl	8001b28 <BSP_LED_Toggle>
	if(true==HAL_GPIO_ReadPin(LED1_GPIO_PORT,LED1_PIN)){
 800bcd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bcda:	482d      	ldr	r0, [pc, #180]	@ (800bd90 <httpServerTest_cgiPathFunction+0x100>)
 800bcdc:	f7f6 fab4 	bl	8002248 <HAL_GPIO_ReadPin>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d10e      	bne.n	800bd04 <httpServerTest_cgiPathFunction+0x74>
		BSP_LED_On(LED1);
 800bce6:	2000      	movs	r0, #0
 800bce8:	f7f5 feea 	bl	8001ac0 <BSP_LED_On>
		BSP_LED_On(LED2);
 800bcec:	2001      	movs	r0, #1
 800bcee:	f7f5 fee7 	bl	8001ac0 <BSP_LED_On>
		BSP_LED_On(LED3);
 800bcf2:	2002      	movs	r0, #2
 800bcf4:	f7f5 fee4 	bl	8001ac0 <BSP_LED_On>
		BSP_LED_Off(LED4);
 800bcf8:	2003      	movs	r0, #3
 800bcfa:	f7f5 fefb 	bl	8001af4 <BSP_LED_Off>
		pStatus=1;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75fb      	strb	r3, [r7, #23]
 800bd02:	e015      	b.n	800bd30 <httpServerTest_cgiPathFunction+0xa0>
	}
	else if(false==HAL_GPIO_ReadPin(LED1_GPIO_PORT,LED1_PIN)){
 800bd04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bd08:	4821      	ldr	r0, [pc, #132]	@ (800bd90 <httpServerTest_cgiPathFunction+0x100>)
 800bd0a:	f7f6 fa9d 	bl	8002248 <HAL_GPIO_ReadPin>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10d      	bne.n	800bd30 <httpServerTest_cgiPathFunction+0xa0>
		BSP_LED_Off(LED1);
 800bd14:	2000      	movs	r0, #0
 800bd16:	f7f5 feed 	bl	8001af4 <BSP_LED_Off>
		BSP_LED_Off(LED2);
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	f7f5 feea 	bl	8001af4 <BSP_LED_Off>
		BSP_LED_Off(LED3);
 800bd20:	2002      	movs	r0, #2
 800bd22:	f7f5 fee7 	bl	8001af4 <BSP_LED_Off>
		BSP_LED_On(LED4);
 800bd26:	2003      	movs	r0, #3
 800bd28:	f7f5 feca 	bl	8001ac0 <BSP_LED_On>
		pStatus=0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	75fb      	strb	r3, [r7, #23]
	}
	
	sprintf(replacerBuffer,"{  \"LEDstatus\":  %d }",pStatus);
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
 800bd32:	461a      	mov	r2, r3
 800bd34:	4917      	ldr	r1, [pc, #92]	@ (800bd94 <httpServerTest_cgiPathFunction+0x104>)
 800bd36:	68b8      	ldr	r0, [r7, #8]
 800bd38:	f003 fd94 	bl	800f864 <siprintf>
	return strlen(replacerBuffer);
 800bd3c:	68b8      	ldr	r0, [r7, #8]
 800bd3e:	f7f4 fa51 	bl	80001e4 <strlen>
 800bd42:	4603      	mov	r3, r0
 800bd44:	e01c      	b.n	800bd80 <httpServerTest_cgiPathFunction+0xf0>
	}

	else if(0 == strcmp(CGIPath, "/integerValue.cgi")){
 800bd46:	4914      	ldr	r1, [pc, #80]	@ (800bd98 <httpServerTest_cgiPathFunction+0x108>)
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f7f4 fa41 	bl	80001d0 <strcmp>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d113      	bne.n	800bd7c <httpServerTest_cgiPathFunction+0xec>
		printf("INTEGER!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!");
 800bd54:	4811      	ldr	r0, [pc, #68]	@ (800bd9c <httpServerTest_cgiPathFunction+0x10c>)
 800bd56:	f003 fce1 	bl	800f71c <iprintf>
		integerValue++;
 800bd5a:	4b11      	ldr	r3, [pc, #68]	@ (800bda0 <httpServerTest_cgiPathFunction+0x110>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	4a0f      	ldr	r2, [pc, #60]	@ (800bda0 <httpServerTest_cgiPathFunction+0x110>)
 800bd62:	6013      	str	r3, [r2, #0]
		sprintf(replacerBuffer,"{  \"integerValue\":  %d }",integerValue);
 800bd64:	4b0e      	ldr	r3, [pc, #56]	@ (800bda0 <httpServerTest_cgiPathFunction+0x110>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	490e      	ldr	r1, [pc, #56]	@ (800bda4 <httpServerTest_cgiPathFunction+0x114>)
 800bd6c:	68b8      	ldr	r0, [r7, #8]
 800bd6e:	f003 fd79 	bl	800f864 <siprintf>
		return strlen(replacerBuffer);
 800bd72:	68b8      	ldr	r0, [r7, #8]
 800bd74:	f7f4 fa36 	bl	80001e4 <strlen>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	e001      	b.n	800bd80 <httpServerTest_cgiPathFunction+0xf0>
	}
	else{
		return -1;}
 800bd7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	200011f0 	.word	0x200011f0
 800bd8c:	08012844 	.word	0x08012844
 800bd90:	40020c00 	.word	0x40020c00
 800bd94:	0801286c 	.word	0x0801286c
 800bd98:	08012884 	.word	0x08012884
 800bd9c:	08012898 	.word	0x08012898
 800bda0:	2000271c 	.word	0x2000271c
 800bda4:	080128cc 	.word	0x080128cc

0800bda8 <http_server_WINC15x0_init>:

//http_server_init for WINC1500 based platforms
int http_server_WINC15x0_init(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08e      	sub	sp, #56	@ 0x38
 800bdac:	af02      	add	r7, sp, #8
	http_localfs_deinit(); //just in case previous test left it in stale state
 800bdae:	f7fc fee7 	bl	8008b80 <http_localfs_deinit>
	http_localfs_init();
 800bdb2:	f7fc fe2b 	bl	8008a0c <http_localfs_init>

	//register index file to localfs
	int retval = http_localfs_registerFile(path_index_html, (char *)&index_html, index_html_len, 0);
 800bdb6:	4b43      	ldr	r3, [pc, #268]	@ (800bec4 <http_server_WINC15x0_init+0x11c>)
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	4b43      	ldr	r3, [pc, #268]	@ (800bec8 <http_server_WINC15x0_init+0x120>)
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4942      	ldr	r1, [pc, #264]	@ (800becc <http_server_WINC15x0_init+0x124>)
 800bdc2:	f7fc fe2f 	bl	8008a24 <http_localfs_registerFile>
 800bdc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (retval < 0)
 800bdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	da05      	bge.n	800bdda <http_server_WINC15x0_init+0x32>
	{
		printf("!! test_http_server(registerFile failed)\r\n");
 800bdce:	4840      	ldr	r0, [pc, #256]	@ (800bed0 <http_server_WINC15x0_init+0x128>)
 800bdd0:	f003 fd0c 	bl	800f7ec <puts>
		return -1;
 800bdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd8:	e070      	b.n	800bebc <http_server_WINC15x0_init+0x114>
	}
	retval = http_localfs_registerFile(path_timerVal_ssi, (char *)&timerVal_ssi, timerVal_ssi_len, 0);
 800bdda:	4b3e      	ldr	r3, [pc, #248]	@ (800bed4 <http_server_WINC15x0_init+0x12c>)
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	4b3e      	ldr	r3, [pc, #248]	@ (800bed8 <http_server_WINC15x0_init+0x130>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	2300      	movs	r3, #0
 800bde4:	493d      	ldr	r1, [pc, #244]	@ (800bedc <http_server_WINC15x0_init+0x134>)
 800bde6:	f7fc fe1d 	bl	8008a24 <http_localfs_registerFile>
 800bdea:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (retval < 0)
 800bdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	da05      	bge.n	800bdfe <http_server_WINC15x0_init+0x56>
	{
		printf("!! test_http_server(registerFile failed for timerVal_ssi)\r\n");
 800bdf2:	483b      	ldr	r0, [pc, #236]	@ (800bee0 <http_server_WINC15x0_init+0x138>)
 800bdf4:	f003 fcfa 	bl	800f7ec <puts>
		return -1;
 800bdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfc:	e05e      	b.n	800bebc <http_server_WINC15x0_init+0x114>
	}
	//register local fs fops.
	http_file_fops_t localFSFops;
	http_file_init_fopsStruct(&localFSFops);
 800bdfe:	f107 030c 	add.w	r3, r7, #12
 800be02:	4618      	mov	r0, r3
 800be04:	f7fc fdda 	bl	80089bc <http_file_init_fopsStruct>
	
	localFSFops.fopen = http_localfs_fopen_w;
 800be08:	4b36      	ldr	r3, [pc, #216]	@ (800bee4 <http_server_WINC15x0_init+0x13c>)
 800be0a:	60fb      	str	r3, [r7, #12]
	localFSFops.fclose = http_localfs_fclose_w;
 800be0c:	4b36      	ldr	r3, [pc, #216]	@ (800bee8 <http_server_WINC15x0_init+0x140>)
 800be0e:	613b      	str	r3, [r7, #16]
	localFSFops.fread = http_localfs_fread_w;
 800be10:	4b36      	ldr	r3, [pc, #216]	@ (800beec <http_server_WINC15x0_init+0x144>)
 800be12:	617b      	str	r3, [r7, #20]
	localFSFops.fgetc = http_localfs_fgetc_w;
 800be14:	4b36      	ldr	r3, [pc, #216]	@ (800bef0 <http_server_WINC15x0_init+0x148>)
 800be16:	61bb      	str	r3, [r7, #24]
	localFSFops.fseek = http_localfs_fseek_w;
 800be18:	4b36      	ldr	r3, [pc, #216]	@ (800bef4 <http_server_WINC15x0_init+0x14c>)
 800be1a:	61fb      	str	r3, [r7, #28]
	localFSFops.eof = http_localfs_feof_w;
 800be1c:	4b36      	ldr	r3, [pc, #216]	@ (800bef8 <http_server_WINC15x0_init+0x150>)
 800be1e:	623b      	str	r3, [r7, #32]
	http_file_register_fops(localFSFops);
 800be20:	466a      	mov	r2, sp
 800be22:	f107 031c 	add.w	r3, r7, #28
 800be26:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be2a:	e882 0003 	stmia.w	r2, {r0, r1}
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be34:	f7fc fdd0 	bl	80089d8 <http_file_register_fops>

	//register netops
	http_net_netops_t http_WINC_netops;
	http_net_init_netopsStruct(&http_WINC_netops);
 800be38:	463b      	mov	r3, r7
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fc fff8 	bl	8008e30 <http_net_init_netopsStruct>
	
	http_WINC_netops.http_net_read = http_server_WINC15x0_net_read;
 800be40:	4b2e      	ldr	r3, [pc, #184]	@ (800befc <http_server_WINC15x0_init+0x154>)
 800be42:	603b      	str	r3, [r7, #0]
	http_WINC_netops.http_net_write = http_server_WINC15x0_net_write;
 800be44:	4b2e      	ldr	r3, [pc, #184]	@ (800bf00 <http_server_WINC15x0_init+0x158>)
 800be46:	607b      	str	r3, [r7, #4]
	http_WINC_netops.http_net_disconnect = http_server_WINC15x0_net_disconnect;
 800be48:	4b2e      	ldr	r3, [pc, #184]	@ (800bf04 <http_server_WINC15x0_init+0x15c>)
 800be4a:	60bb      	str	r3, [r7, #8]
	httpNetops = http_net_register_netops(http_WINC_netops);
 800be4c:	463b      	mov	r3, r7
 800be4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be52:	f7fc fffd 	bl	8008e50 <http_net_register_netops>
 800be56:	4603      	mov	r3, r0
 800be58:	4a2b      	ldr	r2, [pc, #172]	@ (800bf08 <http_server_WINC15x0_init+0x160>)
 800be5a:	6013      	str	r3, [r2, #0]
	
	//now register an SSI string. file has already been registered in fs
	http_SSI_deRegister_all();
 800be5c:	f7fc fc5c 	bl	8008718 <http_SSI_deRegister_all>
	http_SSI_replacer_t *SSIReplacementHandle;
	SSIReplacementHandle = http_SSI_register_replacer("timerVal", http_server_timerVal_SSI_replacer_cb);
 800be60:	492a      	ldr	r1, [pc, #168]	@ (800bf0c <http_server_WINC15x0_init+0x164>)
 800be62:	482b      	ldr	r0, [pc, #172]	@ (800bf10 <http_server_WINC15x0_init+0x168>)
 800be64:	f7fc fbe0 	bl	8008628 <http_SSI_register_replacer>
 800be68:	62b8      	str	r0, [r7, #40]	@ 0x28
	if (NULL == SSIReplacementHandle)
 800be6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d105      	bne.n	800be7c <http_server_WINC15x0_init+0xd4>
	{
		printf("http_SSI_register_replacer timerVal failed\r\n");
 800be70:	4828      	ldr	r0, [pc, #160]	@ (800bf14 <http_server_WINC15x0_init+0x16c>)
 800be72:	f003 fcbb 	bl	800f7ec <puts>
		return -1;
 800be76:	f04f 33ff 	mov.w	r3, #4294967295
 800be7a:	e01f      	b.n	800bebc <http_server_WINC15x0_init+0x114>
	}
	
	SSIReplacementHandle = http_SSI_register_replacer("timerValCC", http_server_timerValCallCount_SSI_replacer_cb);
 800be7c:	4926      	ldr	r1, [pc, #152]	@ (800bf18 <http_server_WINC15x0_init+0x170>)
 800be7e:	4827      	ldr	r0, [pc, #156]	@ (800bf1c <http_server_WINC15x0_init+0x174>)
 800be80:	f7fc fbd2 	bl	8008628 <http_SSI_register_replacer>
 800be84:	62b8      	str	r0, [r7, #40]	@ 0x28
	if (NULL == SSIReplacementHandle)
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d105      	bne.n	800be98 <http_server_WINC15x0_init+0xf0>
	{
		printf("http_SSI_register_replacer timerValCC failed\r\n");
 800be8c:	4824      	ldr	r0, [pc, #144]	@ (800bf20 <http_server_WINC15x0_init+0x178>)
 800be8e:	f003 fcad 	bl	800f7ec <puts>
		return -1;
 800be92:	f04f 33ff 	mov.w	r3, #4294967295
 800be96:	e011      	b.n	800bebc <http_server_WINC15x0_init+0x114>
	}
	
	//now register a CGI path function
	http_CGI_pathFunction_t *cgiPathHandle2;

	cgiPathHandle2 = http_CGI_register_pathFunction(serverTestCGIPath, httpServerTest_cgiPathFunction, HTTP_contentType_json);
 800be98:	4b22      	ldr	r3, [pc, #136]	@ (800bf24 <http_server_WINC15x0_init+0x17c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2208      	movs	r2, #8
 800be9e:	4922      	ldr	r1, [pc, #136]	@ (800bf28 <http_server_WINC15x0_init+0x180>)
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fc fca7 	bl	80087f4 <http_CGI_register_pathFunction>
 800bea6:	6278      	str	r0, [r7, #36]	@ 0x24
	if (NULL == cgiPathHandle2)
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <http_server_WINC15x0_init+0x112>
	{
		printf("http_CGI_register_pathFunction failed");
 800beae:	481f      	ldr	r0, [pc, #124]	@ (800bf2c <http_server_WINC15x0_init+0x184>)
 800beb0:	f003 fc34 	bl	800f71c <iprintf>
		return -1;
 800beb4:	f04f 33ff 	mov.w	r3, #4294967295
 800beb8:	e000      	b.n	800bebc <http_server_WINC15x0_init+0x114>
	}
	
	return 0;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3730      	adds	r7, #48	@ 0x30
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	20001094 	.word	0x20001094
 800bec8:	20001090 	.word	0x20001090
 800becc:	20000020 	.word	0x20000020
 800bed0:	080128e8 	.word	0x080128e8
 800bed4:	200011dc 	.word	0x200011dc
 800bed8:	200011d8 	.word	0x200011d8
 800bedc:	20001098 	.word	0x20001098
 800bee0:	08012914 	.word	0x08012914
 800bee4:	0800b96d 	.word	0x0800b96d
 800bee8:	0800b985 	.word	0x0800b985
 800beec:	0800b99d 	.word	0x0800b99d
 800bef0:	0800b9c1 	.word	0x0800b9c1
 800bef4:	0800b9d9 	.word	0x0800b9d9
 800bef8:	0800b9f9 	.word	0x0800b9f9
 800befc:	0800baad 	.word	0x0800baad
 800bf00:	0800bb39 	.word	0x0800bb39
 800bf04:	0800bbb1 	.word	0x0800bbb1
 800bf08:	20002710 	.word	0x20002710
 800bf0c:	0800bbd5 	.word	0x0800bbd5
 800bf10:	080127fc 	.word	0x080127fc
 800bf14:	08012950 	.word	0x08012950
 800bf18:	0800bc2d 	.word	0x0800bc2d
 800bf1c:	08012838 	.word	0x08012838
 800bf20:	0801297c 	.word	0x0801297c
 800bf24:	200011f0 	.word	0x200011f0
 800bf28:	0800bc91 	.word	0x0800bc91
 800bf2c:	080129ac 	.word	0x080129ac

0800bf30 <imu_readings>:
int acc[]={8,9,10,11,12};
int mag[]={81,54,10,1,22};
int i=0;


int imu_readings(char *imuBuffer, unsigned int bufferLength){
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af02      	add	r7, sp, #8
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
	if(i>=4){
 800bf3a:	4b15      	ldr	r3, [pc, #84]	@ (800bf90 <imu_readings+0x60>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	dd03      	ble.n	800bf4a <imu_readings+0x1a>
		i=0;
 800bf42:	4b13      	ldr	r3, [pc, #76]	@ (800bf90 <imu_readings+0x60>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	e004      	b.n	800bf54 <imu_readings+0x24>
	}
	else{
		i+=1;
 800bf4a:	4b11      	ldr	r3, [pc, #68]	@ (800bf90 <imu_readings+0x60>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	4a0f      	ldr	r2, [pc, #60]	@ (800bf90 <imu_readings+0x60>)
 800bf52:	6013      	str	r3, [r2, #0]
	}
	sprintf(imuBuffer,"{  \"accelerometer\":  %d , \"gyroscope\":  %d , \"magnetometer\":  %d }",acc[i],gyro[i],mag[i]);
 800bf54:	4b0e      	ldr	r3, [pc, #56]	@ (800bf90 <imu_readings+0x60>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a0e      	ldr	r2, [pc, #56]	@ (800bf94 <imu_readings+0x64>)
 800bf5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf5e:	4b0c      	ldr	r3, [pc, #48]	@ (800bf90 <imu_readings+0x60>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	490d      	ldr	r1, [pc, #52]	@ (800bf98 <imu_readings+0x68>)
 800bf64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bf68:	4b09      	ldr	r3, [pc, #36]	@ (800bf90 <imu_readings+0x60>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	480b      	ldr	r0, [pc, #44]	@ (800bf9c <imu_readings+0x6c>)
 800bf6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	460b      	mov	r3, r1
 800bf76:	490a      	ldr	r1, [pc, #40]	@ (800bfa0 <imu_readings+0x70>)
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f003 fc73 	bl	800f864 <siprintf>
	return strlen(imuBuffer);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7f4 f930 	bl	80001e4 <strlen>
 800bf84:	4603      	mov	r3, r0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	20002720 	.word	0x20002720
 800bf94:	20001208 	.word	0x20001208
 800bf98:	200011f4 	.word	0x200011f4
 800bf9c:	2000121c 	.word	0x2000121c
 800bfa0:	080129d4 	.word	0x080129d4

0800bfa4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 800bfaa:	2340      	movs	r3, #64	@ 0x40
 800bfac:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfbe:	1d3b      	adds	r3, r7, #4
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4820      	ldr	r0, [pc, #128]	@ (800c044 <init_chip_pins+0xa0>)
 800bfc4:	f7f5 ffa4 	bl	8001f10 <HAL_GPIO_Init>



    GPIO_InitStruct.Pin   = CONF_WINC_PIN_WAKE;
 800bfc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bfcc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfce:	1d3b      	adds	r3, r7, #4
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	481d      	ldr	r0, [pc, #116]	@ (800c048 <init_chip_pins+0xa4>)
 800bfd4:	f7f5 ff9c 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_POWER_ENABLE;
 800bfd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfdc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfde:	1d3b      	adds	r3, r7, #4
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	481a      	ldr	r0, [pc, #104]	@ (800c04c <init_chip_pins+0xa8>)
 800bfe4:	f7f5 ff94 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE;
 800bfe8:	2320      	movs	r3, #32
 800bfea:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE, &GPIO_InitStruct);
 800bfec:	1d3b      	adds	r3, r7, #4
 800bfee:	4619      	mov	r1, r3
 800bff0:	4815      	ldr	r0, [pc, #84]	@ (800c048 <init_chip_pins+0xa4>)
 800bff2:	f7f5 ff8d 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bff6:	2301      	movs	r3, #1
 800bff8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bffa:	2301      	movs	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 800bffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c002:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c004:	1d3b      	adds	r3, r7, #4
 800c006:	4619      	mov	r1, r3
 800c008:	4810      	ldr	r0, [pc, #64]	@ (800c04c <init_chip_pins+0xa8>)
 800c00a:	f7f5 ff81 	bl	8001f10 <HAL_GPIO_Init>
    /* Set INIT value */
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
 800c00e:	2200      	movs	r2, #0
 800c010:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c014:	480d      	ldr	r0, [pc, #52]	@ (800c04c <init_chip_pins+0xa8>)
 800c016:	f7f6 f92f 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
 800c01a:	2201      	movs	r2, #1
 800c01c:	2120      	movs	r1, #32
 800c01e:	480a      	ldr	r0, [pc, #40]	@ (800c048 <init_chip_pins+0xa4>)
 800c020:	f7f6 f92a 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800c024:	2201      	movs	r2, #1
 800c026:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c02a:	4808      	ldr	r0, [pc, #32]	@ (800c04c <init_chip_pins+0xa8>)
 800c02c:	f7f6 f924 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 800c030:	2201      	movs	r2, #1
 800c032:	2140      	movs	r1, #64	@ 0x40
 800c034:	4803      	ldr	r0, [pc, #12]	@ (800c044 <init_chip_pins+0xa0>)
 800c036:	f7f6 f91f 	bl	8002278 <HAL_GPIO_WritePin>

}
 800c03a:	bf00      	nop
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	40020800 	.word	0x40020800
 800c048:	40020400 	.word	0x40020400
 800c04c:	40020000 	.word	0x40020000

0800c050 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 800c054:	f7ff ffa6 	bl	800bfa4 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800c058:	f000 f804 	bl	800c064 <nm_bsp_reset>

	return M2M_SUCCESS;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800c068:	2201      	movs	r2, #1
 800c06a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c06e:	4814      	ldr	r0, [pc, #80]	@ (800c0c0 <nm_bsp_reset+0x5c>)
 800c070:	f7f6 f902 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c074:	2064      	movs	r0, #100	@ 0x64
 800c076:	f7f5 fde3 	bl	8001c40 <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800c07a:	2200      	movs	r2, #0
 800c07c:	2120      	movs	r1, #32
 800c07e:	4811      	ldr	r0, [pc, #68]	@ (800c0c4 <nm_bsp_reset+0x60>)
 800c080:	f7f6 f8fa 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c084:	2064      	movs	r0, #100	@ 0x64
 800c086:	f7f5 fddb 	bl	8001c40 <HAL_Delay>

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800c08a:	2201      	movs	r2, #1
 800c08c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c090:	480b      	ldr	r0, [pc, #44]	@ (800c0c0 <nm_bsp_reset+0x5c>)
 800c092:	f7f6 f8f1 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c096:	2064      	movs	r0, #100	@ 0x64
 800c098:	f7f5 fdd2 	bl	8001c40 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 800c09c:	2200      	movs	r2, #0
 800c09e:	2140      	movs	r1, #64	@ 0x40
 800c0a0:	4809      	ldr	r0, [pc, #36]	@ (800c0c8 <nm_bsp_reset+0x64>)
 800c0a2:	f7f6 f8e9 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c0a6:	2064      	movs	r0, #100	@ 0x64
 800c0a8:	f7f5 fdca 	bl	8001c40 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	2140      	movs	r1, #64	@ 0x40
 800c0b0:	4805      	ldr	r0, [pc, #20]	@ (800c0c8 <nm_bsp_reset+0x64>)
 800c0b2:	f7f6 f8e1 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c0b6:	2064      	movs	r0, #100	@ 0x64
 800c0b8:	f7f5 fdc2 	bl	8001c40 <HAL_Delay>

}
 800c0bc:	bf00      	nop
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	40020000 	.word	0x40020000
 800c0c4:	40020400 	.word	0x40020400
 800c0c8:	40020800 	.word	0x40020800

0800c0cc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7f5 fdb3 	bl	8001c40 <HAL_Delay>
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOB_CLK_ENABLE();
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60bb      	str	r3, [r7, #8]
 800c0f0:	4b12      	ldr	r3, [pc, #72]	@ (800c13c <nm_bsp_register_isr+0x58>)
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0f4:	4a11      	ldr	r2, [pc, #68]	@ (800c13c <nm_bsp_register_isr+0x58>)
 800c0f6:	f043 0302 	orr.w	r3, r3, #2
 800c0fa:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c13c <nm_bsp_register_isr+0x58>)
 800c0fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	60bb      	str	r3, [r7, #8]
 800c106:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800c108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c10c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800c10e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c118:	f107 030c 	add.w	r3, r7, #12
 800c11c:	4619      	mov	r1, r3
 800c11e:	4808      	ldr	r0, [pc, #32]	@ (800c140 <nm_bsp_register_isr+0x5c>)
 800c120:	f7f5 fef6 	bl	8001f10 <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 800c124:	2200      	movs	r2, #0
 800c126:	2100      	movs	r1, #0
 800c128:	2028      	movs	r0, #40	@ 0x28
 800c12a:	f7f5 feac 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 800c12e:	2028      	movs	r0, #40	@ 0x28
 800c130:	f7f5 fec5 	bl	8001ebe <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 800c134:	bf00      	nop
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	40023800 	.word	0x40023800
 800c140:	40020400 	.word	0x40020400

0800c144 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d108      	bne.n	800c166 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 800c154:	2200      	movs	r2, #0
 800c156:	2101      	movs	r1, #1
 800c158:	2028      	movs	r0, #40	@ 0x28
 800c15a:	f7f5 fe94 	bl	8001e86 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c15e:	2028      	movs	r0, #40	@ 0x28
 800c160:	f7f5 fead 	bl	8001ebe <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 800c164:	e002      	b.n	800c16c <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c166:	2028      	movs	r0, #40	@ 0x28
 800c168:	f7f5 feb7 	bl	8001eda <HAL_NVIC_DisableIRQ>
}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
    if (select)
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d006      	beq.n	800c192 <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800c184:	2200      	movs	r2, #0
 800c186:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c18a:	4807      	ldr	r0, [pc, #28]	@ (800c1a8 <spi_select_slave+0x34>)
 800c18c:	f7f6 f874 	bl	8002278 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 800c190:	e005      	b.n	800c19e <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c192:	2201      	movs	r2, #1
 800c194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c198:	4803      	ldr	r0, [pc, #12]	@ (800c1a8 <spi_select_slave+0x34>)
 800c19a:	f7f6 f86d 	bl	8002278 <HAL_GPIO_WritePin>
}
 800c19e:	bf00      	nop
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	40020000 	.word	0x40020000

0800c1ac <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af02      	add	r7, sp, #8
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	f7ff ffda 	bl	800c174 <spi_select_slave>
    
    
    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10b      	bne.n	800c1de <spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 800c1c6:	88fb      	ldrh	r3, [r7, #6]
 800c1c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c1cc:	9200      	str	r2, [sp, #0]
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	491a      	ldr	r1, [pc, #104]	@ (800c23c <spi_rw+0x90>)
 800c1d2:	481b      	ldr	r0, [pc, #108]	@ (800c240 <spi_rw+0x94>)
 800c1d4:	f7f7 fd21 	bl	8003c1a <HAL_SPI_TransmitReceive>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	75fb      	strb	r3, [r7, #23]
 800c1dc:	e01f      	b.n	800c21e <spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d111      	bne.n	800c208 <spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 800c1e4:	88fb      	ldrh	r3, [r7, #6]
 800c1e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c1ea:	9200      	str	r2, [sp, #0]
 800c1ec:	4a13      	ldr	r2, [pc, #76]	@ (800c23c <spi_rw+0x90>)
 800c1ee:	68f9      	ldr	r1, [r7, #12]
 800c1f0:	4813      	ldr	r0, [pc, #76]	@ (800c240 <spi_rw+0x94>)
 800c1f2:	f7f7 fd12 	bl	8003c1a <HAL_SPI_TransmitReceive>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 800c1fa:	88fb      	ldrh	r3, [r7, #6]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	2100      	movs	r1, #0
 800c200:	480e      	ldr	r0, [pc, #56]	@ (800c23c <spi_rw+0x90>)
 800c202:	f003 fc6d 	bl	800fae0 <memset>
 800c206:	e00a      	b.n	800c21e <spi_rw+0x72>
    }
    else
    {     
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 800c208:	88fb      	ldrh	r3, [r7, #6]
 800c20a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c20e:	9200      	str	r2, [sp, #0]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	68f9      	ldr	r1, [r7, #12]
 800c214:	480a      	ldr	r0, [pc, #40]	@ (800c240 <spi_rw+0x94>)
 800c216:	f7f7 fd00 	bl	8003c1a <HAL_SPI_TransmitReceive>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]
    } 
    
    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <spi_rw+0x7e>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 800c224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c228:	e003      	b.n	800c232 <spi_rw+0x86>
    }
    
  	spi_select_slave(false);
 800c22a:	2000      	movs	r0, #0
 800c22c:	f7ff ffa2 	bl	800c174 <spi_select_slave>

	return M2M_SUCCESS;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	2000277c 	.word	0x2000277c
 800c240:	20002724 	.word	0x20002724

0800c244 <nm_bus_wifi_spi_init>:
#endif
#endif //CONF_WINC_USE_SPI

void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* Peripheral clock enable */
    SPI_WIFI_CLK_ENABLE();
 800c24c:	2300      	movs	r3, #0
 800c24e:	60bb      	str	r3, [r7, #8]
 800c250:	4b1b      	ldr	r3, [pc, #108]	@ (800c2c0 <nm_bus_wifi_spi_init+0x7c>)
 800c252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c254:	4a1a      	ldr	r2, [pc, #104]	@ (800c2c0 <nm_bus_wifi_spi_init+0x7c>)
 800c256:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c25a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c25c:	4b18      	ldr	r3, [pc, #96]	@ (800c2c0 <nm_bus_wifi_spi_init+0x7c>)
 800c25e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c264:	60bb      	str	r3, [r7, #8]
 800c266:	68bb      	ldr	r3, [r7, #8]

    /* Configure GPIO pin : PA4 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = SPI_WIFI_CS_PIN;
 800c268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c26c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800c26e:	2301      	movs	r3, #1
 800c270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800c272:	2301      	movs	r3, #1
 800c274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c276:	2303      	movs	r3, #3
 800c278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_CS_GPIO_PORT, &GPIO_InitStruct);
 800c27e:	f107 030c 	add.w	r3, r7, #12
 800c282:	4619      	mov	r1, r3
 800c284:	480f      	ldr	r0, [pc, #60]	@ (800c2c4 <nm_bus_wifi_spi_init+0x80>)
 800c286:	f7f5 fe43 	bl	8001f10 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c28a:	2201      	movs	r2, #1
 800c28c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c290:	480c      	ldr	r0, [pc, #48]	@ (800c2c4 <nm_bus_wifi_spi_init+0x80>)
 800c292:	f7f5 fff1 	bl	8002278 <HAL_GPIO_WritePin>
    /**SPIx GPIO Configuration
    PB3     ------> SPI_WIFI_SCK
    PB4     ------> SPI_WIFI_MISO
    PB5     ------> SPI_WIFI_MOSI
    */
    GPIO_InitStruct.Pin = SPI_WIFI_SCK_PIN|SPI_WIFI_MISO_PIN|SPI_WIFI_MOSI_PIN;
 800c296:	23e0      	movs	r3, #224	@ 0xe0
 800c298:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c29a:	2302      	movs	r3, #2
 800c29c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c29e:	2302      	movs	r3, #2
 800c2a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = SPI3_WIFI_AF;
 800c2a6:	2305      	movs	r3, #5
 800c2a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800c2aa:	f107 030c 	add.w	r3, r7, #12
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4804      	ldr	r0, [pc, #16]	@ (800c2c4 <nm_bus_wifi_spi_init+0x80>)
 800c2b2:	f7f5 fe2d 	bl	8001f10 <HAL_GPIO_Init>
}
 800c2b6:	bf00      	nop
 800c2b8:	3720      	adds	r7, #32
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	40023800 	.word	0x40023800
 800c2c4:	40020000 	.word	0x40020000

0800c2c8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */
	printf("nm_bus_wrapper_stm32f407.c:\t\t\tInitializing SPI interface\n");
 800c2d4:	481c      	ldr	r0, [pc, #112]	@ (800c348 <nm_bus_init+0x80>)
 800c2d6:	f003 fa89 	bl	800f7ec <puts>
	hspiWifi.Instance			   = SPI_WIFI;
 800c2da:	4b1c      	ldr	r3, [pc, #112]	@ (800c34c <nm_bus_init+0x84>)
 800c2dc:	4a1c      	ldr	r2, [pc, #112]	@ (800c350 <nm_bus_init+0x88>)
 800c2de:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800c2e0:	4b1a      	ldr	r3, [pc, #104]	@ (800c34c <nm_bus_init+0x84>)
 800c2e2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c2e6:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 800c2e8:	4b18      	ldr	r3, [pc, #96]	@ (800c34c <nm_bus_init+0x84>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 800c2ee:	4b17      	ldr	r3, [pc, #92]	@ (800c34c <nm_bus_init+0x84>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 800c2f4:	4b15      	ldr	r3, [pc, #84]	@ (800c34c <nm_bus_init+0x84>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 800c2fa:	4b14      	ldr	r3, [pc, #80]	@ (800c34c <nm_bus_init+0x84>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 800c300:	4b12      	ldr	r3, [pc, #72]	@ (800c34c <nm_bus_init+0x84>)
 800c302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c306:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c308:	4b10      	ldr	r3, [pc, #64]	@ (800c34c <nm_bus_init+0x84>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 800c30e:	4b0f      	ldr	r3, [pc, #60]	@ (800c34c <nm_bus_init+0x84>)
 800c310:	2200      	movs	r2, #0
 800c312:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 800c314:	4b0d      	ldr	r3, [pc, #52]	@ (800c34c <nm_bus_init+0x84>)
 800c316:	2200      	movs	r2, #0
 800c318:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800c31a:	4b0c      	ldr	r3, [pc, #48]	@ (800c34c <nm_bus_init+0x84>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 800c320:	4b0a      	ldr	r3, [pc, #40]	@ (800c34c <nm_bus_init+0x84>)
 800c322:	220a      	movs	r2, #10
 800c324:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 800c326:	4809      	ldr	r0, [pc, #36]	@ (800c34c <nm_bus_init+0x84>)
 800c328:	f7f7 fbee 	bl	8003b08 <HAL_SPI_Init>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
	}

	HAL_SPI_MspInit(&hspiWifi);
 800c32c:	4807      	ldr	r0, [pc, #28]	@ (800c34c <nm_bus_init+0x84>)
 800c32e:	f7f5 fa11 	bl	8001754 <HAL_SPI_MspInit>


	nm_bsp_reset();
 800c332:	f7ff fe97 	bl	800c064 <nm_bsp_reset>
	nm_bsp_sleep(1);
 800c336:	2001      	movs	r0, #1
 800c338:	f7ff fec8 	bl	800c0cc <nm_bsp_sleep>
	return result;
 800c33c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	08012a18 	.word	0x08012a18
 800c34c:	20002724 	.word	0x20002724
 800c350:	40013000 	.word	0x40013000

0800c354 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	6039      	str	r1, [r7, #0]
 800c35e:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 800c364:	79fb      	ldrb	r3, [r7, #7]
 800c366:	2b03      	cmp	r3, #3
 800c368:	d10d      	bne.n	800c386 <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	6818      	ldr	r0, [r3, #0]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	6859      	ldr	r1, [r3, #4]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	891b      	ldrh	r3, [r3, #8]
 800c37a:	461a      	mov	r2, r3
 800c37c:	f7ff ff16 	bl	800c1ac <spi_rw>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c384:	e002      	b.n	800c38c <nm_bus_ioctl+0x38>
		default:
			s8Ret = -1;
 800c386:	23ff      	movs	r3, #255	@ 0xff
 800c388:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
			break;
 800c38a:	bf00      	nop
	}

	return s8Ret;
 800c38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800c398:	b480      	push	{r7}
 800c39a:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d010      	beq.n	800c3dc <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	781a      	ldrb	r2, [r3, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	701a      	strb	r2, [r3, #0]
		pDst++;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	60fb      	str	r3, [r7, #12]
		pSrc++;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	607b      	str	r3, [r7, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1ef      	bne.n	800c3ba <m2m_memcpy+0x12>
 800c3da:	e000      	b.n	800c3de <m2m_memcpy+0x36>
	if(sz == 0) return;
 800c3dc:	bf00      	nop
}
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00c      	beq.n	800c416 <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	7afa      	ldrb	r2, [r7, #11]
 800c400:	701a      	strb	r2, [r3, #0]
		pBuf++;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	3301      	adds	r3, #1
 800c406:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	607b      	str	r3, [r7, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1f3      	bne.n	800c3fc <m2m_memset+0x14>
 800c414:	e000      	b.n	800c418 <m2m_memset+0x30>
	if(sz == 0) return;
 800c416:	bf00      	nop
}
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 800c42e:	e005      	b.n	800c43c <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 800c430:	89fb      	ldrh	r3, [r7, #14]
 800c432:	3301      	adds	r3, #1
 800c434:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3301      	adds	r3, #1
 800c43a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1f5      	bne.n	800c430 <m2m_strlen+0xe>
	}
	return u16StrLen;
 800c444:	89fb      	ldrh	r3, [r7, #14]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
	...

0800c454 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

void isr(void)
{
 800c454:	b480      	push	{r7}
 800c456:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 800c458:	4b05      	ldr	r3, [pc, #20]	@ (800c470 <isr+0x1c>)
 800c45a:	78db      	ldrb	r3, [r3, #3]
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	3301      	adds	r3, #1
 800c460:	b2da      	uxtb	r2, r3
 800c462:	4b03      	ldr	r3, [pc, #12]	@ (800c470 <isr+0x1c>)
 800c464:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 800c466:	bf00      	nop
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	200028a8 	.word	0x200028a8

0800c474 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800c47a:	2300      	movs	r3, #0
 800c47c:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 800c47e:	4b14      	ldr	r3, [pc, #80]	@ (800c4d0 <hif_set_rx_done+0x5c>)
 800c480:	2200      	movs	r2, #0
 800c482:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 800c484:	2001      	movs	r0, #1
 800c486:	f7ff fe5d 	bl	800c144 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800c48a:	463b      	mov	r3, r7
 800c48c:	4619      	mov	r1, r3
 800c48e:	f241 0070 	movw	r0, #4208	@ 0x1070
 800c492:	f001 f99c 	bl	800d7ce <nm_read_reg_with_ret>
 800c496:	4603      	mov	r3, r0
 800c498:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10f      	bne.n	800c4c2 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	f043 0302 	orr.w	r3, r3, #2
 800c4a8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	f241 0070 	movw	r0, #4208	@ 0x1070
 800c4b2:	f001 f99a 	bl	800d7ea <nm_write_reg>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c4ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4be:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 800c4c0:	e000      	b.n	800c4c4 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 800c4c2:	bf00      	nop
	return ret;
 800c4c4:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	200028a8 	.word	0x200028a8

0800c4d4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	603a      	str	r2, [r7, #0]
 800c4de:	71fb      	strb	r3, [r7, #7]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	80bb      	strh	r3, [r7, #4]


}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800c4fa:	4b14      	ldr	r3, [pc, #80]	@ (800c54c <hif_chip_wake+0x5c>)
 800c4fc:	789b      	ldrb	r3, [r3, #2]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 800c504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c508:	e01c      	b.n	800c544 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800c50a:	4b10      	ldr	r3, [pc, #64]	@ (800c54c <hif_chip_wake+0x5c>)
 800c50c:	785b      	ldrb	r3, [r3, #1]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10c      	bne.n	800c52e <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c514:	4b0d      	ldr	r3, [pc, #52]	@ (800c54c <hif_chip_wake+0x5c>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d007      	beq.n	800c52e <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 800c51e:	f000 ff93 	bl	800d448 <chip_wake>
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d107      	bne.n	800c53e <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 800c52e:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <hif_chip_wake+0x5c>)
 800c530:	785b      	ldrb	r3, [r3, #1]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	3301      	adds	r3, #1
 800c536:	b2da      	uxtb	r2, r3
 800c538:	4b04      	ldr	r3, [pc, #16]	@ (800c54c <hif_chip_wake+0x5c>)
 800c53a:	705a      	strb	r2, [r3, #1]
 800c53c:	e000      	b.n	800c540 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 800c53e:	bf00      	nop
ERR1:
	return ret;
 800c540:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	200028a8 	.word	0x200028a8

0800c550 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 800c550:	b480      	push	{r7}
 800c552:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 800c554:	4b08      	ldr	r3, [pc, #32]	@ (800c578 <hif_chip_sleep_sc+0x28>)
 800c556:	785b      	ldrb	r3, [r3, #1]
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d006      	beq.n	800c56c <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 800c55e:	4b06      	ldr	r3, [pc, #24]	@ (800c578 <hif_chip_sleep_sc+0x28>)
 800c560:	785b      	ldrb	r3, [r3, #1]
 800c562:	b2db      	uxtb	r3, r3
 800c564:	3b01      	subs	r3, #1
 800c566:	b2da      	uxtb	r2, r3
 800c568:	4b03      	ldr	r3, [pc, #12]	@ (800c578 <hif_chip_sleep_sc+0x28>)
 800c56a:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	200028a8 	.word	0x200028a8

0800c57c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c582:	2300      	movs	r3, #0
 800c584:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 800c586:	4b12      	ldr	r3, [pc, #72]	@ (800c5d0 <hif_chip_sleep+0x54>)
 800c588:	785b      	ldrb	r3, [r3, #1]
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 800c590:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d0 <hif_chip_sleep+0x54>)
 800c592:	785b      	ldrb	r3, [r3, #1]
 800c594:	b2db      	uxtb	r3, r3
 800c596:	3b01      	subs	r3, #1
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <hif_chip_sleep+0x54>)
 800c59c:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 800c59e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <hif_chip_sleep+0x54>)
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10c      	bne.n	800c5c2 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c5a8:	4b09      	ldr	r3, [pc, #36]	@ (800c5d0 <hif_chip_sleep+0x54>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d007      	beq.n	800c5c2 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 800c5b2:	f000 fee5 	bl	800d380 <chip_sleep>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	e000      	b.n	800c5c4 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 800c5c2:	bf00      	nop
	return ret;
 800c5c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	200028a8 	.word	0x200028a8

0800c5d4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 800c5dc:	2228      	movs	r2, #40	@ 0x28
 800c5de:	2100      	movs	r1, #0
 800c5e0:	4807      	ldr	r0, [pc, #28]	@ (800c600 <hif_init+0x2c>)
 800c5e2:	f7ff ff01 	bl	800c3e8 <m2m_memset>
	nm_bsp_register_isr(isr);
 800c5e6:	4807      	ldr	r0, [pc, #28]	@ (800c604 <hif_init+0x30>)
 800c5e8:	f7ff fd7c 	bl	800c0e4 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 800c5ec:	4906      	ldr	r1, [pc, #24]	@ (800c608 <hif_init+0x34>)
 800c5ee:	2003      	movs	r0, #3
 800c5f0:	f000 faca 	bl	800cb88 <hif_register_cb>
	return M2M_SUCCESS;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	200028a8 	.word	0x200028a8
 800c604:	0800c455 	.word	0x0800c455
 800c608:	0800c4d5 	.word	0x0800c4d5

0800c60c <hif_send>:
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af00      	add	r7, sp, #0
 800c612:	603a      	str	r2, [r7, #0]
 800c614:	461a      	mov	r2, r3
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
 800c61a:	460b      	mov	r3, r1
 800c61c:	71bb      	strb	r3, [r7, #6]
 800c61e:	4613      	mov	r3, r2
 800c620:	80bb      	strh	r3, [r7, #4]
    /* temp is 16 bit variable used to read a volatile memory location to
       pass to function/macro, which is not using volatile variable.
       it is done due to IAR warning.
    */
    uint16  temp;
	sint8	ret = M2M_ERR_SEND;
 800c622:	23ff      	movs	r3, #255	@ 0xff
 800c624:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 800c626:	79bb      	ldrb	r3, [r7, #6]
 800c628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 800c634:	2308      	movs	r3, #8
 800c636:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 800c638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d009      	beq.n	800c652 <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 800c63e:	8b7b      	ldrh	r3, [r7, #26]
 800c640:	b29a      	uxth	r2, r3
 800c642:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800c644:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c646:	440b      	add	r3, r1
 800c648:	b29b      	uxth	r3, r3
 800c64a:	4413      	add	r3, r2
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	837b      	strh	r3, [r7, #26]
 800c650:	e005      	b.n	800c65e <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 800c652:	8b7b      	ldrh	r3, [r7, #26]
 800c654:	b29a      	uxth	r2, r3
 800c656:	88bb      	ldrh	r3, [r7, #4]
 800c658:	4413      	add	r3, r2
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	837b      	strh	r3, [r7, #26]
	}
	ret = hif_chip_wake();
 800c65e:	f7ff ff47 	bl	800c4f0 <hif_chip_wake>
 800c662:	4603      	mov	r3, r0
 800c664:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 800c666:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f040 80e6 	bne.w	800c83c <hif_send+0x230>
	{
		volatile uint32 reg, dma_addr = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 800c678:	2300      	movs	r3, #0
 800c67a:	617b      	str	r3, [r7, #20]
        temp = (uint16)strHif.u16Length;
 800c67c:	8b7b      	ldrh	r3, [r7, #26]
 800c67e:	83bb      	strh	r3, [r7, #28]
		reg |= (uint32)u8Gid;
 800c680:	79fa      	ldrb	r2, [r7, #7]
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	4313      	orrs	r3, r2
 800c686:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 800c688:	79bb      	ldrb	r3, [r7, #6]
 800c68a:	021a      	lsls	r2, r3, #8
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	4313      	orrs	r3, r2
 800c690:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)temp<<16);
 800c692:	8bbb      	ldrh	r3, [r7, #28]
 800c694:	041a      	lsls	r2, r3, #16
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	4313      	orrs	r3, r2
 800c69a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	f241 008c 	movw	r0, #4236	@ 0x108c
 800c6a4:	f001 f8a1 	bl	800d7ea <nm_write_reg>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c6ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f040 80b7 	bne.w	800c824 <hif_send+0x218>

		reg = 0UL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f043 0302 	orr.w	r3, r3, #2
 800c6c0:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	f241 0078 	movw	r0, #4216	@ 0x1078
 800c6ca:	f001 f88e 	bl	800d7ea <nm_write_reg>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c6d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f040 80a6 	bne.w	800c828 <hif_send+0x21c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	613b      	str	r3, [r7, #16]

		for(cnt = 0; cnt < 1000; cnt ++)
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	81fb      	strh	r3, [r7, #14]
 800c6e4:	e02e      	b.n	800c744 <hif_send+0x138>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 800c6e6:	f107 0314 	add.w	r3, r7, #20
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	f241 0078 	movw	r0, #4216	@ 0x1078
 800c6f0:	f001 f86d 	bl	800d7ce <nm_read_reg_with_ret>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 800c6f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d127      	bne.n	800c750 <hif_send+0x144>
			/*
			 * If it takes too long to get a response, the slow down to
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 800c700:	89fb      	ldrh	r3, [r7, #14]
 800c702:	b29b      	uxth	r3, r3
 800c704:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c708:	d303      	bcc.n	800c712 <hif_send+0x106>
				if(cnt < 501) {
 800c70a:	89fb      	ldrh	r3, [r7, #14]
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
 800c70c:	2001      	movs	r0, #1
 800c70e:	f7ff fcdd 	bl	800c0cc <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	f003 0302 	and.w	r3, r3, #2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10e      	bne.n	800c73a <hif_send+0x12e>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 800c71c:	f107 0310 	add.w	r3, r7, #16
 800c720:	4619      	mov	r1, r3
 800c722:	484a      	ldr	r0, [pc, #296]	@ (800c84c <hif_send+0x240>)
 800c724:	f001 f853 	bl	800d7ce <nm_read_reg_with_ret>
 800c728:	4603      	mov	r3, r0
 800c72a:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 800c72c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00f      	beq.n	800c754 <hif_send+0x148>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	613b      	str	r3, [r7, #16]
					goto ERR1;
 800c738:	e07d      	b.n	800c836 <hif_send+0x22a>
		for(cnt = 0; cnt < 1000; cnt ++)
 800c73a:	89fb      	ldrh	r3, [r7, #14]
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	3301      	adds	r3, #1
 800c740:	b29b      	uxth	r3, r3
 800c742:	81fb      	strh	r3, [r7, #14]
 800c744:	89fb      	ldrh	r3, [r7, #14]
 800c746:	b29b      	uxth	r3, r3
 800c748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c74c:	d3cb      	bcc.n	800c6e6 <hif_send+0xda>
 800c74e:	e002      	b.n	800c756 <hif_send+0x14a>
			if(ret != M2M_SUCCESS) break;
 800c750:	bf00      	nop
 800c752:	e000      	b.n	800c756 <hif_send+0x14a>
				}
				/*in case of success break */
                break;
 800c754:	bf00      	nop
			}
		}
        
		if (dma_addr != 0)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d055      	beq.n	800c808 <hif_send+0x1fc>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 800c760:	8b7b      	ldrh	r3, [r7, #26]
 800c762:	b29b      	uxth	r3, r3
 800c764:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f107 0118 	add.w	r1, r7, #24
 800c76c:	2208      	movs	r2, #8
 800c76e:	4618      	mov	r0, r3
 800c770:	f001 f8b8 	bl	800d8e4 <nm_write_block>
 800c774:	4603      	mov	r3, r0
 800c776:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800c778:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d155      	bne.n	800c82c <hif_send+0x220>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	3308      	adds	r3, #8
 800c784:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00f      	beq.n	800c7ac <hif_send+0x1a0>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	88ba      	ldrh	r2, [r7, #4]
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f001 f8a6 	bl	800d8e4 <nm_write_block>
 800c798:	4603      	mov	r3, r0
 800c79a:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800c79c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d145      	bne.n	800c830 <hif_send+0x224>
				u32CurrAddr += u16CtrlBufSize;
 800c7a4:	88ba      	ldrh	r2, [r7, #4]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 800c7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d016      	beq.n	800c7e0 <hif_send+0x1d4>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 800c7b2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800c7b4:	88bb      	ldrh	r3, [r7, #4]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	4413      	add	r3, r2
 800c7be:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c7c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f001 f88c 	bl	800d8e4 <nm_write_block>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800c7d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d12d      	bne.n	800c834 <hif_send+0x228>
				u32CurrAddr += u16DataSize;
 800c7d8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f043 0302 	orr.w	r3, r3, #2
 800c7ec:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f241 006c 	movw	r0, #4204	@ 0x106c
 800c7f6:	f000 fff8 	bl	800d7ea <nm_write_reg>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800c7fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d007      	beq.n	800c816 <hif_send+0x20a>
 800c806:	e016      	b.n	800c836 <hif_send+0x22a>
		}
		else
		{
			ret = hif_chip_sleep();
 800c808:	f7ff feb8 	bl	800c57c <hif_chip_sleep>
 800c80c:	4603      	mov	r3, r0
 800c80e:	77fb      	strb	r3, [r7, #31]
			M2M_PRINT("Failed to alloc rx size %d\r\n",ret);
			ret = M2M_ERR_MEM_ALLOC;
 800c810:	23fd      	movs	r3, #253	@ 0xfd
 800c812:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 800c814:	e013      	b.n	800c83e <hif_send+0x232>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 800c816:	f7ff feb1 	bl	800c57c <hif_chip_sleep>
 800c81a:	4603      	mov	r3, r0
 800c81c:	77fb      	strb	r3, [r7, #31]
	return ret;
 800c81e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c822:	e00e      	b.n	800c842 <hif_send+0x236>
		if(M2M_SUCCESS != ret) goto ERR1;
 800c824:	bf00      	nop
 800c826:	e006      	b.n	800c836 <hif_send+0x22a>
		if(M2M_SUCCESS != ret) goto ERR1;
 800c828:	bf00      	nop
 800c82a:	e004      	b.n	800c836 <hif_send+0x22a>
			if(M2M_SUCCESS != ret) goto ERR1;
 800c82c:	bf00      	nop
 800c82e:	e002      	b.n	800c836 <hif_send+0x22a>
				if(M2M_SUCCESS != ret) goto ERR1;
 800c830:	bf00      	nop
 800c832:	e000      	b.n	800c836 <hif_send+0x22a>
				if(M2M_SUCCESS != ret) goto ERR1;
 800c834:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 800c836:	f7ff fe8b 	bl	800c550 <hif_chip_sleep_sc>
 800c83a:	e000      	b.n	800c83e <hif_send+0x232>
		goto ERR2;
 800c83c:	bf00      	nop
ERR2:
	/*logical error*/
	return ret;
 800c83e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3720      	adds	r7, #32
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	00150400 	.word	0x00150400

0800c850 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
    uint16 temp;
	sint8 ret = M2M_SUCCESS;
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 800c85a:	f107 030c 	add.w	r3, r7, #12
 800c85e:	4619      	mov	r1, r3
 800c860:	f241 0070 	movw	r0, #4208	@ 0x1070
 800c864:	f000 ffb3 	bl	800d7ce <nm_read_reg_with_ret>
 800c868:	4603      	mov	r3, r0
 800c86a:	75fb      	strb	r3, [r7, #23]
	if(M2M_SUCCESS == ret)
 800c86c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f040 80f8 	bne.w	800ca66 <hif_isr+0x216>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 80ef 	beq.w	800ca60 <hif_isr+0x210>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
 800c882:	2000      	movs	r0, #0
 800c884:	f7ff fc5e 	bl	800c144 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f023 0301 	bic.w	r3, r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4619      	mov	r1, r3
 800c894:	f241 0070 	movw	r0, #4208	@ 0x1070
 800c898:	f000 ffa7 	bl	800d7ea <nm_write_reg>
 800c89c:	4603      	mov	r3, r0
 800c89e:	75fb      	strb	r3, [r7, #23]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f040 80e0 	bne.w	800ca6a <hif_isr+0x21a>
			gstrHifCxt.u8HifRXDone = 1;
 800c8aa:	4b73      	ldr	r3, [pc, #460]	@ (800ca78 <hif_isr+0x228>)
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	089b      	lsrs	r3, r3, #2
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8ba:	82bb      	strh	r3, [r7, #20]
			if (size > 0) {
 800c8bc:	8abb      	ldrh	r3, [r7, #20]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 80cb 	beq.w	800ca5a <hif_isr+0x20a>
				uint32 address = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	607b      	str	r3, [r7, #4]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 800c8c8:	1d3b      	adds	r3, r7, #4
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	f241 0084 	movw	r0, #4228	@ 0x1084
 800c8d0:	f000 ff7d 	bl	800d7ce <nm_read_reg_with_ret>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	75fb      	strb	r3, [r7, #23]
				if(M2M_SUCCESS != ret)
 800c8d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <hif_isr+0x98>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	f7ff fc2f 	bl	800c144 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800c8e6:	e0c1      	b.n	800ca6c <hif_isr+0x21c>
				}
				gstrHifCxt.u32RxAddr = address;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a63      	ldr	r2, [pc, #396]	@ (800ca78 <hif_isr+0x228>)
 800c8ec:	6053      	str	r3, [r2, #4]
				gstrHifCxt.u32RxSize = size;
 800c8ee:	8abb      	ldrh	r3, [r7, #20]
 800c8f0:	4a61      	ldr	r2, [pc, #388]	@ (800ca78 <hif_isr+0x228>)
 800c8f2:	6093      	str	r3, [r2, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f107 0108 	add.w	r1, r7, #8
 800c8fa:	2204      	movs	r2, #4
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 ff95 	bl	800d82c <nm_read_block>
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 800c906:	897b      	ldrh	r3, [r7, #10]
 800c908:	b29b      	uxth	r3, r3
 800c90a:	817b      	strh	r3, [r7, #10]
				if(M2M_SUCCESS != ret)
 800c90c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <hif_isr+0xcc>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
 800c914:	2001      	movs	r0, #1
 800c916:	f7ff fc15 	bl	800c144 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800c91a:	e0a7      	b.n	800ca6c <hif_isr+0x21c>
				}
				if(strHif.u16Length != size)
 800c91c:	897b      	ldrh	r3, [r7, #10]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	8aba      	ldrh	r2, [r7, #20]
 800c922:	429a      	cmp	r2, r3
 800c924:	d00b      	beq.n	800c93e <hif_isr+0xee>
				{
					if((size - strHif.u16Length) > 4)
 800c926:	8abb      	ldrh	r3, [r7, #20]
 800c928:	897a      	ldrh	r2, [r7, #10]
 800c92a:	b292      	uxth	r2, r2
 800c92c:	1a9b      	subs	r3, r3, r2
 800c92e:	2b04      	cmp	r3, #4
 800c930:	dd05      	ble.n	800c93e <hif_isr+0xee>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
 800c932:	2001      	movs	r0, #1
 800c934:	f7ff fc06 	bl	800c144 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
 800c938:	23fa      	movs	r3, #250	@ 0xfa
 800c93a:	75fb      	strb	r3, [r7, #23]
						goto ERR1;
 800c93c:	e096      	b.n	800ca6c <hif_isr+0x21c>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 800c93e:	7a3b      	ldrb	r3, [r7, #8]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b01      	cmp	r3, #1
 800c944:	d110      	bne.n	800c968 <hif_isr+0x118>
				{
					if(gstrHifCxt.pfWifiCb)
 800c946:	4b4c      	ldr	r3, [pc, #304]	@ (800ca78 <hif_isr+0x228>)
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d078      	beq.n	800ca40 <hif_isr+0x1f0>
                    {
                        temp = (uint16)strHif.u16Length;
 800c94e:	897b      	ldrh	r3, [r7, #10]
 800c950:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c952:	4b49      	ldr	r3, [pc, #292]	@ (800ca78 <hif_isr+0x228>)
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	7a7a      	ldrb	r2, [r7, #9]
 800c958:	b2d0      	uxtb	r0, r2
 800c95a:	8a7a      	ldrh	r2, [r7, #18]
 800c95c:	3a08      	subs	r2, #8
 800c95e:	b291      	uxth	r1, r2
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	3208      	adds	r2, #8
 800c964:	4798      	blx	r3
 800c966:	e06b      	b.n	800ca40 <hif_isr+0x1f0>
					{
						M2M_ERR("WIFI callback is not registered\n");
					}

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 800c968:	7a3b      	ldrb	r3, [r7, #8]
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d110      	bne.n	800c992 <hif_isr+0x142>
				{
					if(gstrHifCxt.pfIpCb)
 800c970:	4b41      	ldr	r3, [pc, #260]	@ (800ca78 <hif_isr+0x228>)
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d063      	beq.n	800ca40 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 800c978:	897b      	ldrh	r3, [r7, #10]
 800c97a:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c97c:	4b3e      	ldr	r3, [pc, #248]	@ (800ca78 <hif_isr+0x228>)
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	7a7a      	ldrb	r2, [r7, #9]
 800c982:	b2d0      	uxtb	r0, r2
 800c984:	8a7a      	ldrh	r2, [r7, #18]
 800c986:	3a08      	subs	r2, #8
 800c988:	b291      	uxth	r1, r2
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	3208      	adds	r2, #8
 800c98e:	4798      	blx	r3
 800c990:	e056      	b.n	800ca40 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Scoket callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 800c992:	7a3b      	ldrb	r3, [r7, #8]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b04      	cmp	r3, #4
 800c998:	d110      	bne.n	800c9bc <hif_isr+0x16c>
				{
					if(gstrHifCxt.pfOtaCb)
 800c99a:	4b37      	ldr	r3, [pc, #220]	@ (800ca78 <hif_isr+0x228>)
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d04e      	beq.n	800ca40 <hif_isr+0x1f0>
					{
                            temp = (uint16)strHif.u16Length;
 800c9a2:	897b      	ldrh	r3, [r7, #10]
 800c9a4:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c9a6:	4b34      	ldr	r3, [pc, #208]	@ (800ca78 <hif_isr+0x228>)
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	7a7a      	ldrb	r2, [r7, #9]
 800c9ac:	b2d0      	uxtb	r0, r2
 800c9ae:	8a7a      	ldrh	r2, [r7, #18]
 800c9b0:	3a08      	subs	r2, #8
 800c9b2:	b291      	uxth	r1, r2
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	3208      	adds	r2, #8
 800c9b8:	4798      	blx	r3
 800c9ba:	e041      	b.n	800ca40 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Ota callback is not registered\n");
                    }
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 800c9bc:	7a3b      	ldrb	r3, [r7, #8]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b06      	cmp	r3, #6
 800c9c2:	d110      	bne.n	800c9e6 <hif_isr+0x196>
				{
					if(gstrHifCxt.pfCryptoCb)
 800c9c4:	4b2c      	ldr	r3, [pc, #176]	@ (800ca78 <hif_isr+0x228>)
 800c9c6:	6a1b      	ldr	r3, [r3, #32]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d039      	beq.n	800ca40 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 800c9cc:	897b      	ldrh	r3, [r7, #10]
 800c9ce:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c9d0:	4b29      	ldr	r3, [pc, #164]	@ (800ca78 <hif_isr+0x228>)
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	7a7a      	ldrb	r2, [r7, #9]
 800c9d6:	b2d0      	uxtb	r0, r2
 800c9d8:	8a7a      	ldrh	r2, [r7, #18]
 800c9da:	3a08      	subs	r2, #8
 800c9dc:	b291      	uxth	r1, r2
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	3208      	adds	r2, #8
 800c9e2:	4798      	blx	r3
 800c9e4:	e02c      	b.n	800ca40 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Crypto callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 800c9e6:	7a3b      	ldrb	r3, [r7, #8]
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b07      	cmp	r3, #7
 800c9ec:	d110      	bne.n	800ca10 <hif_isr+0x1c0>
				{
					if(gstrHifCxt.pfSigmaCb)
 800c9ee:	4b22      	ldr	r3, [pc, #136]	@ (800ca78 <hif_isr+0x228>)
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d024      	beq.n	800ca40 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 800c9f6:	897b      	ldrh	r3, [r7, #10]
 800c9f8:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c9fa:	4b1f      	ldr	r3, [pc, #124]	@ (800ca78 <hif_isr+0x228>)
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	7a7a      	ldrb	r2, [r7, #9]
 800ca00:	b2d0      	uxtb	r0, r2
 800ca02:	8a7a      	ldrh	r2, [r7, #18]
 800ca04:	3a08      	subs	r2, #8
 800ca06:	b291      	uxth	r1, r2
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	3208      	adds	r2, #8
 800ca0c:	4798      	blx	r3
 800ca0e:	e017      	b.n	800ca40 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Sigma callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 800ca10:	7a3b      	ldrb	r3, [r7, #8]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b05      	cmp	r3, #5
 800ca16:	d110      	bne.n	800ca3a <hif_isr+0x1ea>
				{
				    if(gstrHifCxt.pfSslCb)
 800ca18:	4b17      	ldr	r3, [pc, #92]	@ (800ca78 <hif_isr+0x228>)
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00f      	beq.n	800ca40 <hif_isr+0x1f0>
					{
					    temp = (uint16)strHif.u16Length;
 800ca20:	897b      	ldrh	r3, [r7, #10]
 800ca22:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800ca24:	4b14      	ldr	r3, [pc, #80]	@ (800ca78 <hif_isr+0x228>)
 800ca26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca28:	7a7a      	ldrb	r2, [r7, #9]
 800ca2a:	b2d0      	uxtb	r0, r2
 800ca2c:	8a7a      	ldrh	r2, [r7, #18]
 800ca2e:	3a08      	subs	r2, #8
 800ca30:	b291      	uxth	r1, r2
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	3208      	adds	r2, #8
 800ca36:	4798      	blx	r3
 800ca38:	e002      	b.n	800ca40 <hif_isr+0x1f0>
					}
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
 800ca3a:	23fa      	movs	r3, #250	@ 0xfa
 800ca3c:	75fb      	strb	r3, [r7, #23]
					goto ERR1;
 800ca3e:	e015      	b.n	800ca6c <hif_isr+0x21c>
				}
				if(gstrHifCxt.u8HifRXDone)
 800ca40:	4b0d      	ldr	r3, [pc, #52]	@ (800ca78 <hif_isr+0x228>)
 800ca42:	789b      	ldrb	r3, [r3, #2]
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d010      	beq.n	800ca6c <hif_isr+0x21c>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
 800ca4a:	f7ff fd13 	bl	800c474 <hif_set_rx_done>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	75fb      	strb	r3, [r7, #23]
					if(ret != M2M_SUCCESS) goto ERR1;
 800ca52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	e008      	b.n	800ca6c <hif_isr+0x21c>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
 800ca5a:	23fe      	movs	r3, #254	@ 0xfe
 800ca5c:	75fb      	strb	r3, [r7, #23]
				goto ERR1;
 800ca5e:	e005      	b.n	800ca6c <hif_isr+0x21c>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
 800ca60:	23f4      	movs	r3, #244	@ 0xf4
 800ca62:	75fb      	strb	r3, [r7, #23]
			goto ERR1;
 800ca64:	e002      	b.n	800ca6c <hif_isr+0x21c>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
 800ca66:	bf00      	nop
 800ca68:	e000      	b.n	800ca6c <hif_isr+0x21c>
			if(ret != M2M_SUCCESS)goto ERR1;
 800ca6a:	bf00      	nop
	}

ERR1:
	return ret;
 800ca6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	200028a8 	.word	0x200028a8

0800ca7c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800ca82:	2300      	movs	r3, #0
 800ca84:	71fb      	strb	r3, [r7, #7]
	while (gstrHifCxt.u8Interrupt) {
 800ca86:	e00e      	b.n	800caa6 <hif_handle_isr+0x2a>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
 800ca88:	4b0c      	ldr	r3, [pc, #48]	@ (800cabc <hif_handle_isr+0x40>)
 800ca8a:	78db      	ldrb	r3, [r3, #3]
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	4b0a      	ldr	r3, [pc, #40]	@ (800cabc <hif_handle_isr+0x40>)
 800ca94:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
 800ca96:	f7ff fedb 	bl	800c850 <hif_isr>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800ca9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1f7      	bne.n	800ca96 <hif_handle_isr+0x1a>
	while (gstrHifCxt.u8Interrupt) {
 800caa6:	4b05      	ldr	r3, [pc, #20]	@ (800cabc <hif_handle_isr+0x40>)
 800caa8:	78db      	ldrb	r3, [r3, #3]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1eb      	bne.n	800ca88 <hif_handle_isr+0xc>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
 800cab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	200028a8 	.word	0x200028a8

0800cac0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	4611      	mov	r1, r2
 800cacc:	461a      	mov	r2, r3
 800cace:	460b      	mov	r3, r1
 800cad0:	80fb      	strh	r3, [r7, #6]
 800cad2:	4613      	mov	r3, r2
 800cad4:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800cad6:	2300      	movs	r3, #0
 800cad8:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d005      	beq.n	800caec <hif_receive+0x2c>
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <hif_receive+0x2c>
 800cae6:	88fb      	ldrh	r3, [r7, #6]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <hif_receive+0x42>
	{
		if(isDone)
 800caec:	797b      	ldrb	r3, [r7, #5]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d004      	beq.n	800cafc <hif_receive+0x3c>
		{
			/* set RX done */
			ret = hif_set_rx_done();
 800caf2:	f7ff fcbf 	bl	800c474 <hif_set_rx_done>
 800caf6:	4603      	mov	r3, r0
 800caf8:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800cafa:	e03d      	b.n	800cb78 <hif_receive+0xb8>
			ret = M2M_ERR_FAIL;
 800cafc:	23f4      	movs	r3, #244	@ 0xf4
 800cafe:	75fb      	strb	r3, [r7, #23]
		goto ERR1;
 800cb00:	e03a      	b.n	800cb78 <hif_receive+0xb8>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800cb02:	88fa      	ldrh	r2, [r7, #6]
 800cb04:	4b1f      	ldr	r3, [pc, #124]	@ (800cb84 <hif_receive+0xc4>)
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d902      	bls.n	800cb12 <hif_receive+0x52>
	{
		ret = M2M_ERR_FAIL;
 800cb0c:	23f4      	movs	r3, #244	@ 0xf4
 800cb0e:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
 800cb10:	e032      	b.n	800cb78 <hif_receive+0xb8>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800cb12:	4b1c      	ldr	r3, [pc, #112]	@ (800cb84 <hif_receive+0xc4>)
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d309      	bcc.n	800cb30 <hif_receive+0x70>
 800cb1c:	88fa      	ldrh	r2, [r7, #6]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	441a      	add	r2, r3
 800cb22:	4b18      	ldr	r3, [pc, #96]	@ (800cb84 <hif_receive+0xc4>)
 800cb24:	6859      	ldr	r1, [r3, #4]
 800cb26:	4b17      	ldr	r3, [pc, #92]	@ (800cb84 <hif_receive+0xc4>)
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	440b      	add	r3, r1
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d902      	bls.n	800cb36 <hif_receive+0x76>
	{
		ret = M2M_ERR_FAIL;
 800cb30:	23f4      	movs	r3, #244	@ 0xf4
 800cb32:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
 800cb34:	e020      	b.n	800cb78 <hif_receive+0xb8>
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800cb36:	88fb      	ldrh	r3, [r7, #6]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	68b9      	ldr	r1, [r7, #8]
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f000 fe75 	bl	800d82c <nm_read_block>
 800cb42:	4603      	mov	r3, r0
 800cb44:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800cb46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d111      	bne.n	800cb72 <hif_receive+0xb2>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800cb4e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb84 <hif_receive+0xc4>)
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	4b0c      	ldr	r3, [pc, #48]	@ (800cb84 <hif_receive+0xc4>)
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	441a      	add	r2, r3
 800cb58:	88f9      	ldrh	r1, [r7, #6]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	440b      	add	r3, r1
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d002      	beq.n	800cb68 <hif_receive+0xa8>
 800cb62:	797b      	ldrb	r3, [r7, #5]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d006      	beq.n	800cb76 <hif_receive+0xb6>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800cb68:	f7ff fc84 	bl	800c474 <hif_set_rx_done>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	75fb      	strb	r3, [r7, #23]
 800cb70:	e002      	b.n	800cb78 <hif_receive+0xb8>
	if(ret != M2M_SUCCESS)goto ERR1;
 800cb72:	bf00      	nop
 800cb74:	e000      	b.n	800cb78 <hif_receive+0xb8>
	}

ERR1:
 800cb76:	bf00      	nop
	return ret;
 800cb78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3718      	adds	r7, #24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	200028a8 	.word	0x200028a8

0800cb88 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	6039      	str	r1, [r7, #0]
 800cb92:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800cb98:	79fb      	ldrb	r3, [r7, #7]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	2b06      	cmp	r3, #6
 800cb9e:	d82d      	bhi.n	800cbfc <hif_register_cb+0x74>
 800cba0:	a201      	add	r2, pc, #4	@ (adr r2, 800cba8 <hif_register_cb+0x20>)
 800cba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba6:	bf00      	nop
 800cba8:	0800cbcd 	.word	0x0800cbcd
 800cbac:	0800cbc5 	.word	0x0800cbc5
 800cbb0:	0800cbdd 	.word	0x0800cbdd
 800cbb4:	0800cbd5 	.word	0x0800cbd5
 800cbb8:	0800cbf5 	.word	0x0800cbf5
 800cbbc:	0800cbe5 	.word	0x0800cbe5
 800cbc0:	0800cbed 	.word	0x0800cbed
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800cbc4:	4a13      	ldr	r2, [pc, #76]	@ (800cc14 <hif_register_cb+0x8c>)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	6113      	str	r3, [r2, #16]
			break;
 800cbca:	e01a      	b.n	800cc02 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800cbcc:	4a11      	ldr	r2, [pc, #68]	@ (800cc14 <hif_register_cb+0x8c>)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	60d3      	str	r3, [r2, #12]
			break;
 800cbd2:	e016      	b.n	800cc02 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800cbd4:	4a0f      	ldr	r2, [pc, #60]	@ (800cc14 <hif_register_cb+0x8c>)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	6153      	str	r3, [r2, #20]
			break;
 800cbda:	e012      	b.n	800cc02 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800cbdc:	4a0d      	ldr	r2, [pc, #52]	@ (800cc14 <hif_register_cb+0x8c>)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	61d3      	str	r3, [r2, #28]
			break;
 800cbe2:	e00e      	b.n	800cc02 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800cbe4:	4a0b      	ldr	r2, [pc, #44]	@ (800cc14 <hif_register_cb+0x8c>)
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	6213      	str	r3, [r2, #32]
			break;
 800cbea:	e00a      	b.n	800cc02 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800cbec:	4a09      	ldr	r2, [pc, #36]	@ (800cc14 <hif_register_cb+0x8c>)
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	6193      	str	r3, [r2, #24]
			break;
 800cbf2:	e006      	b.n	800cc02 <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800cbf4:	4a07      	ldr	r2, [pc, #28]	@ (800cc14 <hif_register_cb+0x8c>)
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 800cbfa:	e002      	b.n	800cc02 <hif_register_cb+0x7a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
 800cbfc:	23f4      	movs	r3, #244	@ 0xf4
 800cbfe:	73fb      	strb	r3, [r7, #15]
			break;
 800cc00:	bf00      	nop
	}
	return ret;
 800cc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	200028a8 	.word	0x200028a8

0800cc18 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b0aa      	sub	sp, #168	@ 0xa8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	4603      	mov	r3, r0
 800cc20:	603a      	str	r2, [r7, #0]
 800cc22:	71fb      	strb	r3, [r7, #7]
 800cc24:	460b      	mov	r3, r1
 800cc26:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	2b2c      	cmp	r3, #44	@ 0x2c
 800cc2c:	d117      	bne.n	800cc5e <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800cc2e:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800cc32:	2300      	movs	r3, #0
 800cc34:	2204      	movs	r2, #4
 800cc36:	6838      	ldr	r0, [r7, #0]
 800cc38:	f7ff ff42 	bl	800cac0 <hif_receive>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f040 816a 	bne.w	800cf18 <m2m_wifi_cb+0x300>
		{
			if (gpfAppWifiCb)
 800cc44:	4b9f      	ldr	r3, [pc, #636]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f000 8165 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800cc4e:	4b9d      	ldr	r3, [pc, #628]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800cc56:	4611      	mov	r1, r2
 800cc58:	202c      	movs	r0, #44	@ 0x2c
 800cc5a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
 800cc5c:	e15c      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800cc5e:	79fb      	ldrb	r3, [r7, #7]
 800cc60:	2b1b      	cmp	r3, #27
 800cc62:	d117      	bne.n	800cc94 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800cc64:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 800cc68:	2300      	movs	r3, #0
 800cc6a:	2208      	movs	r2, #8
 800cc6c:	6838      	ldr	r0, [r7, #0]
 800cc6e:	f7ff ff27 	bl	800cac0 <hif_receive>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f040 814f 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800cc7a:	4b92      	ldr	r3, [pc, #584]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f000 814a 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800cc84:	4b8f      	ldr	r3, [pc, #572]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	201b      	movs	r0, #27
 800cc90:	4798      	blx	r3
}
 800cc92:	e141      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	2b06      	cmp	r3, #6
 800cc98:	d117      	bne.n	800ccca <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800cc9a:	f107 0108 	add.w	r1, r7, #8
 800cc9e:	2301      	movs	r3, #1
 800cca0:	2230      	movs	r2, #48	@ 0x30
 800cca2:	6838      	ldr	r0, [r7, #0]
 800cca4:	f7ff ff0c 	bl	800cac0 <hif_receive>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f040 8134 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			if(gpfAppWifiCb)
 800ccb0:	4b84      	ldr	r3, [pc, #528]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 812f 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800ccba:	4b82      	ldr	r3, [pc, #520]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f107 0208 	add.w	r2, r7, #8
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	2006      	movs	r0, #6
 800ccc6:	4798      	blx	r3
}
 800ccc8:	e126      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	2b0e      	cmp	r3, #14
 800ccce:	f000 8123 	beq.w	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	2b32      	cmp	r3, #50	@ 0x32
 800ccd6:	d117      	bne.n	800cd08 <m2m_wifi_cb+0xf0>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800ccd8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800ccdc:	2300      	movs	r3, #0
 800ccde:	2214      	movs	r2, #20
 800cce0:	6838      	ldr	r0, [r7, #0]
 800cce2:	f7ff feed 	bl	800cac0 <hif_receive>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f040 8115 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800ccee:	4b75      	ldr	r3, [pc, #468]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 8110 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800ccf8:	4b72      	ldr	r3, [pc, #456]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800cd00:	4611      	mov	r1, r2
 800cd02:	2032      	movs	r0, #50	@ 0x32
 800cd04:	4798      	blx	r3
}
 800cd06:	e107      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 800cd08:	79fb      	ldrb	r3, [r7, #7]
 800cd0a:	2b2f      	cmp	r3, #47	@ 0x2f
 800cd0c:	d11e      	bne.n	800cd4c <m2m_wifi_cb+0x134>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
 800cd0e:	f107 0308 	add.w	r3, r7, #8
 800cd12:	2264      	movs	r2, #100	@ 0x64
 800cd14:	2100      	movs	r1, #0
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff fb66 	bl	800c3e8 <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800cd1c:	f107 0108 	add.w	r1, r7, #8
 800cd20:	2300      	movs	r3, #0
 800cd22:	2264      	movs	r2, #100	@ 0x64
 800cd24:	6838      	ldr	r0, [r7, #0]
 800cd26:	f7ff fecb 	bl	800cac0 <hif_receive>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f040 80f3 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800cd32:	4b64      	ldr	r3, [pc, #400]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 80ee 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800cd3c:	4b61      	ldr	r3, [pc, #388]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f107 0208 	add.w	r2, r7, #8
 800cd44:	4611      	mov	r1, r2
 800cd46:	202f      	movs	r0, #47	@ 0x2f
 800cd48:	4798      	blx	r3
}
 800cd4a:	e0e5      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
 800cd4e:	2b34      	cmp	r3, #52	@ 0x34
 800cd50:	d115      	bne.n	800cd7e <m2m_wifi_cb+0x166>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800cd52:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800cd56:	2300      	movs	r3, #0
 800cd58:	2204      	movs	r2, #4
 800cd5a:	6838      	ldr	r0, [r7, #0]
 800cd5c:	f7ff feb0 	bl	800cac0 <hif_receive>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f040 80d8 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800cd68:	4b56      	ldr	r3, [pc, #344]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 80d3 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800cd72:	4b54      	ldr	r3, [pc, #336]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2100      	movs	r1, #0
 800cd78:	2034      	movs	r0, #52	@ 0x34
 800cd7a:	4798      	blx	r3
}
 800cd7c:	e0cc      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	2b11      	cmp	r3, #17
 800cd82:	d11e      	bne.n	800cdc2 <m2m_wifi_cb+0x1aa>
		gu8scanInProgress = 0;
 800cd84:	4b50      	ldr	r3, [pc, #320]	@ (800cec8 <m2m_wifi_cb+0x2b0>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800cd8a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800cd8e:	2300      	movs	r3, #0
 800cd90:	2204      	movs	r2, #4
 800cd92:	6838      	ldr	r0, [r7, #0]
 800cd94:	f7ff fe94 	bl	800cac0 <hif_receive>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f040 80bc 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			gu8ChNum = strState.u8NumofCh;
 800cda0:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 800cda4:	4b49      	ldr	r3, [pc, #292]	@ (800cecc <m2m_wifi_cb+0x2b4>)
 800cda6:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
 800cda8:	4b46      	ldr	r3, [pc, #280]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 80b3 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800cdb2:	4b44      	ldr	r3, [pc, #272]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800cdba:	4611      	mov	r1, r2
 800cdbc:	2011      	movs	r0, #17
 800cdbe:	4798      	blx	r3
}
 800cdc0:	e0aa      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800cdc2:	79fb      	ldrb	r3, [r7, #7]
 800cdc4:	2b13      	cmp	r3, #19
 800cdc6:	d117      	bne.n	800cdf8 <m2m_wifi_cb+0x1e0>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800cdc8:	f107 0108 	add.w	r1, r7, #8
 800cdcc:	2300      	movs	r3, #0
 800cdce:	222c      	movs	r2, #44	@ 0x2c
 800cdd0:	6838      	ldr	r0, [r7, #0]
 800cdd2:	f7ff fe75 	bl	800cac0 <hif_receive>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f040 809d 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800cdde:	4b39      	ldr	r3, [pc, #228]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 8098 	beq.w	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800cde8:	4b36      	ldr	r3, [pc, #216]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f107 0208 	add.w	r2, r7, #8
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	2013      	movs	r0, #19
 800cdf4:	4798      	blx	r3
}
 800cdf6:	e08f      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d116      	bne.n	800ce2c <m2m_wifi_cb+0x214>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800cdfe:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800ce02:	2300      	movs	r3, #0
 800ce04:	2204      	movs	r2, #4
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	f7ff fe5a 	bl	800cac0 <hif_receive>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 8082 	bne.w	800cf18 <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800ce14:	4b2b      	ldr	r3, [pc, #172]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d07d      	beq.n	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800ce1c:	4b29      	ldr	r3, [pc, #164]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800ce24:	4611      	mov	r1, r2
 800ce26:	2004      	movs	r0, #4
 800ce28:	4798      	blx	r3
}
 800ce2a:	e075      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	2b65      	cmp	r3, #101	@ 0x65
 800ce30:	d115      	bne.n	800ce5e <m2m_wifi_cb+0x246>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800ce32:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800ce36:	2300      	movs	r3, #0
 800ce38:	2204      	movs	r2, #4
 800ce3a:	6838      	ldr	r0, [r7, #0]
 800ce3c:	f7ff fe40 	bl	800cac0 <hif_receive>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d168      	bne.n	800cf18 <m2m_wifi_cb+0x300>
			if (gpfAppWifiCb)
 800ce46:	4b1f      	ldr	r3, [pc, #124]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d064      	beq.n	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800ce4e:	4b1d      	ldr	r3, [pc, #116]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800ce56:	4611      	mov	r1, r2
 800ce58:	2065      	movs	r0, #101	@ 0x65
 800ce5a:	4798      	blx	r3
}
 800ce5c:	e05c      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	d115      	bne.n	800ce90 <m2m_wifi_cb+0x278>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800ce64:	f107 0108 	add.w	r1, r7, #8
 800ce68:	2301      	movs	r3, #1
 800ce6a:	2264      	movs	r2, #100	@ 0x64
 800ce6c:	6838      	ldr	r0, [r7, #0]
 800ce6e:	f7ff fe27 	bl	800cac0 <hif_receive>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d14f      	bne.n	800cf18 <m2m_wifi_cb+0x300>
			if(gpfAppWifiCb)
 800ce78:	4b12      	ldr	r3, [pc, #72]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d04b      	beq.n	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800ce80:	4b10      	ldr	r3, [pc, #64]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f107 0208 	add.w	r2, r7, #8
 800ce88:	4611      	mov	r1, r2
 800ce8a:	2009      	movs	r0, #9
 800ce8c:	4798      	blx	r3
}
 800ce8e:	e043      	b.n	800cf18 <m2m_wifi_cb+0x300>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce94:	d11c      	bne.n	800ced0 <m2m_wifi_cb+0x2b8>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800ce96:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	2204      	movs	r2, #4
 800ce9e:	6838      	ldr	r0, [r7, #0]
 800cea0:	f7ff fe0e 	bl	800cac0 <hif_receive>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d136      	bne.n	800cf18 <m2m_wifi_cb+0x300>
			if(gpfAppWifiCb)
 800ceaa:	4b06      	ldr	r3, [pc, #24]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d032      	beq.n	800cf18 <m2m_wifi_cb+0x300>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800ceb2:	4b04      	ldr	r3, [pc, #16]	@ (800cec4 <m2m_wifi_cb+0x2ac>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800ceba:	4611      	mov	r1, r2
 800cebc:	202a      	movs	r0, #42	@ 0x2a
 800cebe:	4798      	blx	r3
}
 800cec0:	e02a      	b.n	800cf18 <m2m_wifi_cb+0x300>
 800cec2:	bf00      	nop
 800cec4:	200028d4 	.word	0x200028d4
 800cec8:	200028d1 	.word	0x200028d1
 800cecc:	200028d0 	.word	0x200028d0
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	2b20      	cmp	r3, #32
 800ced4:	d120      	bne.n	800cf18 <m2m_wifi_cb+0x300>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800ced6:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800ceda:	2300      	movs	r3, #0
 800cedc:	2208      	movs	r2, #8
 800cede:	6838      	ldr	r0, [r7, #0]
 800cee0:	f7ff fdee 	bl	800cac0 <hif_receive>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d116      	bne.n	800cf18 <m2m_wifi_cb+0x300>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	f103 0008 	add.w	r0, r3, #8
 800cef0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cef2:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800cef6:	2301      	movs	r3, #1
 800cef8:	f7ff fde2 	bl	800cac0 <hif_receive>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <m2m_wifi_cb+0x300>
				if(gpfAppWifiCb)
 800cf02:	4b07      	ldr	r3, [pc, #28]	@ (800cf20 <m2m_wifi_cb+0x308>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d006      	beq.n	800cf18 <m2m_wifi_cb+0x300>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 800cf0a:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <m2m_wifi_cb+0x308>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800cf12:	4611      	mov	r1, r2
 800cf14:	2020      	movs	r0, #32
 800cf16:	4798      	blx	r3
}
 800cf18:	bf00      	nop
 800cf1a:	37a8      	adds	r7, #168	@ 0xa8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	200028d4 	.word	0x200028d4

0800cf24 <m2m_validate_ap_parameters>:
_EXIT0:
	return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
	/* Check for incoming pointer */
	if(pstrM2MAPConfig == NULL)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <m2m_validate_ap_parameters+0x18>
	{
		M2M_ERR("INVALID POINTER\n");
		s8Ret = M2M_ERR_FAIL;
 800cf36:	23f4      	movs	r3, #244	@ 0xf4
 800cf38:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800cf3a:	e07c      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
	}
	/* Check for SSID */
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff fa6f 	bl	800c422 <m2m_strlen>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d006      	beq.n	800cf58 <m2m_validate_ap_parameters+0x34>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7ff fa68 	bl	800c422 <m2m_strlen>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b20      	cmp	r3, #32
 800cf56:	d902      	bls.n	800cf5e <m2m_validate_ap_parameters+0x3a>
	{
		M2M_ERR("INVALID SSID\n");
		s8Ret = M2M_ERR_FAIL;
 800cf58:	23f4      	movs	r3, #244	@ 0xf4
 800cf5a:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800cf5c:	e06b      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
	}
	/* Check for Channel */
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cf64:	2b0e      	cmp	r3, #14
 800cf66:	d804      	bhi.n	800cf72 <m2m_validate_ap_parameters+0x4e>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d102      	bne.n	800cf78 <m2m_validate_ap_parameters+0x54>
	{
		M2M_ERR("INVALID CH\n");
		s8Ret = M2M_ERR_FAIL;
 800cf72:	23f4      	movs	r3, #244	@ 0xf4
 800cf74:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800cf76:	e05e      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
	}
	/* Check for DHCP Server IP address */
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10c      	bne.n	800cf9c <m2m_validate_ap_parameters+0x78>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d107      	bne.n	800cf9c <m2m_validate_ap_parameters+0x78>
	{
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <m2m_validate_ap_parameters+0x78>
		{
			M2M_ERR("INVALID DHCP SERVER IP\n");
			s8Ret = M2M_ERR_FAIL;
 800cf96:	23f4      	movs	r3, #244	@ 0xf4
 800cf98:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800cf9a:	e04c      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d046      	beq.n	800d034 <m2m_validate_ap_parameters+0x110>
	{
		goto ERR1;
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	d12c      	bne.n	800d00a <m2m_validate_ap_parameters+0xe6>
	{
		/* Check for WEP Key index */
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d004      	beq.n	800cfc4 <m2m_validate_ap_parameters+0xa0>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	d902      	bls.n	800cfca <m2m_validate_ap_parameters+0xa6>
		{
			M2M_ERR("INVALID KEY INDEX\n");
			s8Ret = M2M_ERR_FAIL;
 800cfc4:	23f4      	movs	r3, #244	@ 0xf4
 800cfc6:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800cfc8:	e035      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
		}
		/* Check for WEP Key size */
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800cfd0:	2b0a      	cmp	r3, #10
 800cfd2:	d007      	beq.n	800cfe4 <m2m_validate_ap_parameters+0xc0>
			(pstrM2MAPConfig->u8KeySz != WEP_104_KEY_STRING_SIZE)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
 800cfda:	2b1a      	cmp	r3, #26
 800cfdc:	d002      	beq.n	800cfe4 <m2m_validate_ap_parameters+0xc0>
		)
		{
			M2M_ERR("INVALID KEY STRING SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 800cfde:	23f4      	movs	r3, #244	@ 0xf4
 800cfe0:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800cfe2:	e028      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
		}

		if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	3324      	adds	r3, #36	@ 0x24
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff fa1a 	bl	800c422 <m2m_strlen>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d007      	beq.n	800d004 <m2m_validate_ap_parameters+0xe0>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3324      	adds	r3, #36	@ 0x24
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7ff fa12 	bl	800c422 <m2m_strlen>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b1a      	cmp	r3, #26
 800d002:	d918      	bls.n	800d036 <m2m_validate_ap_parameters+0x112>
		{
			M2M_ERR("INVALID KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 800d004:	23f4      	movs	r3, #244	@ 0xf4
 800d006:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800d008:	e015      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
		}
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WPA_PSK)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d010:	2b02      	cmp	r3, #2
 800d012:	d10c      	bne.n	800d02e <m2m_validate_ap_parameters+0x10a>
	{
		/* Check for WPA Key size */
		if(	((pstrM2MAPConfig->u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPConfig->u8KeySz + 1) > M2M_MAX_PSK_LEN))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d01a:	2b07      	cmp	r3, #7
 800d01c:	d904      	bls.n	800d028 <m2m_validate_ap_parameters+0x104>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d024:	2b40      	cmp	r3, #64	@ 0x40
 800d026:	d906      	bls.n	800d036 <m2m_validate_ap_parameters+0x112>
		{
			M2M_ERR("INVALID WPA KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 800d028:	23f4      	movs	r3, #244	@ 0xf4
 800d02a:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800d02c:	e003      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
		}
	}
	else
	{
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
		s8Ret = M2M_ERR_FAIL;
 800d02e:	23f4      	movs	r3, #244	@ 0xf4
 800d030:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800d032:	e000      	b.n	800d036 <m2m_validate_ap_parameters+0x112>
		goto ERR1;
 800d034:	bf00      	nop
	}

ERR1:
	return s8Ret;
 800d036:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CRL | (uint8)M2M_REQ_DATA_PKT), NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b090      	sub	sp, #64	@ 0x40
 800d048:	af02      	add	r7, sp, #8
 800d04a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
 800d04c:	2300      	movs	r3, #0
 800d04e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800d052:	2301      	movs	r3, #1
 800d054:	72fb      	strb	r3, [r7, #11]

	if(param == NULL) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d103      	bne.n	800d064 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
 800d05c:	23f4      	movs	r3, #244	@ 0xf4
 800d05e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		goto _EXIT0;
 800d062:	e059      	b.n	800d118 <m2m_wifi_init+0xd4>
	}

	gpfAppWifiCb = param->pfAppWifiCb;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a2e      	ldr	r2, [pc, #184]	@ (800d124 <m2m_wifi_init+0xe0>)
 800d06a:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
 800d06c:	4b2e      	ldr	r3, [pc, #184]	@ (800d128 <m2m_wifi_init+0xe4>)
 800d06e:	2200      	movs	r2, #0
 800d070:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
 800d072:	f107 030b 	add.w	r3, r7, #11
 800d076:	4618      	mov	r0, r3
 800d078:	f000 fd1e 	bl	800dab8 <nm_drv_init>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d082:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d086:	2b00      	cmp	r3, #0
 800d088:	d145      	bne.n	800d116 <m2m_wifi_init+0xd2>
	/* Initialize host interface module */
	ret = hif_init(NULL);
 800d08a:	2000      	movs	r0, #0
 800d08c:	f7ff faa2 	bl	800c5d4 <hif_init>
 800d090:	4603      	mov	r3, r0
 800d092:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d096:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d136      	bne.n	800d10c <m2m_wifi_init+0xc8>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
 800d09e:	4923      	ldr	r1, [pc, #140]	@ (800d12c <m2m_wifi_init+0xe8>)
 800d0a0:	2001      	movs	r0, #1
 800d0a2:	f7ff fd71 	bl	800cb88 <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
 800d0a6:	f107 030c 	add.w	r3, r7, #12
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 fc64 	bl	800d978 <nm_get_firmware_full_info>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	printf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800d0b6:	7c3b      	ldrb	r3, [r7, #16]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	7c7b      	ldrb	r3, [r7, #17]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	7cbb      	ldrb	r3, [r7, #18]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	4819      	ldr	r0, [pc, #100]	@ (800d130 <m2m_wifi_init+0xec>)
 800d0ca:	f002 fb27 	bl	800f71c <iprintf>
	printf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800d0ce:	f107 030c 	add.w	r3, r7, #12
 800d0d2:	f103 0216 	add.w	r2, r3, #22
 800d0d6:	f107 030c 	add.w	r3, r7, #12
 800d0da:	330a      	adds	r3, #10
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4815      	ldr	r0, [pc, #84]	@ (800d134 <m2m_wifi_init+0xf0>)
 800d0e0:	f002 fb1c 	bl	800f71c <iprintf>
	printf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800d0e4:	7cfb      	ldrb	r3, [r7, #19]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	7d3b      	ldrb	r3, [r7, #20]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	7d7b      	ldrb	r3, [r7, #21]
 800d0ee:	4812      	ldr	r0, [pc, #72]	@ (800d138 <m2m_wifi_init+0xf4>)
 800d0f0:	f002 fb14 	bl	800f71c <iprintf>
	printf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800d0f4:	2304      	movs	r3, #4
 800d0f6:	2205      	movs	r2, #5
 800d0f8:	2113      	movs	r1, #19
 800d0fa:	4810      	ldr	r0, [pc, #64]	@ (800d13c <m2m_wifi_init+0xf8>)
 800d0fc:	f002 fb0e 	bl	800f71c <iprintf>
	printf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800d100:	4a0f      	ldr	r2, [pc, #60]	@ (800d140 <m2m_wifi_init+0xfc>)
 800d102:	4910      	ldr	r1, [pc, #64]	@ (800d144 <m2m_wifi_init+0x100>)
 800d104:	4810      	ldr	r0, [pc, #64]	@ (800d148 <m2m_wifi_init+0x104>)
 800d106:	f002 fb09 	bl	800f71c <iprintf>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
 800d10a:	e005      	b.n	800d118 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d10c:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
 800d10e:	2000      	movs	r0, #0
 800d110:	f000 fd30 	bl	800db74 <nm_drv_deinit>
 800d114:	e000      	b.n	800d118 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d116:	bf00      	nop
_EXIT0:
	return ret;
 800d118:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3738      	adds	r7, #56	@ 0x38
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	200028d4 	.word	0x200028d4
 800d128:	200028d1 	.word	0x200028d1
 800d12c:	0800cc19 	.word	0x0800cc19
 800d130:	08012a54 	.word	0x08012a54
 800d134:	08012a7c 	.word	0x08012a7c
 800d138:	08012a98 	.word	0x08012a98
 800d13c:	08012abc 	.word	0x08012abc
 800d140:	08012ad4 	.word	0x08012ad4
 800d144:	08012ae0 	.word	0x08012ae0
 800d148:	08012aec 	.word	0x08012aec

0800d14c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
 800d154:	f7ff fc92 	bl	800ca7c <hif_handle_isr>
 800d158:	4603      	mov	r3, r0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <m2m_wifi_enable_ap>:
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_P2P, NULL, 0, NULL, 0, 0);
	return ret;
}
sint8 m2m_wifi_enable_ap(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b088      	sub	sp, #32
 800d166:	af04      	add	r7, sp, #16
 800d168:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_ERR_FAIL;
 800d16a:	23f4      	movs	r3, #244	@ 0xf4
 800d16c:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrM2MAPConfig))
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fed8 	bl	800cf24 <m2m_validate_ap_parameters>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10d      	bne.n	800d196 <m2m_wifi_enable_ap+0x34>
	{
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_AP, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig), NULL, 0, 0);
 800d17a:	2300      	movs	r3, #0
 800d17c:	9302      	str	r3, [sp, #8]
 800d17e:	2300      	movs	r3, #0
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	2300      	movs	r3, #0
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	2388      	movs	r3, #136	@ 0x88
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	2146      	movs	r1, #70	@ 0x46
 800d18c:	2001      	movs	r0, #1
 800d18e:	f7ff fa3d 	bl	800c60c <hif_send>
 800d192:	4603      	mov	r3, r0
 800d194:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800d196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b086      	sub	sp, #24
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1b8:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d1ba:	6939      	ldr	r1, [r7, #16]
 800d1bc:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800d1c0:	f000 fb13 	bl	800d7ea <nm_write_reg>
		if(val32 != 0) {
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d013      	beq.n	800d1f2 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800d1ce:	f107 030c 	add.w	r3, r7, #12
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800d1d8:	f000 faf9 	bl	800d7ce <nm_read_reg_with_ret>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800d1e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1e8      	bne.n	800d1ba <chip_apply_conf+0x18>
				if(reg == val32)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	693a      	ldr	r2, [r7, #16]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d002      	beq.n	800d1f6 <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d1f0:	e7e3      	b.n	800d1ba <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800d1f2:	bf00      	nop
 800d1f4:	e000      	b.n	800d1f8 <chip_apply_conf+0x56>
					break;
 800d1f6:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800d20c:	2300      	movs	r3, #0
 800d20e:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800d210:	463b      	mov	r3, r7
 800d212:	4619      	mov	r1, r3
 800d214:	f241 4008 	movw	r0, #5128	@ 0x1408
 800d218:	f000 fad9 	bl	800d7ce <nm_read_reg_with_ret>
 800d21c:	4603      	mov	r3, r0
 800d21e:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d12b      	bne.n	800d280 <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d22e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	4619      	mov	r1, r3
 800d234:	f241 4008 	movw	r0, #5128	@ 0x1408
 800d238:	f000 fad7 	bl	800d7ea <nm_write_reg>
 800d23c:	4603      	mov	r3, r0
 800d23e:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d11d      	bne.n	800d284 <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800d248:	463b      	mov	r3, r7
 800d24a:	4619      	mov	r1, r3
 800d24c:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800d250:	f000 fabd 	bl	800d7ce <nm_read_reg_with_ret>
 800d254:	4603      	mov	r3, r0
 800d256:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d113      	bne.n	800d288 <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d266:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	4619      	mov	r1, r3
 800d26c:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800d270:	f000 fabb 	bl	800d7ea <nm_write_reg>
 800d274:	4603      	mov	r3, r0
 800d276:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d27c:	2b00      	cmp	r3, #0
ERR1:
 800d27e:	e004      	b.n	800d28a <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d280:	bf00      	nop
 800d282:	e002      	b.n	800d28a <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d284:	bf00      	nop
 800d286:	e000      	b.n	800d28a <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d288:	bf00      	nop
	return ret;
 800d28a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800d29e:	4b31      	ldr	r3, [pc, #196]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d157      	bne.n	800d356 <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800d2a6:	492f      	ldr	r1, [pc, #188]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d2a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d2ac:	f000 fa8f 	bl	800d7ce <nm_read_reg_with_ret>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d004      	beq.n	800d2c0 <nmi_get_chipid+0x28>
			chipid = 0;
 800d2b6:	4b2b      	ldr	r3, [pc, #172]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
			return 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e04c      	b.n	800d35a <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800d2c0:	1d3b      	adds	r3, r7, #4
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 800d2c8:	f000 fa81 	bl	800d7ce <nm_read_reg_with_ret>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d004      	beq.n	800d2dc <nmi_get_chipid+0x44>
			chipid = 0;
 800d2d2:	4b24      	ldr	r3, [pc, #144]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]
			return 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e03e      	b.n	800d35a <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800d2dc:	4b21      	ldr	r3, [pc, #132]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a21      	ldr	r2, [pc, #132]	@ (800d368 <nmi_get_chipid+0xd0>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d106      	bne.n	800d2f4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d028      	beq.n	800d33e <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800d2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d2ee:	4a1f      	ldr	r2, [pc, #124]	@ (800d36c <nmi_get_chipid+0xd4>)
 800d2f0:	601a      	str	r2, [r3, #0]
 800d2f2:	e024      	b.n	800d33e <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800d2f4:	4b1b      	ldr	r3, [pc, #108]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d370 <nmi_get_chipid+0xd8>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d10d      	bne.n	800d31a <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b03      	cmp	r3, #3
 800d302:	d01c      	beq.n	800d33e <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b04      	cmp	r3, #4
 800d308:	d103      	bne.n	800d312 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800d30a:	4b16      	ldr	r3, [pc, #88]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d30c:	4a19      	ldr	r2, [pc, #100]	@ (800d374 <nmi_get_chipid+0xdc>)
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	e015      	b.n	800d33e <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800d312:	4b14      	ldr	r3, [pc, #80]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d314:	4a18      	ldr	r2, [pc, #96]	@ (800d378 <nmi_get_chipid+0xe0>)
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	e011      	b.n	800d33e <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800d31a:	4b12      	ldr	r3, [pc, #72]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a17      	ldr	r2, [pc, #92]	@ (800d37c <nmi_get_chipid+0xe4>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d10c      	bne.n	800d33e <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800d324:	490f      	ldr	r1, [pc, #60]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d326:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800d32a:	f000 fa50 	bl	800d7ce <nm_read_reg_with_ret>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d004      	beq.n	800d33e <nmi_get_chipid+0xa6>
			chipid = 0;
 800d334:	4b0b      	ldr	r3, [pc, #44]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d336:	2200      	movs	r2, #0
 800d338:	601a      	str	r2, [r3, #0]
			return 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	e00d      	b.n	800d35a <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800d33e:	4b09      	ldr	r3, [pc, #36]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800d346:	4a07      	ldr	r2, [pc, #28]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d348:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800d34a:	4b06      	ldr	r3, [pc, #24]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800d352:	4a04      	ldr	r2, [pc, #16]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d354:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800d356:	4b03      	ldr	r3, [pc, #12]	@ (800d364 <nmi_get_chipid+0xcc>)
 800d358:	681b      	ldr	r3, [r3, #0]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	200028d8 	.word	0x200028d8
 800d368:	001002a0 	.word	0x001002a0
 800d36c:	001002a1 	.word	0x001002a1
 800d370:	001002b0 	.word	0x001002b0
 800d374:	001002b1 	.word	0x001002b1
 800d378:	001002b2 	.word	0x001002b2
 800d37c:	001000f0 	.word	0x001000f0

0800d380 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800d386:	2300      	movs	r3, #0
 800d388:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d38a:	463b      	mov	r3, r7
 800d38c:	4619      	mov	r1, r3
 800d38e:	2010      	movs	r0, #16
 800d390:	f000 fa1d 	bl	800d7ce <nm_read_reg_with_ret>
 800d394:	4603      	mov	r3, r0
 800d396:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800d398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d144      	bne.n	800d42a <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d000      	beq.n	800d3ac <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d3aa:	e7ee      	b.n	800d38a <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800d3ac:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800d3ae:	463b      	mov	r3, r7
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	2001      	movs	r0, #1
 800d3b4:	f000 fa0b 	bl	800d7ce <nm_read_reg_with_ret>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d3bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d134      	bne.n	800d42e <chip_sleep+0xae>
	if(reg & NBIT1)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	f003 0302 	and.w	r3, r3, #2
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00e      	beq.n	800d3ec <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	f023 0302 	bic.w	r3, r3, #2
 800d3d4:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	2001      	movs	r0, #1
 800d3dc:	f000 fa05 	bl	800d7ea <nm_write_reg>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d3e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d122      	bne.n	800d432 <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d3ec:	463b      	mov	r3, r7
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	200b      	movs	r0, #11
 800d3f2:	f000 f9ec 	bl	800d7ce <nm_read_reg_with_ret>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d3fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d119      	bne.n	800d436 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d016      	beq.n	800d43a <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	f023 0301 	bic.w	r3, r3, #1
 800d412:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	4619      	mov	r1, r3
 800d418:	200b      	movs	r0, #11
 800d41a:	f000 f9e6 	bl	800d7ea <nm_write_reg>
 800d41e:	4603      	mov	r3, r0
 800d420:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d426:	2b00      	cmp	r3, #0
	}

ERR1:
 800d428:	e007      	b.n	800d43a <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800d42a:	bf00      	nop
 800d42c:	e006      	b.n	800d43c <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d42e:	bf00      	nop
 800d430:	e004      	b.n	800d43c <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800d432:	bf00      	nop
 800d434:	e002      	b.n	800d43c <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d436:	bf00      	nop
 800d438:	e000      	b.n	800d43c <chip_sleep+0xbc>
ERR1:
 800d43a:	bf00      	nop
	return ret;
 800d43c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <chip_wake>:
sint8 chip_wake(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800d452:	2300      	movs	r3, #0
 800d454:	607b      	str	r3, [r7, #4]
 800d456:	2300      	movs	r3, #0
 800d458:	603b      	str	r3, [r7, #0]
 800d45a:	2300      	movs	r3, #0
 800d45c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d45e:	1d3b      	adds	r3, r7, #4
 800d460:	4619      	mov	r1, r3
 800d462:	200b      	movs	r0, #11
 800d464:	f000 f9b3 	bl	800d7ce <nm_read_reg_with_ret>
 800d468:	4603      	mov	r3, r0
 800d46a:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d46c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d150      	bne.n	800d516 <chip_wake+0xce>

	if(!(reg & NBIT0))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10c      	bne.n	800d498 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f043 0301 	orr.w	r3, r3, #1
 800d484:	4619      	mov	r1, r3
 800d486:	200b      	movs	r0, #11
 800d488:	f000 f9af 	bl	800d7ea <nm_write_reg>
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d140      	bne.n	800d51a <chip_wake+0xd2>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800d498:	1d3b      	adds	r3, r7, #4
 800d49a:	4619      	mov	r1, r3
 800d49c:	2001      	movs	r0, #1
 800d49e:	f000 f996 	bl	800d7ce <nm_read_reg_with_ret>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d137      	bne.n	800d51e <chip_wake+0xd6>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f003 0302 	and.w	r3, r3, #2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d000      	beq.n	800d4ba <chip_wake+0x72>
 800d4b8:	e00d      	b.n	800d4d6 <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f043 0302 	orr.w	r3, r3, #2
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	f000 f991 	bl	800d7ea <nm_write_reg>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800d4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d000      	beq.n	800d4d6 <chip_wake+0x8e>
 800d4d4:	e026      	b.n	800d524 <chip_wake+0xdc>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800d4d6:	463b      	mov	r3, r7
 800d4d8:	4619      	mov	r1, r3
 800d4da:	200f      	movs	r0, #15
 800d4dc:	f000 f977 	bl	800d7ce <nm_read_reg_with_ret>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800d4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d11a      	bne.n	800d522 <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	f003 0304 	and.w	r3, r3, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10b      	bne.n	800d50e <chip_wake+0xc6>
			break;
		}
		nm_bsp_sleep(2);
 800d4f6:	2002      	movs	r0, #2
 800d4f8:	f7fe fde8 	bl	800c0cc <nm_bsp_sleep>
		trials++;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	3301      	adds	r3, #1
 800d500:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2b04      	cmp	r3, #4
 800d506:	d9e6      	bls.n	800d4d6 <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 800d508:	23fc      	movs	r3, #252	@ 0xfc
 800d50a:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800d50c:	e00a      	b.n	800d524 <chip_wake+0xdc>
			break;
 800d50e:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800d510:	f000 f942 	bl	800d798 <nm_bus_reset>
 800d514:	e006      	b.n	800d524 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d516:	bf00      	nop
 800d518:	e004      	b.n	800d524 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d51a:	bf00      	nop
 800d51c:	e002      	b.n	800d524 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d51e:	bf00      	nop
 800d520:	e000      	b.n	800d524 <chip_wake+0xdc>
			goto _WAKE_EXIT;
 800d522:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800d524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b088      	sub	sp, #32
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	71fb      	strb	r3, [r7, #7]
	printf("wait_for_bootrom: Printing from here\n");
 800d53a:	4845      	ldr	r0, [pc, #276]	@ (800d650 <wait_for_bootrom+0x120>)
 800d53c:	f002 f956 	bl	800f7ec <puts>
	sint8 ret = M2M_SUCCESS;
 800d540:	2300      	movs	r3, #0
 800d542:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	61bb      	str	r3, [r7, #24]
 800d548:	2300      	movs	r3, #0
 800d54a:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800d54c:	2300      	movs	r3, #0
 800d54e:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800d550:	4b40      	ldr	r3, [pc, #256]	@ (800d654 <wait_for_bootrom+0x124>)
 800d552:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800d554:	2300      	movs	r3, #0
 800d556:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800d558:	f241 0014 	movw	r0, #4116	@ 0x1014
 800d55c:	f000 f92b 	bl	800d7b6 <nm_read_reg>
 800d560:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	2b00      	cmp	r3, #0
 800d566:	db03      	blt.n	800d570 <wait_for_bootrom+0x40>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800d568:	2001      	movs	r0, #1
 800d56a:	f7fe fdaf 	bl	800c0cc <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800d56e:	e7f3      	b.n	800d558 <wait_for_bootrom+0x28>
			break;
 800d570:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800d572:	4839      	ldr	r0, [pc, #228]	@ (800d658 <wait_for_bootrom+0x128>)
 800d574:	f000 f91f 	bl	800d7b6 <nm_read_reg>
 800d578:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d119      	bne.n	800d5bc <wait_for_bootrom+0x8c>
	{
		reg = 0;
 800d588:	2300      	movs	r3, #0
 800d58a:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800d58c:	e012      	b.n	800d5b4 <wait_for_bootrom+0x84>
		{
			nm_bsp_sleep(1);
 800d58e:	2001      	movs	r0, #1
 800d590:	f7fe fd9c 	bl	800c0cc <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800d594:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800d598:	f000 f90d 	bl	800d7b6 <nm_read_reg>
 800d59c:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	617b      	str	r3, [r7, #20]
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d902      	bls.n	800d5b4 <wait_for_bootrom+0x84>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800d5ae:	23fb      	movs	r3, #251	@ 0xfb
 800d5b0:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800d5b2:	e046      	b.n	800d642 <wait_for_bootrom+0x112>
		while(reg != M2M_FINISH_BOOT_ROM)
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	4a29      	ldr	r2, [pc, #164]	@ (800d65c <wait_for_bootrom+0x12c>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d1e8      	bne.n	800d58e <wait_for_bootrom+0x5e>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800d5bc:	79fb      	ldrb	r3, [r7, #7]
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d10a      	bne.n	800d5d8 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800d5c2:	4927      	ldr	r1, [pc, #156]	@ (800d660 <wait_for_bootrom+0x130>)
 800d5c4:	4827      	ldr	r0, [pc, #156]	@ (800d664 <wait_for_bootrom+0x134>)
 800d5c6:	f000 f910 	bl	800d7ea <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800d5ca:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800d5ce:	f241 008c 	movw	r0, #4236	@ 0x108c
 800d5d2:	f000 f90a 	bl	800d7ea <nm_write_reg>
 800d5d6:	e01c      	b.n	800d612 <wait_for_bootrom+0xe2>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800d5d8:	79fb      	ldrb	r3, [r7, #7]
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	d109      	bne.n	800d5f2 <wait_for_bootrom+0xc2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800d5de:	4920      	ldr	r1, [pc, #128]	@ (800d660 <wait_for_bootrom+0x130>)
 800d5e0:	4820      	ldr	r0, [pc, #128]	@ (800d664 <wait_for_bootrom+0x134>)
 800d5e2:	f000 f902 	bl	800d7ea <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	f241 008c 	movw	r0, #4236	@ 0x108c
 800d5ec:	f000 f8fd 	bl	800d7ea <nm_write_reg>
 800d5f0:	e00f      	b.n	800d612 <wait_for_bootrom+0xe2>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800d5f2:	79fb      	ldrb	r3, [r7, #7]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d107      	bne.n	800d608 <wait_for_bootrom+0xd8>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800d5f8:	2380      	movs	r3, #128	@ 0x80
 800d5fa:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800d5fc:	68f9      	ldr	r1, [r7, #12]
 800d5fe:	f241 008c 	movw	r0, #4236	@ 0x108c
 800d602:	f000 f8f2 	bl	800d7ea <nm_write_reg>
 800d606:	e004      	b.n	800d612 <wait_for_bootrom+0xe2>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800d608:	68f9      	ldr	r1, [r7, #12]
 800d60a:	f241 008c 	movw	r0, #4236	@ 0x108c
 800d60e:	f000 f8ec 	bl	800d7ea <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800d612:	f7ff fe41 	bl	800d298 <nmi_get_chipid>
 800d616:	4603      	mov	r3, r0
 800d618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d61c:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800d620:	d303      	bcc.n	800d62a <wait_for_bootrom+0xfa>
		//chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
		chip_apply_conf(u32GpReg1);
 800d622:	6938      	ldr	r0, [r7, #16]
 800d624:	f7ff fdbd 	bl	800d1a2 <chip_apply_conf>
 800d628:	e002      	b.n	800d630 <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 800d62a:	6938      	ldr	r0, [r7, #16]
 800d62c:	f7ff fdb9 	bl	800d1a2 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
	printf("DriverVerInfo:0x%08lx\n",u32DriverVerInfo);
 800d630:	68f9      	ldr	r1, [r7, #12]
 800d632:	480d      	ldr	r0, [pc, #52]	@ (800d668 <wait_for_bootrom+0x138>)
 800d634:	f002 f872 	bl	800f71c <iprintf>
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800d638:	490c      	ldr	r1, [pc, #48]	@ (800d66c <wait_for_bootrom+0x13c>)
 800d63a:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800d63e:	f000 f8d4 	bl	800d7ea <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800d642:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3720      	adds	r7, #32
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	08012b04 	.word	0x08012b04
 800d654:	13541354 	.word	0x13541354
 800d658:	000207bc 	.word	0x000207bc
 800d65c:	10add09e 	.word	0x10add09e
 800d660:	3c1cd57d 	.word	0x3c1cd57d
 800d664:	000207ac 	.word	0x000207ac
 800d668:	08012b2c 	.word	0x08012b2c
 800d66c:	ef522f61 	.word	0xef522f61

0800d670 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800d67a:	2300      	movs	r3, #0
 800d67c:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	61bb      	str	r3, [r7, #24]
 800d682:	2300      	movs	r3, #0
 800d684:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800d686:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800d68a:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800d68c:	f241 038c 	movw	r3, #4236	@ 0x108c
 800d690:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800d692:	4b1a      	ldr	r3, [pc, #104]	@ (800d6fc <wait_for_firmware_start+0x8c>)
 800d694:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d002      	beq.n	800d6a2 <wait_for_firmware_start+0x32>
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	2b03      	cmp	r3, #3
 800d6a0:	d116      	bne.n	800d6d0 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800d6a2:	4b17      	ldr	r3, [pc, #92]	@ (800d700 <wait_for_firmware_start+0x90>)
 800d6a4:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800d6a6:	4b17      	ldr	r3, [pc, #92]	@ (800d704 <wait_for_firmware_start+0x94>)
 800d6a8:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800d6aa:	e011      	b.n	800d6d0 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800d6ac:	2002      	movs	r0, #2
 800d6ae:	f7fe fd0d 	bl	800c0cc <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f000 f87e 	bl	800d7b6 <nm_read_reg>
 800d6ba:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	617b      	str	r3, [r7, #20]
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d302      	bcc.n	800d6d0 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800d6ca:	23fb      	movs	r3, #251	@ 0xfb
 800d6cc:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800d6ce:	e00e      	b.n	800d6ee <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	69ba      	ldr	r2, [r7, #24]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d1e9      	bne.n	800d6ac <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4a08      	ldr	r2, [pc, #32]	@ (800d6fc <wait_for_firmware_start+0x8c>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d105      	bne.n	800d6ec <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	f241 008c 	movw	r0, #4236	@ 0x108c
 800d6e6:	f000 f880 	bl	800d7ea <nm_write_reg>
 800d6ea:	e000      	b.n	800d6ee <wait_for_firmware_start+0x7e>
	}
ERR:
 800d6ec:	bf00      	nop
	return ret;
 800d6ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3720      	adds	r7, #32
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	02532636 	.word	0x02532636
 800d700:	000207ac 	.word	0x000207ac
 800d704:	d75dc1c3 	.word	0xd75dc1c3

0800d708 <chip_deinit>:

sint8 chip_deinit(void)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800d712:	463b      	mov	r3, r7
 800d714:	4619      	mov	r1, r3
 800d716:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800d71a:	f000 f858 	bl	800d7ce <nm_read_reg_with_ret>
 800d71e:	4603      	mov	r3, r0
 800d720:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800d722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10f      	bne.n	800d74a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d730:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	4619      	mov	r1, r3
 800d736:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800d73a:	f000 f856 	bl	800d7ea <nm_write_reg>
 800d73e:	4603      	mov	r3, r0
 800d740:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800d742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d746:	2b00      	cmp	r3, #0
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
 800d748:	e000      	b.n	800d74c <chip_deinit+0x44>
		goto ERR1;
 800d74a:	bf00      	nop
	return ret;
 800d74c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800d760:	2300      	movs	r3, #0
 800d762:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7fe fdaf 	bl	800c2c8 <nm_bus_init>
 800d76a:	4603      	mov	r3, r0
 800d76c:	73fb      	strb	r3, [r7, #15]


	return ret;
 800d76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800d780:	2300      	movs	r3, #0
 800d782:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800d784:	f7fe fe08 	bl	800c398 <nm_bus_deinit>
 800d788:	4603      	mov	r3, r0
 800d78a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800d78c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
    ret = nm_spi_reset();
 800d7a2:	f000 fe9f 	bl	800e4e4 <nm_spi_reset>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	71fb      	strb	r3, [r7, #7]
	return ret;
 800d7aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
#elif defined (CONF_WINC_USE_I2C)
#else
#error "Plesae define bus usage"
	return ret;
#endif
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 ff00 	bl	800e5c4 <nm_spi_read_reg>
 800d7c4:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 ff03 	bl	800e5e6 <nm_spi_read_reg_with_ret>
 800d7e0:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 ff0f 	bl	800e61a <nm_spi_write_reg>
 800d7fc:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	60f8      	str	r0, [r7, #12]
 800d80e:	60b9      	str	r1, [r7, #8]
 800d810:	4613      	mov	r3, r2
 800d812:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800d814:	88fb      	ldrh	r3, [r7, #6]
 800d816:	461a      	mov	r2, r3
 800d818:	68b9      	ldr	r1, [r7, #8]
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f000 ff17 	bl	800e64e <nm_spi_read_block>
 800d820:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800d838:	4b20      	ldr	r3, [pc, #128]	@ (800d8bc <nm_read_block+0x90>)
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	3b08      	subs	r3, #8
 800d83e:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800d844:	2300      	movs	r3, #0
 800d846:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800d848:	8a3b      	ldrh	r3, [r7, #16]
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d80f      	bhi.n	800d870 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	4413      	add	r3, r2
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	b292      	uxth	r2, r2
 800d85a:	4619      	mov	r1, r3
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7ff ffd2 	bl	800d806 <p_nm_read_block>
 800d862:	4603      	mov	r3, r0
 800d864:	b2da      	uxtb	r2, r3
 800d866:	7cfb      	ldrb	r3, [r7, #19]
 800d868:	4413      	add	r3, r2
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	74fb      	strb	r3, [r7, #19]
			break;
 800d86e:	e01f      	b.n	800d8b0 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800d870:	68ba      	ldr	r2, [r7, #8]
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	4413      	add	r3, r2
 800d876:	8a3a      	ldrh	r2, [r7, #16]
 800d878:	4619      	mov	r1, r3
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f7ff ffc3 	bl	800d806 <p_nm_read_block>
 800d880:	4603      	mov	r3, r0
 800d882:	b2da      	uxtb	r2, r3
 800d884:	7cfb      	ldrb	r3, [r7, #19]
 800d886:	4413      	add	r3, r2
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800d88c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10c      	bne.n	800d8ae <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800d894:	8a3b      	ldrh	r3, [r7, #16]
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800d89c:	8a3b      	ldrh	r3, [r7, #16]
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800d8a4:	8a3b      	ldrh	r3, [r7, #16]
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800d8ac:	e7cc      	b.n	800d848 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800d8ae:	bf00      	nop
		}
	}

	return s8Ret;
 800d8b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20001230 	.word	0x20001230

0800d8c0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800d8ce:	88fb      	ldrh	r3, [r7, #6]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	68b9      	ldr	r1, [r7, #8]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f000 fed8 	bl	800e68a <nm_spi_write_block>
 800d8da:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b086      	sub	sp, #24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800d8f0:	4b20      	ldr	r3, [pc, #128]	@ (800d974 <nm_write_block+0x90>)
 800d8f2:	881b      	ldrh	r3, [r3, #0]
 800d8f4:	3b08      	subs	r3, #8
 800d8f6:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800d900:	8a3b      	ldrh	r3, [r7, #16]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	429a      	cmp	r2, r3
 800d906:	d80f      	bhi.n	800d928 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	4413      	add	r3, r2
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	b292      	uxth	r2, r2
 800d912:	4619      	mov	r1, r3
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f7ff ffd3 	bl	800d8c0 <p_nm_write_block>
 800d91a:	4603      	mov	r3, r0
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	7cfb      	ldrb	r3, [r7, #19]
 800d920:	4413      	add	r3, r2
 800d922:	b2db      	uxtb	r3, r3
 800d924:	74fb      	strb	r3, [r7, #19]
			break;
 800d926:	e01f      	b.n	800d968 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	4413      	add	r3, r2
 800d92e:	8a3a      	ldrh	r2, [r7, #16]
 800d930:	4619      	mov	r1, r3
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f7ff ffc4 	bl	800d8c0 <p_nm_write_block>
 800d938:	4603      	mov	r3, r0
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	7cfb      	ldrb	r3, [r7, #19]
 800d93e:	4413      	add	r3, r2
 800d940:	b2db      	uxtb	r3, r3
 800d942:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800d944:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10c      	bne.n	800d966 <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800d94c:	8a3b      	ldrh	r3, [r7, #16]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800d954:	8a3b      	ldrh	r3, [r7, #16]
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	4413      	add	r3, r2
 800d95a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800d95c:	8a3b      	ldrh	r3, [r7, #16]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	4413      	add	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800d964:	e7cc      	b.n	800d900 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800d966:	bf00      	nop
		}
	}

	return s8Ret;
 800d968:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20001230 	.word	0x20001230

0800d978 <nm_get_firmware_full_info>:
 *	@brief	Get Firmware version info
 *	@param [out]	M2mRev
 *			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
 *	@version	1.0
 */
sint8 nm_get_firmware_full_info(tstrM2mRev *pstrRev) {
 800d978:	b580      	push	{r7, lr}
 800d97a:	b088      	sub	sp, #32
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
	uint16 curr_drv_ver, min_req_drv_ver, curr_firm_ver;
	uint32 reg = 0;
 800d980:	2300      	movs	r3, #0
 800d982:	617b      	str	r3, [r7, #20]
	sint8 ret = M2M_SUCCESS;
 800d984:	2300      	movs	r3, #0
 800d986:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = { 0 };
 800d988:	f107 030c 	add.w	r3, r7, #12
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8086 	beq.w	800daa6 <nm_get_firmware_full_info+0x12e>
		m2m_memset((uint8*) pstrRev, 0, sizeof(tstrM2mRev));
 800d99a:	2228      	movs	r2, #40	@ 0x28
 800d99c:	2100      	movs	r1, #0
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7fe fd22 	bl	800c3e8 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800d9a4:	f107 0314 	add.w	r3, r7, #20
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	4842      	ldr	r0, [pc, #264]	@ (800dab4 <nm_get_firmware_full_info+0x13c>)
 800d9ac:	f7ff ff0f 	bl	800d7ce <nm_read_reg_with_ret>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	77fb      	strb	r3, [r7, #31]
		if (ret == M2M_SUCCESS) {
 800d9b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d174      	bne.n	800daa6 <nm_get_firmware_full_info+0x12e>
			if (reg != 0) {
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d06e      	beq.n	800daa0 <nm_get_firmware_full_info+0x128>
				ret = nm_read_block(reg | 0x30000, (uint8*) &strgp,
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800d9c8:	f107 010c 	add.w	r1, r7, #12
 800d9cc:	2208      	movs	r2, #8
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff ff2c 	bl	800d82c <nm_read_block>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	77fb      	strb	r3, [r7, #31]
						sizeof(tstrGpRegs));
				if (ret == M2M_SUCCESS) {
 800d9d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d163      	bne.n	800daa8 <nm_get_firmware_full_info+0x130>
					reg = strgp.u32Firmware_Ota_rev;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	617b      	str	r3, [r7, #20]
					if (reg != 0) {
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d054      	beq.n	800da9a <nm_get_firmware_full_info+0x122>
						ret = nm_read_block(reg | 0x30000, (uint8*) pstrRev,
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800d9f6:	2228      	movs	r2, #40	@ 0x28
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7ff ff16 	bl	800d82c <nm_read_block>
 800da00:	4603      	mov	r3, r0
 800da02:	77fb      	strb	r3, [r7, #31]
								sizeof(tstrM2mRev));
						if (ret == M2M_SUCCESS) {
 800da04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d14d      	bne.n	800daa8 <nm_get_firmware_full_info+0x130>
							curr_firm_ver = M2M_MAKE_VERSION(
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	791b      	ldrb	r3, [r3, #4]
 800da10:	021b      	lsls	r3, r3, #8
 800da12:	b21a      	sxth	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	795b      	ldrb	r3, [r3, #5]
 800da18:	011b      	lsls	r3, r3, #4
 800da1a:	b21b      	sxth	r3, r3
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	b21b      	sxth	r3, r3
 800da20:	4313      	orrs	r3, r2
 800da22:	b21a      	sxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	799b      	ldrb	r3, [r3, #6]
 800da28:	b21b      	sxth	r3, r3
 800da2a:	f003 030f 	and.w	r3, r3, #15
 800da2e:	b21b      	sxth	r3, r3
 800da30:	4313      	orrs	r3, r2
 800da32:	b21b      	sxth	r3, r3
 800da34:	83bb      	strh	r3, [r7, #28]
									pstrRev->u8FirmwareMajor,
									pstrRev->u8FirmwareMinor,
									pstrRev->u8FirmwarePatch);
							curr_drv_ver = M2M_MAKE_VERSION(
 800da36:	f241 3354 	movw	r3, #4948	@ 0x1354
 800da3a:	837b      	strh	r3, [r7, #26]
									M2M_RELEASE_VERSION_MAJOR_NO,
									M2M_RELEASE_VERSION_MINOR_NO,
									M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	79db      	ldrb	r3, [r3, #7]
 800da40:	021b      	lsls	r3, r3, #8
 800da42:	b21a      	sxth	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	7a1b      	ldrb	r3, [r3, #8]
 800da48:	011b      	lsls	r3, r3, #4
 800da4a:	b21b      	sxth	r3, r3
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	b21b      	sxth	r3, r3
 800da50:	4313      	orrs	r3, r2
 800da52:	b21a      	sxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	7a5b      	ldrb	r3, [r3, #9]
 800da58:	b21b      	sxth	r3, r3
 800da5a:	f003 030f 	and.w	r3, r3, #15
 800da5e:	b21b      	sxth	r3, r3
 800da60:	4313      	orrs	r3, r2
 800da62:	b21b      	sxth	r3, r3
 800da64:	833b      	strh	r3, [r7, #24]
									pstrRev->u8DriverMajor,
									pstrRev->u8DriverMinor,
									pstrRev->u8DriverPatch);
							if ((curr_firm_ver == 0) || (min_req_drv_ver == 0)
 800da66:	8bbb      	ldrh	r3, [r7, #28]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d005      	beq.n	800da78 <nm_get_firmware_full_info+0x100>
 800da6c:	8b3b      	ldrh	r3, [r7, #24]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <nm_get_firmware_full_info+0x100>
									|| (min_req_drv_ver == 0)) {
 800da72:	8b3b      	ldrh	r3, [r7, #24]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 800da78:	23f4      	movs	r3, #244	@ 0xf4
 800da7a:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800da7c:	e014      	b.n	800daa8 <nm_get_firmware_full_info+0x130>
							}
							if (curr_drv_ver < min_req_drv_ver) {
 800da7e:	8b7a      	ldrh	r2, [r7, #26]
 800da80:	8b3b      	ldrh	r3, [r7, #24]
 800da82:	429a      	cmp	r2, r3
 800da84:	d202      	bcs.n	800da8c <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal
								 than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800da86:	23f3      	movs	r3, #243	@ 0xf3
 800da88:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800da8a:	e00d      	b.n	800daa8 <nm_get_firmware_full_info+0x130>
							}
							if (curr_drv_ver > curr_firm_ver) {
 800da8c:	8b7a      	ldrh	r2, [r7, #26]
 800da8e:	8bbb      	ldrh	r3, [r7, #28]
 800da90:	429a      	cmp	r2, r3
 800da92:	d909      	bls.n	800daa8 <nm_get_firmware_full_info+0x130>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 800da94:	23f3      	movs	r3, #243	@ 0xf3
 800da96:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800da98:	e006      	b.n	800daa8 <nm_get_firmware_full_info+0x130>
							}
						}
					} else {
						ret = M2M_ERR_FAIL;
 800da9a:	23f4      	movs	r3, #244	@ 0xf4
 800da9c:	77fb      	strb	r3, [r7, #31]
 800da9e:	e003      	b.n	800daa8 <nm_get_firmware_full_info+0x130>
					}
				}
			} else {
				ret = M2M_ERR_FAIL;
 800daa0:	23f4      	movs	r3, #244	@ 0xf4
 800daa2:	77fb      	strb	r3, [r7, #31]
 800daa4:	e000      	b.n	800daa8 <nm_get_firmware_full_info+0x130>
			}
		}
	}
	EXIT: return ret;
 800daa6:	bf00      	nop
 800daa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3720      	adds	r7, #32
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	000c0008 	.word	0x000c0008

0800dab8 <nm_drv_init>:
 *				Generic argument
 *	@author	M. Abdelmawla
 *	@date	15 July 2012
 *	@version	1.0
 */
sint8 nm_drv_init(void *arg) {
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;

	if (NULL != arg) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00b      	beq.n	800dae2 <nm_drv_init+0x2a>
		u8Mode = *((uint8*) arg);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	73bb      	strb	r3, [r7, #14]
		if ((u8Mode < M2M_WIFI_MODE_NORMAL) || (u8Mode >= M2M_WIFI_MODE_MAX)) {
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <nm_drv_init+0x24>
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	2b04      	cmp	r3, #4
 800dada:	d904      	bls.n	800dae6 <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800dadc:	2301      	movs	r3, #1
 800dade:	73bb      	strb	r3, [r7, #14]
 800dae0:	e001      	b.n	800dae6 <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
 800dae2:	2301      	movs	r3, #1
 800dae4:	73bb      	strb	r3, [r7, #14]
	}

	ret = nm_bus_iface_init(NULL);
 800dae6:	2000      	movs	r0, #0
 800dae8:	f7ff fe36 	bl	800d758 <nm_bus_iface_init>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
	printf("nmdrv.c:\t\t\t\tSPI bus initialized!\n");
 800daf0:	481f      	ldr	r0, [pc, #124]	@ (800db70 <nm_drv_init+0xb8>)
 800daf2:	f001 fe7b 	bl	800f7ec <puts>

	if (M2M_SUCCESS != ret) {
 800daf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d12e      	bne.n	800db5c <nm_drv_init+0xa4>
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());

	//#ifdef CONF_WINC_USE_SPI
		/* Must do this after global reset to set SPI data packet size. */
	//#endif
	nm_spi_init();
 800dafe:	f000 fd03 	bl	800e508 <nm_spi_init>

	ret = wait_for_bootrom(u8Mode);
 800db02:	7bbb      	ldrb	r3, [r7, #14]
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff fd13 	bl	800d530 <wait_for_bootrom>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800db0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d11a      	bne.n	800db4c <nm_drv_init+0x94>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800db16:	7bbb      	ldrb	r3, [r7, #14]
 800db18:	4618      	mov	r0, r3
 800db1a:	f7ff fda9 	bl	800d670 <wait_for_firmware_start>
 800db1e:	4603      	mov	r3, r0
 800db20:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800db22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d112      	bne.n	800db50 <nm_drv_init+0x98>
		goto ERR2;
	}

	if ((M2M_WIFI_MODE_ATE_HIGH == u8Mode)
 800db2a:	7bbb      	ldrb	r3, [r7, #14]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d017      	beq.n	800db60 <nm_drv_init+0xa8>
			|| (M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800db30:	7bbb      	ldrb	r3, [r7, #14]
 800db32:	2b03      	cmp	r3, #3
 800db34:	d014      	beq.n	800db60 <nm_drv_init+0xa8>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800db36:	f7ff fb64 	bl	800d202 <enable_interrupts>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800db3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d106      	bne.n	800db54 <nm_drv_init+0x9c>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
 800db46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4a:	e00c      	b.n	800db66 <nm_drv_init+0xae>
		goto ERR2;
 800db4c:	bf00      	nop
 800db4e:	e002      	b.n	800db56 <nm_drv_init+0x9e>
		goto ERR2;
 800db50:	bf00      	nop
 800db52:	e000      	b.n	800db56 <nm_drv_init+0x9e>
		goto ERR2;
 800db54:	bf00      	nop
	ERR2: nm_bus_iface_deinit();
 800db56:	f7ff fe10 	bl	800d77a <nm_bus_iface_deinit>
 800db5a:	e002      	b.n	800db62 <nm_drv_init+0xaa>
		goto ERR1;
 800db5c:	bf00      	nop
 800db5e:	e000      	b.n	800db62 <nm_drv_init+0xaa>
		goto ERR1;
 800db60:	bf00      	nop
	ERR1: return ret;
 800db62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	08012b44 	.word	0x08012b44

0800db74 <nm_drv_deinit>:
 *	@brief	Deinitialize NMC1000 driver
 *	@author	M. Abdelmawla
 *	@date	17 July 2012
 *	@version	1.0
 */
sint8 nm_drv_deinit(void *arg) {
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800db7c:	f7ff fdc4 	bl	800d708 <chip_deinit>
 800db80:	4603      	mov	r3, r0
 800db82:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800db84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d113      	bne.n	800dbb4 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800db8c:	2000      	movs	r0, #0
 800db8e:	f001 fbe3 	bl	800f358 <spi_flash_enable>
 800db92:	4603      	mov	r3, r0
 800db94:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800db96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10c      	bne.n	800dbb8 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 800db9e:	f7ff fdec 	bl	800d77a <nm_bus_iface_deinit>
 800dba2:	4603      	mov	r3, r0
 800dba4:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800dba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d106      	bne.n	800dbbc <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800dbae:	f000 fcfb 	bl	800e5a8 <nm_spi_deinit>
 800dbb2:	e004      	b.n	800dbbe <nm_drv_deinit+0x4a>
		goto ERR1;
 800dbb4:	bf00      	nop
 800dbb6:	e002      	b.n	800dbbe <nm_drv_deinit+0x4a>
		goto ERR1;
 800dbb8:	bf00      	nop
 800dbba:	e000      	b.n	800dbbe <nm_drv_deinit+0x4a>
		goto ERR1;
 800dbbc:	bf00      	nop
#endif

	ERR1: return ret;
 800dbbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b086      	sub	sp, #24
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800dbde:	887b      	ldrh	r3, [r7, #2]
 800dbe0:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800dbe2:	f107 030c 	add.w	r3, r7, #12
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	2003      	movs	r0, #3
 800dbea:	f7fe fbb3 	bl	800c354 <nm_bus_ioctl>
 800dbee:	4603      	mov	r3, r0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800dc0c:	887b      	ldrh	r3, [r7, #2]
 800dc0e:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800dc10:	f107 030c 	add.w	r3, r7, #12
 800dc14:	4619      	mov	r1, r3
 800dc16:	2003      	movs	r0, #3
 800dc18:	f7fe fb9c 	bl	800c354 <nm_bus_ioctl>
 800dc1c:	4603      	mov	r3, r0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	4603      	mov	r3, r0
 800dc30:	460a      	mov	r2, r1
 800dc32:	71fb      	strb	r3, [r7, #7]
 800dc34:	4613      	mov	r3, r2
 800dc36:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	005a      	lsls	r2, r3, #1
 800dc3c:	79bb      	ldrb	r3, [r7, #6]
 800dc3e:	4053      	eors	r3, r2
 800dc40:	4a03      	ldr	r2, [pc, #12]	@ (800dc50 <crc7_byte+0x28>)
 800dc42:	5cd3      	ldrb	r3, [r2, r3]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	080131a0 	.word	0x080131a0

0800dc54 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
 800dc60:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800dc62:	e00a      	b.n	800dc7a <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	60ba      	str	r2, [r7, #8]
 800dc6a:	781a      	ldrb	r2, [r3, #0]
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
 800dc6e:	4611      	mov	r1, r2
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff ffd9 	bl	800dc28 <crc7_byte>
 800dc76:	4603      	mov	r3, r0
 800dc78:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	1e5a      	subs	r2, r3, #1
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1ef      	bne.n	800dc64 <crc7+0x10>
	return crc;
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	607a      	str	r2, [r7, #4]
 800dc9a:	603b      	str	r3, [r7, #0]
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800dca0:	2305      	movs	r3, #5
 800dca2:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800dca4:	2301      	movs	r3, #1
 800dca6:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
 800dcaa:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800dcac:	7bfb      	ldrb	r3, [r7, #15]
 800dcae:	3bc1      	subs	r3, #193	@ 0xc1
 800dcb0:	2b0e      	cmp	r3, #14
 800dcb2:	f200 80cc 	bhi.w	800de4e <spi_cmd+0x1be>
 800dcb6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcbc <spi_cmd+0x2c>)
 800dcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbc:	0800dd75 	.word	0x0800dd75
 800dcc0:	0800dd75 	.word	0x0800dd75
 800dcc4:	0800ddd1 	.word	0x0800ddd1
 800dcc8:	0800dd15 	.word	0x0800dd15
 800dccc:	0800dd3f 	.word	0x0800dd3f
 800dcd0:	0800dd51 	.word	0x0800dd51
 800dcd4:	0800dd9f 	.word	0x0800dd9f
 800dcd8:	0800dd9f 	.word	0x0800dd9f
 800dcdc:	0800de15 	.word	0x0800de15
 800dce0:	0800dcf9 	.word	0x0800dcf9
 800dce4:	0800de4f 	.word	0x0800de4f
 800dce8:	0800de4f 	.word	0x0800de4f
 800dcec:	0800de4f 	.word	0x0800de4f
 800dcf0:	0800de4f 	.word	0x0800de4f
 800dcf4:	0800dd63 	.word	0x0800dd63
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	0c1b      	lsrs	r3, r3, #16
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	0a1b      	lsrs	r3, r3, #8
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800dd0e:	2305      	movs	r3, #5
 800dd10:	77fb      	strb	r3, [r7, #31]
		break;
 800dd12:	e09f      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	0a1b      	lsrs	r3, r3, #8
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800dd1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d004      	beq.n	800dd2e <spi_cmd+0x9e>
 800dd24:	7d7b      	ldrb	r3, [r7, #21]
 800dd26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800dd34:	2300      	movs	r3, #0
 800dd36:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800dd38:	2305      	movs	r3, #5
 800dd3a:	77fb      	strb	r3, [r7, #31]
		break;
 800dd3c:	e08a      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800dd42:	2300      	movs	r3, #0
 800dd44:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800dd46:	2300      	movs	r3, #0
 800dd48:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800dd4a:	2305      	movs	r3, #5
 800dd4c:	77fb      	strb	r3, [r7, #31]
		break;
 800dd4e:	e081      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800dd50:	2300      	movs	r3, #0
 800dd52:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800dd54:	2300      	movs	r3, #0
 800dd56:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800dd5c:	2305      	movs	r3, #5
 800dd5e:	77fb      	strb	r3, [r7, #31]
		break;
 800dd60:	e078      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800dd62:	23ff      	movs	r3, #255	@ 0xff
 800dd64:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800dd66:	23ff      	movs	r3, #255	@ 0xff
 800dd68:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800dd6a:	23ff      	movs	r3, #255	@ 0xff
 800dd6c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800dd6e:	2305      	movs	r3, #5
 800dd70:	77fb      	strb	r3, [r7, #31]
		break;
 800dd72:	e06f      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	0c1b      	lsrs	r3, r3, #16
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	0a1b      	lsrs	r3, r3, #8
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	0a1b      	lsrs	r3, r3, #8
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	767b      	strb	r3, [r7, #25]
		len = 7;
 800dd98:	2307      	movs	r3, #7
 800dd9a:	77fb      	strb	r3, [r7, #31]
		break;
 800dd9c:	e05a      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	0c1b      	lsrs	r3, r3, #16
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	0a1b      	lsrs	r3, r3, #8
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	0c1b      	lsrs	r3, r3, #16
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	0a1b      	lsrs	r3, r3, #8
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800ddca:	2308      	movs	r3, #8
 800ddcc:	77fb      	strb	r3, [r7, #31]
		break;
 800ddce:	e041      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	0a1b      	lsrs	r3, r3, #8
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800ddd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d004      	beq.n	800ddea <spi_cmd+0x15a>
 800dde0:	7d7b      	ldrb	r3, [r7, #21]
 800dde2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	0e1b      	lsrs	r3, r3, #24
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	0c1b      	lsrs	r3, r3, #16
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	0a1b      	lsrs	r3, r3, #8
 800de04:	b2db      	uxtb	r3, r3
 800de06:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800de0e:	2308      	movs	r3, #8
 800de10:	77fb      	strb	r3, [r7, #31]
		break;
 800de12:	e01f      	b.n	800de54 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	0c1b      	lsrs	r3, r3, #16
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	0a1b      	lsrs	r3, r3, #8
 800de20:	b2db      	uxtb	r3, r3
 800de22:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	b2db      	uxtb	r3, r3
 800de28:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	0e1b      	lsrs	r3, r3, #24
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	0c1b      	lsrs	r3, r3, #16
 800de36:	b2db      	uxtb	r3, r3
 800de38:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	0a1b      	lsrs	r3, r3, #8
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	b2db      	uxtb	r3, r3
 800de46:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800de48:	2309      	movs	r3, #9
 800de4a:	77fb      	strb	r3, [r7, #31]
		break;
 800de4c:	e002      	b.n	800de54 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800de4e:	2300      	movs	r3, #0
 800de50:	77bb      	strb	r3, [r7, #30]
		break;
 800de52:	bf00      	nop
	}

	if (result) {
 800de54:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d027      	beq.n	800deac <spi_cmd+0x21c>
		if (!gu8Crc_off)
 800de5c:	4b16      	ldr	r3, [pc, #88]	@ (800deb8 <spi_cmd+0x228>)
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d113      	bne.n	800de8c <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800de64:	7ffb      	ldrb	r3, [r7, #31]
 800de66:	3b01      	subs	r3, #1
 800de68:	461a      	mov	r2, r3
 800de6a:	f107 0314 	add.w	r3, r7, #20
 800de6e:	4619      	mov	r1, r3
 800de70:	207f      	movs	r0, #127	@ 0x7f
 800de72:	f7ff feef 	bl	800dc54 <crc7>
 800de76:	4603      	mov	r3, r0
 800de78:	461a      	mov	r2, r3
 800de7a:	7ffb      	ldrb	r3, [r7, #31]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	0052      	lsls	r2, r2, #1
 800de80:	b2d2      	uxtb	r2, r2
 800de82:	3320      	adds	r3, #32
 800de84:	443b      	add	r3, r7
 800de86:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800de8a:	e002      	b.n	800de92 <spi_cmd+0x202>
		else
			len-=1;
 800de8c:	7ffb      	ldrb	r3, [r7, #31]
 800de8e:	3b01      	subs	r3, #1
 800de90:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800de92:	7ffb      	ldrb	r3, [r7, #31]
 800de94:	b29a      	uxth	r2, r3
 800de96:	f107 0314 	add.w	r3, r7, #20
 800de9a:	4611      	mov	r1, r2
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff feab 	bl	800dbf8 <nmi_spi_write>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <spi_cmd+0x21c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800deac:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3720      	adds	r7, #32
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	200028dc 	.word	0x200028dc

0800debc <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	4603      	mov	r3, r0
 800dec4:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800dec6:	2301      	movs	r3, #1
 800dec8:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800deca:	4b18      	ldr	r3, [pc, #96]	@ (800df2c <spi_data_rsp+0x70>)
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d102      	bne.n	800ded8 <spi_data_rsp+0x1c>
		len = 2;
 800ded2:	2302      	movs	r3, #2
 800ded4:	73fb      	strb	r3, [r7, #15]
 800ded6:	e001      	b.n	800dedc <spi_data_rsp+0x20>
	else
		len = 3;
 800ded8:	2303      	movs	r3, #3
 800deda:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
 800dede:	b29a      	uxth	r2, r3
 800dee0:	f107 0308 	add.w	r3, r7, #8
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff fe6f 	bl	800dbca <nmi_spi_read>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 800def2:	2300      	movs	r3, #0
 800def4:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800def6:	e013      	b.n	800df20 <spi_data_rsp+0x64>
	}

	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	3b01      	subs	r3, #1
 800defc:	3310      	adds	r3, #16
 800defe:	443b      	add	r3, r7
 800df00:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d107      	bne.n	800df18 <spi_data_rsp+0x5c>
 800df08:	7bfb      	ldrb	r3, [r7, #15]
 800df0a:	3b02      	subs	r3, #2
 800df0c:	3310      	adds	r3, #16
 800df0e:	443b      	add	r3, r7
 800df10:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800df14:	2bc3      	cmp	r3, #195	@ 0xc3
 800df16:	d002      	beq.n	800df1e <spi_data_rsp+0x62>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 800df18:	2300      	movs	r3, #0
 800df1a:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800df1c:	e000      	b.n	800df20 <spi_data_rsp+0x64>
	}
_fail_:
 800df1e:	bf00      	nop

	return result;
 800df20:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	200028dc 	.word	0x200028dc

0800df30 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	4603      	mov	r3, r0
 800df38:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800df3a:	2301      	movs	r3, #1
 800df3c:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	2bcf      	cmp	r3, #207	@ 0xcf
 800df42:	d005      	beq.n	800df50 <spi_cmd_rsp+0x20>
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	2bc5      	cmp	r3, #197	@ 0xc5
 800df48:	d002      	beq.n	800df50 <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	2bc6      	cmp	r3, #198	@ 0xc6
 800df4e:	d10b      	bne.n	800df68 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800df50:	f107 030d 	add.w	r3, r7, #13
 800df54:	2101      	movs	r1, #1
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff fe37 	bl	800dbca <nmi_spi_read>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d002      	beq.n	800df68 <spi_cmd_rsp+0x38>
			result = N_FAIL;
 800df62:	2300      	movs	r3, #0
 800df64:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800df66:	e033      	b.n	800dfd0 <spi_cmd_rsp+0xa0>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800df68:	230a      	movs	r3, #10
 800df6a:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800df6c:	f107 030d 	add.w	r3, r7, #13
 800df70:	2101      	movs	r1, #1
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fe29 	bl	800dbca <nmi_spi_read>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <spi_cmd_rsp+0x54>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800df7e:	2300      	movs	r3, #0
 800df80:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800df82:	e025      	b.n	800dfd0 <spi_cmd_rsp+0xa0>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800df84:	7b7b      	ldrb	r3, [r7, #13]
 800df86:	79fa      	ldrb	r2, [r7, #7]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d007      	beq.n	800df9c <spi_cmd_rsp+0x6c>
 800df8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df90:	b2da      	uxtb	r2, r3
 800df92:	3a01      	subs	r2, #1
 800df94:	b2d2      	uxtb	r2, r2
 800df96:	73ba      	strb	r2, [r7, #14]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	dce7      	bgt.n	800df6c <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800df9c:	230a      	movs	r3, #10
 800df9e:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800dfa0:	f107 030d 	add.w	r3, r7, #13
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7ff fe0f 	bl	800dbca <nmi_spi_read>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d002      	beq.n	800dfb8 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800dfb6:	e00b      	b.n	800dfd0 <spi_cmd_rsp+0xa0>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800dfb8:	7b7b      	ldrb	r3, [r7, #13]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d007      	beq.n	800dfce <spi_cmd_rsp+0x9e>
 800dfbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	3a01      	subs	r2, #1
 800dfc6:	b2d2      	uxtb	r2, r2
 800dfc8:	73ba      	strb	r2, [r7, #14]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	dce8      	bgt.n	800dfa0 <spi_cmd_rsp+0x70>

_fail_:
 800dfce:	bf00      	nop

	return result;
 800dfd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	807b      	strh	r3, [r7, #2]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800dfec:	2301      	movs	r3, #1
 800dfee:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800dff0:	2300      	movs	r3, #0
 800dff2:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800dff4:	887b      	ldrh	r3, [r7, #2]
 800dff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dffa:	d802      	bhi.n	800e002 <spi_data_read+0x26>
			nbytes = sz;
 800dffc:	887b      	ldrh	r3, [r7, #2]
 800dffe:	827b      	strh	r3, [r7, #18]
 800e000:	e002      	b.n	800e008 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e002:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e006:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800e008:	230a      	movs	r3, #10
 800e00a:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e00c:	f107 030b 	add.w	r3, r7, #11
 800e010:	2101      	movs	r1, #1
 800e012:	4618      	mov	r0, r3
 800e014:	f7ff fdd9 	bl	800dbca <nmi_spi_read>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d002      	beq.n	800e024 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 800e01e:	2300      	movs	r3, #0
 800e020:	747b      	strb	r3, [r7, #17]
				break;
 800e022:	e010      	b.n	800e046 <spi_data_read+0x6a>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
 800e024:	7afb      	ldrb	r3, [r7, #11]
 800e026:	091b      	lsrs	r3, r3, #4
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	f003 030f 	and.w	r3, r3, #15
 800e02e:	2b0f      	cmp	r3, #15
 800e030:	d008      	beq.n	800e044 <spi_data_read+0x68>
				break;
		} while (retry--);
 800e032:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e036:	b29a      	uxth	r2, r3
 800e038:	3a01      	subs	r2, #1
 800e03a:	b292      	uxth	r2, r2
 800e03c:	82fa      	strh	r2, [r7, #22]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1e4      	bne.n	800e00c <spi_data_read+0x30>
 800e042:	e000      	b.n	800e046 <spi_data_read+0x6a>
				break;
 800e044:	bf00      	nop

		if (result == N_FAIL)
 800e046:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d035      	beq.n	800e0ba <spi_data_read+0xde>
			break;

		if (retry <= 0) {
 800e04e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e052:	2b00      	cmp	r3, #0
 800e054:	dc02      	bgt.n	800e05c <spi_data_read+0x80>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 800e056:	2300      	movs	r3, #0
 800e058:	747b      	strb	r3, [r7, #17]
			break;
 800e05a:	e02f      	b.n	800e0bc <spi_data_read+0xe0>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800e05c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	4413      	add	r3, r2
 800e064:	8a7a      	ldrh	r2, [r7, #18]
 800e066:	4611      	mov	r1, r2
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff fdae 	bl	800dbca <nmi_spi_read>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <spi_data_read+0x9e>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 800e074:	2300      	movs	r3, #0
 800e076:	747b      	strb	r3, [r7, #17]
			break;
 800e078:	e020      	b.n	800e0bc <spi_data_read+0xe0>
		}
		if(!clockless)
 800e07a:	787b      	ldrb	r3, [r7, #1]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10f      	bne.n	800e0a0 <spi_data_read+0xc4>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800e080:	4b11      	ldr	r3, [pc, #68]	@ (800e0c8 <spi_data_read+0xec>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10b      	bne.n	800e0a0 <spi_data_read+0xc4>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800e088:	f107 030c 	add.w	r3, r7, #12
 800e08c:	2102      	movs	r1, #2
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff fd9b 	bl	800dbca <nmi_spi_read>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <spi_data_read+0xc4>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 800e09a:	2300      	movs	r3, #0
 800e09c:	747b      	strb	r3, [r7, #17]
					break;
 800e09e:	e00d      	b.n	800e0bc <spi_data_read+0xe0>
				}
			}
		}
		ix += nbytes;
 800e0a0:	8aba      	ldrh	r2, [r7, #20]
 800e0a2:	8a7b      	ldrh	r3, [r7, #18]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800e0aa:	8a7b      	ldrh	r3, [r7, #18]
 800e0ac:	887a      	ldrh	r2, [r7, #2]
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800e0b2:	887b      	ldrh	r3, [r7, #2]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d19d      	bne.n	800dff4 <spi_data_read+0x18>
 800e0b8:	e000      	b.n	800e0bc <spi_data_read+0xe0>
			break;
 800e0ba:	bf00      	nop

	return result;
 800e0bc:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3718      	adds	r7, #24
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	200028dc 	.word	0x200028dc

0800e0cc <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800e0dc:	2300      	movs	r3, #0
 800e0de:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
 800e0e4:	887b      	ldrh	r3, [r7, #2]
 800e0e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0ea:	d802      	bhi.n	800e0f2 <spi_data_write+0x26>
			nbytes = sz;
 800e0ec:	887b      	ldrh	r3, [r7, #2]
 800e0ee:	82bb      	strh	r3, [r7, #20]
 800e0f0:	e002      	b.n	800e0f8 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e0f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e0f6:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800e0f8:	23f0      	movs	r3, #240	@ 0xf0
 800e0fa:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800e0fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d109      	bne.n	800e118 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800e104:	887b      	ldrh	r3, [r7, #2]
 800e106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e10a:	d802      	bhi.n	800e112 <spi_data_write+0x46>
				order = 0x3;
 800e10c:	2303      	movs	r3, #3
 800e10e:	74bb      	strb	r3, [r7, #18]
 800e110:	e00b      	b.n	800e12a <spi_data_write+0x5e>
			else
				order = 0x1;
 800e112:	2301      	movs	r3, #1
 800e114:	74bb      	strb	r3, [r7, #18]
 800e116:	e008      	b.n	800e12a <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800e118:	887b      	ldrh	r3, [r7, #2]
 800e11a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e11e:	d802      	bhi.n	800e126 <spi_data_write+0x5a>
				order = 0x3;
 800e120:	2303      	movs	r3, #3
 800e122:	74bb      	strb	r3, [r7, #18]
 800e124:	e001      	b.n	800e12a <spi_data_write+0x5e>
			else
				order = 0x2;
 800e126:	2302      	movs	r3, #2
 800e128:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800e12a:	7c7a      	ldrb	r2, [r7, #17]
 800e12c:	7cbb      	ldrb	r3, [r7, #18]
 800e12e:	4313      	orrs	r3, r2
 800e130:	b2db      	uxtb	r3, r3
 800e132:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800e134:	f107 0311 	add.w	r3, r7, #17
 800e138:	2101      	movs	r1, #1
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff fd5c 	bl	800dbf8 <nmi_spi_write>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d002      	beq.n	800e14c <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 800e146:	2300      	movs	r3, #0
 800e148:	74fb      	strb	r3, [r7, #19]
			break;
 800e14a:	e02a      	b.n	800e1a2 <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800e14c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	4413      	add	r3, r2
 800e154:	8aba      	ldrh	r2, [r7, #20]
 800e156:	4611      	mov	r1, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff fd4d 	bl	800dbf8 <nmi_spi_write>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d002      	beq.n	800e16a <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 800e164:	2300      	movs	r3, #0
 800e166:	74fb      	strb	r3, [r7, #19]
			break;
 800e168:	e01b      	b.n	800e1a2 <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800e16a:	4b11      	ldr	r3, [pc, #68]	@ (800e1b0 <spi_data_write+0xe4>)
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d10b      	bne.n	800e18a <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800e172:	f107 030c 	add.w	r3, r7, #12
 800e176:	2102      	movs	r1, #2
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff fd3d 	bl	800dbf8 <nmi_spi_write>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 800e184:	2300      	movs	r3, #0
 800e186:	74fb      	strb	r3, [r7, #19]
				break;
 800e188:	e00b      	b.n	800e1a2 <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 800e18a:	8afa      	ldrh	r2, [r7, #22]
 800e18c:	8abb      	ldrh	r3, [r7, #20]
 800e18e:	4413      	add	r3, r2
 800e190:	b29b      	uxth	r3, r3
 800e192:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800e194:	887a      	ldrh	r2, [r7, #2]
 800e196:	8abb      	ldrh	r3, [r7, #20]
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800e19c:	887b      	ldrh	r3, [r7, #2]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1a0      	bne.n	800e0e4 <spi_data_write+0x18>


	return result;
 800e1a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	200028dc 	.word	0x200028dc

0800e1b4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af02      	add	r7, sp, #8
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e1be:	230a      	movs	r3, #10
 800e1c0:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800e1c6:	23c9      	movs	r3, #201	@ 0xc9
 800e1c8:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	733b      	strb	r3, [r7, #12]

_RETRY_:
	if (addr <= 0x30)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b30      	cmp	r3, #48	@ 0x30
 800e1d2:	d804      	bhi.n	800e1de <spi_write_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800e1d4:	23c3      	movs	r3, #195	@ 0xc3
 800e1d6:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	733b      	strb	r3, [r7, #12]
 800e1dc:	e003      	b.n	800e1e6 <spi_write_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
 800e1de:	23c9      	movs	r3, #201	@ 0xc9
 800e1e0:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800e1e6:	7b78      	ldrb	r0, [r7, #13]
 800e1e8:	7b3b      	ldrb	r3, [r7, #12]
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	2304      	movs	r3, #4
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	f7ff fd4d 	bl	800dc90 <spi_cmd>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e1fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d109      	bne.n	800e216 <spi_write_reg+0x62>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e202:	7b7b      	ldrb	r3, [r7, #13]
 800e204:	4618      	mov	r0, r3
 800e206:	f7ff fe93 	bl	800df30 <spi_cmd_rsp>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e20e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e212:	2b01      	cmp	r3, #1
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
		goto _FAIL_;
	}

#endif
_FAIL_:
 800e214:	e000      	b.n	800e218 <spi_write_reg+0x64>
		goto _FAIL_;
 800e216:	bf00      	nop
	if(result != N_OK)
 800e218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d017      	beq.n	800e250 <spi_write_reg+0x9c>
	{
		nm_bsp_sleep(1);
 800e220:	2001      	movs	r0, #1
 800e222:	f7fd ff53 	bl	800c0cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e226:	2300      	movs	r3, #0
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	2300      	movs	r3, #0
 800e22c:	2200      	movs	r2, #0
 800e22e:	2100      	movs	r1, #0
 800e230:	20cf      	movs	r0, #207	@ 0xcf
 800e232:	f7ff fd2d 	bl	800dc90 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e236:	20cf      	movs	r0, #207	@ 0xcf
 800e238:	f7ff fe7a 	bl	800df30 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 800e23c:	2001      	movs	r0, #1
 800e23e:	f7fd ff45 	bl	800c0cc <nm_bsp_sleep>
		retry--;
 800e242:	7bfb      	ldrb	r3, [r7, #15]
 800e244:	3b01      	subs	r3, #1
 800e246:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d000      	beq.n	800e250 <spi_write_reg+0x9c>
 800e24e:	e7be      	b.n	800e1ce <spi_write_reg+0x1a>
	}

	return result;
 800e250:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af02      	add	r7, sp, #8
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	4613      	mov	r3, r2
 800e268:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e26a:	230a      	movs	r3, #10
 800e26c:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800e26e:	23c7      	movs	r3, #199	@ 0xc7
 800e270:	757b      	strb	r3, [r7, #21]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800e272:	88fb      	ldrh	r3, [r7, #6]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d101      	bne.n	800e27c <nm_spi_write+0x20>
		size = 2;
 800e278:	2302      	movs	r3, #2
 800e27a:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800e27c:	88fb      	ldrh	r3, [r7, #6]
 800e27e:	7d78      	ldrb	r0, [r7, #21]
 800e280:	2200      	movs	r2, #0
 800e282:	9200      	str	r2, [sp, #0]
 800e284:	2200      	movs	r2, #0
 800e286:	68f9      	ldr	r1, [r7, #12]
 800e288:	f7ff fd02 	bl	800dc90 <spi_cmd>
 800e28c:	4603      	mov	r3, r0
 800e28e:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e290:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d11e      	bne.n	800e2d6 <nm_spi_write+0x7a>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e298:	7d7b      	ldrb	r3, [r7, #21]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7ff fe48 	bl	800df30 <spi_cmd_rsp>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d116      	bne.n	800e2da <nm_spi_write+0x7e>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800e2ac:	88fb      	ldrh	r3, [r7, #6]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	68b8      	ldr	r0, [r7, #8]
 800e2b2:	f7ff ff0b 	bl	800e0cc <spi_data_write>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e2ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d10d      	bne.n	800e2de <nm_spi_write+0x82>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800e2c2:	7d7b      	ldrb	r3, [r7, #21]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff fdf9 	bl	800debc <spi_data_rsp>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2d2:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}

_FAIL_:
 800e2d4:	e004      	b.n	800e2e0 <nm_spi_write+0x84>
		goto _FAIL_;
 800e2d6:	bf00      	nop
 800e2d8:	e002      	b.n	800e2e0 <nm_spi_write+0x84>
		goto _FAIL_;
 800e2da:	bf00      	nop
 800e2dc:	e000      	b.n	800e2e0 <nm_spi_write+0x84>
		goto _FAIL_;
 800e2de:	bf00      	nop
	if(result != N_OK)
 800e2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d017      	beq.n	800e318 <nm_spi_write+0xbc>
	{
		nm_bsp_sleep(1);
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	f7fd feef 	bl	800c0cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	20cf      	movs	r0, #207	@ 0xcf
 800e2fa:	f7ff fcc9 	bl	800dc90 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e2fe:	20cf      	movs	r0, #207	@ 0xcf
 800e300:	f7ff fe16 	bl	800df30 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800e304:	2001      	movs	r0, #1
 800e306:	f7fd fee1 	bl	800c0cc <nm_bsp_sleep>
		retry--;
 800e30a:	7dbb      	ldrb	r3, [r7, #22]
 800e30c:	3b01      	subs	r3, #1
 800e30e:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e310:	7dbb      	ldrb	r3, [r7, #22]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d000      	beq.n	800e318 <nm_spi_write+0xbc>
 800e316:	e7ac      	b.n	800e272 <nm_spi_write+0x16>
	}


	return result;
 800e318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3718      	adds	r7, #24
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af02      	add	r7, sp, #8
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e32e:	230a      	movs	r3, #10
 800e330:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e332:	2301      	movs	r3, #1
 800e334:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_READ;
 800e336:	23ca      	movs	r3, #202	@ 0xca
 800e338:	737b      	strb	r3, [r7, #13]
	uint8 tmp[4];
	uint8 clockless = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	733b      	strb	r3, [r7, #12]

_RETRY_:

	if (addr <= 0xff)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2bff      	cmp	r3, #255	@ 0xff
 800e342:	d804      	bhi.n	800e34e <spi_read_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800e344:	23c4      	movs	r3, #196	@ 0xc4
 800e346:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e348:	2301      	movs	r3, #1
 800e34a:	733b      	strb	r3, [r7, #12]
 800e34c:	e003      	b.n	800e356 <spi_read_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
 800e34e:	23ca      	movs	r3, #202	@ 0xca
 800e350:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800e356:	7b78      	ldrb	r0, [r7, #13]
 800e358:	7b3b      	ldrb	r3, [r7, #12]
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	2304      	movs	r3, #4
 800e35e:	2200      	movs	r2, #0
 800e360:	6879      	ldr	r1, [r7, #4]
 800e362:	f7ff fc95 	bl	800dc90 <spi_cmd>
 800e366:	4603      	mov	r3, r0
 800e368:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e36a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d124      	bne.n	800e3bc <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e372:	7b7b      	ldrb	r3, [r7, #13]
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff fddb 	bl	800df30 <spi_cmd_rsp>
 800e37a:	4603      	mov	r3, r0
 800e37c:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e37e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d11c      	bne.n	800e3c0 <spi_read_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800e386:	7b3a      	ldrb	r2, [r7, #12]
 800e388:	f107 0308 	add.w	r3, r7, #8
 800e38c:	2104      	movs	r1, #4
 800e38e:	4618      	mov	r0, r3
 800e390:	f7ff fe24 	bl	800dfdc <spi_data_read>
 800e394:	4603      	mov	r3, r0
 800e396:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d111      	bne.n	800e3c4 <spi_read_reg+0xa0>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
 800e3a0:	7a3b      	ldrb	r3, [r7, #8]
 800e3a2:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800e3a4:	7a7b      	ldrb	r3, [r7, #9]
 800e3a6:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800e3a8:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800e3aa:	7abb      	ldrb	r3, [r7, #10]
 800e3ac:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800e3ae:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800e3b0:	7afb      	ldrb	r3, [r7, #11]
 800e3b2:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800e3b4:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	e004      	b.n	800e3c6 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e3bc:	bf00      	nop
 800e3be:	e002      	b.n	800e3c6 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e3c0:	bf00      	nop
 800e3c2:	e000      	b.n	800e3c6 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e3c4:	bf00      	nop

_FAIL_:
	if(result != N_OK)
 800e3c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d017      	beq.n	800e3fe <spi_read_reg+0xda>
	{

		nm_bsp_sleep(1);
 800e3ce:	2001      	movs	r0, #1
 800e3d0:	f7fd fe7c 	bl	800c0cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	2300      	movs	r3, #0
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2100      	movs	r1, #0
 800e3de:	20cf      	movs	r0, #207	@ 0xcf
 800e3e0:	f7ff fc56 	bl	800dc90 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e3e4:	20cf      	movs	r0, #207	@ 0xcf
 800e3e6:	f7ff fda3 	bl	800df30 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	f7fd fe6e 	bl	800c0cc <nm_bsp_sleep>
		retry--;
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e3f6:	7bfb      	ldrb	r3, [r7, #15]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d000      	beq.n	800e3fe <spi_read_reg+0xda>
 800e3fc:	e79f      	b.n	800e33e <spi_read_reg+0x1a>
	}

	return result;
 800e3fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b088      	sub	sp, #32
 800e40e:	af02      	add	r7, sp, #8
 800e410:	60f8      	str	r0, [r7, #12]
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	4613      	mov	r3, r2
 800e416:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800e418:	23c8      	movs	r3, #200	@ 0xc8
 800e41a:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e41c:	230a      	movs	r3, #10
 800e41e:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	757b      	strb	r3, [r7, #21]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
 800e424:	88fb      	ldrh	r3, [r7, #6]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d103      	bne.n	800e432 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800e42a:	2302      	movs	r3, #2
 800e42c:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800e42e:	2301      	movs	r3, #1
 800e430:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800e432:	88fb      	ldrh	r3, [r7, #6]
 800e434:	7d38      	ldrb	r0, [r7, #20]
 800e436:	2200      	movs	r2, #0
 800e438:	9200      	str	r2, [sp, #0]
 800e43a:	2200      	movs	r2, #0
 800e43c:	68f9      	ldr	r1, [r7, #12]
 800e43e:	f7ff fc27 	bl	800dc90 <spi_cmd>
 800e442:	4603      	mov	r3, r0
 800e444:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e446:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d125      	bne.n	800e49a <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e44e:	7d3b      	ldrb	r3, [r7, #20]
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff fd6d 	bl	800df30 <spi_cmd_rsp>
 800e456:	4603      	mov	r3, r0
 800e458:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e45a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d11d      	bne.n	800e49e <nm_spi_read+0x94>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800e462:	7d7b      	ldrb	r3, [r7, #21]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00c      	beq.n	800e482 <nm_spi_read+0x78>
	{
		result = spi_data_read(tmp, size,0);
 800e468:	88f9      	ldrh	r1, [r7, #6]
 800e46a:	f107 0310 	add.w	r3, r7, #16
 800e46e:	2200      	movs	r2, #0
 800e470:	4618      	mov	r0, r3
 800e472:	f7ff fdb3 	bl	800dfdc <spi_data_read>
 800e476:	4603      	mov	r3, r0
 800e478:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800e47a:	7c3a      	ldrb	r2, [r7, #16]
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	701a      	strb	r2, [r3, #0]
 800e480:	e007      	b.n	800e492 <nm_spi_read+0x88>
	}
	else
		result = spi_data_read(buf, size,0);
 800e482:	88fb      	ldrh	r3, [r7, #6]
 800e484:	2200      	movs	r2, #0
 800e486:	4619      	mov	r1, r3
 800e488:	68b8      	ldr	r0, [r7, #8]
 800e48a:	f7ff fda7 	bl	800dfdc <spi_data_read>
 800e48e:	4603      	mov	r3, r0
 800e490:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800e492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e496:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
		goto _FAIL_;
	}
#endif

_FAIL_:
 800e498:	e002      	b.n	800e4a0 <nm_spi_read+0x96>
		goto _FAIL_;
 800e49a:	bf00      	nop
 800e49c:	e000      	b.n	800e4a0 <nm_spi_read+0x96>
		goto _FAIL_;
 800e49e:	bf00      	nop
	if(result != N_OK)
 800e4a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d017      	beq.n	800e4d8 <nm_spi_read+0xce>
	{
		nm_bsp_sleep(1);
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	f7fd fe0f 	bl	800c0cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	20cf      	movs	r0, #207	@ 0xcf
 800e4ba:	f7ff fbe9 	bl	800dc90 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e4be:	20cf      	movs	r0, #207	@ 0xcf
 800e4c0:	f7ff fd36 	bl	800df30 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800e4c4:	2001      	movs	r0, #1
 800e4c6:	f7fd fe01 	bl	800c0cc <nm_bsp_sleep>
		retry--;
 800e4ca:	7dbb      	ldrb	r3, [r7, #22]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e4d0:	7dbb      	ldrb	r3, [r7, #22]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d000      	beq.n	800e4d8 <nm_spi_read+0xce>
 800e4d6:	e7a5      	b.n	800e424 <nm_spi_read+0x1a>
	}

	return result;
 800e4d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	20cf      	movs	r0, #207	@ 0xcf
 800e4f6:	f7ff fbcb 	bl	800dc90 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 800e4fa:	20cf      	movs	r0, #207	@ 0xcf
 800e4fc:	f7ff fd18 	bl	800df30 <spi_cmd_rsp>
	return M2M_SUCCESS;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	603b      	str	r3, [r7, #0]


	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800e512:	4b24      	ldr	r3, [pc, #144]	@ (800e5a4 <nm_spi_init+0x9c>)
 800e514:	2200      	movs	r2, #0
 800e516:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 800e518:	463b      	mov	r3, r7
 800e51a:	4619      	mov	r1, r3
 800e51c:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e520:	f7ff ff00 	bl	800e324 <spi_read_reg>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10d      	bne.n	800e546 <nm_spi_init+0x3e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800e52a:	4b1e      	ldr	r3, [pc, #120]	@ (800e5a4 <nm_spi_init+0x9c>)
 800e52c:	2201      	movs	r2, #1
 800e52e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 800e530:	463b      	mov	r3, r7
 800e532:	4619      	mov	r1, r3
 800e534:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e538:	f7ff fef4 	bl	800e324 <spi_read_reg>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d101      	bne.n	800e546 <nm_spi_init+0x3e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
 800e542:	2300      	movs	r3, #0
 800e544:	e02a      	b.n	800e59c <nm_spi_init+0x94>
		}
	}
	if(gu8Crc_off == 0)
 800e546:	4b17      	ldr	r3, [pc, #92]	@ (800e5a4 <nm_spi_init+0x9c>)
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d119      	bne.n	800e582 <nm_spi_init+0x7a>
	{
		reg &= ~0xc;	/* disable crc checking */
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	f023 030c 	bic.w	r3, r3, #12
 800e554:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e55c:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800e564:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	4619      	mov	r1, r3
 800e56a:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e56e:	f7ff fe21 	bl	800e1b4 <spi_write_reg>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d101      	bne.n	800e57c <nm_spi_init+0x74>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
 800e578:	2300      	movs	r3, #0
 800e57a:	e00f      	b.n	800e59c <nm_spi_init+0x94>
		}
		gu8Crc_off = 1;
 800e57c:	4b09      	ldr	r3, [pc, #36]	@ (800e5a4 <nm_spi_init+0x9c>)
 800e57e:	2201      	movs	r2, #1
 800e580:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
 800e582:	1d3b      	adds	r3, r7, #4
 800e584:	4619      	mov	r1, r3
 800e586:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e58a:	f7ff fecb 	bl	800e324 <spi_read_reg>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d102      	bne.n	800e59a <nm_spi_init+0x92>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 800e594:	f06f 0305 	mvn.w	r3, #5
 800e598:	e000      	b.n	800e59c <nm_spi_init+0x94>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	//spi_init_pkt_sz();


	return M2M_SUCCESS;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	200028dc 	.word	0x200028dc

0800e5a8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800e5ac:	4b04      	ldr	r3, [pc, #16]	@ (800e5c0 <nm_spi_deinit+0x18>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	200028dc 	.word	0x200028dc

0800e5c4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
	uint32 u32Val = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	60fb      	str	r3, [r7, #12]

	spi_read_reg(u32Addr, &u32Val);
 800e5d0:	f107 030c 	add.w	r3, r7, #12
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff fea4 	bl	800e324 <spi_read_reg>

	return u32Val;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b084      	sub	sp, #16
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 800e5f0:	6839      	ldr	r1, [r7, #0]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7ff fe96 	bl	800e324 <spi_read_reg>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e600:	2b01      	cmp	r3, #1
 800e602:	d102      	bne.n	800e60a <nm_spi_read_reg_with_ret+0x24>
 800e604:	2300      	movs	r3, #0
 800e606:	73fb      	strb	r3, [r7, #15]
 800e608:	e001      	b.n	800e60e <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e60a:	23fa      	movs	r3, #250	@ 0xfa
 800e60c:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800e60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b084      	sub	sp, #16
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
 800e622:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f7ff fdc4 	bl	800e1b4 <spi_write_reg>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d102      	bne.n	800e63e <nm_spi_write_reg+0x24>
 800e638:	2300      	movs	r3, #0
 800e63a:	73fb      	strb	r3, [r7, #15]
 800e63c:	e001      	b.n	800e642 <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e63e:	23fa      	movs	r3, #250	@ 0xfa
 800e640:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800e642:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b086      	sub	sp, #24
 800e652:	af00      	add	r7, sp, #0
 800e654:	60f8      	str	r0, [r7, #12]
 800e656:	60b9      	str	r1, [r7, #8]
 800e658:	4613      	mov	r3, r2
 800e65a:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800e65c:	88fb      	ldrh	r3, [r7, #6]
 800e65e:	461a      	mov	r2, r3
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f7ff fed1 	bl	800e40a <nm_spi_read>
 800e668:	4603      	mov	r3, r0
 800e66a:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e66c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e670:	2b01      	cmp	r3, #1
 800e672:	d102      	bne.n	800e67a <nm_spi_read_block+0x2c>
 800e674:	2300      	movs	r3, #0
 800e676:	75fb      	strb	r3, [r7, #23]
 800e678:	e001      	b.n	800e67e <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e67a:	23fa      	movs	r3, #250	@ 0xfa
 800e67c:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800e67e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3718      	adds	r7, #24
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b086      	sub	sp, #24
 800e68e:	af00      	add	r7, sp, #0
 800e690:	60f8      	str	r0, [r7, #12]
 800e692:	60b9      	str	r1, [r7, #8]
 800e694:	4613      	mov	r3, r2
 800e696:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800e698:	88fb      	ldrh	r3, [r7, #6]
 800e69a:	461a      	mov	r2, r3
 800e69c:	68b9      	ldr	r1, [r7, #8]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7ff fddc 	bl	800e25c <nm_spi_write>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e6a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d102      	bne.n	800e6b6 <nm_spi_write_block+0x2c>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	75fb      	strb	r3, [r7, #23]
 800e6b4:	e001      	b.n	800e6ba <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e6b6:	23fa      	movs	r3, #250	@ 0xfa
 800e6b8:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800e6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
	...

0800e6c8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60b9      	str	r1, [r7, #8]
 800e6d0:	607b      	str	r3, [r7, #4]
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73fb      	strb	r3, [r7, #15]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	73bb      	strb	r3, [r7, #14]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 800e6da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 808d 	beq.w	800e7fc <Socket_ReadSocketData+0x134>
 800e6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6e6:	4a47      	ldr	r2, [pc, #284]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	4413      	add	r3, r2
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f000 8084 	beq.w	800e7fc <Socket_ReadSocketData+0x134>
 800e6f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6f8:	4a42      	ldr	r2, [pc, #264]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e6fa:	011b      	lsls	r3, r3, #4
 800e6fc:	4413      	add	r3, r2
 800e6fe:	3304      	adds	r3, #4
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	b29b      	uxth	r3, r3
 800e704:	2b00      	cmp	r3, #0
 800e706:	d079      	beq.n	800e7fc <Socket_ReadSocketData+0x134>
 800e708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e70c:	4a3d      	ldr	r2, [pc, #244]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e70e:	011b      	lsls	r3, r3, #4
 800e710:	4413      	add	r3, r2
 800e712:	330a      	adds	r3, #10
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	b2db      	uxtb	r3, r3
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d16f      	bne.n	800e7fc <Socket_ReadSocketData+0x134>
	{
		uint32	u32Address = u32StartAddress;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e724:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
 800e726:	2301      	movs	r3, #1
 800e728:	767b      	strb	r3, [r7, #25]
			u16Read = u16ReadCount;
 800e72a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e72c:	837b      	strh	r3, [r7, #26]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
 800e72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e732:	4a34      	ldr	r2, [pc, #208]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e734:	011b      	lsls	r3, r3, #4
 800e736:	4413      	add	r3, r2
 800e738:	3304      	adds	r3, #4
 800e73a:	881b      	ldrh	r3, [r3, #0]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	8b7a      	ldrh	r2, [r7, #26]
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	b29b      	uxth	r3, r3
 800e744:	82fb      	strh	r3, [r7, #22]
			if(s16Diff > 0)
 800e746:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	dd09      	ble.n	800e762 <Socket_ReadSocketData+0x9a>
			{
				u8SetRxDone = 0;
 800e74e:	2300      	movs	r3, #0
 800e750:	767b      	strb	r3, [r7, #25]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
 800e752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e756:	4a2b      	ldr	r2, [pc, #172]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	4413      	add	r3, r2
 800e75c:	3304      	adds	r3, #4
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	837b      	strh	r3, [r7, #26]
			}

			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
 800e762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e766:	4a27      	ldr	r2, [pc, #156]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e768:	011b      	lsls	r3, r3, #4
 800e76a:	4413      	add	r3, r2
 800e76c:	6819      	ldr	r1, [r3, #0]
 800e76e:	7e7b      	ldrb	r3, [r7, #25]
 800e770:	8b7a      	ldrh	r2, [r7, #26]
 800e772:	69f8      	ldr	r0, [r7, #28]
 800e774:	f7fe f9a4 	bl	800cac0 <hif_receive>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d13d      	bne.n	800e7fa <Socket_ReadSocketData+0x132>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
 800e77e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e782:	4a20      	ldr	r2, [pc, #128]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e784:	011b      	lsls	r3, r3, #4
 800e786:	4413      	add	r3, r2
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
 800e78e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	88da      	ldrh	r2, [r3, #6]
 800e79a:	8b7b      	ldrh	r3, [r7, #26]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
 800e7a4:	4b18      	ldr	r3, [pc, #96]	@ (800e808 <Socket_ReadSocketData+0x140>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d006      	beq.n	800e7ba <Socket_ReadSocketData+0xf2>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
 800e7ac:	4b16      	ldr	r3, [pc, #88]	@ (800e808 <Socket_ReadSocketData+0x140>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	7bb9      	ldrb	r1, [r7, #14]
 800e7b2:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	4798      	blx	r3

				u16ReadCount -= u16Read;
 800e7ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e7bc:	8b7b      	ldrh	r3, [r7, #26]
 800e7be:	1ad3      	subs	r3, r2, r3
 800e7c0:	853b      	strh	r3, [r7, #40]	@ 0x28
				u32Address += u16Read;
 800e7c2:	8b7b      	ldrh	r3, [r7, #26]
 800e7c4:	69fa      	ldr	r2, [r7, #28]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
 800e7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ce:	4a0d      	ldr	r2, [pc, #52]	@ (800e804 <Socket_ReadSocketData+0x13c>)
 800e7d0:	011b      	lsls	r3, r3, #4
 800e7d2:	4413      	add	r3, r2
 800e7d4:	330a      	adds	r3, #10
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d109      	bne.n	800e7f2 <Socket_ReadSocketData+0x12a>
 800e7de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d006      	beq.n	800e7f2 <Socket_ReadSocketData+0x12a>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	f7fe f968 	bl	800cac0 <hif_receive>
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
 800e7f0:	e004      	b.n	800e7fc <Socket_ReadSocketData+0x134>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
 800e7f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d196      	bne.n	800e726 <Socket_ReadSocketData+0x5e>
	}
}
 800e7f8:	e000      	b.n	800e7fc <Socket_ReadSocketData+0x134>
				break;
 800e7fa:	bf00      	nop
}
 800e7fc:	bf00      	nop
 800e7fe:	3720      	adds	r7, #32
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	200028e0 	.word	0x200028e0
 800e808:	20002994 	.word	0x20002994

0800e80c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b0ba      	sub	sp, #232	@ 0xe8
 800e810:	af02      	add	r7, sp, #8
 800e812:	4603      	mov	r3, r0
 800e814:	603a      	str	r2, [r7, #0]
 800e816:	71fb      	strb	r3, [r7, #7]
 800e818:	460b      	mov	r3, r1
 800e81a:	80bb      	strh	r3, [r7, #4]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	2b41      	cmp	r3, #65	@ 0x41
 800e820:	d002      	beq.n	800e828 <m2m_ip_cb+0x1c>
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	2b54      	cmp	r3, #84	@ 0x54
 800e826:	d11c      	bne.n	800e862 <m2m_ip_cb+0x56>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 800e828:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 800e82c:	2300      	movs	r3, #0
 800e82e:	2204      	movs	r2, #4
 800e830:	6838      	ldr	r0, [r7, #0]
 800e832:	f7fe f945 	bl	800cac0 <hif_receive>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f040 81f3 	bne.w	800ec24 <m2m_ip_cb+0x418>
		{
			strBind.status = strBindReply.s8Status;
 800e83e:	f997 30cd 	ldrsb.w	r3, [r7, #205]	@ 0xcd
 800e842:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
			if(gpfAppSocketCb)
 800e846:	4bb2      	ldr	r3, [pc, #712]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 81ea 	beq.w	800ec24 <m2m_ip_cb+0x418>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
 800e850:	4baf      	ldr	r3, [pc, #700]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f997 00cc 	ldrsb.w	r0, [r7, #204]	@ 0xcc
 800e858:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 800e85c:	2101      	movs	r1, #1
 800e85e:	4798      	blx	r3
	{
 800e860:	e1e0      	b.n	800ec24 <m2m_ip_cb+0x418>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
 800e862:	79fb      	ldrb	r3, [r7, #7]
 800e864:	2b42      	cmp	r3, #66	@ 0x42
 800e866:	d11c      	bne.n	800e8a2 <m2m_ip_cb+0x96>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 800e868:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 800e86c:	2300      	movs	r3, #0
 800e86e:	2204      	movs	r2, #4
 800e870:	6838      	ldr	r0, [r7, #0]
 800e872:	f7fe f925 	bl	800cac0 <hif_receive>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f040 81da 	bne.w	800ec32 <m2m_ip_cb+0x426>
		{
			strListen.status = strListenReply.s8Status;
 800e87e:	f997 30c5 	ldrsb.w	r3, [r7, #197]	@ 0xc5
 800e882:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
			if(gpfAppSocketCb)
 800e886:	4ba2      	ldr	r3, [pc, #648]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 81d1 	beq.w	800ec32 <m2m_ip_cb+0x426>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
 800e890:	4b9f      	ldr	r3, [pc, #636]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f997 00c4 	ldrsb.w	r0, [r7, #196]	@ 0xc4
 800e898:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 800e89c:	2102      	movs	r1, #2
 800e89e:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
 800e8a0:	e1c7      	b.n	800ec32 <m2m_ip_cb+0x426>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
 800e8a4:	2b43      	cmp	r3, #67	@ 0x43
 800e8a6:	d170      	bne.n	800e98a <m2m_ip_cb+0x17e>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 800e8a8:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	220c      	movs	r2, #12
 800e8b0:	6838      	ldr	r0, [r7, #0]
 800e8b2:	f7fe f905 	bl	800cac0 <hif_receive>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f040 81ba 	bne.w	800ec32 <m2m_ip_cb+0x426>
			if(strAcceptReply.sConnectedSock >= 0)
 800e8be:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	db44      	blt.n	800e950 <m2m_ip_cb+0x144>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
 800e8c6:	f997 30bc 	ldrsb.w	r3, [r7, #188]	@ 0xbc
 800e8ca:	f997 20bd 	ldrsb.w	r2, [r7, #189]	@ 0xbd
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	4a90      	ldr	r2, [pc, #576]	@ (800eb14 <m2m_ip_cb+0x308>)
 800e8d2:	011b      	lsls	r3, r3, #4
 800e8d4:	4413      	add	r3, r2
 800e8d6:	330b      	adds	r3, #11
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	b2d9      	uxtb	r1, r3
 800e8dc:	4a8d      	ldr	r2, [pc, #564]	@ (800eb14 <m2m_ip_cb+0x308>)
 800e8de:	0103      	lsls	r3, r0, #4
 800e8e0:	4413      	add	r3, r2
 800e8e2:	330b      	adds	r3, #11
 800e8e4:	460a      	mov	r2, r1
 800e8e6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
 800e8e8:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 800e8ec:	4a89      	ldr	r2, [pc, #548]	@ (800eb14 <m2m_ip_cb+0x308>)
 800e8ee:	011b      	lsls	r3, r3, #4
 800e8f0:	4413      	add	r3, r2
 800e8f2:	330a      	adds	r3, #10
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800e8f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e8fc:	f997 20bd 	ldrsb.w	r2, [r7, #189]	@ 0xbd
 800e900:	4610      	mov	r0, r2
 800e902:	3b08      	subs	r3, #8
 800e904:	b299      	uxth	r1, r3
 800e906:	4a83      	ldr	r2, [pc, #524]	@ (800eb14 <m2m_ip_cb+0x308>)
 800e908:	0103      	lsls	r3, r0, #4
 800e90a:	4413      	add	r3, r2
 800e90c:	3308      	adds	r3, #8
 800e90e:	460a      	mov	r2, r1
 800e910:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
 800e912:	4b81      	ldr	r3, [pc, #516]	@ (800eb18 <m2m_ip_cb+0x30c>)
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	b29b      	uxth	r3, r3
 800e918:	3301      	adds	r3, #1
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	4b7e      	ldr	r3, [pc, #504]	@ (800eb18 <m2m_ip_cb+0x30c>)
 800e91e:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
 800e920:	4b7d      	ldr	r3, [pc, #500]	@ (800eb18 <m2m_ip_cb+0x30c>)
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	b29b      	uxth	r3, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <m2m_ip_cb+0x12c>
					++gu16SessionID;
 800e92a:	4b7b      	ldr	r3, [pc, #492]	@ (800eb18 <m2m_ip_cb+0x30c>)
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	b29b      	uxth	r3, r3
 800e930:	3301      	adds	r3, #1
 800e932:	b29a      	uxth	r2, r3
 800e934:	4b78      	ldr	r3, [pc, #480]	@ (800eb18 <m2m_ip_cb+0x30c>)
 800e936:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 800e938:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 800e93c:	4618      	mov	r0, r3
 800e93e:	4b76      	ldr	r3, [pc, #472]	@ (800eb18 <m2m_ip_cb+0x30c>)
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	b299      	uxth	r1, r3
 800e944:	4a73      	ldr	r2, [pc, #460]	@ (800eb14 <m2m_ip_cb+0x308>)
 800e946:	0103      	lsls	r3, r0, #4
 800e948:	4413      	add	r3, r2
 800e94a:	3306      	adds	r3, #6
 800e94c:	460a      	mov	r2, r1
 800e94e:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
 800e950:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 800e954:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
			strAccept.strAddr.sin_family		= AF_INET;
 800e958:	2302      	movs	r3, #2
 800e95a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 800e95e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800e962:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 800e966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e96a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			if(gpfAppSocketCb)
 800e96e:	4b68      	ldr	r3, [pc, #416]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	f000 815d 	beq.w	800ec32 <m2m_ip_cb+0x426>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 800e978:	4b65      	ldr	r3, [pc, #404]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f997 00bc 	ldrsb.w	r0, [r7, #188]	@ 0xbc
 800e980:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800e984:	2104      	movs	r1, #4
 800e986:	4798      	blx	r3
}
 800e988:	e153      	b.n	800ec32 <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
 800e98a:	79fb      	ldrb	r3, [r7, #7]
 800e98c:	2b44      	cmp	r3, #68	@ 0x44
 800e98e:	d002      	beq.n	800e996 <m2m_ip_cb+0x18a>
 800e990:	79fb      	ldrb	r3, [r7, #7]
 800e992:	2b4b      	cmp	r3, #75	@ 0x4b
 800e994:	d131      	bne.n	800e9fa <m2m_ip_cb+0x1ee>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
 800e996:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800e99a:	2300      	movs	r3, #0
 800e99c:	2204      	movs	r2, #4
 800e99e:	6838      	ldr	r0, [r7, #0]
 800e9a0:	f7fe f88e 	bl	800cac0 <hif_receive>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f040 813e 	bne.w	800ec28 <m2m_ip_cb+0x41c>
			strConnMsg.sock		= strConnectReply.sock;
 800e9ac:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 800e9b0:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
			strConnMsg.s8Error	= strConnectReply.s8Error;
 800e9b4:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800e9b8:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
 800e9bc:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10c      	bne.n	800e9de <m2m_ip_cb+0x1d2>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800e9c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e9c8:	f997 209c 	ldrsb.w	r2, [r7, #156]	@ 0x9c
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	3b08      	subs	r3, #8
 800e9d0:	b299      	uxth	r1, r3
 800e9d2:	4a50      	ldr	r2, [pc, #320]	@ (800eb14 <m2m_ip_cb+0x308>)
 800e9d4:	0103      	lsls	r3, r0, #4
 800e9d6:	4413      	add	r3, r2
 800e9d8:	3308      	adds	r3, #8
 800e9da:	460a      	mov	r2, r1
 800e9dc:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
 800e9de:	4b4c      	ldr	r3, [pc, #304]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f000 8120 	beq.w	800ec28 <m2m_ip_cb+0x41c>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
 800e9e8:	4b49      	ldr	r3, [pc, #292]	@ (800eb10 <m2m_ip_cb+0x304>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f997 009c 	ldrsb.w	r0, [r7, #156]	@ 0x9c
 800e9f0:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800e9f4:	2105      	movs	r1, #5
 800e9f6:	4798      	blx	r3
	{
 800e9f8:	e116      	b.n	800ec28 <m2m_ip_cb+0x41c>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 800e9fa:	79fb      	ldrb	r3, [r7, #7]
 800e9fc:	2b4a      	cmp	r3, #74	@ 0x4a
 800e9fe:	d117      	bne.n	800ea30 <m2m_ip_cb+0x224>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 800ea00:	f107 010c 	add.w	r1, r7, #12
 800ea04:	2300      	movs	r3, #0
 800ea06:	2244      	movs	r2, #68	@ 0x44
 800ea08:	6838      	ldr	r0, [r7, #0]
 800ea0a:	f7fe f859 	bl	800cac0 <hif_receive>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f040 810e 	bne.w	800ec32 <m2m_ip_cb+0x426>
			if(gpfAppResolveCb)
 800ea16:	4b41      	ldr	r3, [pc, #260]	@ (800eb1c <m2m_ip_cb+0x310>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 8109 	beq.w	800ec32 <m2m_ip_cb+0x426>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
 800ea20:	4b3e      	ldr	r3, [pc, #248]	@ (800eb1c <m2m_ip_cb+0x310>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ea26:	f107 020c 	add.w	r2, r7, #12
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	4798      	blx	r3
}
 800ea2e:	e100      	b.n	800ec32 <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 800ea30:	79fb      	ldrb	r3, [r7, #7]
 800ea32:	2b46      	cmp	r3, #70	@ 0x46
 800ea34:	d006      	beq.n	800ea44 <m2m_ip_cb+0x238>
 800ea36:	79fb      	ldrb	r3, [r7, #7]
 800ea38:	2b48      	cmp	r3, #72	@ 0x48
 800ea3a:	d003      	beq.n	800ea44 <m2m_ip_cb+0x238>
 800ea3c:	79fb      	ldrb	r3, [r7, #7]
 800ea3e:	2b4d      	cmp	r3, #77	@ 0x4d
 800ea40:	f040 808e 	bne.w	800eb60 <m2m_ip_cb+0x354>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
 800ea44:	2306      	movs	r3, #6
 800ea46:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		if(u8OpCode == SOCKET_CMD_RECVFROM)
 800ea4a:	79fb      	ldrb	r3, [r7, #7]
 800ea4c:	2b48      	cmp	r3, #72	@ 0x48
 800ea4e:	d102      	bne.n	800ea56 <m2m_ip_cb+0x24a>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 800ea50:	2309      	movs	r3, #9
 800ea52:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		u16ReadSize = sizeof(tstrRecvReply);
 800ea56:	2310      	movs	r3, #16
 800ea58:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 800ea5c:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	@ 0xd8
 800ea60:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800ea64:	2300      	movs	r3, #0
 800ea66:	6838      	ldr	r0, [r7, #0]
 800ea68:	f7fe f82a 	bl	800cac0 <hif_receive>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f040 80dc 	bne.w	800ec2c <m2m_ip_cb+0x420>
			uint16 u16SessionID = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
			sock			= strRecvReply.sock;
 800ea7a:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800ea7e:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
			u16SessionID = strRecvReply.u16SessionID;
 800ea82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ea86:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
			gastrSockets[sock].bIsRecvPending = 0;
 800ea8a:	f997 30d5 	ldrsb.w	r3, [r7, #213]	@ 0xd5
 800ea8e:	4a21      	ldr	r2, [pc, #132]	@ (800eb14 <m2m_ip_cb+0x308>)
 800ea90:	011b      	lsls	r3, r3, #4
 800ea92:	4413      	add	r3, r2
 800ea94:	330c      	adds	r3, #12
 800ea96:	2200      	movs	r2, #0
 800ea98:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 800ea9a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800ea9e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 800eaa2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800eaa6:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
 800eaaa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eaae:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
 800eab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 800eab8:	f997 30d5 	ldrsb.w	r3, [r7, #213]	@ 0xd5
 800eabc:	4a15      	ldr	r2, [pc, #84]	@ (800eb14 <m2m_ip_cb+0x308>)
 800eabe:	011b      	lsls	r3, r3, #4
 800eac0:	4413      	add	r3, r2
 800eac2:	3306      	adds	r3, #6
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 800eacc:	429a      	cmp	r2, r3
 800eace:	d13b      	bne.n	800eb48 <m2m_ip_cb+0x33c>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 800ead0:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	dd23      	ble.n	800eb20 <m2m_ip_cb+0x314>
 800ead8:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	@ 0xd2
 800eadc:	88bb      	ldrh	r3, [r7, #4]
 800eade:	429a      	cmp	r2, r3
 800eae0:	da1e      	bge.n	800eb20 <m2m_ip_cb+0x314>
					u32Address += u16DataOffset;
 800eae2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	4413      	add	r3, r2
 800eaea:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
 800eaec:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800eaf0:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 800eaf4:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800eaf8:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800eafc:	f997 00d5 	ldrsb.w	r0, [r7, #213]	@ 0xd5
 800eb00:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	f7ff fdde 	bl	800e6c8 <Socket_ReadSocketData>
	{
 800eb0c:	e08e      	b.n	800ec2c <m2m_ip_cb+0x420>
 800eb0e:	bf00      	nop
 800eb10:	20002994 	.word	0x20002994
 800eb14:	200028e0 	.word	0x200028e0
 800eb18:	20002990 	.word	0x20002990
 800eb1c:	20002998 	.word	0x20002998
					strRecvMsg.s16BufferSize	= s16RecvStatus;
 800eb20:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800eb24:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
					strRecvMsg.pu8Buffer		= NULL;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	673b      	str	r3, [r7, #112]	@ 0x70
					if(gpfAppSocketCb)
 800eb2c:	4b43      	ldr	r3, [pc, #268]	@ (800ec3c <m2m_ip_cb+0x430>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d07b      	beq.n	800ec2c <m2m_ip_cb+0x420>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
 800eb34:	4b41      	ldr	r3, [pc, #260]	@ (800ec3c <m2m_ip_cb+0x430>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800eb3c:	f897 10df 	ldrb.w	r1, [r7, #223]	@ 0xdf
 800eb40:	f997 00d5 	ldrsb.w	r0, [r7, #213]	@ 0xd5
 800eb44:	4798      	blx	r3
	{
 800eb46:	e071      	b.n	800ec2c <m2m_ip_cb+0x420>
				if(u16ReadSize < u16BufferSize)
 800eb48:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	@ 0xd8
 800eb4c:	88bb      	ldrh	r3, [r7, #4]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d26c      	bcs.n	800ec2c <m2m_ip_cb+0x420>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 800eb52:	2301      	movs	r3, #1
 800eb54:	2200      	movs	r2, #0
 800eb56:	2100      	movs	r1, #0
 800eb58:	2000      	movs	r0, #0
 800eb5a:	f7fd ffb1 	bl	800cac0 <hif_receive>
	{
 800eb5e:	e065      	b.n	800ec2c <m2m_ip_cb+0x420>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	2b45      	cmp	r3, #69	@ 0x45
 800eb64:	d005      	beq.n	800eb72 <m2m_ip_cb+0x366>
 800eb66:	79fb      	ldrb	r3, [r7, #7]
 800eb68:	2b47      	cmp	r3, #71	@ 0x47
 800eb6a:	d002      	beq.n	800eb72 <m2m_ip_cb+0x366>
 800eb6c:	79fb      	ldrb	r3, [r7, #7]
 800eb6e:	2b4c      	cmp	r3, #76	@ 0x4c
 800eb70:	d13b      	bne.n	800ebea <m2m_ip_cb+0x3de>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
 800eb72:	2307      	movs	r3, #7
 800eb74:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		if(u8OpCode == SOCKET_CMD_SENDTO)
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	2b47      	cmp	r3, #71	@ 0x47
 800eb7c:	d102      	bne.n	800eb84 <m2m_ip_cb+0x378>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
 800eb7e:	2308      	movs	r3, #8
 800eb80:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 800eb84:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800eb88:	2300      	movs	r3, #0
 800eb8a:	2208      	movs	r2, #8
 800eb8c:	6838      	ldr	r0, [r7, #0]
 800eb8e:	f7fd ff97 	bl	800cac0 <hif_receive>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d14b      	bne.n	800ec30 <m2m_ip_cb+0x424>
			uint16 u16SessionID = 0;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
			sock = strReply.sock;
 800eb9e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800eba2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
			u16SessionID = strReply.u16SessionID;
 800eba6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800ebaa:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 800ebae:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800ebb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 800ebb6:	f997 30db 	ldrsb.w	r3, [r7, #219]	@ 0xdb
 800ebba:	4a21      	ldr	r2, [pc, #132]	@ (800ec40 <m2m_ip_cb+0x434>)
 800ebbc:	011b      	lsls	r3, r3, #4
 800ebbe:	4413      	add	r3, r2
 800ebc0:	3306      	adds	r3, #6
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d130      	bne.n	800ec30 <m2m_ip_cb+0x424>
				if(gpfAppSocketCb)
 800ebce:	4b1b      	ldr	r3, [pc, #108]	@ (800ec3c <m2m_ip_cb+0x430>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d02c      	beq.n	800ec30 <m2m_ip_cb+0x424>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
 800ebd6:	4b19      	ldr	r3, [pc, #100]	@ (800ec3c <m2m_ip_cb+0x430>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 800ebde:	f897 10de 	ldrb.w	r1, [r7, #222]	@ 0xde
 800ebe2:	f997 00db 	ldrsb.w	r0, [r7, #219]	@ 0xdb
 800ebe6:	4798      	blx	r3
	{
 800ebe8:	e022      	b.n	800ec30 <m2m_ip_cb+0x424>
	else if(u8OpCode == SOCKET_CMD_PING)
 800ebea:	79fb      	ldrb	r3, [r7, #7]
 800ebec:	2b52      	cmp	r3, #82	@ 0x52
 800ebee:	d120      	bne.n	800ec32 <m2m_ip_cb+0x426>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 800ebf0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	2214      	movs	r2, #20
 800ebf8:	6838      	ldr	r0, [r7, #0]
 800ebfa:	f7fd ff61 	bl	800cac0 <hif_receive>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d116      	bne.n	800ec32 <m2m_ip_cb+0x426>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
 800ec04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec06:	461a      	mov	r2, r3
 800ec08:	4b0e      	ldr	r3, [pc, #56]	@ (800ec44 <m2m_ip_cb+0x438>)
 800ec0a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
 800ec0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <m2m_ip_cb+0x438>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00e      	beq.n	800ec32 <m2m_ip_cb+0x426>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 800ec14:	4b0b      	ldr	r3, [pc, #44]	@ (800ec44 <m2m_ip_cb+0x438>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ec1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ec1c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800ec20:	4798      	blx	r3
}
 800ec22:	e006      	b.n	800ec32 <m2m_ip_cb+0x426>
	{
 800ec24:	bf00      	nop
 800ec26:	e004      	b.n	800ec32 <m2m_ip_cb+0x426>
	{
 800ec28:	bf00      	nop
 800ec2a:	e002      	b.n	800ec32 <m2m_ip_cb+0x426>
	{
 800ec2c:	bf00      	nop
 800ec2e:	e000      	b.n	800ec32 <m2m_ip_cb+0x426>
	{
 800ec30:	bf00      	nop
}
 800ec32:	bf00      	nop
 800ec34:	37e0      	adds	r7, #224	@ 0xe0
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	20002994 	.word	0x20002994
 800ec40:	200028e0 	.word	0x200028e0
 800ec44:	200029a0 	.word	0x200029a0

0800ec48 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
 800ec4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec78 <socketInit+0x30>)
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10e      	bne.n	800ec74 <socketInit+0x2c>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 800ec56:	22b0      	movs	r2, #176	@ 0xb0
 800ec58:	2100      	movs	r1, #0
 800ec5a:	4808      	ldr	r0, [pc, #32]	@ (800ec7c <socketInit+0x34>)
 800ec5c:	f7fd fbc4 	bl	800c3e8 <m2m_memset>
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
 800ec60:	4907      	ldr	r1, [pc, #28]	@ (800ec80 <socketInit+0x38>)
 800ec62:	2002      	movs	r0, #2
 800ec64:	f7fd ff90 	bl	800cb88 <hif_register_cb>
		gbSocketInit	= 1;
 800ec68:	4b03      	ldr	r3, [pc, #12]	@ (800ec78 <socketInit+0x30>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
 800ec6e:	4b05      	ldr	r3, [pc, #20]	@ (800ec84 <socketInit+0x3c>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	801a      	strh	r2, [r3, #0]
	}
}
 800ec74:	bf00      	nop
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	2000299c 	.word	0x2000299c
 800ec7c:	200028e0 	.word	0x200028e0
 800ec80:	0800e80d 	.word	0x0800e80d
 800ec84:	20002990 	.word	0x20002990

0800ec88 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
 800ec92:	4a06      	ldr	r2, [pc, #24]	@ (800ecac <registerSocketCallback+0x24>)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
 800ec98:	4a05      	ldr	r2, [pc, #20]	@ (800ecb0 <registerSocketCallback+0x28>)
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	6013      	str	r3, [r2, #0]
}
 800ec9e:	bf00      	nop
 800eca0:	370c      	adds	r7, #12
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	20002994 	.word	0x20002994
 800ecb0:	20002998 	.word	0x20002998

0800ecb4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b08c      	sub	sp, #48	@ 0x30
 800ecb8:	af04      	add	r7, sp, #16
 800ecba:	4603      	mov	r3, r0
 800ecbc:	80fb      	strh	r3, [r7, #6]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	717b      	strb	r3, [r7, #5]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	713b      	strb	r3, [r7, #4]
	SOCKET					sock = -1;
 800ecc6:	23ff      	movs	r3, #255	@ 0xff
 800ecc8:	77fb      	strb	r3, [r7, #31]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
 800ecca:	88fb      	ldrh	r3, [r7, #6]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	f040 809c 	bne.w	800ee0a <socket+0x156>
	{
		if(u8Type == SOCK_STREAM)
 800ecd2:	797b      	ldrb	r3, [r7, #5]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d12d      	bne.n	800ed34 <socket+0x80>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800ecd8:	2300      	movs	r3, #0
 800ecda:	77bb      	strb	r3, [r7, #30]
 800ecdc:	e026      	b.n	800ed2c <socket+0x78>
			{
				u8SockID	= u8NextTcpSock;
 800ecde:	4b4e      	ldr	r3, [pc, #312]	@ (800ee18 <socket+0x164>)
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	74fb      	strb	r3, [r7, #19]
				pstrSock	= &gastrSockets[u8NextTcpSock];
 800ece4:	4b4c      	ldr	r3, [pc, #304]	@ (800ee18 <socket+0x164>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	011b      	lsls	r3, r3, #4
 800ecec:	4a4b      	ldr	r2, [pc, #300]	@ (800ee1c <socket+0x168>)
 800ecee:	4413      	add	r3, r2
 800ecf0:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 800ecf2:	4b49      	ldr	r3, [pc, #292]	@ (800ee18 <socket+0x164>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	1c5a      	adds	r2, r3, #1
 800ecfa:	4b49      	ldr	r3, [pc, #292]	@ (800ee20 <socket+0x16c>)
 800ecfc:	fb83 1302 	smull	r1, r3, r3, r2
 800ed00:	4413      	add	r3, r2
 800ed02:	1099      	asrs	r1, r3, #2
 800ed04:	17d3      	asrs	r3, r2, #31
 800ed06:	1ac9      	subs	r1, r1, r3
 800ed08:	460b      	mov	r3, r1
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	1a5b      	subs	r3, r3, r1
 800ed0e:	1ad1      	subs	r1, r2, r3
 800ed10:	b2ca      	uxtb	r2, r1
 800ed12:	4b41      	ldr	r3, [pc, #260]	@ (800ee18 <socket+0x164>)
 800ed14:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	7a9b      	ldrb	r3, [r3, #10]
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d102      	bne.n	800ed26 <socket+0x72>
				{
					sock = (SOCKET)u8SockID;
 800ed20:	7cfb      	ldrb	r3, [r7, #19]
 800ed22:	77fb      	strb	r3, [r7, #31]
					break;
 800ed24:	e036      	b.n	800ed94 <socket+0xe0>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800ed26:	7fbb      	ldrb	r3, [r7, #30]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	77bb      	strb	r3, [r7, #30]
 800ed2c:	7fbb      	ldrb	r3, [r7, #30]
 800ed2e:	2b06      	cmp	r3, #6
 800ed30:	d9d5      	bls.n	800ecde <socket+0x2a>
 800ed32:	e02f      	b.n	800ed94 <socket+0xe0>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
 800ed34:	797b      	ldrb	r3, [r7, #5]
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d12c      	bne.n	800ed94 <socket+0xe0>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
 800ed3a:	4b3a      	ldr	r3, [pc, #232]	@ (800ee24 <socket+0x170>)
 800ed3c:	617b      	str	r3, [r7, #20]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800ed3e:	2300      	movs	r3, #0
 800ed40:	77bb      	strb	r3, [r7, #30]
 800ed42:	e024      	b.n	800ed8e <socket+0xda>
			{
				u8SockID		= u8NextUdpSock;
 800ed44:	4b38      	ldr	r3, [pc, #224]	@ (800ee28 <socket+0x174>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	74fb      	strb	r3, [r7, #19]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
 800ed4a:	4b37      	ldr	r3, [pc, #220]	@ (800ee28 <socket+0x174>)
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	011b      	lsls	r3, r3, #4
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	4413      	add	r3, r2
 800ed56:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 800ed58:	4b33      	ldr	r3, [pc, #204]	@ (800ee28 <socket+0x174>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	3301      	adds	r3, #1
 800ed60:	425a      	negs	r2, r3
 800ed62:	f003 0303 	and.w	r3, r3, #3
 800ed66:	f002 0203 	and.w	r2, r2, #3
 800ed6a:	bf58      	it	pl
 800ed6c:	4253      	negpl	r3, r2
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	4b2d      	ldr	r3, [pc, #180]	@ (800ee28 <socket+0x174>)
 800ed72:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	7a9b      	ldrb	r3, [r3, #10]
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d104      	bne.n	800ed88 <socket+0xd4>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 800ed7e:	7cfb      	ldrb	r3, [r7, #19]
 800ed80:	3307      	adds	r3, #7
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	77fb      	strb	r3, [r7, #31]
					break;
 800ed86:	e005      	b.n	800ed94 <socket+0xe0>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800ed88:	7fbb      	ldrb	r3, [r7, #30]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	77bb      	strb	r3, [r7, #30]
 800ed8e:	7fbb      	ldrb	r3, [r7, #30]
 800ed90:	2b03      	cmp	r3, #3
 800ed92:	d9d7      	bls.n	800ed44 <socket+0x90>
				}
			}
		}

		if(sock >= 0)
 800ed94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	db36      	blt.n	800ee0a <socket+0x156>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 800ed9c:	2210      	movs	r2, #16
 800ed9e:	2100      	movs	r1, #0
 800eda0:	69b8      	ldr	r0, [r7, #24]
 800eda2:	f7fd fb21 	bl	800c3e8 <m2m_memset>
			pstrSock->bIsUsed = 1;
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	2201      	movs	r2, #1
 800edaa:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
 800edac:	4b1f      	ldr	r3, [pc, #124]	@ (800ee2c <socket+0x178>)
 800edae:	881b      	ldrh	r3, [r3, #0]
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	3301      	adds	r3, #1
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	4b1d      	ldr	r3, [pc, #116]	@ (800ee2c <socket+0x178>)
 800edb8:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
 800edba:	4b1c      	ldr	r3, [pc, #112]	@ (800ee2c <socket+0x178>)
 800edbc:	881b      	ldrh	r3, [r3, #0]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d106      	bne.n	800edd2 <socket+0x11e>
				++gu16SessionID;
 800edc4:	4b19      	ldr	r3, [pc, #100]	@ (800ee2c <socket+0x178>)
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	b29b      	uxth	r3, r3
 800edca:	3301      	adds	r3, #1
 800edcc:	b29a      	uxth	r2, r3
 800edce:	4b17      	ldr	r3, [pc, #92]	@ (800ee2c <socket+0x178>)
 800edd0:	801a      	strh	r2, [r3, #0]

			pstrSock->u16SessionID = gu16SessionID;
 800edd2:	4b16      	ldr	r3, [pc, #88]	@ (800ee2c <socket+0x178>)
 800edd4:	881b      	ldrh	r3, [r3, #0]
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );

			if(u8Flags & SOCKET_FLAGS_SSL)
 800eddc:	793b      	ldrb	r3, [r7, #4]
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d011      	beq.n	800ee0a <socket+0x156>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
 800ede6:	7ffb      	ldrb	r3, [r7, #31]
 800ede8:	733b      	strb	r3, [r7, #12]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	2221      	movs	r2, #33	@ 0x21
 800edee:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 800edf0:	f107 020c 	add.w	r2, r7, #12
 800edf4:	2300      	movs	r3, #0
 800edf6:	9302      	str	r3, [sp, #8]
 800edf8:	2300      	movs	r3, #0
 800edfa:	9301      	str	r3, [sp, #4]
 800edfc:	2300      	movs	r3, #0
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	2304      	movs	r3, #4
 800ee02:	2150      	movs	r1, #80	@ 0x50
 800ee04:	2002      	movs	r0, #2
 800ee06:	f7fd fc01 	bl	800c60c <hif_send>
			}
		}
	}
	return sock;
 800ee0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3720      	adds	r7, #32
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	200029a4 	.word	0x200029a4
 800ee1c:	200028e0 	.word	0x200028e0
 800ee20:	92492493 	.word	0x92492493
 800ee24:	20002950 	.word	0x20002950
 800ee28:	200029a5 	.word	0x200029a5
 800ee2c:	20002990 	.word	0x20002990

0800ee30 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b08a      	sub	sp, #40	@ 0x28
 800ee34:	af04      	add	r7, sp, #16
 800ee36:	4603      	mov	r3, r0
 800ee38:	6039      	str	r1, [r7, #0]
 800ee3a:	71fb      	strb	r3, [r7, #7]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800ee40:	23fa      	movs	r3, #250	@ 0xfa
 800ee42:	75fb      	strb	r3, [r7, #23]
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d047      	beq.n	800eeda <bind+0xaa>
 800ee4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	db43      	blt.n	800eeda <bind+0xaa>
 800ee52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee56:	4a24      	ldr	r2, [pc, #144]	@ (800eee8 <bind+0xb8>)
 800ee58:	011b      	lsls	r3, r3, #4
 800ee5a:	4413      	add	r3, r2
 800ee5c:	330a      	adds	r3, #10
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d139      	bne.n	800eeda <bind+0xaa>
 800ee66:	79bb      	ldrb	r3, [r7, #6]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d036      	beq.n	800eeda <bind+0xaa>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
 800ee6c:	2341      	movs	r3, #65	@ 0x41
 800ee6e:	75bb      	strb	r3, [r7, #22]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800ee70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee74:	4a1c      	ldr	r2, [pc, #112]	@ (800eee8 <bind+0xb8>)
 800ee76:	011b      	lsls	r3, r3, #4
 800ee78:	4413      	add	r3, r2
 800ee7a:	330b      	adds	r3, #11
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	f003 0301 	and.w	r3, r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <bind+0x5c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
 800ee88:	2354      	movs	r3, #84	@ 0x54
 800ee8a:	75bb      	strb	r3, [r7, #22]
		}

		/* Build the bind request. */
		strBind.sock = sock;
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	743b      	strb	r3, [r7, #16]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 800ee90:	f107 0308 	add.w	r3, r7, #8
 800ee94:	2208      	movs	r2, #8
 800ee96:	6839      	ldr	r1, [r7, #0]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fd fa85 	bl	800c3a8 <m2m_memcpy>
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
 800ee9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eea2:	4a11      	ldr	r2, [pc, #68]	@ (800eee8 <bind+0xb8>)
 800eea4:	011b      	lsls	r3, r3, #4
 800eea6:	4413      	add	r3, r2
 800eea8:	3306      	adds	r3, #6
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	827b      	strh	r3, [r7, #18]

		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
 800eeb0:	f107 0208 	add.w	r2, r7, #8
 800eeb4:	7db9      	ldrb	r1, [r7, #22]
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	9302      	str	r3, [sp, #8]
 800eeba:	2300      	movs	r3, #0
 800eebc:	9301      	str	r3, [sp, #4]
 800eebe:	2300      	movs	r3, #0
 800eec0:	9300      	str	r3, [sp, #0]
 800eec2:	230c      	movs	r3, #12
 800eec4:	2002      	movs	r0, #2
 800eec6:	f7fd fba1 	bl	800c60c <hif_send>
 800eeca:	4603      	mov	r3, r0
 800eecc:	75fb      	strb	r3, [r7, #23]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800eece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d001      	beq.n	800eeda <bind+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 800eed6:	23f7      	movs	r3, #247	@ 0xf7
 800eed8:	75fb      	strb	r3, [r7, #23]
		}
	}
	return s8Ret;
 800eeda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3718      	adds	r7, #24
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	200028e0 	.word	0x200028e0

0800eeec <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b088      	sub	sp, #32
 800eef0:	af04      	add	r7, sp, #16
 800eef2:	4603      	mov	r3, r0
 800eef4:	460a      	mov	r2, r1
 800eef6:	71fb      	strb	r3, [r7, #7]
 800eef8:	4613      	mov	r3, r2
 800eefa:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800eefc:	23fa      	movs	r3, #250	@ 0xfa
 800eefe:	73fb      	strb	r3, [r7, #15]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 800ef00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	db2b      	blt.n	800ef60 <listen+0x74>
 800ef08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef0c:	4a17      	ldr	r2, [pc, #92]	@ (800ef6c <listen+0x80>)
 800ef0e:	011b      	lsls	r3, r3, #4
 800ef10:	4413      	add	r3, r2
 800ef12:	330a      	adds	r3, #10
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d121      	bne.n	800ef60 <listen+0x74>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
 800ef1c:	79fb      	ldrb	r3, [r7, #7]
 800ef1e:	723b      	strb	r3, [r7, #8]
		strListen.u8BackLog = backlog;
 800ef20:	79bb      	ldrb	r3, [r7, #6]
 800ef22:	727b      	strb	r3, [r7, #9]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
 800ef24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef28:	4a10      	ldr	r2, [pc, #64]	@ (800ef6c <listen+0x80>)
 800ef2a:	011b      	lsls	r3, r3, #4
 800ef2c:	4413      	add	r3, r2
 800ef2e:	3306      	adds	r3, #6
 800ef30:	881b      	ldrh	r3, [r3, #0]
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	817b      	strh	r3, [r7, #10]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
 800ef36:	f107 0208 	add.w	r2, r7, #8
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9302      	str	r3, [sp, #8]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	2300      	movs	r3, #0
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	2304      	movs	r3, #4
 800ef48:	2142      	movs	r1, #66	@ 0x42
 800ef4a:	2002      	movs	r0, #2
 800ef4c:	f7fd fb5e 	bl	800c60c <hif_send>
 800ef50:	4603      	mov	r3, r0
 800ef52:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800ef54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <listen+0x74>
		{
			s8Ret = SOCK_ERR_INVALID;
 800ef5c:	23f7      	movs	r3, #247	@ 0xf7
 800ef5e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return s8Ret;
 800ef60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3710      	adds	r7, #16
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	200028e0 	.word	0x200028e0

0800ef70 <accept>:

Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b087      	sub	sp, #28
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
 800ef7c:	73fb      	strb	r3, [r7, #15]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800ef7e:	23fa      	movs	r3, #250	@ 0xfa
 800ef80:	75fb      	strb	r3, [r7, #23]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
 800ef82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	db0b      	blt.n	800efa2 <accept+0x32>
 800ef8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef8e:	4a09      	ldr	r2, [pc, #36]	@ (800efb4 <accept+0x44>)
 800ef90:	011b      	lsls	r3, r3, #4
 800ef92:	4413      	add	r3, r2
 800ef94:	330a      	adds	r3, #10
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d101      	bne.n	800efa2 <accept+0x32>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	75fb      	strb	r3, [r7, #23]
	}
	return s8Ret;
 800efa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	371c      	adds	r7, #28
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	200028e0 	.word	0x200028e0

0800efb8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b08e      	sub	sp, #56	@ 0x38
 800efbc:	af04      	add	r7, sp, #16
 800efbe:	60b9      	str	r1, [r7, #8]
 800efc0:	4611      	mov	r1, r2
 800efc2:	461a      	mov	r2, r3
 800efc4:	4603      	mov	r3, r0
 800efc6:	73fb      	strb	r3, [r7, #15]
 800efc8:	460b      	mov	r3, r1
 800efca:	81bb      	strh	r3, [r7, #12]
 800efcc:	4613      	mov	r3, r2
 800efce:	80fb      	strh	r3, [r7, #6]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 800efd0:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800efd4:	84fb      	strh	r3, [r7, #38]	@ 0x26

	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 800efd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	db5a      	blt.n	800f094 <send+0xdc>
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d057      	beq.n	800f094 <send+0xdc>
 800efe4:	89bb      	ldrh	r3, [r7, #12]
 800efe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efea:	4293      	cmp	r3, r2
 800efec:	d852      	bhi.n	800f094 <send+0xdc>
 800efee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eff2:	4a2b      	ldr	r2, [pc, #172]	@ (800f0a0 <send+0xe8>)
 800eff4:	011b      	lsls	r3, r3, #4
 800eff6:	4413      	add	r3, r2
 800eff8:	330a      	adds	r3, #10
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b01      	cmp	r3, #1
 800f000:	d148      	bne.n	800f094 <send+0xdc>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
 800f002:	2345      	movs	r3, #69	@ 0x45
 800f004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
 800f008:	2350      	movs	r3, #80	@ 0x50
 800f00a:	84bb      	strh	r3, [r7, #36]	@ 0x24

		strSend.sock			= sock;
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	743b      	strb	r3, [r7, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
 800f010:	89bb      	ldrh	r3, [r7, #12]
 800f012:	827b      	strh	r3, [r7, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
 800f014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f018:	4a21      	ldr	r2, [pc, #132]	@ (800f0a0 <send+0xe8>)
 800f01a:	011b      	lsls	r3, r3, #4
 800f01c:	4413      	add	r3, r2
 800f01e:	3306      	adds	r3, #6
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	b29b      	uxth	r3, r3
 800f024:	83bb      	strh	r3, [r7, #28]

		if(sock >= TCP_SOCK_MAX)
 800f026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f02a:	2b06      	cmp	r3, #6
 800f02c:	dd01      	ble.n	800f032 <send+0x7a>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
 800f02e:	2344      	movs	r3, #68	@ 0x44
 800f030:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f036:	4a1a      	ldr	r2, [pc, #104]	@ (800f0a0 <send+0xe8>)
 800f038:	011b      	lsls	r3, r3, #4
 800f03a:	4413      	add	r3, r2
 800f03c:	330b      	adds	r3, #11
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	b2db      	uxtb	r3, r3
 800f042:	f003 0301 	and.w	r3, r3, #1
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00a      	beq.n	800f060 <send+0xa8>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
 800f04a:	234c      	movs	r3, #76	@ 0x4c
 800f04c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
 800f050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f054:	4a12      	ldr	r2, [pc, #72]	@ (800f0a0 <send+0xe8>)
 800f056:	011b      	lsls	r3, r3, #4
 800f058:	4413      	add	r3, r2
 800f05a:	3308      	adds	r3, #8
 800f05c:	881b      	ldrh	r3, [r3, #0]
 800f05e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 800f060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f068:	b2d9      	uxtb	r1, r3
 800f06a:	f107 0210 	add.w	r2, r7, #16
 800f06e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f070:	9302      	str	r3, [sp, #8]
 800f072:	89bb      	ldrh	r3, [r7, #12]
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	9300      	str	r3, [sp, #0]
 800f07a:	2310      	movs	r3, #16
 800f07c:	2002      	movs	r0, #2
 800f07e:	f7fd fac5 	bl	800c60c <hif_send>
 800f082:	4603      	mov	r3, r0
 800f084:	84fb      	strh	r3, [r7, #38]	@ 0x26
		if(s16Ret != SOCK_ERR_NO_ERROR)
 800f086:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <send+0xdc>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
 800f08e:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 800f092:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
	}
	return s16Ret;
 800f094:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3728      	adds	r7, #40	@ 0x28
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	200028e0 	.word	0x200028e0

0800f0a4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b08c      	sub	sp, #48	@ 0x30
 800f0a8:	af04      	add	r7, sp, #16
 800f0aa:	60b9      	str	r1, [r7, #8]
 800f0ac:	607b      	str	r3, [r7, #4]
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73fb      	strb	r3, [r7, #15]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	81bb      	strh	r3, [r7, #12]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 800f0b6:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800f0ba:	83fb      	strh	r3, [r7, #30]

	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 800f0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	db6c      	blt.n	800f19e <recv+0xfa>
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d069      	beq.n	800f19e <recv+0xfa>
 800f0ca:	89bb      	ldrh	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d066      	beq.n	800f19e <recv+0xfa>
 800f0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0d4:	4a35      	ldr	r2, [pc, #212]	@ (800f1ac <recv+0x108>)
 800f0d6:	011b      	lsls	r3, r3, #4
 800f0d8:	4413      	add	r3, r2
 800f0da:	330a      	adds	r3, #10
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d15c      	bne.n	800f19e <recv+0xfa>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	83fb      	strh	r3, [r7, #30]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
 800f0e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0ec:	4a2f      	ldr	r2, [pc, #188]	@ (800f1ac <recv+0x108>)
 800f0ee:	011b      	lsls	r3, r3, #4
 800f0f0:	4413      	add	r3, r2
 800f0f2:	68ba      	ldr	r2, [r7, #8]
 800f0f4:	601a      	str	r2, [r3, #0]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
 800f0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0fa:	4a2c      	ldr	r2, [pc, #176]	@ (800f1ac <recv+0x108>)
 800f0fc:	011b      	lsls	r3, r3, #4
 800f0fe:	4413      	add	r3, r2
 800f100:	3304      	adds	r3, #4
 800f102:	89ba      	ldrh	r2, [r7, #12]
 800f104:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
 800f106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f10a:	4a28      	ldr	r2, [pc, #160]	@ (800f1ac <recv+0x108>)
 800f10c:	011b      	lsls	r3, r3, #4
 800f10e:	4413      	add	r3, r2
 800f110:	330c      	adds	r3, #12
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	d141      	bne.n	800f19e <recv+0xfa>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
 800f11a:	2346      	movs	r3, #70	@ 0x46
 800f11c:	777b      	strb	r3, [r7, #29]

			gastrSockets[sock].bIsRecvPending = 1;
 800f11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f122:	4a22      	ldr	r2, [pc, #136]	@ (800f1ac <recv+0x108>)
 800f124:	011b      	lsls	r3, r3, #4
 800f126:	4413      	add	r3, r2
 800f128:	330c      	adds	r3, #12
 800f12a:	2201      	movs	r2, #1
 800f12c:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f12e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f132:	4a1e      	ldr	r2, [pc, #120]	@ (800f1ac <recv+0x108>)
 800f134:	011b      	lsls	r3, r3, #4
 800f136:	4413      	add	r3, r2
 800f138:	330b      	adds	r3, #11
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <recv+0xa6>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
 800f146:	234d      	movs	r3, #77	@ 0x4d
 800f148:	777b      	strb	r3, [r7, #29]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d103      	bne.n	800f158 <recv+0xb4>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 800f150:	f04f 33ff 	mov.w	r3, #4294967295
 800f154:	617b      	str	r3, [r7, #20]
 800f156:	e001      	b.n	800f15c <recv+0xb8>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	617b      	str	r3, [r7, #20]
			strRecv.sock = sock;
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
 800f15e:	763b      	strb	r3, [r7, #24]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f164:	4a11      	ldr	r2, [pc, #68]	@ (800f1ac <recv+0x108>)
 800f166:	011b      	lsls	r3, r3, #4
 800f168:	4413      	add	r3, r2
 800f16a:	3306      	adds	r3, #6
 800f16c:	881b      	ldrh	r3, [r3, #0]
 800f16e:	b29b      	uxth	r3, r3
 800f170:	837b      	strh	r3, [r7, #26]

			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
 800f172:	f107 0214 	add.w	r2, r7, #20
 800f176:	7f79      	ldrb	r1, [r7, #29]
 800f178:	2300      	movs	r3, #0
 800f17a:	9302      	str	r3, [sp, #8]
 800f17c:	2300      	movs	r3, #0
 800f17e:	9301      	str	r3, [sp, #4]
 800f180:	2300      	movs	r3, #0
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	2308      	movs	r3, #8
 800f186:	2002      	movs	r0, #2
 800f188:	f7fd fa40 	bl	800c60c <hif_send>
 800f18c:	4603      	mov	r3, r0
 800f18e:	83fb      	strh	r3, [r7, #30]
			if(s16Ret != SOCK_ERR_NO_ERROR)
 800f190:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <recv+0xfa>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
 800f198:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 800f19c:	83fb      	strh	r3, [r7, #30]
			}
		}
	}
	return s16Ret;
 800f19e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3720      	adds	r7, #32
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	200028e0 	.word	0x200028e0

0800f1b0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af04      	add	r7, sp, #16
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f1ba:	23fa      	movs	r3, #250	@ 0xfa
 800f1bc:	73fb      	strb	r3, [r7, #15]
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 800f1be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	db53      	blt.n	800f26e <close+0xbe>
 800f1c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1ca:	4a2c      	ldr	r2, [pc, #176]	@ (800f27c <close+0xcc>)
 800f1cc:	011b      	lsls	r3, r3, #4
 800f1ce:	4413      	add	r3, r2
 800f1d0:	330a      	adds	r3, #10
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d149      	bne.n	800f26e <close+0xbe>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
 800f1da:	2349      	movs	r3, #73	@ 0x49
 800f1dc:	73bb      	strb	r3, [r7, #14]
		tstrCloseCmd strclose;
		strclose.sock = sock;
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	723b      	strb	r3, [r7, #8]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1e6:	4a25      	ldr	r2, [pc, #148]	@ (800f27c <close+0xcc>)
 800f1e8:	011b      	lsls	r3, r3, #4
 800f1ea:	4413      	add	r3, r2
 800f1ec:	3306      	adds	r3, #6
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	817b      	strh	r3, [r7, #10]

		gastrSockets[sock].bIsUsed = 0;
 800f1f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1f8:	4a20      	ldr	r2, [pc, #128]	@ (800f27c <close+0xcc>)
 800f1fa:	011b      	lsls	r3, r3, #4
 800f1fc:	4413      	add	r3, r2
 800f1fe:	330a      	adds	r3, #10
 800f200:	2200      	movs	r2, #0
 800f202:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
 800f204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f208:	4a1c      	ldr	r2, [pc, #112]	@ (800f27c <close+0xcc>)
 800f20a:	011b      	lsls	r3, r3, #4
 800f20c:	4413      	add	r3, r2
 800f20e:	3306      	adds	r3, #6
 800f210:	2200      	movs	r2, #0
 800f212:	801a      	strh	r2, [r3, #0]

		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f218:	4a18      	ldr	r2, [pc, #96]	@ (800f27c <close+0xcc>)
 800f21a:	011b      	lsls	r3, r3, #4
 800f21c:	4413      	add	r3, r2
 800f21e:	330b      	adds	r3, #11
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d001      	beq.n	800f230 <close+0x80>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
 800f22c:	234e      	movs	r3, #78	@ 0x4e
 800f22e:	73bb      	strb	r3, [r7, #14]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
 800f230:	f107 0208 	add.w	r2, r7, #8
 800f234:	7bb9      	ldrb	r1, [r7, #14]
 800f236:	2300      	movs	r3, #0
 800f238:	9302      	str	r3, [sp, #8]
 800f23a:	2300      	movs	r3, #0
 800f23c:	9301      	str	r3, [sp, #4]
 800f23e:	2300      	movs	r3, #0
 800f240:	9300      	str	r3, [sp, #0]
 800f242:	2304      	movs	r3, #4
 800f244:	2002      	movs	r0, #2
 800f246:	f7fd f9e1 	bl	800c60c <hif_send>
 800f24a:	4603      	mov	r3, r0
 800f24c:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800f24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d001      	beq.n	800f25a <close+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 800f256:	23f7      	movs	r3, #247	@ 0xf7
 800f258:	73fb      	strb	r3, [r7, #15]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
 800f25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f25e:	011b      	lsls	r3, r3, #4
 800f260:	4a06      	ldr	r2, [pc, #24]	@ (800f27c <close+0xcc>)
 800f262:	4413      	add	r3, r2
 800f264:	2210      	movs	r2, #16
 800f266:	2100      	movs	r1, #0
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fd f8bd 	bl	800c3e8 <m2m_memset>
	}
	return s8Ret;
 800f26e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	200028e0 	.word	0x200028e0

0800f280 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800f286:	463b      	mov	r3, r7
 800f288:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	22b9      	movs	r2, #185	@ 0xb9
 800f28e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800f290:	2100      	movs	r1, #0
 800f292:	4810      	ldr	r0, [pc, #64]	@ (800f2d4 <spi_flash_enter_low_power_mode+0x54>)
 800f294:	f7fe faa9 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	4619      	mov	r1, r3
 800f29e:	480e      	ldr	r0, [pc, #56]	@ (800f2d8 <spi_flash_enter_low_power_mode+0x58>)
 800f2a0:	f7fe faa3 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800f2a4:	2101      	movs	r1, #1
 800f2a6:	480d      	ldr	r0, [pc, #52]	@ (800f2dc <spi_flash_enter_low_power_mode+0x5c>)
 800f2a8:	f7fe fa9f 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	480c      	ldr	r0, [pc, #48]	@ (800f2e0 <spi_flash_enter_low_power_mode+0x60>)
 800f2b0:	f7fe fa9b 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800f2b4:	2181      	movs	r1, #129	@ 0x81
 800f2b6:	480b      	ldr	r0, [pc, #44]	@ (800f2e4 <spi_flash_enter_low_power_mode+0x64>)
 800f2b8:	f7fe fa97 	bl	800d7ea <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800f2bc:	bf00      	nop
 800f2be:	480a      	ldr	r0, [pc, #40]	@ (800f2e8 <spi_flash_enter_low_power_mode+0x68>)
 800f2c0:	f7fe fa79 	bl	800d7b6 <nm_read_reg>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d1f9      	bne.n	800f2be <spi_flash_enter_low_power_mode+0x3e>
}
 800f2ca:	bf00      	nop
 800f2cc:	bf00      	nop
 800f2ce:	3708      	adds	r7, #8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	00010208 	.word	0x00010208
 800f2d8:	0001020c 	.word	0x0001020c
 800f2dc:	00010214 	.word	0x00010214
 800f2e0:	0001021c 	.word	0x0001021c
 800f2e4:	00010204 	.word	0x00010204
 800f2e8:	00010218 	.word	0x00010218

0800f2ec <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800f2f2:	463b      	mov	r3, r7
 800f2f4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	22ab      	movs	r2, #171	@ 0xab
 800f2fa:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800f2fc:	2100      	movs	r1, #0
 800f2fe:	4810      	ldr	r0, [pc, #64]	@ (800f340 <spi_flash_leave_low_power_mode+0x54>)
 800f300:	f7fe fa73 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	4619      	mov	r1, r3
 800f30a:	480e      	ldr	r0, [pc, #56]	@ (800f344 <spi_flash_leave_low_power_mode+0x58>)
 800f30c:	f7fe fa6d 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800f310:	2101      	movs	r1, #1
 800f312:	480d      	ldr	r0, [pc, #52]	@ (800f348 <spi_flash_leave_low_power_mode+0x5c>)
 800f314:	f7fe fa69 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800f318:	2100      	movs	r1, #0
 800f31a:	480c      	ldr	r0, [pc, #48]	@ (800f34c <spi_flash_leave_low_power_mode+0x60>)
 800f31c:	f7fe fa65 	bl	800d7ea <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800f320:	2181      	movs	r1, #129	@ 0x81
 800f322:	480b      	ldr	r0, [pc, #44]	@ (800f350 <spi_flash_leave_low_power_mode+0x64>)
 800f324:	f7fe fa61 	bl	800d7ea <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800f328:	bf00      	nop
 800f32a:	480a      	ldr	r0, [pc, #40]	@ (800f354 <spi_flash_leave_low_power_mode+0x68>)
 800f32c:	f7fe fa43 	bl	800d7b6 <nm_read_reg>
 800f330:	4603      	mov	r3, r0
 800f332:	2b01      	cmp	r3, #1
 800f334:	d1f9      	bne.n	800f32a <spi_flash_leave_low_power_mode+0x3e>
}
 800f336:	bf00      	nop
 800f338:	bf00      	nop
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	00010208 	.word	0x00010208
 800f344:	0001020c 	.word	0x0001020c
 800f348:	00010214 	.word	0x00010214
 800f34c:	0001021c 	.word	0x0001021c
 800f350:	00010204 	.word	0x00010204
 800f354:	00010218 	.word	0x00010218

0800f358 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800f362:	2300      	movs	r3, #0
 800f364:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {
 800f366:	f7fd ff97 	bl	800d298 <nmi_get_chipid>
 800f36a:	4603      	mov	r3, r0
 800f36c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f370:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800f374:	d337      	bcc.n	800f3e6 <spi_flash_enable+0x8e>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800f376:	f107 0308 	add.w	r3, r7, #8
 800f37a:	4619      	mov	r1, r3
 800f37c:	f241 4010 	movw	r0, #5136	@ 0x1410
 800f380:	f7fe fa25 	bl	800d7ce <nm_read_reg_with_ret>
 800f384:	4603      	mov	r3, r0
 800f386:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800f388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d12c      	bne.n	800f3ea <spi_flash_enable+0x92>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800f396:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800f39a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 800f3a2:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 800f3a6:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	f241 4010 	movw	r0, #5136	@ 0x1410
 800f3b0:	f7fe fa1b 	bl	800d7ea <nm_write_reg>
		if(enable) {
 800f3b4:	79fb      	ldrb	r3, [r7, #7]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d002      	beq.n	800f3c0 <spi_flash_enable+0x68>
			spi_flash_leave_low_power_mode();
 800f3ba:	f7ff ff97 	bl	800f2ec <spi_flash_leave_low_power_mode>
 800f3be:	e001      	b.n	800f3c4 <spi_flash_enable+0x6c>
		} else {
			spi_flash_enter_low_power_mode();
 800f3c0:	f7ff ff5e 	bl	800f280 <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800f3ca:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800f3ce:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f3d6:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	f241 4010 	movw	r0, #5136	@ 0x1410
 800f3e0:	f7fe fa03 	bl	800d7ea <nm_write_reg>
 800f3e4:	e002      	b.n	800f3ec <spi_flash_enable+0x94>
	}
ERR1:
 800f3e6:	bf00      	nop
 800f3e8:	e000      	b.n	800f3ec <spi_flash_enable+0x94>
			goto ERR1;
 800f3ea:	bf00      	nop
	return s8Ret;
 800f3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3710      	adds	r7, #16
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <malloc>:
 800f3f8:	4b02      	ldr	r3, [pc, #8]	@ (800f404 <malloc+0xc>)
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	6818      	ldr	r0, [r3, #0]
 800f3fe:	f000 b82d 	b.w	800f45c <_malloc_r>
 800f402:	bf00      	nop
 800f404:	20001240 	.word	0x20001240

0800f408 <free>:
 800f408:	4b02      	ldr	r3, [pc, #8]	@ (800f414 <free+0xc>)
 800f40a:	4601      	mov	r1, r0
 800f40c:	6818      	ldr	r0, [r3, #0]
 800f40e:	f000 bcd7 	b.w	800fdc0 <_free_r>
 800f412:	bf00      	nop
 800f414:	20001240 	.word	0x20001240

0800f418 <sbrk_aligned>:
 800f418:	b570      	push	{r4, r5, r6, lr}
 800f41a:	4e0f      	ldr	r6, [pc, #60]	@ (800f458 <sbrk_aligned+0x40>)
 800f41c:	460c      	mov	r4, r1
 800f41e:	6831      	ldr	r1, [r6, #0]
 800f420:	4605      	mov	r5, r0
 800f422:	b911      	cbnz	r1, 800f42a <sbrk_aligned+0x12>
 800f424:	f000 fc50 	bl	800fcc8 <_sbrk_r>
 800f428:	6030      	str	r0, [r6, #0]
 800f42a:	4621      	mov	r1, r4
 800f42c:	4628      	mov	r0, r5
 800f42e:	f000 fc4b 	bl	800fcc8 <_sbrk_r>
 800f432:	1c43      	adds	r3, r0, #1
 800f434:	d103      	bne.n	800f43e <sbrk_aligned+0x26>
 800f436:	f04f 34ff 	mov.w	r4, #4294967295
 800f43a:	4620      	mov	r0, r4
 800f43c:	bd70      	pop	{r4, r5, r6, pc}
 800f43e:	1cc4      	adds	r4, r0, #3
 800f440:	f024 0403 	bic.w	r4, r4, #3
 800f444:	42a0      	cmp	r0, r4
 800f446:	d0f8      	beq.n	800f43a <sbrk_aligned+0x22>
 800f448:	1a21      	subs	r1, r4, r0
 800f44a:	4628      	mov	r0, r5
 800f44c:	f000 fc3c 	bl	800fcc8 <_sbrk_r>
 800f450:	3001      	adds	r0, #1
 800f452:	d1f2      	bne.n	800f43a <sbrk_aligned+0x22>
 800f454:	e7ef      	b.n	800f436 <sbrk_aligned+0x1e>
 800f456:	bf00      	nop
 800f458:	200029a8 	.word	0x200029a8

0800f45c <_malloc_r>:
 800f45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f460:	1ccd      	adds	r5, r1, #3
 800f462:	f025 0503 	bic.w	r5, r5, #3
 800f466:	3508      	adds	r5, #8
 800f468:	2d0c      	cmp	r5, #12
 800f46a:	bf38      	it	cc
 800f46c:	250c      	movcc	r5, #12
 800f46e:	2d00      	cmp	r5, #0
 800f470:	4606      	mov	r6, r0
 800f472:	db01      	blt.n	800f478 <_malloc_r+0x1c>
 800f474:	42a9      	cmp	r1, r5
 800f476:	d904      	bls.n	800f482 <_malloc_r+0x26>
 800f478:	230c      	movs	r3, #12
 800f47a:	6033      	str	r3, [r6, #0]
 800f47c:	2000      	movs	r0, #0
 800f47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f482:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f558 <_malloc_r+0xfc>
 800f486:	f000 f869 	bl	800f55c <__malloc_lock>
 800f48a:	f8d8 3000 	ldr.w	r3, [r8]
 800f48e:	461c      	mov	r4, r3
 800f490:	bb44      	cbnz	r4, 800f4e4 <_malloc_r+0x88>
 800f492:	4629      	mov	r1, r5
 800f494:	4630      	mov	r0, r6
 800f496:	f7ff ffbf 	bl	800f418 <sbrk_aligned>
 800f49a:	1c43      	adds	r3, r0, #1
 800f49c:	4604      	mov	r4, r0
 800f49e:	d158      	bne.n	800f552 <_malloc_r+0xf6>
 800f4a0:	f8d8 4000 	ldr.w	r4, [r8]
 800f4a4:	4627      	mov	r7, r4
 800f4a6:	2f00      	cmp	r7, #0
 800f4a8:	d143      	bne.n	800f532 <_malloc_r+0xd6>
 800f4aa:	2c00      	cmp	r4, #0
 800f4ac:	d04b      	beq.n	800f546 <_malloc_r+0xea>
 800f4ae:	6823      	ldr	r3, [r4, #0]
 800f4b0:	4639      	mov	r1, r7
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	eb04 0903 	add.w	r9, r4, r3
 800f4b8:	f000 fc06 	bl	800fcc8 <_sbrk_r>
 800f4bc:	4581      	cmp	r9, r0
 800f4be:	d142      	bne.n	800f546 <_malloc_r+0xea>
 800f4c0:	6821      	ldr	r1, [r4, #0]
 800f4c2:	1a6d      	subs	r5, r5, r1
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f7ff ffa6 	bl	800f418 <sbrk_aligned>
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	d03a      	beq.n	800f546 <_malloc_r+0xea>
 800f4d0:	6823      	ldr	r3, [r4, #0]
 800f4d2:	442b      	add	r3, r5
 800f4d4:	6023      	str	r3, [r4, #0]
 800f4d6:	f8d8 3000 	ldr.w	r3, [r8]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	bb62      	cbnz	r2, 800f538 <_malloc_r+0xdc>
 800f4de:	f8c8 7000 	str.w	r7, [r8]
 800f4e2:	e00f      	b.n	800f504 <_malloc_r+0xa8>
 800f4e4:	6822      	ldr	r2, [r4, #0]
 800f4e6:	1b52      	subs	r2, r2, r5
 800f4e8:	d420      	bmi.n	800f52c <_malloc_r+0xd0>
 800f4ea:	2a0b      	cmp	r2, #11
 800f4ec:	d917      	bls.n	800f51e <_malloc_r+0xc2>
 800f4ee:	1961      	adds	r1, r4, r5
 800f4f0:	42a3      	cmp	r3, r4
 800f4f2:	6025      	str	r5, [r4, #0]
 800f4f4:	bf18      	it	ne
 800f4f6:	6059      	strne	r1, [r3, #4]
 800f4f8:	6863      	ldr	r3, [r4, #4]
 800f4fa:	bf08      	it	eq
 800f4fc:	f8c8 1000 	streq.w	r1, [r8]
 800f500:	5162      	str	r2, [r4, r5]
 800f502:	604b      	str	r3, [r1, #4]
 800f504:	4630      	mov	r0, r6
 800f506:	f000 f82f 	bl	800f568 <__malloc_unlock>
 800f50a:	f104 000b 	add.w	r0, r4, #11
 800f50e:	1d23      	adds	r3, r4, #4
 800f510:	f020 0007 	bic.w	r0, r0, #7
 800f514:	1ac2      	subs	r2, r0, r3
 800f516:	bf1c      	itt	ne
 800f518:	1a1b      	subne	r3, r3, r0
 800f51a:	50a3      	strne	r3, [r4, r2]
 800f51c:	e7af      	b.n	800f47e <_malloc_r+0x22>
 800f51e:	6862      	ldr	r2, [r4, #4]
 800f520:	42a3      	cmp	r3, r4
 800f522:	bf0c      	ite	eq
 800f524:	f8c8 2000 	streq.w	r2, [r8]
 800f528:	605a      	strne	r2, [r3, #4]
 800f52a:	e7eb      	b.n	800f504 <_malloc_r+0xa8>
 800f52c:	4623      	mov	r3, r4
 800f52e:	6864      	ldr	r4, [r4, #4]
 800f530:	e7ae      	b.n	800f490 <_malloc_r+0x34>
 800f532:	463c      	mov	r4, r7
 800f534:	687f      	ldr	r7, [r7, #4]
 800f536:	e7b6      	b.n	800f4a6 <_malloc_r+0x4a>
 800f538:	461a      	mov	r2, r3
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	d1fb      	bne.n	800f538 <_malloc_r+0xdc>
 800f540:	2300      	movs	r3, #0
 800f542:	6053      	str	r3, [r2, #4]
 800f544:	e7de      	b.n	800f504 <_malloc_r+0xa8>
 800f546:	230c      	movs	r3, #12
 800f548:	6033      	str	r3, [r6, #0]
 800f54a:	4630      	mov	r0, r6
 800f54c:	f000 f80c 	bl	800f568 <__malloc_unlock>
 800f550:	e794      	b.n	800f47c <_malloc_r+0x20>
 800f552:	6005      	str	r5, [r0, #0]
 800f554:	e7d6      	b.n	800f504 <_malloc_r+0xa8>
 800f556:	bf00      	nop
 800f558:	200029ac 	.word	0x200029ac

0800f55c <__malloc_lock>:
 800f55c:	4801      	ldr	r0, [pc, #4]	@ (800f564 <__malloc_lock+0x8>)
 800f55e:	f000 bc00 	b.w	800fd62 <__retarget_lock_acquire_recursive>
 800f562:	bf00      	nop
 800f564:	20002af0 	.word	0x20002af0

0800f568 <__malloc_unlock>:
 800f568:	4801      	ldr	r0, [pc, #4]	@ (800f570 <__malloc_unlock+0x8>)
 800f56a:	f000 bbfb 	b.w	800fd64 <__retarget_lock_release_recursive>
 800f56e:	bf00      	nop
 800f570:	20002af0 	.word	0x20002af0

0800f574 <std>:
 800f574:	2300      	movs	r3, #0
 800f576:	b510      	push	{r4, lr}
 800f578:	4604      	mov	r4, r0
 800f57a:	e9c0 3300 	strd	r3, r3, [r0]
 800f57e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f582:	6083      	str	r3, [r0, #8]
 800f584:	8181      	strh	r1, [r0, #12]
 800f586:	6643      	str	r3, [r0, #100]	@ 0x64
 800f588:	81c2      	strh	r2, [r0, #14]
 800f58a:	6183      	str	r3, [r0, #24]
 800f58c:	4619      	mov	r1, r3
 800f58e:	2208      	movs	r2, #8
 800f590:	305c      	adds	r0, #92	@ 0x5c
 800f592:	f000 faa5 	bl	800fae0 <memset>
 800f596:	4b0d      	ldr	r3, [pc, #52]	@ (800f5cc <std+0x58>)
 800f598:	6263      	str	r3, [r4, #36]	@ 0x24
 800f59a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d0 <std+0x5c>)
 800f59c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f59e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d4 <std+0x60>)
 800f5a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d8 <std+0x64>)
 800f5a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5dc <std+0x68>)
 800f5a8:	6224      	str	r4, [r4, #32]
 800f5aa:	429c      	cmp	r4, r3
 800f5ac:	d006      	beq.n	800f5bc <std+0x48>
 800f5ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5b2:	4294      	cmp	r4, r2
 800f5b4:	d002      	beq.n	800f5bc <std+0x48>
 800f5b6:	33d0      	adds	r3, #208	@ 0xd0
 800f5b8:	429c      	cmp	r4, r3
 800f5ba:	d105      	bne.n	800f5c8 <std+0x54>
 800f5bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5c4:	f000 bbcc 	b.w	800fd60 <__retarget_lock_init_recursive>
 800f5c8:	bd10      	pop	{r4, pc}
 800f5ca:	bf00      	nop
 800f5cc:	0800f8f9 	.word	0x0800f8f9
 800f5d0:	0800f91f 	.word	0x0800f91f
 800f5d4:	0800f957 	.word	0x0800f957
 800f5d8:	0800f97b 	.word	0x0800f97b
 800f5dc:	200029b0 	.word	0x200029b0

0800f5e0 <stdio_exit_handler>:
 800f5e0:	4a02      	ldr	r2, [pc, #8]	@ (800f5ec <stdio_exit_handler+0xc>)
 800f5e2:	4903      	ldr	r1, [pc, #12]	@ (800f5f0 <stdio_exit_handler+0x10>)
 800f5e4:	4803      	ldr	r0, [pc, #12]	@ (800f5f4 <stdio_exit_handler+0x14>)
 800f5e6:	f000 b87b 	b.w	800f6e0 <_fwalk_sglue>
 800f5ea:	bf00      	nop
 800f5ec:	20001234 	.word	0x20001234
 800f5f0:	08010de1 	.word	0x08010de1
 800f5f4:	20001244 	.word	0x20001244

0800f5f8 <cleanup_stdio>:
 800f5f8:	6841      	ldr	r1, [r0, #4]
 800f5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f62c <cleanup_stdio+0x34>)
 800f5fc:	4299      	cmp	r1, r3
 800f5fe:	b510      	push	{r4, lr}
 800f600:	4604      	mov	r4, r0
 800f602:	d001      	beq.n	800f608 <cleanup_stdio+0x10>
 800f604:	f001 fbec 	bl	8010de0 <_fflush_r>
 800f608:	68a1      	ldr	r1, [r4, #8]
 800f60a:	4b09      	ldr	r3, [pc, #36]	@ (800f630 <cleanup_stdio+0x38>)
 800f60c:	4299      	cmp	r1, r3
 800f60e:	d002      	beq.n	800f616 <cleanup_stdio+0x1e>
 800f610:	4620      	mov	r0, r4
 800f612:	f001 fbe5 	bl	8010de0 <_fflush_r>
 800f616:	68e1      	ldr	r1, [r4, #12]
 800f618:	4b06      	ldr	r3, [pc, #24]	@ (800f634 <cleanup_stdio+0x3c>)
 800f61a:	4299      	cmp	r1, r3
 800f61c:	d004      	beq.n	800f628 <cleanup_stdio+0x30>
 800f61e:	4620      	mov	r0, r4
 800f620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f624:	f001 bbdc 	b.w	8010de0 <_fflush_r>
 800f628:	bd10      	pop	{r4, pc}
 800f62a:	bf00      	nop
 800f62c:	200029b0 	.word	0x200029b0
 800f630:	20002a18 	.word	0x20002a18
 800f634:	20002a80 	.word	0x20002a80

0800f638 <global_stdio_init.part.0>:
 800f638:	b510      	push	{r4, lr}
 800f63a:	4b0b      	ldr	r3, [pc, #44]	@ (800f668 <global_stdio_init.part.0+0x30>)
 800f63c:	4c0b      	ldr	r4, [pc, #44]	@ (800f66c <global_stdio_init.part.0+0x34>)
 800f63e:	4a0c      	ldr	r2, [pc, #48]	@ (800f670 <global_stdio_init.part.0+0x38>)
 800f640:	601a      	str	r2, [r3, #0]
 800f642:	4620      	mov	r0, r4
 800f644:	2200      	movs	r2, #0
 800f646:	2104      	movs	r1, #4
 800f648:	f7ff ff94 	bl	800f574 <std>
 800f64c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f650:	2201      	movs	r2, #1
 800f652:	2109      	movs	r1, #9
 800f654:	f7ff ff8e 	bl	800f574 <std>
 800f658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f65c:	2202      	movs	r2, #2
 800f65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f662:	2112      	movs	r1, #18
 800f664:	f7ff bf86 	b.w	800f574 <std>
 800f668:	20002ae8 	.word	0x20002ae8
 800f66c:	200029b0 	.word	0x200029b0
 800f670:	0800f5e1 	.word	0x0800f5e1

0800f674 <__sfp_lock_acquire>:
 800f674:	4801      	ldr	r0, [pc, #4]	@ (800f67c <__sfp_lock_acquire+0x8>)
 800f676:	f000 bb74 	b.w	800fd62 <__retarget_lock_acquire_recursive>
 800f67a:	bf00      	nop
 800f67c:	20002af1 	.word	0x20002af1

0800f680 <__sfp_lock_release>:
 800f680:	4801      	ldr	r0, [pc, #4]	@ (800f688 <__sfp_lock_release+0x8>)
 800f682:	f000 bb6f 	b.w	800fd64 <__retarget_lock_release_recursive>
 800f686:	bf00      	nop
 800f688:	20002af1 	.word	0x20002af1

0800f68c <__sinit>:
 800f68c:	b510      	push	{r4, lr}
 800f68e:	4604      	mov	r4, r0
 800f690:	f7ff fff0 	bl	800f674 <__sfp_lock_acquire>
 800f694:	6a23      	ldr	r3, [r4, #32]
 800f696:	b11b      	cbz	r3, 800f6a0 <__sinit+0x14>
 800f698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f69c:	f7ff bff0 	b.w	800f680 <__sfp_lock_release>
 800f6a0:	4b04      	ldr	r3, [pc, #16]	@ (800f6b4 <__sinit+0x28>)
 800f6a2:	6223      	str	r3, [r4, #32]
 800f6a4:	4b04      	ldr	r3, [pc, #16]	@ (800f6b8 <__sinit+0x2c>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1f5      	bne.n	800f698 <__sinit+0xc>
 800f6ac:	f7ff ffc4 	bl	800f638 <global_stdio_init.part.0>
 800f6b0:	e7f2      	b.n	800f698 <__sinit+0xc>
 800f6b2:	bf00      	nop
 800f6b4:	0800f5f9 	.word	0x0800f5f9
 800f6b8:	20002ae8 	.word	0x20002ae8

0800f6bc <fiprintf>:
 800f6bc:	b40e      	push	{r1, r2, r3}
 800f6be:	b503      	push	{r0, r1, lr}
 800f6c0:	4601      	mov	r1, r0
 800f6c2:	ab03      	add	r3, sp, #12
 800f6c4:	4805      	ldr	r0, [pc, #20]	@ (800f6dc <fiprintf+0x20>)
 800f6c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ca:	6800      	ldr	r0, [r0, #0]
 800f6cc:	9301      	str	r3, [sp, #4]
 800f6ce:	f000 ff0f 	bl	80104f0 <_vfiprintf_r>
 800f6d2:	b002      	add	sp, #8
 800f6d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6d8:	b003      	add	sp, #12
 800f6da:	4770      	bx	lr
 800f6dc:	20001240 	.word	0x20001240

0800f6e0 <_fwalk_sglue>:
 800f6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6e4:	4607      	mov	r7, r0
 800f6e6:	4688      	mov	r8, r1
 800f6e8:	4614      	mov	r4, r2
 800f6ea:	2600      	movs	r6, #0
 800f6ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6f0:	f1b9 0901 	subs.w	r9, r9, #1
 800f6f4:	d505      	bpl.n	800f702 <_fwalk_sglue+0x22>
 800f6f6:	6824      	ldr	r4, [r4, #0]
 800f6f8:	2c00      	cmp	r4, #0
 800f6fa:	d1f7      	bne.n	800f6ec <_fwalk_sglue+0xc>
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f702:	89ab      	ldrh	r3, [r5, #12]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d907      	bls.n	800f718 <_fwalk_sglue+0x38>
 800f708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f70c:	3301      	adds	r3, #1
 800f70e:	d003      	beq.n	800f718 <_fwalk_sglue+0x38>
 800f710:	4629      	mov	r1, r5
 800f712:	4638      	mov	r0, r7
 800f714:	47c0      	blx	r8
 800f716:	4306      	orrs	r6, r0
 800f718:	3568      	adds	r5, #104	@ 0x68
 800f71a:	e7e9      	b.n	800f6f0 <_fwalk_sglue+0x10>

0800f71c <iprintf>:
 800f71c:	b40f      	push	{r0, r1, r2, r3}
 800f71e:	b507      	push	{r0, r1, r2, lr}
 800f720:	4906      	ldr	r1, [pc, #24]	@ (800f73c <iprintf+0x20>)
 800f722:	ab04      	add	r3, sp, #16
 800f724:	6808      	ldr	r0, [r1, #0]
 800f726:	f853 2b04 	ldr.w	r2, [r3], #4
 800f72a:	6881      	ldr	r1, [r0, #8]
 800f72c:	9301      	str	r3, [sp, #4]
 800f72e:	f000 fedf 	bl	80104f0 <_vfiprintf_r>
 800f732:	b003      	add	sp, #12
 800f734:	f85d eb04 	ldr.w	lr, [sp], #4
 800f738:	b004      	add	sp, #16
 800f73a:	4770      	bx	lr
 800f73c:	20001240 	.word	0x20001240

0800f740 <_puts_r>:
 800f740:	6a03      	ldr	r3, [r0, #32]
 800f742:	b570      	push	{r4, r5, r6, lr}
 800f744:	6884      	ldr	r4, [r0, #8]
 800f746:	4605      	mov	r5, r0
 800f748:	460e      	mov	r6, r1
 800f74a:	b90b      	cbnz	r3, 800f750 <_puts_r+0x10>
 800f74c:	f7ff ff9e 	bl	800f68c <__sinit>
 800f750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f752:	07db      	lsls	r3, r3, #31
 800f754:	d405      	bmi.n	800f762 <_puts_r+0x22>
 800f756:	89a3      	ldrh	r3, [r4, #12]
 800f758:	0598      	lsls	r0, r3, #22
 800f75a:	d402      	bmi.n	800f762 <_puts_r+0x22>
 800f75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f75e:	f000 fb00 	bl	800fd62 <__retarget_lock_acquire_recursive>
 800f762:	89a3      	ldrh	r3, [r4, #12]
 800f764:	0719      	lsls	r1, r3, #28
 800f766:	d502      	bpl.n	800f76e <_puts_r+0x2e>
 800f768:	6923      	ldr	r3, [r4, #16]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d135      	bne.n	800f7da <_puts_r+0x9a>
 800f76e:	4621      	mov	r1, r4
 800f770:	4628      	mov	r0, r5
 800f772:	f000 f945 	bl	800fa00 <__swsetup_r>
 800f776:	b380      	cbz	r0, 800f7da <_puts_r+0x9a>
 800f778:	f04f 35ff 	mov.w	r5, #4294967295
 800f77c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f77e:	07da      	lsls	r2, r3, #31
 800f780:	d405      	bmi.n	800f78e <_puts_r+0x4e>
 800f782:	89a3      	ldrh	r3, [r4, #12]
 800f784:	059b      	lsls	r3, r3, #22
 800f786:	d402      	bmi.n	800f78e <_puts_r+0x4e>
 800f788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f78a:	f000 faeb 	bl	800fd64 <__retarget_lock_release_recursive>
 800f78e:	4628      	mov	r0, r5
 800f790:	bd70      	pop	{r4, r5, r6, pc}
 800f792:	2b00      	cmp	r3, #0
 800f794:	da04      	bge.n	800f7a0 <_puts_r+0x60>
 800f796:	69a2      	ldr	r2, [r4, #24]
 800f798:	429a      	cmp	r2, r3
 800f79a:	dc17      	bgt.n	800f7cc <_puts_r+0x8c>
 800f79c:	290a      	cmp	r1, #10
 800f79e:	d015      	beq.n	800f7cc <_puts_r+0x8c>
 800f7a0:	6823      	ldr	r3, [r4, #0]
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	6022      	str	r2, [r4, #0]
 800f7a6:	7019      	strb	r1, [r3, #0]
 800f7a8:	68a3      	ldr	r3, [r4, #8]
 800f7aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	60a3      	str	r3, [r4, #8]
 800f7b2:	2900      	cmp	r1, #0
 800f7b4:	d1ed      	bne.n	800f792 <_puts_r+0x52>
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da11      	bge.n	800f7de <_puts_r+0x9e>
 800f7ba:	4622      	mov	r2, r4
 800f7bc:	210a      	movs	r1, #10
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 f8df 	bl	800f982 <__swbuf_r>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d0d7      	beq.n	800f778 <_puts_r+0x38>
 800f7c8:	250a      	movs	r5, #10
 800f7ca:	e7d7      	b.n	800f77c <_puts_r+0x3c>
 800f7cc:	4622      	mov	r2, r4
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f000 f8d7 	bl	800f982 <__swbuf_r>
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	d1e7      	bne.n	800f7a8 <_puts_r+0x68>
 800f7d8:	e7ce      	b.n	800f778 <_puts_r+0x38>
 800f7da:	3e01      	subs	r6, #1
 800f7dc:	e7e4      	b.n	800f7a8 <_puts_r+0x68>
 800f7de:	6823      	ldr	r3, [r4, #0]
 800f7e0:	1c5a      	adds	r2, r3, #1
 800f7e2:	6022      	str	r2, [r4, #0]
 800f7e4:	220a      	movs	r2, #10
 800f7e6:	701a      	strb	r2, [r3, #0]
 800f7e8:	e7ee      	b.n	800f7c8 <_puts_r+0x88>
	...

0800f7ec <puts>:
 800f7ec:	4b02      	ldr	r3, [pc, #8]	@ (800f7f8 <puts+0xc>)
 800f7ee:	4601      	mov	r1, r0
 800f7f0:	6818      	ldr	r0, [r3, #0]
 800f7f2:	f7ff bfa5 	b.w	800f740 <_puts_r>
 800f7f6:	bf00      	nop
 800f7f8:	20001240 	.word	0x20001240

0800f7fc <sniprintf>:
 800f7fc:	b40c      	push	{r2, r3}
 800f7fe:	b530      	push	{r4, r5, lr}
 800f800:	4b17      	ldr	r3, [pc, #92]	@ (800f860 <sniprintf+0x64>)
 800f802:	1e0c      	subs	r4, r1, #0
 800f804:	681d      	ldr	r5, [r3, #0]
 800f806:	b09d      	sub	sp, #116	@ 0x74
 800f808:	da08      	bge.n	800f81c <sniprintf+0x20>
 800f80a:	238b      	movs	r3, #139	@ 0x8b
 800f80c:	602b      	str	r3, [r5, #0]
 800f80e:	f04f 30ff 	mov.w	r0, #4294967295
 800f812:	b01d      	add	sp, #116	@ 0x74
 800f814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f818:	b002      	add	sp, #8
 800f81a:	4770      	bx	lr
 800f81c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f820:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f824:	bf14      	ite	ne
 800f826:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f82a:	4623      	moveq	r3, r4
 800f82c:	9304      	str	r3, [sp, #16]
 800f82e:	9307      	str	r3, [sp, #28]
 800f830:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f834:	9002      	str	r0, [sp, #8]
 800f836:	9006      	str	r0, [sp, #24]
 800f838:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f83c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f83e:	ab21      	add	r3, sp, #132	@ 0x84
 800f840:	a902      	add	r1, sp, #8
 800f842:	4628      	mov	r0, r5
 800f844:	9301      	str	r3, [sp, #4]
 800f846:	f000 fb61 	bl	800ff0c <_svfiprintf_r>
 800f84a:	1c43      	adds	r3, r0, #1
 800f84c:	bfbc      	itt	lt
 800f84e:	238b      	movlt	r3, #139	@ 0x8b
 800f850:	602b      	strlt	r3, [r5, #0]
 800f852:	2c00      	cmp	r4, #0
 800f854:	d0dd      	beq.n	800f812 <sniprintf+0x16>
 800f856:	9b02      	ldr	r3, [sp, #8]
 800f858:	2200      	movs	r2, #0
 800f85a:	701a      	strb	r2, [r3, #0]
 800f85c:	e7d9      	b.n	800f812 <sniprintf+0x16>
 800f85e:	bf00      	nop
 800f860:	20001240 	.word	0x20001240

0800f864 <siprintf>:
 800f864:	b40e      	push	{r1, r2, r3}
 800f866:	b500      	push	{lr}
 800f868:	b09c      	sub	sp, #112	@ 0x70
 800f86a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f86c:	9002      	str	r0, [sp, #8]
 800f86e:	9006      	str	r0, [sp, #24]
 800f870:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f874:	4809      	ldr	r0, [pc, #36]	@ (800f89c <siprintf+0x38>)
 800f876:	9107      	str	r1, [sp, #28]
 800f878:	9104      	str	r1, [sp, #16]
 800f87a:	4909      	ldr	r1, [pc, #36]	@ (800f8a0 <siprintf+0x3c>)
 800f87c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f880:	9105      	str	r1, [sp, #20]
 800f882:	6800      	ldr	r0, [r0, #0]
 800f884:	9301      	str	r3, [sp, #4]
 800f886:	a902      	add	r1, sp, #8
 800f888:	f000 fb40 	bl	800ff0c <_svfiprintf_r>
 800f88c:	9b02      	ldr	r3, [sp, #8]
 800f88e:	2200      	movs	r2, #0
 800f890:	701a      	strb	r2, [r3, #0]
 800f892:	b01c      	add	sp, #112	@ 0x70
 800f894:	f85d eb04 	ldr.w	lr, [sp], #4
 800f898:	b003      	add	sp, #12
 800f89a:	4770      	bx	lr
 800f89c:	20001240 	.word	0x20001240
 800f8a0:	ffff0208 	.word	0xffff0208

0800f8a4 <siscanf>:
 800f8a4:	b40e      	push	{r1, r2, r3}
 800f8a6:	b530      	push	{r4, r5, lr}
 800f8a8:	b09c      	sub	sp, #112	@ 0x70
 800f8aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f8ac:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f8b0:	f854 5b04 	ldr.w	r5, [r4], #4
 800f8b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f8b8:	9002      	str	r0, [sp, #8]
 800f8ba:	9006      	str	r0, [sp, #24]
 800f8bc:	f7f0 fc92 	bl	80001e4 <strlen>
 800f8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f8f0 <siscanf+0x4c>)
 800f8c2:	9003      	str	r0, [sp, #12]
 800f8c4:	9007      	str	r0, [sp, #28]
 800f8c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8c8:	480a      	ldr	r0, [pc, #40]	@ (800f8f4 <siscanf+0x50>)
 800f8ca:	9401      	str	r4, [sp, #4]
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f8d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800f8d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f8d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f8da:	462a      	mov	r2, r5
 800f8dc:	4623      	mov	r3, r4
 800f8de:	a902      	add	r1, sp, #8
 800f8e0:	6800      	ldr	r0, [r0, #0]
 800f8e2:	f000 fc67 	bl	80101b4 <__ssvfiscanf_r>
 800f8e6:	b01c      	add	sp, #112	@ 0x70
 800f8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8ec:	b003      	add	sp, #12
 800f8ee:	4770      	bx	lr
 800f8f0:	0800f91b 	.word	0x0800f91b
 800f8f4:	20001240 	.word	0x20001240

0800f8f8 <__sread>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f900:	f000 f9d0 	bl	800fca4 <_read_r>
 800f904:	2800      	cmp	r0, #0
 800f906:	bfab      	itete	ge
 800f908:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f90a:	89a3      	ldrhlt	r3, [r4, #12]
 800f90c:	181b      	addge	r3, r3, r0
 800f90e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f912:	bfac      	ite	ge
 800f914:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f916:	81a3      	strhlt	r3, [r4, #12]
 800f918:	bd10      	pop	{r4, pc}

0800f91a <__seofread>:
 800f91a:	2000      	movs	r0, #0
 800f91c:	4770      	bx	lr

0800f91e <__swrite>:
 800f91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f922:	461f      	mov	r7, r3
 800f924:	898b      	ldrh	r3, [r1, #12]
 800f926:	05db      	lsls	r3, r3, #23
 800f928:	4605      	mov	r5, r0
 800f92a:	460c      	mov	r4, r1
 800f92c:	4616      	mov	r6, r2
 800f92e:	d505      	bpl.n	800f93c <__swrite+0x1e>
 800f930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f934:	2302      	movs	r3, #2
 800f936:	2200      	movs	r2, #0
 800f938:	f000 f9a2 	bl	800fc80 <_lseek_r>
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f946:	81a3      	strh	r3, [r4, #12]
 800f948:	4632      	mov	r2, r6
 800f94a:	463b      	mov	r3, r7
 800f94c:	4628      	mov	r0, r5
 800f94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f952:	f000 b9c9 	b.w	800fce8 <_write_r>

0800f956 <__sseek>:
 800f956:	b510      	push	{r4, lr}
 800f958:	460c      	mov	r4, r1
 800f95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f95e:	f000 f98f 	bl	800fc80 <_lseek_r>
 800f962:	1c43      	adds	r3, r0, #1
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	bf15      	itete	ne
 800f968:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f96a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f96e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f972:	81a3      	strheq	r3, [r4, #12]
 800f974:	bf18      	it	ne
 800f976:	81a3      	strhne	r3, [r4, #12]
 800f978:	bd10      	pop	{r4, pc}

0800f97a <__sclose>:
 800f97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f97e:	f000 b96f 	b.w	800fc60 <_close_r>

0800f982 <__swbuf_r>:
 800f982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f984:	460e      	mov	r6, r1
 800f986:	4614      	mov	r4, r2
 800f988:	4605      	mov	r5, r0
 800f98a:	b118      	cbz	r0, 800f994 <__swbuf_r+0x12>
 800f98c:	6a03      	ldr	r3, [r0, #32]
 800f98e:	b90b      	cbnz	r3, 800f994 <__swbuf_r+0x12>
 800f990:	f7ff fe7c 	bl	800f68c <__sinit>
 800f994:	69a3      	ldr	r3, [r4, #24]
 800f996:	60a3      	str	r3, [r4, #8]
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	071a      	lsls	r2, r3, #28
 800f99c:	d501      	bpl.n	800f9a2 <__swbuf_r+0x20>
 800f99e:	6923      	ldr	r3, [r4, #16]
 800f9a0:	b943      	cbnz	r3, 800f9b4 <__swbuf_r+0x32>
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f000 f82b 	bl	800fa00 <__swsetup_r>
 800f9aa:	b118      	cbz	r0, 800f9b4 <__swbuf_r+0x32>
 800f9ac:	f04f 37ff 	mov.w	r7, #4294967295
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	6922      	ldr	r2, [r4, #16]
 800f9b8:	1a98      	subs	r0, r3, r2
 800f9ba:	6963      	ldr	r3, [r4, #20]
 800f9bc:	b2f6      	uxtb	r6, r6
 800f9be:	4283      	cmp	r3, r0
 800f9c0:	4637      	mov	r7, r6
 800f9c2:	dc05      	bgt.n	800f9d0 <__swbuf_r+0x4e>
 800f9c4:	4621      	mov	r1, r4
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f001 fa0a 	bl	8010de0 <_fflush_r>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d1ed      	bne.n	800f9ac <__swbuf_r+0x2a>
 800f9d0:	68a3      	ldr	r3, [r4, #8]
 800f9d2:	3b01      	subs	r3, #1
 800f9d4:	60a3      	str	r3, [r4, #8]
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	6022      	str	r2, [r4, #0]
 800f9dc:	701e      	strb	r6, [r3, #0]
 800f9de:	6962      	ldr	r2, [r4, #20]
 800f9e0:	1c43      	adds	r3, r0, #1
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d004      	beq.n	800f9f0 <__swbuf_r+0x6e>
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	07db      	lsls	r3, r3, #31
 800f9ea:	d5e1      	bpl.n	800f9b0 <__swbuf_r+0x2e>
 800f9ec:	2e0a      	cmp	r6, #10
 800f9ee:	d1df      	bne.n	800f9b0 <__swbuf_r+0x2e>
 800f9f0:	4621      	mov	r1, r4
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	f001 f9f4 	bl	8010de0 <_fflush_r>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d0d9      	beq.n	800f9b0 <__swbuf_r+0x2e>
 800f9fc:	e7d6      	b.n	800f9ac <__swbuf_r+0x2a>
	...

0800fa00 <__swsetup_r>:
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4b29      	ldr	r3, [pc, #164]	@ (800faa8 <__swsetup_r+0xa8>)
 800fa04:	4605      	mov	r5, r0
 800fa06:	6818      	ldr	r0, [r3, #0]
 800fa08:	460c      	mov	r4, r1
 800fa0a:	b118      	cbz	r0, 800fa14 <__swsetup_r+0x14>
 800fa0c:	6a03      	ldr	r3, [r0, #32]
 800fa0e:	b90b      	cbnz	r3, 800fa14 <__swsetup_r+0x14>
 800fa10:	f7ff fe3c 	bl	800f68c <__sinit>
 800fa14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa18:	0719      	lsls	r1, r3, #28
 800fa1a:	d422      	bmi.n	800fa62 <__swsetup_r+0x62>
 800fa1c:	06da      	lsls	r2, r3, #27
 800fa1e:	d407      	bmi.n	800fa30 <__swsetup_r+0x30>
 800fa20:	2209      	movs	r2, #9
 800fa22:	602a      	str	r2, [r5, #0]
 800fa24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa28:	81a3      	strh	r3, [r4, #12]
 800fa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2e:	e033      	b.n	800fa98 <__swsetup_r+0x98>
 800fa30:	0758      	lsls	r0, r3, #29
 800fa32:	d512      	bpl.n	800fa5a <__swsetup_r+0x5a>
 800fa34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa36:	b141      	cbz	r1, 800fa4a <__swsetup_r+0x4a>
 800fa38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa3c:	4299      	cmp	r1, r3
 800fa3e:	d002      	beq.n	800fa46 <__swsetup_r+0x46>
 800fa40:	4628      	mov	r0, r5
 800fa42:	f000 f9bd 	bl	800fdc0 <_free_r>
 800fa46:	2300      	movs	r3, #0
 800fa48:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa4a:	89a3      	ldrh	r3, [r4, #12]
 800fa4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa50:	81a3      	strh	r3, [r4, #12]
 800fa52:	2300      	movs	r3, #0
 800fa54:	6063      	str	r3, [r4, #4]
 800fa56:	6923      	ldr	r3, [r4, #16]
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	89a3      	ldrh	r3, [r4, #12]
 800fa5c:	f043 0308 	orr.w	r3, r3, #8
 800fa60:	81a3      	strh	r3, [r4, #12]
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	b94b      	cbnz	r3, 800fa7a <__swsetup_r+0x7a>
 800fa66:	89a3      	ldrh	r3, [r4, #12]
 800fa68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa70:	d003      	beq.n	800fa7a <__swsetup_r+0x7a>
 800fa72:	4621      	mov	r1, r4
 800fa74:	4628      	mov	r0, r5
 800fa76:	f001 fa01 	bl	8010e7c <__smakebuf_r>
 800fa7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7e:	f013 0201 	ands.w	r2, r3, #1
 800fa82:	d00a      	beq.n	800fa9a <__swsetup_r+0x9a>
 800fa84:	2200      	movs	r2, #0
 800fa86:	60a2      	str	r2, [r4, #8]
 800fa88:	6962      	ldr	r2, [r4, #20]
 800fa8a:	4252      	negs	r2, r2
 800fa8c:	61a2      	str	r2, [r4, #24]
 800fa8e:	6922      	ldr	r2, [r4, #16]
 800fa90:	b942      	cbnz	r2, 800faa4 <__swsetup_r+0xa4>
 800fa92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa96:	d1c5      	bne.n	800fa24 <__swsetup_r+0x24>
 800fa98:	bd38      	pop	{r3, r4, r5, pc}
 800fa9a:	0799      	lsls	r1, r3, #30
 800fa9c:	bf58      	it	pl
 800fa9e:	6962      	ldrpl	r2, [r4, #20]
 800faa0:	60a2      	str	r2, [r4, #8]
 800faa2:	e7f4      	b.n	800fa8e <__swsetup_r+0x8e>
 800faa4:	2000      	movs	r0, #0
 800faa6:	e7f7      	b.n	800fa98 <__swsetup_r+0x98>
 800faa8:	20001240 	.word	0x20001240

0800faac <memmove>:
 800faac:	4288      	cmp	r0, r1
 800faae:	b510      	push	{r4, lr}
 800fab0:	eb01 0402 	add.w	r4, r1, r2
 800fab4:	d902      	bls.n	800fabc <memmove+0x10>
 800fab6:	4284      	cmp	r4, r0
 800fab8:	4623      	mov	r3, r4
 800faba:	d807      	bhi.n	800facc <memmove+0x20>
 800fabc:	1e43      	subs	r3, r0, #1
 800fabe:	42a1      	cmp	r1, r4
 800fac0:	d008      	beq.n	800fad4 <memmove+0x28>
 800fac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800faca:	e7f8      	b.n	800fabe <memmove+0x12>
 800facc:	4402      	add	r2, r0
 800face:	4601      	mov	r1, r0
 800fad0:	428a      	cmp	r2, r1
 800fad2:	d100      	bne.n	800fad6 <memmove+0x2a>
 800fad4:	bd10      	pop	{r4, pc}
 800fad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fade:	e7f7      	b.n	800fad0 <memmove+0x24>

0800fae0 <memset>:
 800fae0:	4402      	add	r2, r0
 800fae2:	4603      	mov	r3, r0
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d100      	bne.n	800faea <memset+0xa>
 800fae8:	4770      	bx	lr
 800faea:	f803 1b01 	strb.w	r1, [r3], #1
 800faee:	e7f9      	b.n	800fae4 <memset+0x4>

0800faf0 <strcat>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	4602      	mov	r2, r0
 800faf4:	7814      	ldrb	r4, [r2, #0]
 800faf6:	4613      	mov	r3, r2
 800faf8:	3201      	adds	r2, #1
 800fafa:	2c00      	cmp	r4, #0
 800fafc:	d1fa      	bne.n	800faf4 <strcat+0x4>
 800fafe:	3b01      	subs	r3, #1
 800fb00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb04:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb08:	2a00      	cmp	r2, #0
 800fb0a:	d1f9      	bne.n	800fb00 <strcat+0x10>
 800fb0c:	bd10      	pop	{r4, pc}

0800fb0e <strchr>:
 800fb0e:	b2c9      	uxtb	r1, r1
 800fb10:	4603      	mov	r3, r0
 800fb12:	4618      	mov	r0, r3
 800fb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb18:	b112      	cbz	r2, 800fb20 <strchr+0x12>
 800fb1a:	428a      	cmp	r2, r1
 800fb1c:	d1f9      	bne.n	800fb12 <strchr+0x4>
 800fb1e:	4770      	bx	lr
 800fb20:	2900      	cmp	r1, #0
 800fb22:	bf18      	it	ne
 800fb24:	2000      	movne	r0, #0
 800fb26:	4770      	bx	lr

0800fb28 <strncpy>:
 800fb28:	b510      	push	{r4, lr}
 800fb2a:	3901      	subs	r1, #1
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	b132      	cbz	r2, 800fb3e <strncpy+0x16>
 800fb30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fb34:	f803 4b01 	strb.w	r4, [r3], #1
 800fb38:	3a01      	subs	r2, #1
 800fb3a:	2c00      	cmp	r4, #0
 800fb3c:	d1f7      	bne.n	800fb2e <strncpy+0x6>
 800fb3e:	441a      	add	r2, r3
 800fb40:	2100      	movs	r1, #0
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d100      	bne.n	800fb48 <strncpy+0x20>
 800fb46:	bd10      	pop	{r4, pc}
 800fb48:	f803 1b01 	strb.w	r1, [r3], #1
 800fb4c:	e7f9      	b.n	800fb42 <strncpy+0x1a>

0800fb4e <strrchr>:
 800fb4e:	b538      	push	{r3, r4, r5, lr}
 800fb50:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800fb54:	4603      	mov	r3, r0
 800fb56:	d10e      	bne.n	800fb76 <strrchr+0x28>
 800fb58:	4621      	mov	r1, r4
 800fb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb5e:	f7ff bfd6 	b.w	800fb0e <strchr>
 800fb62:	1c43      	adds	r3, r0, #1
 800fb64:	4605      	mov	r5, r0
 800fb66:	4621      	mov	r1, r4
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ffd0 	bl	800fb0e <strchr>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d1f7      	bne.n	800fb62 <strrchr+0x14>
 800fb72:	4628      	mov	r0, r5
 800fb74:	bd38      	pop	{r3, r4, r5, pc}
 800fb76:	2500      	movs	r5, #0
 800fb78:	e7f5      	b.n	800fb66 <strrchr+0x18>
	...

0800fb7c <strtok>:
 800fb7c:	4b16      	ldr	r3, [pc, #88]	@ (800fbd8 <strtok+0x5c>)
 800fb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb82:	681f      	ldr	r7, [r3, #0]
 800fb84:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800fb86:	4605      	mov	r5, r0
 800fb88:	460e      	mov	r6, r1
 800fb8a:	b9ec      	cbnz	r4, 800fbc8 <strtok+0x4c>
 800fb8c:	2050      	movs	r0, #80	@ 0x50
 800fb8e:	f7ff fc33 	bl	800f3f8 <malloc>
 800fb92:	4602      	mov	r2, r0
 800fb94:	6478      	str	r0, [r7, #68]	@ 0x44
 800fb96:	b920      	cbnz	r0, 800fba2 <strtok+0x26>
 800fb98:	4b10      	ldr	r3, [pc, #64]	@ (800fbdc <strtok+0x60>)
 800fb9a:	4811      	ldr	r0, [pc, #68]	@ (800fbe0 <strtok+0x64>)
 800fb9c:	215b      	movs	r1, #91	@ 0x5b
 800fb9e:	f000 f8f1 	bl	800fd84 <__assert_func>
 800fba2:	e9c0 4400 	strd	r4, r4, [r0]
 800fba6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fbaa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fbae:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800fbb2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800fbb6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800fbba:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800fbbe:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800fbc2:	6184      	str	r4, [r0, #24]
 800fbc4:	7704      	strb	r4, [r0, #28]
 800fbc6:	6244      	str	r4, [r0, #36]	@ 0x24
 800fbc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fbca:	4631      	mov	r1, r6
 800fbcc:	4628      	mov	r0, r5
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd4:	f000 b806 	b.w	800fbe4 <__strtok_r>
 800fbd8:	20001240 	.word	0x20001240
 800fbdc:	080132a0 	.word	0x080132a0
 800fbe0:	080132b7 	.word	0x080132b7

0800fbe4 <__strtok_r>:
 800fbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	b908      	cbnz	r0, 800fbee <__strtok_r+0xa>
 800fbea:	6814      	ldr	r4, [r2, #0]
 800fbec:	b144      	cbz	r4, 800fc00 <__strtok_r+0x1c>
 800fbee:	4620      	mov	r0, r4
 800fbf0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fbf4:	460f      	mov	r7, r1
 800fbf6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fbfa:	b91e      	cbnz	r6, 800fc04 <__strtok_r+0x20>
 800fbfc:	b965      	cbnz	r5, 800fc18 <__strtok_r+0x34>
 800fbfe:	6015      	str	r5, [r2, #0]
 800fc00:	2000      	movs	r0, #0
 800fc02:	e005      	b.n	800fc10 <__strtok_r+0x2c>
 800fc04:	42b5      	cmp	r5, r6
 800fc06:	d1f6      	bne.n	800fbf6 <__strtok_r+0x12>
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1f0      	bne.n	800fbee <__strtok_r+0xa>
 800fc0c:	6014      	str	r4, [r2, #0]
 800fc0e:	7003      	strb	r3, [r0, #0]
 800fc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc12:	461c      	mov	r4, r3
 800fc14:	e00c      	b.n	800fc30 <__strtok_r+0x4c>
 800fc16:	b915      	cbnz	r5, 800fc1e <__strtok_r+0x3a>
 800fc18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc1c:	460e      	mov	r6, r1
 800fc1e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fc22:	42ab      	cmp	r3, r5
 800fc24:	d1f7      	bne.n	800fc16 <__strtok_r+0x32>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d0f3      	beq.n	800fc12 <__strtok_r+0x2e>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fc30:	6014      	str	r4, [r2, #0]
 800fc32:	e7ed      	b.n	800fc10 <__strtok_r+0x2c>

0800fc34 <strstr>:
 800fc34:	780a      	ldrb	r2, [r1, #0]
 800fc36:	b570      	push	{r4, r5, r6, lr}
 800fc38:	b96a      	cbnz	r2, 800fc56 <strstr+0x22>
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d109      	bne.n	800fc54 <strstr+0x20>
 800fc40:	460c      	mov	r4, r1
 800fc42:	4605      	mov	r5, r0
 800fc44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d0f6      	beq.n	800fc3a <strstr+0x6>
 800fc4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fc50:	429e      	cmp	r6, r3
 800fc52:	d0f7      	beq.n	800fc44 <strstr+0x10>
 800fc54:	3001      	adds	r0, #1
 800fc56:	7803      	ldrb	r3, [r0, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1ef      	bne.n	800fc3c <strstr+0x8>
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	e7ec      	b.n	800fc3a <strstr+0x6>

0800fc60 <_close_r>:
 800fc60:	b538      	push	{r3, r4, r5, lr}
 800fc62:	4d06      	ldr	r5, [pc, #24]	@ (800fc7c <_close_r+0x1c>)
 800fc64:	2300      	movs	r3, #0
 800fc66:	4604      	mov	r4, r0
 800fc68:	4608      	mov	r0, r1
 800fc6a:	602b      	str	r3, [r5, #0]
 800fc6c:	f7f1 fe82 	bl	8001974 <_close>
 800fc70:	1c43      	adds	r3, r0, #1
 800fc72:	d102      	bne.n	800fc7a <_close_r+0x1a>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	b103      	cbz	r3, 800fc7a <_close_r+0x1a>
 800fc78:	6023      	str	r3, [r4, #0]
 800fc7a:	bd38      	pop	{r3, r4, r5, pc}
 800fc7c:	20002aec 	.word	0x20002aec

0800fc80 <_lseek_r>:
 800fc80:	b538      	push	{r3, r4, r5, lr}
 800fc82:	4d07      	ldr	r5, [pc, #28]	@ (800fca0 <_lseek_r+0x20>)
 800fc84:	4604      	mov	r4, r0
 800fc86:	4608      	mov	r0, r1
 800fc88:	4611      	mov	r1, r2
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	602a      	str	r2, [r5, #0]
 800fc8e:	461a      	mov	r2, r3
 800fc90:	f7f1 fe97 	bl	80019c2 <_lseek>
 800fc94:	1c43      	adds	r3, r0, #1
 800fc96:	d102      	bne.n	800fc9e <_lseek_r+0x1e>
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	b103      	cbz	r3, 800fc9e <_lseek_r+0x1e>
 800fc9c:	6023      	str	r3, [r4, #0]
 800fc9e:	bd38      	pop	{r3, r4, r5, pc}
 800fca0:	20002aec 	.word	0x20002aec

0800fca4 <_read_r>:
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	4d07      	ldr	r5, [pc, #28]	@ (800fcc4 <_read_r+0x20>)
 800fca8:	4604      	mov	r4, r0
 800fcaa:	4608      	mov	r0, r1
 800fcac:	4611      	mov	r1, r2
 800fcae:	2200      	movs	r2, #0
 800fcb0:	602a      	str	r2, [r5, #0]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	f7f1 fe25 	bl	8001902 <_read>
 800fcb8:	1c43      	adds	r3, r0, #1
 800fcba:	d102      	bne.n	800fcc2 <_read_r+0x1e>
 800fcbc:	682b      	ldr	r3, [r5, #0]
 800fcbe:	b103      	cbz	r3, 800fcc2 <_read_r+0x1e>
 800fcc0:	6023      	str	r3, [r4, #0]
 800fcc2:	bd38      	pop	{r3, r4, r5, pc}
 800fcc4:	20002aec 	.word	0x20002aec

0800fcc8 <_sbrk_r>:
 800fcc8:	b538      	push	{r3, r4, r5, lr}
 800fcca:	4d06      	ldr	r5, [pc, #24]	@ (800fce4 <_sbrk_r+0x1c>)
 800fccc:	2300      	movs	r3, #0
 800fcce:	4604      	mov	r4, r0
 800fcd0:	4608      	mov	r0, r1
 800fcd2:	602b      	str	r3, [r5, #0]
 800fcd4:	f7f1 fe82 	bl	80019dc <_sbrk>
 800fcd8:	1c43      	adds	r3, r0, #1
 800fcda:	d102      	bne.n	800fce2 <_sbrk_r+0x1a>
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	b103      	cbz	r3, 800fce2 <_sbrk_r+0x1a>
 800fce0:	6023      	str	r3, [r4, #0]
 800fce2:	bd38      	pop	{r3, r4, r5, pc}
 800fce4:	20002aec 	.word	0x20002aec

0800fce8 <_write_r>:
 800fce8:	b538      	push	{r3, r4, r5, lr}
 800fcea:	4d07      	ldr	r5, [pc, #28]	@ (800fd08 <_write_r+0x20>)
 800fcec:	4604      	mov	r4, r0
 800fcee:	4608      	mov	r0, r1
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	602a      	str	r2, [r5, #0]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	f7f1 fe20 	bl	800193c <_write>
 800fcfc:	1c43      	adds	r3, r0, #1
 800fcfe:	d102      	bne.n	800fd06 <_write_r+0x1e>
 800fd00:	682b      	ldr	r3, [r5, #0]
 800fd02:	b103      	cbz	r3, 800fd06 <_write_r+0x1e>
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	20002aec 	.word	0x20002aec

0800fd0c <__errno>:
 800fd0c:	4b01      	ldr	r3, [pc, #4]	@ (800fd14 <__errno+0x8>)
 800fd0e:	6818      	ldr	r0, [r3, #0]
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop
 800fd14:	20001240 	.word	0x20001240

0800fd18 <__libc_init_array>:
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	4d0d      	ldr	r5, [pc, #52]	@ (800fd50 <__libc_init_array+0x38>)
 800fd1c:	4c0d      	ldr	r4, [pc, #52]	@ (800fd54 <__libc_init_array+0x3c>)
 800fd1e:	1b64      	subs	r4, r4, r5
 800fd20:	10a4      	asrs	r4, r4, #2
 800fd22:	2600      	movs	r6, #0
 800fd24:	42a6      	cmp	r6, r4
 800fd26:	d109      	bne.n	800fd3c <__libc_init_array+0x24>
 800fd28:	4d0b      	ldr	r5, [pc, #44]	@ (800fd58 <__libc_init_array+0x40>)
 800fd2a:	4c0c      	ldr	r4, [pc, #48]	@ (800fd5c <__libc_init_array+0x44>)
 800fd2c:	f001 fae6 	bl	80112fc <_init>
 800fd30:	1b64      	subs	r4, r4, r5
 800fd32:	10a4      	asrs	r4, r4, #2
 800fd34:	2600      	movs	r6, #0
 800fd36:	42a6      	cmp	r6, r4
 800fd38:	d105      	bne.n	800fd46 <__libc_init_array+0x2e>
 800fd3a:	bd70      	pop	{r4, r5, r6, pc}
 800fd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd40:	4798      	blx	r3
 800fd42:	3601      	adds	r6, #1
 800fd44:	e7ee      	b.n	800fd24 <__libc_init_array+0xc>
 800fd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd4a:	4798      	blx	r3
 800fd4c:	3601      	adds	r6, #1
 800fd4e:	e7f2      	b.n	800fd36 <__libc_init_array+0x1e>
 800fd50:	080134a4 	.word	0x080134a4
 800fd54:	080134a4 	.word	0x080134a4
 800fd58:	080134a4 	.word	0x080134a4
 800fd5c:	080134a8 	.word	0x080134a8

0800fd60 <__retarget_lock_init_recursive>:
 800fd60:	4770      	bx	lr

0800fd62 <__retarget_lock_acquire_recursive>:
 800fd62:	4770      	bx	lr

0800fd64 <__retarget_lock_release_recursive>:
 800fd64:	4770      	bx	lr

0800fd66 <memcpy>:
 800fd66:	440a      	add	r2, r1
 800fd68:	4291      	cmp	r1, r2
 800fd6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd6e:	d100      	bne.n	800fd72 <memcpy+0xc>
 800fd70:	4770      	bx	lr
 800fd72:	b510      	push	{r4, lr}
 800fd74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd7c:	4291      	cmp	r1, r2
 800fd7e:	d1f9      	bne.n	800fd74 <memcpy+0xe>
 800fd80:	bd10      	pop	{r4, pc}
	...

0800fd84 <__assert_func>:
 800fd84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd86:	4614      	mov	r4, r2
 800fd88:	461a      	mov	r2, r3
 800fd8a:	4b09      	ldr	r3, [pc, #36]	@ (800fdb0 <__assert_func+0x2c>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4605      	mov	r5, r0
 800fd90:	68d8      	ldr	r0, [r3, #12]
 800fd92:	b954      	cbnz	r4, 800fdaa <__assert_func+0x26>
 800fd94:	4b07      	ldr	r3, [pc, #28]	@ (800fdb4 <__assert_func+0x30>)
 800fd96:	461c      	mov	r4, r3
 800fd98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd9c:	9100      	str	r1, [sp, #0]
 800fd9e:	462b      	mov	r3, r5
 800fda0:	4905      	ldr	r1, [pc, #20]	@ (800fdb8 <__assert_func+0x34>)
 800fda2:	f7ff fc8b 	bl	800f6bc <fiprintf>
 800fda6:	f001 f93b 	bl	8011020 <abort>
 800fdaa:	4b04      	ldr	r3, [pc, #16]	@ (800fdbc <__assert_func+0x38>)
 800fdac:	e7f4      	b.n	800fd98 <__assert_func+0x14>
 800fdae:	bf00      	nop
 800fdb0:	20001240 	.word	0x20001240
 800fdb4:	0801334c 	.word	0x0801334c
 800fdb8:	0801331e 	.word	0x0801331e
 800fdbc:	08013311 	.word	0x08013311

0800fdc0 <_free_r>:
 800fdc0:	b538      	push	{r3, r4, r5, lr}
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	2900      	cmp	r1, #0
 800fdc6:	d041      	beq.n	800fe4c <_free_r+0x8c>
 800fdc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdcc:	1f0c      	subs	r4, r1, #4
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	bfb8      	it	lt
 800fdd2:	18e4      	addlt	r4, r4, r3
 800fdd4:	f7ff fbc2 	bl	800f55c <__malloc_lock>
 800fdd8:	4a1d      	ldr	r2, [pc, #116]	@ (800fe50 <_free_r+0x90>)
 800fdda:	6813      	ldr	r3, [r2, #0]
 800fddc:	b933      	cbnz	r3, 800fdec <_free_r+0x2c>
 800fdde:	6063      	str	r3, [r4, #4]
 800fde0:	6014      	str	r4, [r2, #0]
 800fde2:	4628      	mov	r0, r5
 800fde4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fde8:	f7ff bbbe 	b.w	800f568 <__malloc_unlock>
 800fdec:	42a3      	cmp	r3, r4
 800fdee:	d908      	bls.n	800fe02 <_free_r+0x42>
 800fdf0:	6820      	ldr	r0, [r4, #0]
 800fdf2:	1821      	adds	r1, r4, r0
 800fdf4:	428b      	cmp	r3, r1
 800fdf6:	bf01      	itttt	eq
 800fdf8:	6819      	ldreq	r1, [r3, #0]
 800fdfa:	685b      	ldreq	r3, [r3, #4]
 800fdfc:	1809      	addeq	r1, r1, r0
 800fdfe:	6021      	streq	r1, [r4, #0]
 800fe00:	e7ed      	b.n	800fdde <_free_r+0x1e>
 800fe02:	461a      	mov	r2, r3
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	b10b      	cbz	r3, 800fe0c <_free_r+0x4c>
 800fe08:	42a3      	cmp	r3, r4
 800fe0a:	d9fa      	bls.n	800fe02 <_free_r+0x42>
 800fe0c:	6811      	ldr	r1, [r2, #0]
 800fe0e:	1850      	adds	r0, r2, r1
 800fe10:	42a0      	cmp	r0, r4
 800fe12:	d10b      	bne.n	800fe2c <_free_r+0x6c>
 800fe14:	6820      	ldr	r0, [r4, #0]
 800fe16:	4401      	add	r1, r0
 800fe18:	1850      	adds	r0, r2, r1
 800fe1a:	4283      	cmp	r3, r0
 800fe1c:	6011      	str	r1, [r2, #0]
 800fe1e:	d1e0      	bne.n	800fde2 <_free_r+0x22>
 800fe20:	6818      	ldr	r0, [r3, #0]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	6053      	str	r3, [r2, #4]
 800fe26:	4408      	add	r0, r1
 800fe28:	6010      	str	r0, [r2, #0]
 800fe2a:	e7da      	b.n	800fde2 <_free_r+0x22>
 800fe2c:	d902      	bls.n	800fe34 <_free_r+0x74>
 800fe2e:	230c      	movs	r3, #12
 800fe30:	602b      	str	r3, [r5, #0]
 800fe32:	e7d6      	b.n	800fde2 <_free_r+0x22>
 800fe34:	6820      	ldr	r0, [r4, #0]
 800fe36:	1821      	adds	r1, r4, r0
 800fe38:	428b      	cmp	r3, r1
 800fe3a:	bf04      	itt	eq
 800fe3c:	6819      	ldreq	r1, [r3, #0]
 800fe3e:	685b      	ldreq	r3, [r3, #4]
 800fe40:	6063      	str	r3, [r4, #4]
 800fe42:	bf04      	itt	eq
 800fe44:	1809      	addeq	r1, r1, r0
 800fe46:	6021      	streq	r1, [r4, #0]
 800fe48:	6054      	str	r4, [r2, #4]
 800fe4a:	e7ca      	b.n	800fde2 <_free_r+0x22>
 800fe4c:	bd38      	pop	{r3, r4, r5, pc}
 800fe4e:	bf00      	nop
 800fe50:	200029ac 	.word	0x200029ac

0800fe54 <__ssputs_r>:
 800fe54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe58:	688e      	ldr	r6, [r1, #8]
 800fe5a:	461f      	mov	r7, r3
 800fe5c:	42be      	cmp	r6, r7
 800fe5e:	680b      	ldr	r3, [r1, #0]
 800fe60:	4682      	mov	sl, r0
 800fe62:	460c      	mov	r4, r1
 800fe64:	4690      	mov	r8, r2
 800fe66:	d82d      	bhi.n	800fec4 <__ssputs_r+0x70>
 800fe68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe70:	d026      	beq.n	800fec0 <__ssputs_r+0x6c>
 800fe72:	6965      	ldr	r5, [r4, #20]
 800fe74:	6909      	ldr	r1, [r1, #16]
 800fe76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe7a:	eba3 0901 	sub.w	r9, r3, r1
 800fe7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe82:	1c7b      	adds	r3, r7, #1
 800fe84:	444b      	add	r3, r9
 800fe86:	106d      	asrs	r5, r5, #1
 800fe88:	429d      	cmp	r5, r3
 800fe8a:	bf38      	it	cc
 800fe8c:	461d      	movcc	r5, r3
 800fe8e:	0553      	lsls	r3, r2, #21
 800fe90:	d527      	bpl.n	800fee2 <__ssputs_r+0x8e>
 800fe92:	4629      	mov	r1, r5
 800fe94:	f7ff fae2 	bl	800f45c <_malloc_r>
 800fe98:	4606      	mov	r6, r0
 800fe9a:	b360      	cbz	r0, 800fef6 <__ssputs_r+0xa2>
 800fe9c:	6921      	ldr	r1, [r4, #16]
 800fe9e:	464a      	mov	r2, r9
 800fea0:	f7ff ff61 	bl	800fd66 <memcpy>
 800fea4:	89a3      	ldrh	r3, [r4, #12]
 800fea6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800feaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feae:	81a3      	strh	r3, [r4, #12]
 800feb0:	6126      	str	r6, [r4, #16]
 800feb2:	6165      	str	r5, [r4, #20]
 800feb4:	444e      	add	r6, r9
 800feb6:	eba5 0509 	sub.w	r5, r5, r9
 800feba:	6026      	str	r6, [r4, #0]
 800febc:	60a5      	str	r5, [r4, #8]
 800febe:	463e      	mov	r6, r7
 800fec0:	42be      	cmp	r6, r7
 800fec2:	d900      	bls.n	800fec6 <__ssputs_r+0x72>
 800fec4:	463e      	mov	r6, r7
 800fec6:	6820      	ldr	r0, [r4, #0]
 800fec8:	4632      	mov	r2, r6
 800feca:	4641      	mov	r1, r8
 800fecc:	f7ff fdee 	bl	800faac <memmove>
 800fed0:	68a3      	ldr	r3, [r4, #8]
 800fed2:	1b9b      	subs	r3, r3, r6
 800fed4:	60a3      	str	r3, [r4, #8]
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	4433      	add	r3, r6
 800feda:	6023      	str	r3, [r4, #0]
 800fedc:	2000      	movs	r0, #0
 800fede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee2:	462a      	mov	r2, r5
 800fee4:	f001 f8a3 	bl	801102e <_realloc_r>
 800fee8:	4606      	mov	r6, r0
 800feea:	2800      	cmp	r0, #0
 800feec:	d1e0      	bne.n	800feb0 <__ssputs_r+0x5c>
 800feee:	6921      	ldr	r1, [r4, #16]
 800fef0:	4650      	mov	r0, sl
 800fef2:	f7ff ff65 	bl	800fdc0 <_free_r>
 800fef6:	230c      	movs	r3, #12
 800fef8:	f8ca 3000 	str.w	r3, [sl]
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff02:	81a3      	strh	r3, [r4, #12]
 800ff04:	f04f 30ff 	mov.w	r0, #4294967295
 800ff08:	e7e9      	b.n	800fede <__ssputs_r+0x8a>
	...

0800ff0c <_svfiprintf_r>:
 800ff0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff10:	4698      	mov	r8, r3
 800ff12:	898b      	ldrh	r3, [r1, #12]
 800ff14:	061b      	lsls	r3, r3, #24
 800ff16:	b09d      	sub	sp, #116	@ 0x74
 800ff18:	4607      	mov	r7, r0
 800ff1a:	460d      	mov	r5, r1
 800ff1c:	4614      	mov	r4, r2
 800ff1e:	d510      	bpl.n	800ff42 <_svfiprintf_r+0x36>
 800ff20:	690b      	ldr	r3, [r1, #16]
 800ff22:	b973      	cbnz	r3, 800ff42 <_svfiprintf_r+0x36>
 800ff24:	2140      	movs	r1, #64	@ 0x40
 800ff26:	f7ff fa99 	bl	800f45c <_malloc_r>
 800ff2a:	6028      	str	r0, [r5, #0]
 800ff2c:	6128      	str	r0, [r5, #16]
 800ff2e:	b930      	cbnz	r0, 800ff3e <_svfiprintf_r+0x32>
 800ff30:	230c      	movs	r3, #12
 800ff32:	603b      	str	r3, [r7, #0]
 800ff34:	f04f 30ff 	mov.w	r0, #4294967295
 800ff38:	b01d      	add	sp, #116	@ 0x74
 800ff3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3e:	2340      	movs	r3, #64	@ 0x40
 800ff40:	616b      	str	r3, [r5, #20]
 800ff42:	2300      	movs	r3, #0
 800ff44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff46:	2320      	movs	r3, #32
 800ff48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff50:	2330      	movs	r3, #48	@ 0x30
 800ff52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80100f0 <_svfiprintf_r+0x1e4>
 800ff56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff5a:	f04f 0901 	mov.w	r9, #1
 800ff5e:	4623      	mov	r3, r4
 800ff60:	469a      	mov	sl, r3
 800ff62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff66:	b10a      	cbz	r2, 800ff6c <_svfiprintf_r+0x60>
 800ff68:	2a25      	cmp	r2, #37	@ 0x25
 800ff6a:	d1f9      	bne.n	800ff60 <_svfiprintf_r+0x54>
 800ff6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ff70:	d00b      	beq.n	800ff8a <_svfiprintf_r+0x7e>
 800ff72:	465b      	mov	r3, fp
 800ff74:	4622      	mov	r2, r4
 800ff76:	4629      	mov	r1, r5
 800ff78:	4638      	mov	r0, r7
 800ff7a:	f7ff ff6b 	bl	800fe54 <__ssputs_r>
 800ff7e:	3001      	adds	r0, #1
 800ff80:	f000 80a7 	beq.w	80100d2 <_svfiprintf_r+0x1c6>
 800ff84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff86:	445a      	add	r2, fp
 800ff88:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f000 809f 	beq.w	80100d2 <_svfiprintf_r+0x1c6>
 800ff94:	2300      	movs	r3, #0
 800ff96:	f04f 32ff 	mov.w	r2, #4294967295
 800ff9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff9e:	f10a 0a01 	add.w	sl, sl, #1
 800ffa2:	9304      	str	r3, [sp, #16]
 800ffa4:	9307      	str	r3, [sp, #28]
 800ffa6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffac:	4654      	mov	r4, sl
 800ffae:	2205      	movs	r2, #5
 800ffb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffb4:	484e      	ldr	r0, [pc, #312]	@ (80100f0 <_svfiprintf_r+0x1e4>)
 800ffb6:	f7f0 f923 	bl	8000200 <memchr>
 800ffba:	9a04      	ldr	r2, [sp, #16]
 800ffbc:	b9d8      	cbnz	r0, 800fff6 <_svfiprintf_r+0xea>
 800ffbe:	06d0      	lsls	r0, r2, #27
 800ffc0:	bf44      	itt	mi
 800ffc2:	2320      	movmi	r3, #32
 800ffc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffc8:	0711      	lsls	r1, r2, #28
 800ffca:	bf44      	itt	mi
 800ffcc:	232b      	movmi	r3, #43	@ 0x2b
 800ffce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffd8:	d015      	beq.n	8010006 <_svfiprintf_r+0xfa>
 800ffda:	9a07      	ldr	r2, [sp, #28]
 800ffdc:	4654      	mov	r4, sl
 800ffde:	2000      	movs	r0, #0
 800ffe0:	f04f 0c0a 	mov.w	ip, #10
 800ffe4:	4621      	mov	r1, r4
 800ffe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffea:	3b30      	subs	r3, #48	@ 0x30
 800ffec:	2b09      	cmp	r3, #9
 800ffee:	d94b      	bls.n	8010088 <_svfiprintf_r+0x17c>
 800fff0:	b1b0      	cbz	r0, 8010020 <_svfiprintf_r+0x114>
 800fff2:	9207      	str	r2, [sp, #28]
 800fff4:	e014      	b.n	8010020 <_svfiprintf_r+0x114>
 800fff6:	eba0 0308 	sub.w	r3, r0, r8
 800fffa:	fa09 f303 	lsl.w	r3, r9, r3
 800fffe:	4313      	orrs	r3, r2
 8010000:	9304      	str	r3, [sp, #16]
 8010002:	46a2      	mov	sl, r4
 8010004:	e7d2      	b.n	800ffac <_svfiprintf_r+0xa0>
 8010006:	9b03      	ldr	r3, [sp, #12]
 8010008:	1d19      	adds	r1, r3, #4
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	9103      	str	r1, [sp, #12]
 801000e:	2b00      	cmp	r3, #0
 8010010:	bfbb      	ittet	lt
 8010012:	425b      	neglt	r3, r3
 8010014:	f042 0202 	orrlt.w	r2, r2, #2
 8010018:	9307      	strge	r3, [sp, #28]
 801001a:	9307      	strlt	r3, [sp, #28]
 801001c:	bfb8      	it	lt
 801001e:	9204      	strlt	r2, [sp, #16]
 8010020:	7823      	ldrb	r3, [r4, #0]
 8010022:	2b2e      	cmp	r3, #46	@ 0x2e
 8010024:	d10a      	bne.n	801003c <_svfiprintf_r+0x130>
 8010026:	7863      	ldrb	r3, [r4, #1]
 8010028:	2b2a      	cmp	r3, #42	@ 0x2a
 801002a:	d132      	bne.n	8010092 <_svfiprintf_r+0x186>
 801002c:	9b03      	ldr	r3, [sp, #12]
 801002e:	1d1a      	adds	r2, r3, #4
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	9203      	str	r2, [sp, #12]
 8010034:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010038:	3402      	adds	r4, #2
 801003a:	9305      	str	r3, [sp, #20]
 801003c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010100 <_svfiprintf_r+0x1f4>
 8010040:	7821      	ldrb	r1, [r4, #0]
 8010042:	2203      	movs	r2, #3
 8010044:	4650      	mov	r0, sl
 8010046:	f7f0 f8db 	bl	8000200 <memchr>
 801004a:	b138      	cbz	r0, 801005c <_svfiprintf_r+0x150>
 801004c:	9b04      	ldr	r3, [sp, #16]
 801004e:	eba0 000a 	sub.w	r0, r0, sl
 8010052:	2240      	movs	r2, #64	@ 0x40
 8010054:	4082      	lsls	r2, r0
 8010056:	4313      	orrs	r3, r2
 8010058:	3401      	adds	r4, #1
 801005a:	9304      	str	r3, [sp, #16]
 801005c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010060:	4824      	ldr	r0, [pc, #144]	@ (80100f4 <_svfiprintf_r+0x1e8>)
 8010062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010066:	2206      	movs	r2, #6
 8010068:	f7f0 f8ca 	bl	8000200 <memchr>
 801006c:	2800      	cmp	r0, #0
 801006e:	d036      	beq.n	80100de <_svfiprintf_r+0x1d2>
 8010070:	4b21      	ldr	r3, [pc, #132]	@ (80100f8 <_svfiprintf_r+0x1ec>)
 8010072:	bb1b      	cbnz	r3, 80100bc <_svfiprintf_r+0x1b0>
 8010074:	9b03      	ldr	r3, [sp, #12]
 8010076:	3307      	adds	r3, #7
 8010078:	f023 0307 	bic.w	r3, r3, #7
 801007c:	3308      	adds	r3, #8
 801007e:	9303      	str	r3, [sp, #12]
 8010080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010082:	4433      	add	r3, r6
 8010084:	9309      	str	r3, [sp, #36]	@ 0x24
 8010086:	e76a      	b.n	800ff5e <_svfiprintf_r+0x52>
 8010088:	fb0c 3202 	mla	r2, ip, r2, r3
 801008c:	460c      	mov	r4, r1
 801008e:	2001      	movs	r0, #1
 8010090:	e7a8      	b.n	800ffe4 <_svfiprintf_r+0xd8>
 8010092:	2300      	movs	r3, #0
 8010094:	3401      	adds	r4, #1
 8010096:	9305      	str	r3, [sp, #20]
 8010098:	4619      	mov	r1, r3
 801009a:	f04f 0c0a 	mov.w	ip, #10
 801009e:	4620      	mov	r0, r4
 80100a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100a4:	3a30      	subs	r2, #48	@ 0x30
 80100a6:	2a09      	cmp	r2, #9
 80100a8:	d903      	bls.n	80100b2 <_svfiprintf_r+0x1a6>
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d0c6      	beq.n	801003c <_svfiprintf_r+0x130>
 80100ae:	9105      	str	r1, [sp, #20]
 80100b0:	e7c4      	b.n	801003c <_svfiprintf_r+0x130>
 80100b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80100b6:	4604      	mov	r4, r0
 80100b8:	2301      	movs	r3, #1
 80100ba:	e7f0      	b.n	801009e <_svfiprintf_r+0x192>
 80100bc:	ab03      	add	r3, sp, #12
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	462a      	mov	r2, r5
 80100c2:	4b0e      	ldr	r3, [pc, #56]	@ (80100fc <_svfiprintf_r+0x1f0>)
 80100c4:	a904      	add	r1, sp, #16
 80100c6:	4638      	mov	r0, r7
 80100c8:	f3af 8000 	nop.w
 80100cc:	1c42      	adds	r2, r0, #1
 80100ce:	4606      	mov	r6, r0
 80100d0:	d1d6      	bne.n	8010080 <_svfiprintf_r+0x174>
 80100d2:	89ab      	ldrh	r3, [r5, #12]
 80100d4:	065b      	lsls	r3, r3, #25
 80100d6:	f53f af2d 	bmi.w	800ff34 <_svfiprintf_r+0x28>
 80100da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100dc:	e72c      	b.n	800ff38 <_svfiprintf_r+0x2c>
 80100de:	ab03      	add	r3, sp, #12
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	462a      	mov	r2, r5
 80100e4:	4b05      	ldr	r3, [pc, #20]	@ (80100fc <_svfiprintf_r+0x1f0>)
 80100e6:	a904      	add	r1, sp, #16
 80100e8:	4638      	mov	r0, r7
 80100ea:	f000 fb87 	bl	80107fc <_printf_i>
 80100ee:	e7ed      	b.n	80100cc <_svfiprintf_r+0x1c0>
 80100f0:	0801334d 	.word	0x0801334d
 80100f4:	08013357 	.word	0x08013357
 80100f8:	00000000 	.word	0x00000000
 80100fc:	0800fe55 	.word	0x0800fe55
 8010100:	08013353 	.word	0x08013353

08010104 <_sungetc_r>:
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	1c4b      	adds	r3, r1, #1
 8010108:	4614      	mov	r4, r2
 801010a:	d103      	bne.n	8010114 <_sungetc_r+0x10>
 801010c:	f04f 35ff 	mov.w	r5, #4294967295
 8010110:	4628      	mov	r0, r5
 8010112:	bd38      	pop	{r3, r4, r5, pc}
 8010114:	8993      	ldrh	r3, [r2, #12]
 8010116:	f023 0320 	bic.w	r3, r3, #32
 801011a:	8193      	strh	r3, [r2, #12]
 801011c:	6853      	ldr	r3, [r2, #4]
 801011e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010120:	b2cd      	uxtb	r5, r1
 8010122:	b18a      	cbz	r2, 8010148 <_sungetc_r+0x44>
 8010124:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010126:	429a      	cmp	r2, r3
 8010128:	dd08      	ble.n	801013c <_sungetc_r+0x38>
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	1e5a      	subs	r2, r3, #1
 801012e:	6022      	str	r2, [r4, #0]
 8010130:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010134:	6863      	ldr	r3, [r4, #4]
 8010136:	3301      	adds	r3, #1
 8010138:	6063      	str	r3, [r4, #4]
 801013a:	e7e9      	b.n	8010110 <_sungetc_r+0xc>
 801013c:	4621      	mov	r1, r4
 801013e:	f000 ff12 	bl	8010f66 <__submore>
 8010142:	2800      	cmp	r0, #0
 8010144:	d0f1      	beq.n	801012a <_sungetc_r+0x26>
 8010146:	e7e1      	b.n	801010c <_sungetc_r+0x8>
 8010148:	6921      	ldr	r1, [r4, #16]
 801014a:	6822      	ldr	r2, [r4, #0]
 801014c:	b141      	cbz	r1, 8010160 <_sungetc_r+0x5c>
 801014e:	4291      	cmp	r1, r2
 8010150:	d206      	bcs.n	8010160 <_sungetc_r+0x5c>
 8010152:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010156:	42a9      	cmp	r1, r5
 8010158:	d102      	bne.n	8010160 <_sungetc_r+0x5c>
 801015a:	3a01      	subs	r2, #1
 801015c:	6022      	str	r2, [r4, #0]
 801015e:	e7ea      	b.n	8010136 <_sungetc_r+0x32>
 8010160:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8010164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010168:	6363      	str	r3, [r4, #52]	@ 0x34
 801016a:	2303      	movs	r3, #3
 801016c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801016e:	4623      	mov	r3, r4
 8010170:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	2301      	movs	r3, #1
 8010178:	e7de      	b.n	8010138 <_sungetc_r+0x34>

0801017a <__ssrefill_r>:
 801017a:	b510      	push	{r4, lr}
 801017c:	460c      	mov	r4, r1
 801017e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010180:	b169      	cbz	r1, 801019e <__ssrefill_r+0x24>
 8010182:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010186:	4299      	cmp	r1, r3
 8010188:	d001      	beq.n	801018e <__ssrefill_r+0x14>
 801018a:	f7ff fe19 	bl	800fdc0 <_free_r>
 801018e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010190:	6063      	str	r3, [r4, #4]
 8010192:	2000      	movs	r0, #0
 8010194:	6360      	str	r0, [r4, #52]	@ 0x34
 8010196:	b113      	cbz	r3, 801019e <__ssrefill_r+0x24>
 8010198:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801019a:	6023      	str	r3, [r4, #0]
 801019c:	bd10      	pop	{r4, pc}
 801019e:	6923      	ldr	r3, [r4, #16]
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	2300      	movs	r3, #0
 80101a4:	6063      	str	r3, [r4, #4]
 80101a6:	89a3      	ldrh	r3, [r4, #12]
 80101a8:	f043 0320 	orr.w	r3, r3, #32
 80101ac:	81a3      	strh	r3, [r4, #12]
 80101ae:	f04f 30ff 	mov.w	r0, #4294967295
 80101b2:	e7f3      	b.n	801019c <__ssrefill_r+0x22>

080101b4 <__ssvfiscanf_r>:
 80101b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b8:	460c      	mov	r4, r1
 80101ba:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80101be:	2100      	movs	r1, #0
 80101c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80101c4:	49a5      	ldr	r1, [pc, #660]	@ (801045c <__ssvfiscanf_r+0x2a8>)
 80101c6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80101c8:	f10d 0804 	add.w	r8, sp, #4
 80101cc:	49a4      	ldr	r1, [pc, #656]	@ (8010460 <__ssvfiscanf_r+0x2ac>)
 80101ce:	4fa5      	ldr	r7, [pc, #660]	@ (8010464 <__ssvfiscanf_r+0x2b0>)
 80101d0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80101d4:	4606      	mov	r6, r0
 80101d6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	7813      	ldrb	r3, [r2, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 8158 	beq.w	8010492 <__ssvfiscanf_r+0x2de>
 80101e2:	5cf9      	ldrb	r1, [r7, r3]
 80101e4:	f011 0108 	ands.w	r1, r1, #8
 80101e8:	f102 0501 	add.w	r5, r2, #1
 80101ec:	d019      	beq.n	8010222 <__ssvfiscanf_r+0x6e>
 80101ee:	6863      	ldr	r3, [r4, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	dd0f      	ble.n	8010214 <__ssvfiscanf_r+0x60>
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	781a      	ldrb	r2, [r3, #0]
 80101f8:	5cba      	ldrb	r2, [r7, r2]
 80101fa:	0712      	lsls	r2, r2, #28
 80101fc:	d401      	bmi.n	8010202 <__ssvfiscanf_r+0x4e>
 80101fe:	462a      	mov	r2, r5
 8010200:	e7eb      	b.n	80101da <__ssvfiscanf_r+0x26>
 8010202:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010204:	3201      	adds	r2, #1
 8010206:	9245      	str	r2, [sp, #276]	@ 0x114
 8010208:	6862      	ldr	r2, [r4, #4]
 801020a:	3301      	adds	r3, #1
 801020c:	3a01      	subs	r2, #1
 801020e:	6062      	str	r2, [r4, #4]
 8010210:	6023      	str	r3, [r4, #0]
 8010212:	e7ec      	b.n	80101ee <__ssvfiscanf_r+0x3a>
 8010214:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010216:	4621      	mov	r1, r4
 8010218:	4630      	mov	r0, r6
 801021a:	4798      	blx	r3
 801021c:	2800      	cmp	r0, #0
 801021e:	d0e9      	beq.n	80101f4 <__ssvfiscanf_r+0x40>
 8010220:	e7ed      	b.n	80101fe <__ssvfiscanf_r+0x4a>
 8010222:	2b25      	cmp	r3, #37	@ 0x25
 8010224:	d012      	beq.n	801024c <__ssvfiscanf_r+0x98>
 8010226:	4699      	mov	r9, r3
 8010228:	6863      	ldr	r3, [r4, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	f340 8093 	ble.w	8010356 <__ssvfiscanf_r+0x1a2>
 8010230:	6822      	ldr	r2, [r4, #0]
 8010232:	7813      	ldrb	r3, [r2, #0]
 8010234:	454b      	cmp	r3, r9
 8010236:	f040 812c 	bne.w	8010492 <__ssvfiscanf_r+0x2de>
 801023a:	6863      	ldr	r3, [r4, #4]
 801023c:	3b01      	subs	r3, #1
 801023e:	6063      	str	r3, [r4, #4]
 8010240:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010242:	3201      	adds	r2, #1
 8010244:	3301      	adds	r3, #1
 8010246:	6022      	str	r2, [r4, #0]
 8010248:	9345      	str	r3, [sp, #276]	@ 0x114
 801024a:	e7d8      	b.n	80101fe <__ssvfiscanf_r+0x4a>
 801024c:	9141      	str	r1, [sp, #260]	@ 0x104
 801024e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010250:	7853      	ldrb	r3, [r2, #1]
 8010252:	2b2a      	cmp	r3, #42	@ 0x2a
 8010254:	bf02      	ittt	eq
 8010256:	2310      	moveq	r3, #16
 8010258:	1c95      	addeq	r5, r2, #2
 801025a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801025c:	220a      	movs	r2, #10
 801025e:	46a9      	mov	r9, r5
 8010260:	f819 1b01 	ldrb.w	r1, [r9], #1
 8010264:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010268:	2b09      	cmp	r3, #9
 801026a:	d91e      	bls.n	80102aa <__ssvfiscanf_r+0xf6>
 801026c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8010468 <__ssvfiscanf_r+0x2b4>
 8010270:	2203      	movs	r2, #3
 8010272:	4650      	mov	r0, sl
 8010274:	f7ef ffc4 	bl	8000200 <memchr>
 8010278:	b138      	cbz	r0, 801028a <__ssvfiscanf_r+0xd6>
 801027a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801027c:	eba0 000a 	sub.w	r0, r0, sl
 8010280:	2301      	movs	r3, #1
 8010282:	4083      	lsls	r3, r0
 8010284:	4313      	orrs	r3, r2
 8010286:	9341      	str	r3, [sp, #260]	@ 0x104
 8010288:	464d      	mov	r5, r9
 801028a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801028e:	2b78      	cmp	r3, #120	@ 0x78
 8010290:	d806      	bhi.n	80102a0 <__ssvfiscanf_r+0xec>
 8010292:	2b57      	cmp	r3, #87	@ 0x57
 8010294:	d810      	bhi.n	80102b8 <__ssvfiscanf_r+0x104>
 8010296:	2b25      	cmp	r3, #37	@ 0x25
 8010298:	d0c5      	beq.n	8010226 <__ssvfiscanf_r+0x72>
 801029a:	d857      	bhi.n	801034c <__ssvfiscanf_r+0x198>
 801029c:	2b00      	cmp	r3, #0
 801029e:	d065      	beq.n	801036c <__ssvfiscanf_r+0x1b8>
 80102a0:	2303      	movs	r3, #3
 80102a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80102a4:	230a      	movs	r3, #10
 80102a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80102a8:	e078      	b.n	801039c <__ssvfiscanf_r+0x1e8>
 80102aa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80102ac:	fb02 1103 	mla	r1, r2, r3, r1
 80102b0:	3930      	subs	r1, #48	@ 0x30
 80102b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80102b4:	464d      	mov	r5, r9
 80102b6:	e7d2      	b.n	801025e <__ssvfiscanf_r+0xaa>
 80102b8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80102bc:	2a20      	cmp	r2, #32
 80102be:	d8ef      	bhi.n	80102a0 <__ssvfiscanf_r+0xec>
 80102c0:	a101      	add	r1, pc, #4	@ (adr r1, 80102c8 <__ssvfiscanf_r+0x114>)
 80102c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80102c6:	bf00      	nop
 80102c8:	0801037b 	.word	0x0801037b
 80102cc:	080102a1 	.word	0x080102a1
 80102d0:	080102a1 	.word	0x080102a1
 80102d4:	080103d5 	.word	0x080103d5
 80102d8:	080102a1 	.word	0x080102a1
 80102dc:	080102a1 	.word	0x080102a1
 80102e0:	080102a1 	.word	0x080102a1
 80102e4:	080102a1 	.word	0x080102a1
 80102e8:	080102a1 	.word	0x080102a1
 80102ec:	080102a1 	.word	0x080102a1
 80102f0:	080102a1 	.word	0x080102a1
 80102f4:	080103eb 	.word	0x080103eb
 80102f8:	080103d1 	.word	0x080103d1
 80102fc:	08010353 	.word	0x08010353
 8010300:	08010353 	.word	0x08010353
 8010304:	08010353 	.word	0x08010353
 8010308:	080102a1 	.word	0x080102a1
 801030c:	0801038d 	.word	0x0801038d
 8010310:	080102a1 	.word	0x080102a1
 8010314:	080102a1 	.word	0x080102a1
 8010318:	080102a1 	.word	0x080102a1
 801031c:	080102a1 	.word	0x080102a1
 8010320:	080103fb 	.word	0x080103fb
 8010324:	08010395 	.word	0x08010395
 8010328:	08010373 	.word	0x08010373
 801032c:	080102a1 	.word	0x080102a1
 8010330:	080102a1 	.word	0x080102a1
 8010334:	080103f7 	.word	0x080103f7
 8010338:	080102a1 	.word	0x080102a1
 801033c:	080103d1 	.word	0x080103d1
 8010340:	080102a1 	.word	0x080102a1
 8010344:	080102a1 	.word	0x080102a1
 8010348:	0801037b 	.word	0x0801037b
 801034c:	3b45      	subs	r3, #69	@ 0x45
 801034e:	2b02      	cmp	r3, #2
 8010350:	d8a6      	bhi.n	80102a0 <__ssvfiscanf_r+0xec>
 8010352:	2305      	movs	r3, #5
 8010354:	e021      	b.n	801039a <__ssvfiscanf_r+0x1e6>
 8010356:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010358:	4621      	mov	r1, r4
 801035a:	4630      	mov	r0, r6
 801035c:	4798      	blx	r3
 801035e:	2800      	cmp	r0, #0
 8010360:	f43f af66 	beq.w	8010230 <__ssvfiscanf_r+0x7c>
 8010364:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010366:	2800      	cmp	r0, #0
 8010368:	f040 808b 	bne.w	8010482 <__ssvfiscanf_r+0x2ce>
 801036c:	f04f 30ff 	mov.w	r0, #4294967295
 8010370:	e08b      	b.n	801048a <__ssvfiscanf_r+0x2d6>
 8010372:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010374:	f042 0220 	orr.w	r2, r2, #32
 8010378:	9241      	str	r2, [sp, #260]	@ 0x104
 801037a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801037c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010380:	9241      	str	r2, [sp, #260]	@ 0x104
 8010382:	2210      	movs	r2, #16
 8010384:	2b6e      	cmp	r3, #110	@ 0x6e
 8010386:	9242      	str	r2, [sp, #264]	@ 0x108
 8010388:	d902      	bls.n	8010390 <__ssvfiscanf_r+0x1dc>
 801038a:	e005      	b.n	8010398 <__ssvfiscanf_r+0x1e4>
 801038c:	2300      	movs	r3, #0
 801038e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010390:	2303      	movs	r3, #3
 8010392:	e002      	b.n	801039a <__ssvfiscanf_r+0x1e6>
 8010394:	2308      	movs	r3, #8
 8010396:	9342      	str	r3, [sp, #264]	@ 0x108
 8010398:	2304      	movs	r3, #4
 801039a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801039c:	6863      	ldr	r3, [r4, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	dd39      	ble.n	8010416 <__ssvfiscanf_r+0x262>
 80103a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103a4:	0659      	lsls	r1, r3, #25
 80103a6:	d404      	bmi.n	80103b2 <__ssvfiscanf_r+0x1fe>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	781a      	ldrb	r2, [r3, #0]
 80103ac:	5cba      	ldrb	r2, [r7, r2]
 80103ae:	0712      	lsls	r2, r2, #28
 80103b0:	d438      	bmi.n	8010424 <__ssvfiscanf_r+0x270>
 80103b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	dc47      	bgt.n	8010448 <__ssvfiscanf_r+0x294>
 80103b8:	466b      	mov	r3, sp
 80103ba:	4622      	mov	r2, r4
 80103bc:	a941      	add	r1, sp, #260	@ 0x104
 80103be:	4630      	mov	r0, r6
 80103c0:	f000 fb3c 	bl	8010a3c <_scanf_chars>
 80103c4:	2801      	cmp	r0, #1
 80103c6:	d064      	beq.n	8010492 <__ssvfiscanf_r+0x2de>
 80103c8:	2802      	cmp	r0, #2
 80103ca:	f47f af18 	bne.w	80101fe <__ssvfiscanf_r+0x4a>
 80103ce:	e7c9      	b.n	8010364 <__ssvfiscanf_r+0x1b0>
 80103d0:	220a      	movs	r2, #10
 80103d2:	e7d7      	b.n	8010384 <__ssvfiscanf_r+0x1d0>
 80103d4:	4629      	mov	r1, r5
 80103d6:	4640      	mov	r0, r8
 80103d8:	f000 fd8c 	bl	8010ef4 <__sccl>
 80103dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80103e4:	4605      	mov	r5, r0
 80103e6:	2301      	movs	r3, #1
 80103e8:	e7d7      	b.n	801039a <__ssvfiscanf_r+0x1e6>
 80103ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80103f2:	2300      	movs	r3, #0
 80103f4:	e7d1      	b.n	801039a <__ssvfiscanf_r+0x1e6>
 80103f6:	2302      	movs	r3, #2
 80103f8:	e7cf      	b.n	801039a <__ssvfiscanf_r+0x1e6>
 80103fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80103fc:	06c3      	lsls	r3, r0, #27
 80103fe:	f53f aefe 	bmi.w	80101fe <__ssvfiscanf_r+0x4a>
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010406:	1d19      	adds	r1, r3, #4
 8010408:	9100      	str	r1, [sp, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	07c0      	lsls	r0, r0, #31
 801040e:	bf4c      	ite	mi
 8010410:	801a      	strhmi	r2, [r3, #0]
 8010412:	601a      	strpl	r2, [r3, #0]
 8010414:	e6f3      	b.n	80101fe <__ssvfiscanf_r+0x4a>
 8010416:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010418:	4621      	mov	r1, r4
 801041a:	4630      	mov	r0, r6
 801041c:	4798      	blx	r3
 801041e:	2800      	cmp	r0, #0
 8010420:	d0bf      	beq.n	80103a2 <__ssvfiscanf_r+0x1ee>
 8010422:	e79f      	b.n	8010364 <__ssvfiscanf_r+0x1b0>
 8010424:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010426:	3201      	adds	r2, #1
 8010428:	9245      	str	r2, [sp, #276]	@ 0x114
 801042a:	6862      	ldr	r2, [r4, #4]
 801042c:	3a01      	subs	r2, #1
 801042e:	2a00      	cmp	r2, #0
 8010430:	6062      	str	r2, [r4, #4]
 8010432:	dd02      	ble.n	801043a <__ssvfiscanf_r+0x286>
 8010434:	3301      	adds	r3, #1
 8010436:	6023      	str	r3, [r4, #0]
 8010438:	e7b6      	b.n	80103a8 <__ssvfiscanf_r+0x1f4>
 801043a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801043c:	4621      	mov	r1, r4
 801043e:	4630      	mov	r0, r6
 8010440:	4798      	blx	r3
 8010442:	2800      	cmp	r0, #0
 8010444:	d0b0      	beq.n	80103a8 <__ssvfiscanf_r+0x1f4>
 8010446:	e78d      	b.n	8010364 <__ssvfiscanf_r+0x1b0>
 8010448:	2b04      	cmp	r3, #4
 801044a:	dc0f      	bgt.n	801046c <__ssvfiscanf_r+0x2b8>
 801044c:	466b      	mov	r3, sp
 801044e:	4622      	mov	r2, r4
 8010450:	a941      	add	r1, sp, #260	@ 0x104
 8010452:	4630      	mov	r0, r6
 8010454:	f000 fb4c 	bl	8010af0 <_scanf_i>
 8010458:	e7b4      	b.n	80103c4 <__ssvfiscanf_r+0x210>
 801045a:	bf00      	nop
 801045c:	08010105 	.word	0x08010105
 8010460:	0801017b 	.word	0x0801017b
 8010464:	0801339c 	.word	0x0801339c
 8010468:	08013353 	.word	0x08013353
 801046c:	4b0a      	ldr	r3, [pc, #40]	@ (8010498 <__ssvfiscanf_r+0x2e4>)
 801046e:	2b00      	cmp	r3, #0
 8010470:	f43f aec5 	beq.w	80101fe <__ssvfiscanf_r+0x4a>
 8010474:	466b      	mov	r3, sp
 8010476:	4622      	mov	r2, r4
 8010478:	a941      	add	r1, sp, #260	@ 0x104
 801047a:	4630      	mov	r0, r6
 801047c:	f3af 8000 	nop.w
 8010480:	e7a0      	b.n	80103c4 <__ssvfiscanf_r+0x210>
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	065b      	lsls	r3, r3, #25
 8010486:	f53f af71 	bmi.w	801036c <__ssvfiscanf_r+0x1b8>
 801048a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010492:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010494:	e7f9      	b.n	801048a <__ssvfiscanf_r+0x2d6>
 8010496:	bf00      	nop
 8010498:	00000000 	.word	0x00000000

0801049c <__sfputc_r>:
 801049c:	6893      	ldr	r3, [r2, #8]
 801049e:	3b01      	subs	r3, #1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	b410      	push	{r4}
 80104a4:	6093      	str	r3, [r2, #8]
 80104a6:	da08      	bge.n	80104ba <__sfputc_r+0x1e>
 80104a8:	6994      	ldr	r4, [r2, #24]
 80104aa:	42a3      	cmp	r3, r4
 80104ac:	db01      	blt.n	80104b2 <__sfputc_r+0x16>
 80104ae:	290a      	cmp	r1, #10
 80104b0:	d103      	bne.n	80104ba <__sfputc_r+0x1e>
 80104b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104b6:	f7ff ba64 	b.w	800f982 <__swbuf_r>
 80104ba:	6813      	ldr	r3, [r2, #0]
 80104bc:	1c58      	adds	r0, r3, #1
 80104be:	6010      	str	r0, [r2, #0]
 80104c0:	7019      	strb	r1, [r3, #0]
 80104c2:	4608      	mov	r0, r1
 80104c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <__sfputs_r>:
 80104ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	4614      	mov	r4, r2
 80104d2:	18d5      	adds	r5, r2, r3
 80104d4:	42ac      	cmp	r4, r5
 80104d6:	d101      	bne.n	80104dc <__sfputs_r+0x12>
 80104d8:	2000      	movs	r0, #0
 80104da:	e007      	b.n	80104ec <__sfputs_r+0x22>
 80104dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e0:	463a      	mov	r2, r7
 80104e2:	4630      	mov	r0, r6
 80104e4:	f7ff ffda 	bl	801049c <__sfputc_r>
 80104e8:	1c43      	adds	r3, r0, #1
 80104ea:	d1f3      	bne.n	80104d4 <__sfputs_r+0xa>
 80104ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104f0 <_vfiprintf_r>:
 80104f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	460d      	mov	r5, r1
 80104f6:	b09d      	sub	sp, #116	@ 0x74
 80104f8:	4614      	mov	r4, r2
 80104fa:	4698      	mov	r8, r3
 80104fc:	4606      	mov	r6, r0
 80104fe:	b118      	cbz	r0, 8010508 <_vfiprintf_r+0x18>
 8010500:	6a03      	ldr	r3, [r0, #32]
 8010502:	b90b      	cbnz	r3, 8010508 <_vfiprintf_r+0x18>
 8010504:	f7ff f8c2 	bl	800f68c <__sinit>
 8010508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801050a:	07d9      	lsls	r1, r3, #31
 801050c:	d405      	bmi.n	801051a <_vfiprintf_r+0x2a>
 801050e:	89ab      	ldrh	r3, [r5, #12]
 8010510:	059a      	lsls	r2, r3, #22
 8010512:	d402      	bmi.n	801051a <_vfiprintf_r+0x2a>
 8010514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010516:	f7ff fc24 	bl	800fd62 <__retarget_lock_acquire_recursive>
 801051a:	89ab      	ldrh	r3, [r5, #12]
 801051c:	071b      	lsls	r3, r3, #28
 801051e:	d501      	bpl.n	8010524 <_vfiprintf_r+0x34>
 8010520:	692b      	ldr	r3, [r5, #16]
 8010522:	b99b      	cbnz	r3, 801054c <_vfiprintf_r+0x5c>
 8010524:	4629      	mov	r1, r5
 8010526:	4630      	mov	r0, r6
 8010528:	f7ff fa6a 	bl	800fa00 <__swsetup_r>
 801052c:	b170      	cbz	r0, 801054c <_vfiprintf_r+0x5c>
 801052e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010530:	07dc      	lsls	r4, r3, #31
 8010532:	d504      	bpl.n	801053e <_vfiprintf_r+0x4e>
 8010534:	f04f 30ff 	mov.w	r0, #4294967295
 8010538:	b01d      	add	sp, #116	@ 0x74
 801053a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053e:	89ab      	ldrh	r3, [r5, #12]
 8010540:	0598      	lsls	r0, r3, #22
 8010542:	d4f7      	bmi.n	8010534 <_vfiprintf_r+0x44>
 8010544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010546:	f7ff fc0d 	bl	800fd64 <__retarget_lock_release_recursive>
 801054a:	e7f3      	b.n	8010534 <_vfiprintf_r+0x44>
 801054c:	2300      	movs	r3, #0
 801054e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010550:	2320      	movs	r3, #32
 8010552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010556:	f8cd 800c 	str.w	r8, [sp, #12]
 801055a:	2330      	movs	r3, #48	@ 0x30
 801055c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801070c <_vfiprintf_r+0x21c>
 8010560:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010564:	f04f 0901 	mov.w	r9, #1
 8010568:	4623      	mov	r3, r4
 801056a:	469a      	mov	sl, r3
 801056c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010570:	b10a      	cbz	r2, 8010576 <_vfiprintf_r+0x86>
 8010572:	2a25      	cmp	r2, #37	@ 0x25
 8010574:	d1f9      	bne.n	801056a <_vfiprintf_r+0x7a>
 8010576:	ebba 0b04 	subs.w	fp, sl, r4
 801057a:	d00b      	beq.n	8010594 <_vfiprintf_r+0xa4>
 801057c:	465b      	mov	r3, fp
 801057e:	4622      	mov	r2, r4
 8010580:	4629      	mov	r1, r5
 8010582:	4630      	mov	r0, r6
 8010584:	f7ff ffa1 	bl	80104ca <__sfputs_r>
 8010588:	3001      	adds	r0, #1
 801058a:	f000 80a7 	beq.w	80106dc <_vfiprintf_r+0x1ec>
 801058e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010590:	445a      	add	r2, fp
 8010592:	9209      	str	r2, [sp, #36]	@ 0x24
 8010594:	f89a 3000 	ldrb.w	r3, [sl]
 8010598:	2b00      	cmp	r3, #0
 801059a:	f000 809f 	beq.w	80106dc <_vfiprintf_r+0x1ec>
 801059e:	2300      	movs	r3, #0
 80105a0:	f04f 32ff 	mov.w	r2, #4294967295
 80105a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105a8:	f10a 0a01 	add.w	sl, sl, #1
 80105ac:	9304      	str	r3, [sp, #16]
 80105ae:	9307      	str	r3, [sp, #28]
 80105b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80105b6:	4654      	mov	r4, sl
 80105b8:	2205      	movs	r2, #5
 80105ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105be:	4853      	ldr	r0, [pc, #332]	@ (801070c <_vfiprintf_r+0x21c>)
 80105c0:	f7ef fe1e 	bl	8000200 <memchr>
 80105c4:	9a04      	ldr	r2, [sp, #16]
 80105c6:	b9d8      	cbnz	r0, 8010600 <_vfiprintf_r+0x110>
 80105c8:	06d1      	lsls	r1, r2, #27
 80105ca:	bf44      	itt	mi
 80105cc:	2320      	movmi	r3, #32
 80105ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105d2:	0713      	lsls	r3, r2, #28
 80105d4:	bf44      	itt	mi
 80105d6:	232b      	movmi	r3, #43	@ 0x2b
 80105d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105dc:	f89a 3000 	ldrb.w	r3, [sl]
 80105e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e2:	d015      	beq.n	8010610 <_vfiprintf_r+0x120>
 80105e4:	9a07      	ldr	r2, [sp, #28]
 80105e6:	4654      	mov	r4, sl
 80105e8:	2000      	movs	r0, #0
 80105ea:	f04f 0c0a 	mov.w	ip, #10
 80105ee:	4621      	mov	r1, r4
 80105f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105f4:	3b30      	subs	r3, #48	@ 0x30
 80105f6:	2b09      	cmp	r3, #9
 80105f8:	d94b      	bls.n	8010692 <_vfiprintf_r+0x1a2>
 80105fa:	b1b0      	cbz	r0, 801062a <_vfiprintf_r+0x13a>
 80105fc:	9207      	str	r2, [sp, #28]
 80105fe:	e014      	b.n	801062a <_vfiprintf_r+0x13a>
 8010600:	eba0 0308 	sub.w	r3, r0, r8
 8010604:	fa09 f303 	lsl.w	r3, r9, r3
 8010608:	4313      	orrs	r3, r2
 801060a:	9304      	str	r3, [sp, #16]
 801060c:	46a2      	mov	sl, r4
 801060e:	e7d2      	b.n	80105b6 <_vfiprintf_r+0xc6>
 8010610:	9b03      	ldr	r3, [sp, #12]
 8010612:	1d19      	adds	r1, r3, #4
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	9103      	str	r1, [sp, #12]
 8010618:	2b00      	cmp	r3, #0
 801061a:	bfbb      	ittet	lt
 801061c:	425b      	neglt	r3, r3
 801061e:	f042 0202 	orrlt.w	r2, r2, #2
 8010622:	9307      	strge	r3, [sp, #28]
 8010624:	9307      	strlt	r3, [sp, #28]
 8010626:	bfb8      	it	lt
 8010628:	9204      	strlt	r2, [sp, #16]
 801062a:	7823      	ldrb	r3, [r4, #0]
 801062c:	2b2e      	cmp	r3, #46	@ 0x2e
 801062e:	d10a      	bne.n	8010646 <_vfiprintf_r+0x156>
 8010630:	7863      	ldrb	r3, [r4, #1]
 8010632:	2b2a      	cmp	r3, #42	@ 0x2a
 8010634:	d132      	bne.n	801069c <_vfiprintf_r+0x1ac>
 8010636:	9b03      	ldr	r3, [sp, #12]
 8010638:	1d1a      	adds	r2, r3, #4
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	9203      	str	r2, [sp, #12]
 801063e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010642:	3402      	adds	r4, #2
 8010644:	9305      	str	r3, [sp, #20]
 8010646:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801071c <_vfiprintf_r+0x22c>
 801064a:	7821      	ldrb	r1, [r4, #0]
 801064c:	2203      	movs	r2, #3
 801064e:	4650      	mov	r0, sl
 8010650:	f7ef fdd6 	bl	8000200 <memchr>
 8010654:	b138      	cbz	r0, 8010666 <_vfiprintf_r+0x176>
 8010656:	9b04      	ldr	r3, [sp, #16]
 8010658:	eba0 000a 	sub.w	r0, r0, sl
 801065c:	2240      	movs	r2, #64	@ 0x40
 801065e:	4082      	lsls	r2, r0
 8010660:	4313      	orrs	r3, r2
 8010662:	3401      	adds	r4, #1
 8010664:	9304      	str	r3, [sp, #16]
 8010666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801066a:	4829      	ldr	r0, [pc, #164]	@ (8010710 <_vfiprintf_r+0x220>)
 801066c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010670:	2206      	movs	r2, #6
 8010672:	f7ef fdc5 	bl	8000200 <memchr>
 8010676:	2800      	cmp	r0, #0
 8010678:	d03f      	beq.n	80106fa <_vfiprintf_r+0x20a>
 801067a:	4b26      	ldr	r3, [pc, #152]	@ (8010714 <_vfiprintf_r+0x224>)
 801067c:	bb1b      	cbnz	r3, 80106c6 <_vfiprintf_r+0x1d6>
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	3307      	adds	r3, #7
 8010682:	f023 0307 	bic.w	r3, r3, #7
 8010686:	3308      	adds	r3, #8
 8010688:	9303      	str	r3, [sp, #12]
 801068a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801068c:	443b      	add	r3, r7
 801068e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010690:	e76a      	b.n	8010568 <_vfiprintf_r+0x78>
 8010692:	fb0c 3202 	mla	r2, ip, r2, r3
 8010696:	460c      	mov	r4, r1
 8010698:	2001      	movs	r0, #1
 801069a:	e7a8      	b.n	80105ee <_vfiprintf_r+0xfe>
 801069c:	2300      	movs	r3, #0
 801069e:	3401      	adds	r4, #1
 80106a0:	9305      	str	r3, [sp, #20]
 80106a2:	4619      	mov	r1, r3
 80106a4:	f04f 0c0a 	mov.w	ip, #10
 80106a8:	4620      	mov	r0, r4
 80106aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ae:	3a30      	subs	r2, #48	@ 0x30
 80106b0:	2a09      	cmp	r2, #9
 80106b2:	d903      	bls.n	80106bc <_vfiprintf_r+0x1cc>
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d0c6      	beq.n	8010646 <_vfiprintf_r+0x156>
 80106b8:	9105      	str	r1, [sp, #20]
 80106ba:	e7c4      	b.n	8010646 <_vfiprintf_r+0x156>
 80106bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80106c0:	4604      	mov	r4, r0
 80106c2:	2301      	movs	r3, #1
 80106c4:	e7f0      	b.n	80106a8 <_vfiprintf_r+0x1b8>
 80106c6:	ab03      	add	r3, sp, #12
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	462a      	mov	r2, r5
 80106cc:	4b12      	ldr	r3, [pc, #72]	@ (8010718 <_vfiprintf_r+0x228>)
 80106ce:	a904      	add	r1, sp, #16
 80106d0:	4630      	mov	r0, r6
 80106d2:	f3af 8000 	nop.w
 80106d6:	4607      	mov	r7, r0
 80106d8:	1c78      	adds	r0, r7, #1
 80106da:	d1d6      	bne.n	801068a <_vfiprintf_r+0x19a>
 80106dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106de:	07d9      	lsls	r1, r3, #31
 80106e0:	d405      	bmi.n	80106ee <_vfiprintf_r+0x1fe>
 80106e2:	89ab      	ldrh	r3, [r5, #12]
 80106e4:	059a      	lsls	r2, r3, #22
 80106e6:	d402      	bmi.n	80106ee <_vfiprintf_r+0x1fe>
 80106e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106ea:	f7ff fb3b 	bl	800fd64 <__retarget_lock_release_recursive>
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	065b      	lsls	r3, r3, #25
 80106f2:	f53f af1f 	bmi.w	8010534 <_vfiprintf_r+0x44>
 80106f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106f8:	e71e      	b.n	8010538 <_vfiprintf_r+0x48>
 80106fa:	ab03      	add	r3, sp, #12
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	462a      	mov	r2, r5
 8010700:	4b05      	ldr	r3, [pc, #20]	@ (8010718 <_vfiprintf_r+0x228>)
 8010702:	a904      	add	r1, sp, #16
 8010704:	4630      	mov	r0, r6
 8010706:	f000 f879 	bl	80107fc <_printf_i>
 801070a:	e7e4      	b.n	80106d6 <_vfiprintf_r+0x1e6>
 801070c:	0801334d 	.word	0x0801334d
 8010710:	08013357 	.word	0x08013357
 8010714:	00000000 	.word	0x00000000
 8010718:	080104cb 	.word	0x080104cb
 801071c:	08013353 	.word	0x08013353

08010720 <_printf_common>:
 8010720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010724:	4616      	mov	r6, r2
 8010726:	4698      	mov	r8, r3
 8010728:	688a      	ldr	r2, [r1, #8]
 801072a:	690b      	ldr	r3, [r1, #16]
 801072c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010730:	4293      	cmp	r3, r2
 8010732:	bfb8      	it	lt
 8010734:	4613      	movlt	r3, r2
 8010736:	6033      	str	r3, [r6, #0]
 8010738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801073c:	4607      	mov	r7, r0
 801073e:	460c      	mov	r4, r1
 8010740:	b10a      	cbz	r2, 8010746 <_printf_common+0x26>
 8010742:	3301      	adds	r3, #1
 8010744:	6033      	str	r3, [r6, #0]
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	0699      	lsls	r1, r3, #26
 801074a:	bf42      	ittt	mi
 801074c:	6833      	ldrmi	r3, [r6, #0]
 801074e:	3302      	addmi	r3, #2
 8010750:	6033      	strmi	r3, [r6, #0]
 8010752:	6825      	ldr	r5, [r4, #0]
 8010754:	f015 0506 	ands.w	r5, r5, #6
 8010758:	d106      	bne.n	8010768 <_printf_common+0x48>
 801075a:	f104 0a19 	add.w	sl, r4, #25
 801075e:	68e3      	ldr	r3, [r4, #12]
 8010760:	6832      	ldr	r2, [r6, #0]
 8010762:	1a9b      	subs	r3, r3, r2
 8010764:	42ab      	cmp	r3, r5
 8010766:	dc26      	bgt.n	80107b6 <_printf_common+0x96>
 8010768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801076c:	6822      	ldr	r2, [r4, #0]
 801076e:	3b00      	subs	r3, #0
 8010770:	bf18      	it	ne
 8010772:	2301      	movne	r3, #1
 8010774:	0692      	lsls	r2, r2, #26
 8010776:	d42b      	bmi.n	80107d0 <_printf_common+0xb0>
 8010778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801077c:	4641      	mov	r1, r8
 801077e:	4638      	mov	r0, r7
 8010780:	47c8      	blx	r9
 8010782:	3001      	adds	r0, #1
 8010784:	d01e      	beq.n	80107c4 <_printf_common+0xa4>
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	6922      	ldr	r2, [r4, #16]
 801078a:	f003 0306 	and.w	r3, r3, #6
 801078e:	2b04      	cmp	r3, #4
 8010790:	bf02      	ittt	eq
 8010792:	68e5      	ldreq	r5, [r4, #12]
 8010794:	6833      	ldreq	r3, [r6, #0]
 8010796:	1aed      	subeq	r5, r5, r3
 8010798:	68a3      	ldr	r3, [r4, #8]
 801079a:	bf0c      	ite	eq
 801079c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107a0:	2500      	movne	r5, #0
 80107a2:	4293      	cmp	r3, r2
 80107a4:	bfc4      	itt	gt
 80107a6:	1a9b      	subgt	r3, r3, r2
 80107a8:	18ed      	addgt	r5, r5, r3
 80107aa:	2600      	movs	r6, #0
 80107ac:	341a      	adds	r4, #26
 80107ae:	42b5      	cmp	r5, r6
 80107b0:	d11a      	bne.n	80107e8 <_printf_common+0xc8>
 80107b2:	2000      	movs	r0, #0
 80107b4:	e008      	b.n	80107c8 <_printf_common+0xa8>
 80107b6:	2301      	movs	r3, #1
 80107b8:	4652      	mov	r2, sl
 80107ba:	4641      	mov	r1, r8
 80107bc:	4638      	mov	r0, r7
 80107be:	47c8      	blx	r9
 80107c0:	3001      	adds	r0, #1
 80107c2:	d103      	bne.n	80107cc <_printf_common+0xac>
 80107c4:	f04f 30ff 	mov.w	r0, #4294967295
 80107c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107cc:	3501      	adds	r5, #1
 80107ce:	e7c6      	b.n	801075e <_printf_common+0x3e>
 80107d0:	18e1      	adds	r1, r4, r3
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	2030      	movs	r0, #48	@ 0x30
 80107d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80107da:	4422      	add	r2, r4
 80107dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80107e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80107e4:	3302      	adds	r3, #2
 80107e6:	e7c7      	b.n	8010778 <_printf_common+0x58>
 80107e8:	2301      	movs	r3, #1
 80107ea:	4622      	mov	r2, r4
 80107ec:	4641      	mov	r1, r8
 80107ee:	4638      	mov	r0, r7
 80107f0:	47c8      	blx	r9
 80107f2:	3001      	adds	r0, #1
 80107f4:	d0e6      	beq.n	80107c4 <_printf_common+0xa4>
 80107f6:	3601      	adds	r6, #1
 80107f8:	e7d9      	b.n	80107ae <_printf_common+0x8e>
	...

080107fc <_printf_i>:
 80107fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010800:	7e0f      	ldrb	r7, [r1, #24]
 8010802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010804:	2f78      	cmp	r7, #120	@ 0x78
 8010806:	4691      	mov	r9, r2
 8010808:	4680      	mov	r8, r0
 801080a:	460c      	mov	r4, r1
 801080c:	469a      	mov	sl, r3
 801080e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010812:	d807      	bhi.n	8010824 <_printf_i+0x28>
 8010814:	2f62      	cmp	r7, #98	@ 0x62
 8010816:	d80a      	bhi.n	801082e <_printf_i+0x32>
 8010818:	2f00      	cmp	r7, #0
 801081a:	f000 80d2 	beq.w	80109c2 <_printf_i+0x1c6>
 801081e:	2f58      	cmp	r7, #88	@ 0x58
 8010820:	f000 80b9 	beq.w	8010996 <_printf_i+0x19a>
 8010824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801082c:	e03a      	b.n	80108a4 <_printf_i+0xa8>
 801082e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010832:	2b15      	cmp	r3, #21
 8010834:	d8f6      	bhi.n	8010824 <_printf_i+0x28>
 8010836:	a101      	add	r1, pc, #4	@ (adr r1, 801083c <_printf_i+0x40>)
 8010838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801083c:	08010895 	.word	0x08010895
 8010840:	080108a9 	.word	0x080108a9
 8010844:	08010825 	.word	0x08010825
 8010848:	08010825 	.word	0x08010825
 801084c:	08010825 	.word	0x08010825
 8010850:	08010825 	.word	0x08010825
 8010854:	080108a9 	.word	0x080108a9
 8010858:	08010825 	.word	0x08010825
 801085c:	08010825 	.word	0x08010825
 8010860:	08010825 	.word	0x08010825
 8010864:	08010825 	.word	0x08010825
 8010868:	080109a9 	.word	0x080109a9
 801086c:	080108d3 	.word	0x080108d3
 8010870:	08010963 	.word	0x08010963
 8010874:	08010825 	.word	0x08010825
 8010878:	08010825 	.word	0x08010825
 801087c:	080109cb 	.word	0x080109cb
 8010880:	08010825 	.word	0x08010825
 8010884:	080108d3 	.word	0x080108d3
 8010888:	08010825 	.word	0x08010825
 801088c:	08010825 	.word	0x08010825
 8010890:	0801096b 	.word	0x0801096b
 8010894:	6833      	ldr	r3, [r6, #0]
 8010896:	1d1a      	adds	r2, r3, #4
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	6032      	str	r2, [r6, #0]
 801089c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80108a4:	2301      	movs	r3, #1
 80108a6:	e09d      	b.n	80109e4 <_printf_i+0x1e8>
 80108a8:	6833      	ldr	r3, [r6, #0]
 80108aa:	6820      	ldr	r0, [r4, #0]
 80108ac:	1d19      	adds	r1, r3, #4
 80108ae:	6031      	str	r1, [r6, #0]
 80108b0:	0606      	lsls	r6, r0, #24
 80108b2:	d501      	bpl.n	80108b8 <_printf_i+0xbc>
 80108b4:	681d      	ldr	r5, [r3, #0]
 80108b6:	e003      	b.n	80108c0 <_printf_i+0xc4>
 80108b8:	0645      	lsls	r5, r0, #25
 80108ba:	d5fb      	bpl.n	80108b4 <_printf_i+0xb8>
 80108bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80108c0:	2d00      	cmp	r5, #0
 80108c2:	da03      	bge.n	80108cc <_printf_i+0xd0>
 80108c4:	232d      	movs	r3, #45	@ 0x2d
 80108c6:	426d      	negs	r5, r5
 80108c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108cc:	4859      	ldr	r0, [pc, #356]	@ (8010a34 <_printf_i+0x238>)
 80108ce:	230a      	movs	r3, #10
 80108d0:	e011      	b.n	80108f6 <_printf_i+0xfa>
 80108d2:	6821      	ldr	r1, [r4, #0]
 80108d4:	6833      	ldr	r3, [r6, #0]
 80108d6:	0608      	lsls	r0, r1, #24
 80108d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80108dc:	d402      	bmi.n	80108e4 <_printf_i+0xe8>
 80108de:	0649      	lsls	r1, r1, #25
 80108e0:	bf48      	it	mi
 80108e2:	b2ad      	uxthmi	r5, r5
 80108e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80108e6:	4853      	ldr	r0, [pc, #332]	@ (8010a34 <_printf_i+0x238>)
 80108e8:	6033      	str	r3, [r6, #0]
 80108ea:	bf14      	ite	ne
 80108ec:	230a      	movne	r3, #10
 80108ee:	2308      	moveq	r3, #8
 80108f0:	2100      	movs	r1, #0
 80108f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80108f6:	6866      	ldr	r6, [r4, #4]
 80108f8:	60a6      	str	r6, [r4, #8]
 80108fa:	2e00      	cmp	r6, #0
 80108fc:	bfa2      	ittt	ge
 80108fe:	6821      	ldrge	r1, [r4, #0]
 8010900:	f021 0104 	bicge.w	r1, r1, #4
 8010904:	6021      	strge	r1, [r4, #0]
 8010906:	b90d      	cbnz	r5, 801090c <_printf_i+0x110>
 8010908:	2e00      	cmp	r6, #0
 801090a:	d04b      	beq.n	80109a4 <_printf_i+0x1a8>
 801090c:	4616      	mov	r6, r2
 801090e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010912:	fb03 5711 	mls	r7, r3, r1, r5
 8010916:	5dc7      	ldrb	r7, [r0, r7]
 8010918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801091c:	462f      	mov	r7, r5
 801091e:	42bb      	cmp	r3, r7
 8010920:	460d      	mov	r5, r1
 8010922:	d9f4      	bls.n	801090e <_printf_i+0x112>
 8010924:	2b08      	cmp	r3, #8
 8010926:	d10b      	bne.n	8010940 <_printf_i+0x144>
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	07df      	lsls	r7, r3, #31
 801092c:	d508      	bpl.n	8010940 <_printf_i+0x144>
 801092e:	6923      	ldr	r3, [r4, #16]
 8010930:	6861      	ldr	r1, [r4, #4]
 8010932:	4299      	cmp	r1, r3
 8010934:	bfde      	ittt	le
 8010936:	2330      	movle	r3, #48	@ 0x30
 8010938:	f806 3c01 	strble.w	r3, [r6, #-1]
 801093c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010940:	1b92      	subs	r2, r2, r6
 8010942:	6122      	str	r2, [r4, #16]
 8010944:	f8cd a000 	str.w	sl, [sp]
 8010948:	464b      	mov	r3, r9
 801094a:	aa03      	add	r2, sp, #12
 801094c:	4621      	mov	r1, r4
 801094e:	4640      	mov	r0, r8
 8010950:	f7ff fee6 	bl	8010720 <_printf_common>
 8010954:	3001      	adds	r0, #1
 8010956:	d14a      	bne.n	80109ee <_printf_i+0x1f2>
 8010958:	f04f 30ff 	mov.w	r0, #4294967295
 801095c:	b004      	add	sp, #16
 801095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010962:	6823      	ldr	r3, [r4, #0]
 8010964:	f043 0320 	orr.w	r3, r3, #32
 8010968:	6023      	str	r3, [r4, #0]
 801096a:	4833      	ldr	r0, [pc, #204]	@ (8010a38 <_printf_i+0x23c>)
 801096c:	2778      	movs	r7, #120	@ 0x78
 801096e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	6831      	ldr	r1, [r6, #0]
 8010976:	061f      	lsls	r7, r3, #24
 8010978:	f851 5b04 	ldr.w	r5, [r1], #4
 801097c:	d402      	bmi.n	8010984 <_printf_i+0x188>
 801097e:	065f      	lsls	r7, r3, #25
 8010980:	bf48      	it	mi
 8010982:	b2ad      	uxthmi	r5, r5
 8010984:	6031      	str	r1, [r6, #0]
 8010986:	07d9      	lsls	r1, r3, #31
 8010988:	bf44      	itt	mi
 801098a:	f043 0320 	orrmi.w	r3, r3, #32
 801098e:	6023      	strmi	r3, [r4, #0]
 8010990:	b11d      	cbz	r5, 801099a <_printf_i+0x19e>
 8010992:	2310      	movs	r3, #16
 8010994:	e7ac      	b.n	80108f0 <_printf_i+0xf4>
 8010996:	4827      	ldr	r0, [pc, #156]	@ (8010a34 <_printf_i+0x238>)
 8010998:	e7e9      	b.n	801096e <_printf_i+0x172>
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	f023 0320 	bic.w	r3, r3, #32
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	e7f6      	b.n	8010992 <_printf_i+0x196>
 80109a4:	4616      	mov	r6, r2
 80109a6:	e7bd      	b.n	8010924 <_printf_i+0x128>
 80109a8:	6833      	ldr	r3, [r6, #0]
 80109aa:	6825      	ldr	r5, [r4, #0]
 80109ac:	6961      	ldr	r1, [r4, #20]
 80109ae:	1d18      	adds	r0, r3, #4
 80109b0:	6030      	str	r0, [r6, #0]
 80109b2:	062e      	lsls	r6, r5, #24
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	d501      	bpl.n	80109bc <_printf_i+0x1c0>
 80109b8:	6019      	str	r1, [r3, #0]
 80109ba:	e002      	b.n	80109c2 <_printf_i+0x1c6>
 80109bc:	0668      	lsls	r0, r5, #25
 80109be:	d5fb      	bpl.n	80109b8 <_printf_i+0x1bc>
 80109c0:	8019      	strh	r1, [r3, #0]
 80109c2:	2300      	movs	r3, #0
 80109c4:	6123      	str	r3, [r4, #16]
 80109c6:	4616      	mov	r6, r2
 80109c8:	e7bc      	b.n	8010944 <_printf_i+0x148>
 80109ca:	6833      	ldr	r3, [r6, #0]
 80109cc:	1d1a      	adds	r2, r3, #4
 80109ce:	6032      	str	r2, [r6, #0]
 80109d0:	681e      	ldr	r6, [r3, #0]
 80109d2:	6862      	ldr	r2, [r4, #4]
 80109d4:	2100      	movs	r1, #0
 80109d6:	4630      	mov	r0, r6
 80109d8:	f7ef fc12 	bl	8000200 <memchr>
 80109dc:	b108      	cbz	r0, 80109e2 <_printf_i+0x1e6>
 80109de:	1b80      	subs	r0, r0, r6
 80109e0:	6060      	str	r0, [r4, #4]
 80109e2:	6863      	ldr	r3, [r4, #4]
 80109e4:	6123      	str	r3, [r4, #16]
 80109e6:	2300      	movs	r3, #0
 80109e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109ec:	e7aa      	b.n	8010944 <_printf_i+0x148>
 80109ee:	6923      	ldr	r3, [r4, #16]
 80109f0:	4632      	mov	r2, r6
 80109f2:	4649      	mov	r1, r9
 80109f4:	4640      	mov	r0, r8
 80109f6:	47d0      	blx	sl
 80109f8:	3001      	adds	r0, #1
 80109fa:	d0ad      	beq.n	8010958 <_printf_i+0x15c>
 80109fc:	6823      	ldr	r3, [r4, #0]
 80109fe:	079b      	lsls	r3, r3, #30
 8010a00:	d413      	bmi.n	8010a2a <_printf_i+0x22e>
 8010a02:	68e0      	ldr	r0, [r4, #12]
 8010a04:	9b03      	ldr	r3, [sp, #12]
 8010a06:	4298      	cmp	r0, r3
 8010a08:	bfb8      	it	lt
 8010a0a:	4618      	movlt	r0, r3
 8010a0c:	e7a6      	b.n	801095c <_printf_i+0x160>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	4632      	mov	r2, r6
 8010a12:	4649      	mov	r1, r9
 8010a14:	4640      	mov	r0, r8
 8010a16:	47d0      	blx	sl
 8010a18:	3001      	adds	r0, #1
 8010a1a:	d09d      	beq.n	8010958 <_printf_i+0x15c>
 8010a1c:	3501      	adds	r5, #1
 8010a1e:	68e3      	ldr	r3, [r4, #12]
 8010a20:	9903      	ldr	r1, [sp, #12]
 8010a22:	1a5b      	subs	r3, r3, r1
 8010a24:	42ab      	cmp	r3, r5
 8010a26:	dcf2      	bgt.n	8010a0e <_printf_i+0x212>
 8010a28:	e7eb      	b.n	8010a02 <_printf_i+0x206>
 8010a2a:	2500      	movs	r5, #0
 8010a2c:	f104 0619 	add.w	r6, r4, #25
 8010a30:	e7f5      	b.n	8010a1e <_printf_i+0x222>
 8010a32:	bf00      	nop
 8010a34:	0801335e 	.word	0x0801335e
 8010a38:	0801336f 	.word	0x0801336f

08010a3c <_scanf_chars>:
 8010a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a40:	4615      	mov	r5, r2
 8010a42:	688a      	ldr	r2, [r1, #8]
 8010a44:	4680      	mov	r8, r0
 8010a46:	460c      	mov	r4, r1
 8010a48:	b932      	cbnz	r2, 8010a58 <_scanf_chars+0x1c>
 8010a4a:	698a      	ldr	r2, [r1, #24]
 8010a4c:	2a00      	cmp	r2, #0
 8010a4e:	bf14      	ite	ne
 8010a50:	f04f 32ff 	movne.w	r2, #4294967295
 8010a54:	2201      	moveq	r2, #1
 8010a56:	608a      	str	r2, [r1, #8]
 8010a58:	6822      	ldr	r2, [r4, #0]
 8010a5a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8010aec <_scanf_chars+0xb0>
 8010a5e:	06d1      	lsls	r1, r2, #27
 8010a60:	bf5f      	itttt	pl
 8010a62:	681a      	ldrpl	r2, [r3, #0]
 8010a64:	1d11      	addpl	r1, r2, #4
 8010a66:	6019      	strpl	r1, [r3, #0]
 8010a68:	6816      	ldrpl	r6, [r2, #0]
 8010a6a:	2700      	movs	r7, #0
 8010a6c:	69a0      	ldr	r0, [r4, #24]
 8010a6e:	b188      	cbz	r0, 8010a94 <_scanf_chars+0x58>
 8010a70:	2801      	cmp	r0, #1
 8010a72:	d107      	bne.n	8010a84 <_scanf_chars+0x48>
 8010a74:	682b      	ldr	r3, [r5, #0]
 8010a76:	781a      	ldrb	r2, [r3, #0]
 8010a78:	6963      	ldr	r3, [r4, #20]
 8010a7a:	5c9b      	ldrb	r3, [r3, r2]
 8010a7c:	b953      	cbnz	r3, 8010a94 <_scanf_chars+0x58>
 8010a7e:	2f00      	cmp	r7, #0
 8010a80:	d031      	beq.n	8010ae6 <_scanf_chars+0xaa>
 8010a82:	e022      	b.n	8010aca <_scanf_chars+0x8e>
 8010a84:	2802      	cmp	r0, #2
 8010a86:	d120      	bne.n	8010aca <_scanf_chars+0x8e>
 8010a88:	682b      	ldr	r3, [r5, #0]
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010a90:	071b      	lsls	r3, r3, #28
 8010a92:	d41a      	bmi.n	8010aca <_scanf_chars+0x8e>
 8010a94:	6823      	ldr	r3, [r4, #0]
 8010a96:	06da      	lsls	r2, r3, #27
 8010a98:	bf5e      	ittt	pl
 8010a9a:	682b      	ldrpl	r3, [r5, #0]
 8010a9c:	781b      	ldrbpl	r3, [r3, #0]
 8010a9e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010aa2:	682a      	ldr	r2, [r5, #0]
 8010aa4:	686b      	ldr	r3, [r5, #4]
 8010aa6:	3201      	adds	r2, #1
 8010aa8:	602a      	str	r2, [r5, #0]
 8010aaa:	68a2      	ldr	r2, [r4, #8]
 8010aac:	3b01      	subs	r3, #1
 8010aae:	3a01      	subs	r2, #1
 8010ab0:	606b      	str	r3, [r5, #4]
 8010ab2:	3701      	adds	r7, #1
 8010ab4:	60a2      	str	r2, [r4, #8]
 8010ab6:	b142      	cbz	r2, 8010aca <_scanf_chars+0x8e>
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	dcd7      	bgt.n	8010a6c <_scanf_chars+0x30>
 8010abc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	4640      	mov	r0, r8
 8010ac4:	4798      	blx	r3
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d0d0      	beq.n	8010a6c <_scanf_chars+0x30>
 8010aca:	6823      	ldr	r3, [r4, #0]
 8010acc:	f013 0310 	ands.w	r3, r3, #16
 8010ad0:	d105      	bne.n	8010ade <_scanf_chars+0xa2>
 8010ad2:	68e2      	ldr	r2, [r4, #12]
 8010ad4:	3201      	adds	r2, #1
 8010ad6:	60e2      	str	r2, [r4, #12]
 8010ad8:	69a2      	ldr	r2, [r4, #24]
 8010ada:	b102      	cbz	r2, 8010ade <_scanf_chars+0xa2>
 8010adc:	7033      	strb	r3, [r6, #0]
 8010ade:	6923      	ldr	r3, [r4, #16]
 8010ae0:	443b      	add	r3, r7
 8010ae2:	6123      	str	r3, [r4, #16]
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aea:	bf00      	nop
 8010aec:	0801339c 	.word	0x0801339c

08010af0 <_scanf_i>:
 8010af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af4:	4698      	mov	r8, r3
 8010af6:	4b74      	ldr	r3, [pc, #464]	@ (8010cc8 <_scanf_i+0x1d8>)
 8010af8:	460c      	mov	r4, r1
 8010afa:	4682      	mov	sl, r0
 8010afc:	4616      	mov	r6, r2
 8010afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b02:	b087      	sub	sp, #28
 8010b04:	ab03      	add	r3, sp, #12
 8010b06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010b0a:	4b70      	ldr	r3, [pc, #448]	@ (8010ccc <_scanf_i+0x1dc>)
 8010b0c:	69a1      	ldr	r1, [r4, #24]
 8010b0e:	4a70      	ldr	r2, [pc, #448]	@ (8010cd0 <_scanf_i+0x1e0>)
 8010b10:	2903      	cmp	r1, #3
 8010b12:	bf08      	it	eq
 8010b14:	461a      	moveq	r2, r3
 8010b16:	68a3      	ldr	r3, [r4, #8]
 8010b18:	9201      	str	r2, [sp, #4]
 8010b1a:	1e5a      	subs	r2, r3, #1
 8010b1c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010b20:	bf88      	it	hi
 8010b22:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010b26:	4627      	mov	r7, r4
 8010b28:	bf82      	ittt	hi
 8010b2a:	eb03 0905 	addhi.w	r9, r3, r5
 8010b2e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010b32:	60a3      	strhi	r3, [r4, #8]
 8010b34:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010b38:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010b3c:	bf98      	it	ls
 8010b3e:	f04f 0900 	movls.w	r9, #0
 8010b42:	6023      	str	r3, [r4, #0]
 8010b44:	463d      	mov	r5, r7
 8010b46:	f04f 0b00 	mov.w	fp, #0
 8010b4a:	6831      	ldr	r1, [r6, #0]
 8010b4c:	ab03      	add	r3, sp, #12
 8010b4e:	7809      	ldrb	r1, [r1, #0]
 8010b50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010b54:	2202      	movs	r2, #2
 8010b56:	f7ef fb53 	bl	8000200 <memchr>
 8010b5a:	b328      	cbz	r0, 8010ba8 <_scanf_i+0xb8>
 8010b5c:	f1bb 0f01 	cmp.w	fp, #1
 8010b60:	d159      	bne.n	8010c16 <_scanf_i+0x126>
 8010b62:	6862      	ldr	r2, [r4, #4]
 8010b64:	b92a      	cbnz	r2, 8010b72 <_scanf_i+0x82>
 8010b66:	6822      	ldr	r2, [r4, #0]
 8010b68:	2108      	movs	r1, #8
 8010b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010b6e:	6061      	str	r1, [r4, #4]
 8010b70:	6022      	str	r2, [r4, #0]
 8010b72:	6822      	ldr	r2, [r4, #0]
 8010b74:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010b78:	6022      	str	r2, [r4, #0]
 8010b7a:	68a2      	ldr	r2, [r4, #8]
 8010b7c:	1e51      	subs	r1, r2, #1
 8010b7e:	60a1      	str	r1, [r4, #8]
 8010b80:	b192      	cbz	r2, 8010ba8 <_scanf_i+0xb8>
 8010b82:	6832      	ldr	r2, [r6, #0]
 8010b84:	1c51      	adds	r1, r2, #1
 8010b86:	6031      	str	r1, [r6, #0]
 8010b88:	7812      	ldrb	r2, [r2, #0]
 8010b8a:	f805 2b01 	strb.w	r2, [r5], #1
 8010b8e:	6872      	ldr	r2, [r6, #4]
 8010b90:	3a01      	subs	r2, #1
 8010b92:	2a00      	cmp	r2, #0
 8010b94:	6072      	str	r2, [r6, #4]
 8010b96:	dc07      	bgt.n	8010ba8 <_scanf_i+0xb8>
 8010b98:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8010b9c:	4631      	mov	r1, r6
 8010b9e:	4650      	mov	r0, sl
 8010ba0:	4790      	blx	r2
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	f040 8085 	bne.w	8010cb2 <_scanf_i+0x1c2>
 8010ba8:	f10b 0b01 	add.w	fp, fp, #1
 8010bac:	f1bb 0f03 	cmp.w	fp, #3
 8010bb0:	d1cb      	bne.n	8010b4a <_scanf_i+0x5a>
 8010bb2:	6863      	ldr	r3, [r4, #4]
 8010bb4:	b90b      	cbnz	r3, 8010bba <_scanf_i+0xca>
 8010bb6:	230a      	movs	r3, #10
 8010bb8:	6063      	str	r3, [r4, #4]
 8010bba:	6863      	ldr	r3, [r4, #4]
 8010bbc:	4945      	ldr	r1, [pc, #276]	@ (8010cd4 <_scanf_i+0x1e4>)
 8010bbe:	6960      	ldr	r0, [r4, #20]
 8010bc0:	1ac9      	subs	r1, r1, r3
 8010bc2:	f000 f997 	bl	8010ef4 <__sccl>
 8010bc6:	f04f 0b00 	mov.w	fp, #0
 8010bca:	68a3      	ldr	r3, [r4, #8]
 8010bcc:	6822      	ldr	r2, [r4, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d03d      	beq.n	8010c4e <_scanf_i+0x15e>
 8010bd2:	6831      	ldr	r1, [r6, #0]
 8010bd4:	6960      	ldr	r0, [r4, #20]
 8010bd6:	f891 c000 	ldrb.w	ip, [r1]
 8010bda:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d035      	beq.n	8010c4e <_scanf_i+0x15e>
 8010be2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010be6:	d124      	bne.n	8010c32 <_scanf_i+0x142>
 8010be8:	0510      	lsls	r0, r2, #20
 8010bea:	d522      	bpl.n	8010c32 <_scanf_i+0x142>
 8010bec:	f10b 0b01 	add.w	fp, fp, #1
 8010bf0:	f1b9 0f00 	cmp.w	r9, #0
 8010bf4:	d003      	beq.n	8010bfe <_scanf_i+0x10e>
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	f109 39ff 	add.w	r9, r9, #4294967295
 8010bfc:	60a3      	str	r3, [r4, #8]
 8010bfe:	6873      	ldr	r3, [r6, #4]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	6073      	str	r3, [r6, #4]
 8010c06:	dd1b      	ble.n	8010c40 <_scanf_i+0x150>
 8010c08:	6833      	ldr	r3, [r6, #0]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	6033      	str	r3, [r6, #0]
 8010c0e:	68a3      	ldr	r3, [r4, #8]
 8010c10:	3b01      	subs	r3, #1
 8010c12:	60a3      	str	r3, [r4, #8]
 8010c14:	e7d9      	b.n	8010bca <_scanf_i+0xda>
 8010c16:	f1bb 0f02 	cmp.w	fp, #2
 8010c1a:	d1ae      	bne.n	8010b7a <_scanf_i+0x8a>
 8010c1c:	6822      	ldr	r2, [r4, #0]
 8010c1e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010c22:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010c26:	d1bf      	bne.n	8010ba8 <_scanf_i+0xb8>
 8010c28:	2110      	movs	r1, #16
 8010c2a:	6061      	str	r1, [r4, #4]
 8010c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010c30:	e7a2      	b.n	8010b78 <_scanf_i+0x88>
 8010c32:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8010c36:	6022      	str	r2, [r4, #0]
 8010c38:	780b      	ldrb	r3, [r1, #0]
 8010c3a:	f805 3b01 	strb.w	r3, [r5], #1
 8010c3e:	e7de      	b.n	8010bfe <_scanf_i+0x10e>
 8010c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010c44:	4631      	mov	r1, r6
 8010c46:	4650      	mov	r0, sl
 8010c48:	4798      	blx	r3
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	d0df      	beq.n	8010c0e <_scanf_i+0x11e>
 8010c4e:	6823      	ldr	r3, [r4, #0]
 8010c50:	05d9      	lsls	r1, r3, #23
 8010c52:	d50d      	bpl.n	8010c70 <_scanf_i+0x180>
 8010c54:	42bd      	cmp	r5, r7
 8010c56:	d909      	bls.n	8010c6c <_scanf_i+0x17c>
 8010c58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010c5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010c60:	4632      	mov	r2, r6
 8010c62:	4650      	mov	r0, sl
 8010c64:	4798      	blx	r3
 8010c66:	f105 39ff 	add.w	r9, r5, #4294967295
 8010c6a:	464d      	mov	r5, r9
 8010c6c:	42bd      	cmp	r5, r7
 8010c6e:	d028      	beq.n	8010cc2 <_scanf_i+0x1d2>
 8010c70:	6822      	ldr	r2, [r4, #0]
 8010c72:	f012 0210 	ands.w	r2, r2, #16
 8010c76:	d113      	bne.n	8010ca0 <_scanf_i+0x1b0>
 8010c78:	702a      	strb	r2, [r5, #0]
 8010c7a:	6863      	ldr	r3, [r4, #4]
 8010c7c:	9e01      	ldr	r6, [sp, #4]
 8010c7e:	4639      	mov	r1, r7
 8010c80:	4650      	mov	r0, sl
 8010c82:	47b0      	blx	r6
 8010c84:	f8d8 3000 	ldr.w	r3, [r8]
 8010c88:	6821      	ldr	r1, [r4, #0]
 8010c8a:	1d1a      	adds	r2, r3, #4
 8010c8c:	f8c8 2000 	str.w	r2, [r8]
 8010c90:	f011 0f20 	tst.w	r1, #32
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	d00f      	beq.n	8010cb8 <_scanf_i+0x1c8>
 8010c98:	6018      	str	r0, [r3, #0]
 8010c9a:	68e3      	ldr	r3, [r4, #12]
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	60e3      	str	r3, [r4, #12]
 8010ca0:	6923      	ldr	r3, [r4, #16]
 8010ca2:	1bed      	subs	r5, r5, r7
 8010ca4:	445d      	add	r5, fp
 8010ca6:	442b      	add	r3, r5
 8010ca8:	6123      	str	r3, [r4, #16]
 8010caa:	2000      	movs	r0, #0
 8010cac:	b007      	add	sp, #28
 8010cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb2:	f04f 0b00 	mov.w	fp, #0
 8010cb6:	e7ca      	b.n	8010c4e <_scanf_i+0x15e>
 8010cb8:	07ca      	lsls	r2, r1, #31
 8010cba:	bf4c      	ite	mi
 8010cbc:	8018      	strhmi	r0, [r3, #0]
 8010cbe:	6018      	strpl	r0, [r3, #0]
 8010cc0:	e7eb      	b.n	8010c9a <_scanf_i+0x1aa>
 8010cc2:	2001      	movs	r0, #1
 8010cc4:	e7f2      	b.n	8010cac <_scanf_i+0x1bc>
 8010cc6:	bf00      	nop
 8010cc8:	08012b68 	.word	0x08012b68
 8010ccc:	08011181 	.word	0x08011181
 8010cd0:	08011261 	.word	0x08011261
 8010cd4:	08013390 	.word	0x08013390

08010cd8 <__sflush_r>:
 8010cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce0:	0716      	lsls	r6, r2, #28
 8010ce2:	4605      	mov	r5, r0
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	d454      	bmi.n	8010d92 <__sflush_r+0xba>
 8010ce8:	684b      	ldr	r3, [r1, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	dc02      	bgt.n	8010cf4 <__sflush_r+0x1c>
 8010cee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dd48      	ble.n	8010d86 <__sflush_r+0xae>
 8010cf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010cf6:	2e00      	cmp	r6, #0
 8010cf8:	d045      	beq.n	8010d86 <__sflush_r+0xae>
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d00:	682f      	ldr	r7, [r5, #0]
 8010d02:	6a21      	ldr	r1, [r4, #32]
 8010d04:	602b      	str	r3, [r5, #0]
 8010d06:	d030      	beq.n	8010d6a <__sflush_r+0x92>
 8010d08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	0759      	lsls	r1, r3, #29
 8010d0e:	d505      	bpl.n	8010d1c <__sflush_r+0x44>
 8010d10:	6863      	ldr	r3, [r4, #4]
 8010d12:	1ad2      	subs	r2, r2, r3
 8010d14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d16:	b10b      	cbz	r3, 8010d1c <__sflush_r+0x44>
 8010d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d1a:	1ad2      	subs	r2, r2, r3
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d20:	6a21      	ldr	r1, [r4, #32]
 8010d22:	4628      	mov	r0, r5
 8010d24:	47b0      	blx	r6
 8010d26:	1c43      	adds	r3, r0, #1
 8010d28:	89a3      	ldrh	r3, [r4, #12]
 8010d2a:	d106      	bne.n	8010d3a <__sflush_r+0x62>
 8010d2c:	6829      	ldr	r1, [r5, #0]
 8010d2e:	291d      	cmp	r1, #29
 8010d30:	d82b      	bhi.n	8010d8a <__sflush_r+0xb2>
 8010d32:	4a2a      	ldr	r2, [pc, #168]	@ (8010ddc <__sflush_r+0x104>)
 8010d34:	410a      	asrs	r2, r1
 8010d36:	07d6      	lsls	r6, r2, #31
 8010d38:	d427      	bmi.n	8010d8a <__sflush_r+0xb2>
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	6062      	str	r2, [r4, #4]
 8010d3e:	04d9      	lsls	r1, r3, #19
 8010d40:	6922      	ldr	r2, [r4, #16]
 8010d42:	6022      	str	r2, [r4, #0]
 8010d44:	d504      	bpl.n	8010d50 <__sflush_r+0x78>
 8010d46:	1c42      	adds	r2, r0, #1
 8010d48:	d101      	bne.n	8010d4e <__sflush_r+0x76>
 8010d4a:	682b      	ldr	r3, [r5, #0]
 8010d4c:	b903      	cbnz	r3, 8010d50 <__sflush_r+0x78>
 8010d4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d52:	602f      	str	r7, [r5, #0]
 8010d54:	b1b9      	cbz	r1, 8010d86 <__sflush_r+0xae>
 8010d56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d5a:	4299      	cmp	r1, r3
 8010d5c:	d002      	beq.n	8010d64 <__sflush_r+0x8c>
 8010d5e:	4628      	mov	r0, r5
 8010d60:	f7ff f82e 	bl	800fdc0 <_free_r>
 8010d64:	2300      	movs	r3, #0
 8010d66:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d68:	e00d      	b.n	8010d86 <__sflush_r+0xae>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	47b0      	blx	r6
 8010d70:	4602      	mov	r2, r0
 8010d72:	1c50      	adds	r0, r2, #1
 8010d74:	d1c9      	bne.n	8010d0a <__sflush_r+0x32>
 8010d76:	682b      	ldr	r3, [r5, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d0c6      	beq.n	8010d0a <__sflush_r+0x32>
 8010d7c:	2b1d      	cmp	r3, #29
 8010d7e:	d001      	beq.n	8010d84 <__sflush_r+0xac>
 8010d80:	2b16      	cmp	r3, #22
 8010d82:	d11e      	bne.n	8010dc2 <__sflush_r+0xea>
 8010d84:	602f      	str	r7, [r5, #0]
 8010d86:	2000      	movs	r0, #0
 8010d88:	e022      	b.n	8010dd0 <__sflush_r+0xf8>
 8010d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d8e:	b21b      	sxth	r3, r3
 8010d90:	e01b      	b.n	8010dca <__sflush_r+0xf2>
 8010d92:	690f      	ldr	r7, [r1, #16]
 8010d94:	2f00      	cmp	r7, #0
 8010d96:	d0f6      	beq.n	8010d86 <__sflush_r+0xae>
 8010d98:	0793      	lsls	r3, r2, #30
 8010d9a:	680e      	ldr	r6, [r1, #0]
 8010d9c:	bf08      	it	eq
 8010d9e:	694b      	ldreq	r3, [r1, #20]
 8010da0:	600f      	str	r7, [r1, #0]
 8010da2:	bf18      	it	ne
 8010da4:	2300      	movne	r3, #0
 8010da6:	eba6 0807 	sub.w	r8, r6, r7
 8010daa:	608b      	str	r3, [r1, #8]
 8010dac:	f1b8 0f00 	cmp.w	r8, #0
 8010db0:	dde9      	ble.n	8010d86 <__sflush_r+0xae>
 8010db2:	6a21      	ldr	r1, [r4, #32]
 8010db4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010db6:	4643      	mov	r3, r8
 8010db8:	463a      	mov	r2, r7
 8010dba:	4628      	mov	r0, r5
 8010dbc:	47b0      	blx	r6
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	dc08      	bgt.n	8010dd4 <__sflush_r+0xfc>
 8010dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dca:	81a3      	strh	r3, [r4, #12]
 8010dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd4:	4407      	add	r7, r0
 8010dd6:	eba8 0800 	sub.w	r8, r8, r0
 8010dda:	e7e7      	b.n	8010dac <__sflush_r+0xd4>
 8010ddc:	dfbffffe 	.word	0xdfbffffe

08010de0 <_fflush_r>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	690b      	ldr	r3, [r1, #16]
 8010de4:	4605      	mov	r5, r0
 8010de6:	460c      	mov	r4, r1
 8010de8:	b913      	cbnz	r3, 8010df0 <_fflush_r+0x10>
 8010dea:	2500      	movs	r5, #0
 8010dec:	4628      	mov	r0, r5
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	b118      	cbz	r0, 8010dfa <_fflush_r+0x1a>
 8010df2:	6a03      	ldr	r3, [r0, #32]
 8010df4:	b90b      	cbnz	r3, 8010dfa <_fflush_r+0x1a>
 8010df6:	f7fe fc49 	bl	800f68c <__sinit>
 8010dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d0f3      	beq.n	8010dea <_fflush_r+0xa>
 8010e02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e04:	07d0      	lsls	r0, r2, #31
 8010e06:	d404      	bmi.n	8010e12 <_fflush_r+0x32>
 8010e08:	0599      	lsls	r1, r3, #22
 8010e0a:	d402      	bmi.n	8010e12 <_fflush_r+0x32>
 8010e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e0e:	f7fe ffa8 	bl	800fd62 <__retarget_lock_acquire_recursive>
 8010e12:	4628      	mov	r0, r5
 8010e14:	4621      	mov	r1, r4
 8010e16:	f7ff ff5f 	bl	8010cd8 <__sflush_r>
 8010e1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e1c:	07da      	lsls	r2, r3, #31
 8010e1e:	4605      	mov	r5, r0
 8010e20:	d4e4      	bmi.n	8010dec <_fflush_r+0xc>
 8010e22:	89a3      	ldrh	r3, [r4, #12]
 8010e24:	059b      	lsls	r3, r3, #22
 8010e26:	d4e1      	bmi.n	8010dec <_fflush_r+0xc>
 8010e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e2a:	f7fe ff9b 	bl	800fd64 <__retarget_lock_release_recursive>
 8010e2e:	e7dd      	b.n	8010dec <_fflush_r+0xc>

08010e30 <__swhatbuf_r>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	460c      	mov	r4, r1
 8010e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e38:	2900      	cmp	r1, #0
 8010e3a:	b096      	sub	sp, #88	@ 0x58
 8010e3c:	4615      	mov	r5, r2
 8010e3e:	461e      	mov	r6, r3
 8010e40:	da0d      	bge.n	8010e5e <__swhatbuf_r+0x2e>
 8010e42:	89a3      	ldrh	r3, [r4, #12]
 8010e44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e48:	f04f 0100 	mov.w	r1, #0
 8010e4c:	bf14      	ite	ne
 8010e4e:	2340      	movne	r3, #64	@ 0x40
 8010e50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e54:	2000      	movs	r0, #0
 8010e56:	6031      	str	r1, [r6, #0]
 8010e58:	602b      	str	r3, [r5, #0]
 8010e5a:	b016      	add	sp, #88	@ 0x58
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
 8010e5e:	466a      	mov	r2, sp
 8010e60:	f000 f8bc 	bl	8010fdc <_fstat_r>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	dbec      	blt.n	8010e42 <__swhatbuf_r+0x12>
 8010e68:	9901      	ldr	r1, [sp, #4]
 8010e6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e72:	4259      	negs	r1, r3
 8010e74:	4159      	adcs	r1, r3
 8010e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e7a:	e7eb      	b.n	8010e54 <__swhatbuf_r+0x24>

08010e7c <__smakebuf_r>:
 8010e7c:	898b      	ldrh	r3, [r1, #12]
 8010e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e80:	079d      	lsls	r5, r3, #30
 8010e82:	4606      	mov	r6, r0
 8010e84:	460c      	mov	r4, r1
 8010e86:	d507      	bpl.n	8010e98 <__smakebuf_r+0x1c>
 8010e88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	6123      	str	r3, [r4, #16]
 8010e90:	2301      	movs	r3, #1
 8010e92:	6163      	str	r3, [r4, #20]
 8010e94:	b003      	add	sp, #12
 8010e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e98:	ab01      	add	r3, sp, #4
 8010e9a:	466a      	mov	r2, sp
 8010e9c:	f7ff ffc8 	bl	8010e30 <__swhatbuf_r>
 8010ea0:	9f00      	ldr	r7, [sp, #0]
 8010ea2:	4605      	mov	r5, r0
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	f7fe fad8 	bl	800f45c <_malloc_r>
 8010eac:	b948      	cbnz	r0, 8010ec2 <__smakebuf_r+0x46>
 8010eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eb2:	059a      	lsls	r2, r3, #22
 8010eb4:	d4ee      	bmi.n	8010e94 <__smakebuf_r+0x18>
 8010eb6:	f023 0303 	bic.w	r3, r3, #3
 8010eba:	f043 0302 	orr.w	r3, r3, #2
 8010ebe:	81a3      	strh	r3, [r4, #12]
 8010ec0:	e7e2      	b.n	8010e88 <__smakebuf_r+0xc>
 8010ec2:	89a3      	ldrh	r3, [r4, #12]
 8010ec4:	6020      	str	r0, [r4, #0]
 8010ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010eca:	81a3      	strh	r3, [r4, #12]
 8010ecc:	9b01      	ldr	r3, [sp, #4]
 8010ece:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ed2:	b15b      	cbz	r3, 8010eec <__smakebuf_r+0x70>
 8010ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ed8:	4630      	mov	r0, r6
 8010eda:	f000 f891 	bl	8011000 <_isatty_r>
 8010ede:	b128      	cbz	r0, 8010eec <__smakebuf_r+0x70>
 8010ee0:	89a3      	ldrh	r3, [r4, #12]
 8010ee2:	f023 0303 	bic.w	r3, r3, #3
 8010ee6:	f043 0301 	orr.w	r3, r3, #1
 8010eea:	81a3      	strh	r3, [r4, #12]
 8010eec:	89a3      	ldrh	r3, [r4, #12]
 8010eee:	431d      	orrs	r5, r3
 8010ef0:	81a5      	strh	r5, [r4, #12]
 8010ef2:	e7cf      	b.n	8010e94 <__smakebuf_r+0x18>

08010ef4 <__sccl>:
 8010ef4:	b570      	push	{r4, r5, r6, lr}
 8010ef6:	780b      	ldrb	r3, [r1, #0]
 8010ef8:	4604      	mov	r4, r0
 8010efa:	2b5e      	cmp	r3, #94	@ 0x5e
 8010efc:	bf0b      	itete	eq
 8010efe:	784b      	ldrbeq	r3, [r1, #1]
 8010f00:	1c4a      	addne	r2, r1, #1
 8010f02:	1c8a      	addeq	r2, r1, #2
 8010f04:	2100      	movne	r1, #0
 8010f06:	bf08      	it	eq
 8010f08:	2101      	moveq	r1, #1
 8010f0a:	3801      	subs	r0, #1
 8010f0c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8010f10:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010f14:	42a8      	cmp	r0, r5
 8010f16:	d1fb      	bne.n	8010f10 <__sccl+0x1c>
 8010f18:	b90b      	cbnz	r3, 8010f1e <__sccl+0x2a>
 8010f1a:	1e50      	subs	r0, r2, #1
 8010f1c:	bd70      	pop	{r4, r5, r6, pc}
 8010f1e:	f081 0101 	eor.w	r1, r1, #1
 8010f22:	54e1      	strb	r1, [r4, r3]
 8010f24:	4610      	mov	r0, r2
 8010f26:	4602      	mov	r2, r0
 8010f28:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010f2c:	2d2d      	cmp	r5, #45	@ 0x2d
 8010f2e:	d005      	beq.n	8010f3c <__sccl+0x48>
 8010f30:	2d5d      	cmp	r5, #93	@ 0x5d
 8010f32:	d016      	beq.n	8010f62 <__sccl+0x6e>
 8010f34:	2d00      	cmp	r5, #0
 8010f36:	d0f1      	beq.n	8010f1c <__sccl+0x28>
 8010f38:	462b      	mov	r3, r5
 8010f3a:	e7f2      	b.n	8010f22 <__sccl+0x2e>
 8010f3c:	7846      	ldrb	r6, [r0, #1]
 8010f3e:	2e5d      	cmp	r6, #93	@ 0x5d
 8010f40:	d0fa      	beq.n	8010f38 <__sccl+0x44>
 8010f42:	42b3      	cmp	r3, r6
 8010f44:	dcf8      	bgt.n	8010f38 <__sccl+0x44>
 8010f46:	3002      	adds	r0, #2
 8010f48:	461a      	mov	r2, r3
 8010f4a:	3201      	adds	r2, #1
 8010f4c:	4296      	cmp	r6, r2
 8010f4e:	54a1      	strb	r1, [r4, r2]
 8010f50:	dcfb      	bgt.n	8010f4a <__sccl+0x56>
 8010f52:	1af2      	subs	r2, r6, r3
 8010f54:	3a01      	subs	r2, #1
 8010f56:	1c5d      	adds	r5, r3, #1
 8010f58:	42b3      	cmp	r3, r6
 8010f5a:	bfa8      	it	ge
 8010f5c:	2200      	movge	r2, #0
 8010f5e:	18ab      	adds	r3, r5, r2
 8010f60:	e7e1      	b.n	8010f26 <__sccl+0x32>
 8010f62:	4610      	mov	r0, r2
 8010f64:	e7da      	b.n	8010f1c <__sccl+0x28>

08010f66 <__submore>:
 8010f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6a:	460c      	mov	r4, r1
 8010f6c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010f6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f72:	4299      	cmp	r1, r3
 8010f74:	d11d      	bne.n	8010fb2 <__submore+0x4c>
 8010f76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010f7a:	f7fe fa6f 	bl	800f45c <_malloc_r>
 8010f7e:	b918      	cbnz	r0, 8010f88 <__submore+0x22>
 8010f80:	f04f 30ff 	mov.w	r0, #4294967295
 8010f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f8c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010f8e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8010f92:	6360      	str	r0, [r4, #52]	@ 0x34
 8010f94:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010f98:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010f9c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8010fa0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010fa4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010fa8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010fac:	6020      	str	r0, [r4, #0]
 8010fae:	2000      	movs	r0, #0
 8010fb0:	e7e8      	b.n	8010f84 <__submore+0x1e>
 8010fb2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010fb4:	0077      	lsls	r7, r6, #1
 8010fb6:	463a      	mov	r2, r7
 8010fb8:	f000 f839 	bl	801102e <_realloc_r>
 8010fbc:	4605      	mov	r5, r0
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d0de      	beq.n	8010f80 <__submore+0x1a>
 8010fc2:	eb00 0806 	add.w	r8, r0, r6
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	4632      	mov	r2, r6
 8010fca:	4640      	mov	r0, r8
 8010fcc:	f7fe fecb 	bl	800fd66 <memcpy>
 8010fd0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010fd4:	f8c4 8000 	str.w	r8, [r4]
 8010fd8:	e7e9      	b.n	8010fae <__submore+0x48>
	...

08010fdc <_fstat_r>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	4d07      	ldr	r5, [pc, #28]	@ (8010ffc <_fstat_r+0x20>)
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	4608      	mov	r0, r1
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	602b      	str	r3, [r5, #0]
 8010fea:	f7f0 fccf 	bl	800198c <_fstat>
 8010fee:	1c43      	adds	r3, r0, #1
 8010ff0:	d102      	bne.n	8010ff8 <_fstat_r+0x1c>
 8010ff2:	682b      	ldr	r3, [r5, #0]
 8010ff4:	b103      	cbz	r3, 8010ff8 <_fstat_r+0x1c>
 8010ff6:	6023      	str	r3, [r4, #0]
 8010ff8:	bd38      	pop	{r3, r4, r5, pc}
 8010ffa:	bf00      	nop
 8010ffc:	20002aec 	.word	0x20002aec

08011000 <_isatty_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d06      	ldr	r5, [pc, #24]	@ (801101c <_isatty_r+0x1c>)
 8011004:	2300      	movs	r3, #0
 8011006:	4604      	mov	r4, r0
 8011008:	4608      	mov	r0, r1
 801100a:	602b      	str	r3, [r5, #0]
 801100c:	f7f0 fcce 	bl	80019ac <_isatty>
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	d102      	bne.n	801101a <_isatty_r+0x1a>
 8011014:	682b      	ldr	r3, [r5, #0]
 8011016:	b103      	cbz	r3, 801101a <_isatty_r+0x1a>
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	bd38      	pop	{r3, r4, r5, pc}
 801101c:	20002aec 	.word	0x20002aec

08011020 <abort>:
 8011020:	b508      	push	{r3, lr}
 8011022:	2006      	movs	r0, #6
 8011024:	f000 f946 	bl	80112b4 <raise>
 8011028:	2001      	movs	r0, #1
 801102a:	f7f0 fc5f 	bl	80018ec <_exit>

0801102e <_realloc_r>:
 801102e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011032:	4680      	mov	r8, r0
 8011034:	4615      	mov	r5, r2
 8011036:	460c      	mov	r4, r1
 8011038:	b921      	cbnz	r1, 8011044 <_realloc_r+0x16>
 801103a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801103e:	4611      	mov	r1, r2
 8011040:	f7fe ba0c 	b.w	800f45c <_malloc_r>
 8011044:	b92a      	cbnz	r2, 8011052 <_realloc_r+0x24>
 8011046:	f7fe febb 	bl	800fdc0 <_free_r>
 801104a:	2400      	movs	r4, #0
 801104c:	4620      	mov	r0, r4
 801104e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011052:	f000 f94b 	bl	80112ec <_malloc_usable_size_r>
 8011056:	4285      	cmp	r5, r0
 8011058:	4606      	mov	r6, r0
 801105a:	d802      	bhi.n	8011062 <_realloc_r+0x34>
 801105c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011060:	d8f4      	bhi.n	801104c <_realloc_r+0x1e>
 8011062:	4629      	mov	r1, r5
 8011064:	4640      	mov	r0, r8
 8011066:	f7fe f9f9 	bl	800f45c <_malloc_r>
 801106a:	4607      	mov	r7, r0
 801106c:	2800      	cmp	r0, #0
 801106e:	d0ec      	beq.n	801104a <_realloc_r+0x1c>
 8011070:	42b5      	cmp	r5, r6
 8011072:	462a      	mov	r2, r5
 8011074:	4621      	mov	r1, r4
 8011076:	bf28      	it	cs
 8011078:	4632      	movcs	r2, r6
 801107a:	f7fe fe74 	bl	800fd66 <memcpy>
 801107e:	4621      	mov	r1, r4
 8011080:	4640      	mov	r0, r8
 8011082:	f7fe fe9d 	bl	800fdc0 <_free_r>
 8011086:	463c      	mov	r4, r7
 8011088:	e7e0      	b.n	801104c <_realloc_r+0x1e>
	...

0801108c <_strtol_l.constprop.0>:
 801108c:	2b24      	cmp	r3, #36	@ 0x24
 801108e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011092:	4686      	mov	lr, r0
 8011094:	4690      	mov	r8, r2
 8011096:	d801      	bhi.n	801109c <_strtol_l.constprop.0+0x10>
 8011098:	2b01      	cmp	r3, #1
 801109a:	d106      	bne.n	80110aa <_strtol_l.constprop.0+0x1e>
 801109c:	f7fe fe36 	bl	800fd0c <__errno>
 80110a0:	2316      	movs	r3, #22
 80110a2:	6003      	str	r3, [r0, #0]
 80110a4:	2000      	movs	r0, #0
 80110a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110aa:	4834      	ldr	r0, [pc, #208]	@ (801117c <_strtol_l.constprop.0+0xf0>)
 80110ac:	460d      	mov	r5, r1
 80110ae:	462a      	mov	r2, r5
 80110b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80110b4:	5d06      	ldrb	r6, [r0, r4]
 80110b6:	f016 0608 	ands.w	r6, r6, #8
 80110ba:	d1f8      	bne.n	80110ae <_strtol_l.constprop.0+0x22>
 80110bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80110be:	d12d      	bne.n	801111c <_strtol_l.constprop.0+0x90>
 80110c0:	782c      	ldrb	r4, [r5, #0]
 80110c2:	2601      	movs	r6, #1
 80110c4:	1c95      	adds	r5, r2, #2
 80110c6:	f033 0210 	bics.w	r2, r3, #16
 80110ca:	d109      	bne.n	80110e0 <_strtol_l.constprop.0+0x54>
 80110cc:	2c30      	cmp	r4, #48	@ 0x30
 80110ce:	d12a      	bne.n	8011126 <_strtol_l.constprop.0+0x9a>
 80110d0:	782a      	ldrb	r2, [r5, #0]
 80110d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80110d6:	2a58      	cmp	r2, #88	@ 0x58
 80110d8:	d125      	bne.n	8011126 <_strtol_l.constprop.0+0x9a>
 80110da:	786c      	ldrb	r4, [r5, #1]
 80110dc:	2310      	movs	r3, #16
 80110de:	3502      	adds	r5, #2
 80110e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80110e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80110e8:	2200      	movs	r2, #0
 80110ea:	fbbc f9f3 	udiv	r9, ip, r3
 80110ee:	4610      	mov	r0, r2
 80110f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80110f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80110f8:	2f09      	cmp	r7, #9
 80110fa:	d81b      	bhi.n	8011134 <_strtol_l.constprop.0+0xa8>
 80110fc:	463c      	mov	r4, r7
 80110fe:	42a3      	cmp	r3, r4
 8011100:	dd27      	ble.n	8011152 <_strtol_l.constprop.0+0xc6>
 8011102:	1c57      	adds	r7, r2, #1
 8011104:	d007      	beq.n	8011116 <_strtol_l.constprop.0+0x8a>
 8011106:	4581      	cmp	r9, r0
 8011108:	d320      	bcc.n	801114c <_strtol_l.constprop.0+0xc0>
 801110a:	d101      	bne.n	8011110 <_strtol_l.constprop.0+0x84>
 801110c:	45a2      	cmp	sl, r4
 801110e:	db1d      	blt.n	801114c <_strtol_l.constprop.0+0xc0>
 8011110:	fb00 4003 	mla	r0, r0, r3, r4
 8011114:	2201      	movs	r2, #1
 8011116:	f815 4b01 	ldrb.w	r4, [r5], #1
 801111a:	e7eb      	b.n	80110f4 <_strtol_l.constprop.0+0x68>
 801111c:	2c2b      	cmp	r4, #43	@ 0x2b
 801111e:	bf04      	itt	eq
 8011120:	782c      	ldrbeq	r4, [r5, #0]
 8011122:	1c95      	addeq	r5, r2, #2
 8011124:	e7cf      	b.n	80110c6 <_strtol_l.constprop.0+0x3a>
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1da      	bne.n	80110e0 <_strtol_l.constprop.0+0x54>
 801112a:	2c30      	cmp	r4, #48	@ 0x30
 801112c:	bf0c      	ite	eq
 801112e:	2308      	moveq	r3, #8
 8011130:	230a      	movne	r3, #10
 8011132:	e7d5      	b.n	80110e0 <_strtol_l.constprop.0+0x54>
 8011134:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011138:	2f19      	cmp	r7, #25
 801113a:	d801      	bhi.n	8011140 <_strtol_l.constprop.0+0xb4>
 801113c:	3c37      	subs	r4, #55	@ 0x37
 801113e:	e7de      	b.n	80110fe <_strtol_l.constprop.0+0x72>
 8011140:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011144:	2f19      	cmp	r7, #25
 8011146:	d804      	bhi.n	8011152 <_strtol_l.constprop.0+0xc6>
 8011148:	3c57      	subs	r4, #87	@ 0x57
 801114a:	e7d8      	b.n	80110fe <_strtol_l.constprop.0+0x72>
 801114c:	f04f 32ff 	mov.w	r2, #4294967295
 8011150:	e7e1      	b.n	8011116 <_strtol_l.constprop.0+0x8a>
 8011152:	1c53      	adds	r3, r2, #1
 8011154:	d108      	bne.n	8011168 <_strtol_l.constprop.0+0xdc>
 8011156:	2322      	movs	r3, #34	@ 0x22
 8011158:	f8ce 3000 	str.w	r3, [lr]
 801115c:	4660      	mov	r0, ip
 801115e:	f1b8 0f00 	cmp.w	r8, #0
 8011162:	d0a0      	beq.n	80110a6 <_strtol_l.constprop.0+0x1a>
 8011164:	1e69      	subs	r1, r5, #1
 8011166:	e006      	b.n	8011176 <_strtol_l.constprop.0+0xea>
 8011168:	b106      	cbz	r6, 801116c <_strtol_l.constprop.0+0xe0>
 801116a:	4240      	negs	r0, r0
 801116c:	f1b8 0f00 	cmp.w	r8, #0
 8011170:	d099      	beq.n	80110a6 <_strtol_l.constprop.0+0x1a>
 8011172:	2a00      	cmp	r2, #0
 8011174:	d1f6      	bne.n	8011164 <_strtol_l.constprop.0+0xd8>
 8011176:	f8c8 1000 	str.w	r1, [r8]
 801117a:	e794      	b.n	80110a6 <_strtol_l.constprop.0+0x1a>
 801117c:	0801339c 	.word	0x0801339c

08011180 <_strtol_r>:
 8011180:	f7ff bf84 	b.w	801108c <_strtol_l.constprop.0>

08011184 <_strtoul_l.constprop.0>:
 8011184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011188:	4e34      	ldr	r6, [pc, #208]	@ (801125c <_strtoul_l.constprop.0+0xd8>)
 801118a:	4686      	mov	lr, r0
 801118c:	460d      	mov	r5, r1
 801118e:	4628      	mov	r0, r5
 8011190:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011194:	5d37      	ldrb	r7, [r6, r4]
 8011196:	f017 0708 	ands.w	r7, r7, #8
 801119a:	d1f8      	bne.n	801118e <_strtoul_l.constprop.0+0xa>
 801119c:	2c2d      	cmp	r4, #45	@ 0x2d
 801119e:	d12f      	bne.n	8011200 <_strtoul_l.constprop.0+0x7c>
 80111a0:	782c      	ldrb	r4, [r5, #0]
 80111a2:	2701      	movs	r7, #1
 80111a4:	1c85      	adds	r5, r0, #2
 80111a6:	f033 0010 	bics.w	r0, r3, #16
 80111aa:	d109      	bne.n	80111c0 <_strtoul_l.constprop.0+0x3c>
 80111ac:	2c30      	cmp	r4, #48	@ 0x30
 80111ae:	d12c      	bne.n	801120a <_strtoul_l.constprop.0+0x86>
 80111b0:	7828      	ldrb	r0, [r5, #0]
 80111b2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80111b6:	2858      	cmp	r0, #88	@ 0x58
 80111b8:	d127      	bne.n	801120a <_strtoul_l.constprop.0+0x86>
 80111ba:	786c      	ldrb	r4, [r5, #1]
 80111bc:	2310      	movs	r3, #16
 80111be:	3502      	adds	r5, #2
 80111c0:	f04f 38ff 	mov.w	r8, #4294967295
 80111c4:	2600      	movs	r6, #0
 80111c6:	fbb8 f8f3 	udiv	r8, r8, r3
 80111ca:	fb03 f908 	mul.w	r9, r3, r8
 80111ce:	ea6f 0909 	mvn.w	r9, r9
 80111d2:	4630      	mov	r0, r6
 80111d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80111d8:	f1bc 0f09 	cmp.w	ip, #9
 80111dc:	d81c      	bhi.n	8011218 <_strtoul_l.constprop.0+0x94>
 80111de:	4664      	mov	r4, ip
 80111e0:	42a3      	cmp	r3, r4
 80111e2:	dd2a      	ble.n	801123a <_strtoul_l.constprop.0+0xb6>
 80111e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80111e8:	d007      	beq.n	80111fa <_strtoul_l.constprop.0+0x76>
 80111ea:	4580      	cmp	r8, r0
 80111ec:	d322      	bcc.n	8011234 <_strtoul_l.constprop.0+0xb0>
 80111ee:	d101      	bne.n	80111f4 <_strtoul_l.constprop.0+0x70>
 80111f0:	45a1      	cmp	r9, r4
 80111f2:	db1f      	blt.n	8011234 <_strtoul_l.constprop.0+0xb0>
 80111f4:	fb00 4003 	mla	r0, r0, r3, r4
 80111f8:	2601      	movs	r6, #1
 80111fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111fe:	e7e9      	b.n	80111d4 <_strtoul_l.constprop.0+0x50>
 8011200:	2c2b      	cmp	r4, #43	@ 0x2b
 8011202:	bf04      	itt	eq
 8011204:	782c      	ldrbeq	r4, [r5, #0]
 8011206:	1c85      	addeq	r5, r0, #2
 8011208:	e7cd      	b.n	80111a6 <_strtoul_l.constprop.0+0x22>
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1d8      	bne.n	80111c0 <_strtoul_l.constprop.0+0x3c>
 801120e:	2c30      	cmp	r4, #48	@ 0x30
 8011210:	bf0c      	ite	eq
 8011212:	2308      	moveq	r3, #8
 8011214:	230a      	movne	r3, #10
 8011216:	e7d3      	b.n	80111c0 <_strtoul_l.constprop.0+0x3c>
 8011218:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801121c:	f1bc 0f19 	cmp.w	ip, #25
 8011220:	d801      	bhi.n	8011226 <_strtoul_l.constprop.0+0xa2>
 8011222:	3c37      	subs	r4, #55	@ 0x37
 8011224:	e7dc      	b.n	80111e0 <_strtoul_l.constprop.0+0x5c>
 8011226:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801122a:	f1bc 0f19 	cmp.w	ip, #25
 801122e:	d804      	bhi.n	801123a <_strtoul_l.constprop.0+0xb6>
 8011230:	3c57      	subs	r4, #87	@ 0x57
 8011232:	e7d5      	b.n	80111e0 <_strtoul_l.constprop.0+0x5c>
 8011234:	f04f 36ff 	mov.w	r6, #4294967295
 8011238:	e7df      	b.n	80111fa <_strtoul_l.constprop.0+0x76>
 801123a:	1c73      	adds	r3, r6, #1
 801123c:	d106      	bne.n	801124c <_strtoul_l.constprop.0+0xc8>
 801123e:	2322      	movs	r3, #34	@ 0x22
 8011240:	f8ce 3000 	str.w	r3, [lr]
 8011244:	4630      	mov	r0, r6
 8011246:	b932      	cbnz	r2, 8011256 <_strtoul_l.constprop.0+0xd2>
 8011248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801124c:	b107      	cbz	r7, 8011250 <_strtoul_l.constprop.0+0xcc>
 801124e:	4240      	negs	r0, r0
 8011250:	2a00      	cmp	r2, #0
 8011252:	d0f9      	beq.n	8011248 <_strtoul_l.constprop.0+0xc4>
 8011254:	b106      	cbz	r6, 8011258 <_strtoul_l.constprop.0+0xd4>
 8011256:	1e69      	subs	r1, r5, #1
 8011258:	6011      	str	r1, [r2, #0]
 801125a:	e7f5      	b.n	8011248 <_strtoul_l.constprop.0+0xc4>
 801125c:	0801339c 	.word	0x0801339c

08011260 <_strtoul_r>:
 8011260:	f7ff bf90 	b.w	8011184 <_strtoul_l.constprop.0>

08011264 <_raise_r>:
 8011264:	291f      	cmp	r1, #31
 8011266:	b538      	push	{r3, r4, r5, lr}
 8011268:	4605      	mov	r5, r0
 801126a:	460c      	mov	r4, r1
 801126c:	d904      	bls.n	8011278 <_raise_r+0x14>
 801126e:	2316      	movs	r3, #22
 8011270:	6003      	str	r3, [r0, #0]
 8011272:	f04f 30ff 	mov.w	r0, #4294967295
 8011276:	bd38      	pop	{r3, r4, r5, pc}
 8011278:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801127a:	b112      	cbz	r2, 8011282 <_raise_r+0x1e>
 801127c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011280:	b94b      	cbnz	r3, 8011296 <_raise_r+0x32>
 8011282:	4628      	mov	r0, r5
 8011284:	f000 f830 	bl	80112e8 <_getpid_r>
 8011288:	4622      	mov	r2, r4
 801128a:	4601      	mov	r1, r0
 801128c:	4628      	mov	r0, r5
 801128e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011292:	f000 b817 	b.w	80112c4 <_kill_r>
 8011296:	2b01      	cmp	r3, #1
 8011298:	d00a      	beq.n	80112b0 <_raise_r+0x4c>
 801129a:	1c59      	adds	r1, r3, #1
 801129c:	d103      	bne.n	80112a6 <_raise_r+0x42>
 801129e:	2316      	movs	r3, #22
 80112a0:	6003      	str	r3, [r0, #0]
 80112a2:	2001      	movs	r0, #1
 80112a4:	e7e7      	b.n	8011276 <_raise_r+0x12>
 80112a6:	2100      	movs	r1, #0
 80112a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80112ac:	4620      	mov	r0, r4
 80112ae:	4798      	blx	r3
 80112b0:	2000      	movs	r0, #0
 80112b2:	e7e0      	b.n	8011276 <_raise_r+0x12>

080112b4 <raise>:
 80112b4:	4b02      	ldr	r3, [pc, #8]	@ (80112c0 <raise+0xc>)
 80112b6:	4601      	mov	r1, r0
 80112b8:	6818      	ldr	r0, [r3, #0]
 80112ba:	f7ff bfd3 	b.w	8011264 <_raise_r>
 80112be:	bf00      	nop
 80112c0:	20001240 	.word	0x20001240

080112c4 <_kill_r>:
 80112c4:	b538      	push	{r3, r4, r5, lr}
 80112c6:	4d07      	ldr	r5, [pc, #28]	@ (80112e4 <_kill_r+0x20>)
 80112c8:	2300      	movs	r3, #0
 80112ca:	4604      	mov	r4, r0
 80112cc:	4608      	mov	r0, r1
 80112ce:	4611      	mov	r1, r2
 80112d0:	602b      	str	r3, [r5, #0]
 80112d2:	f7f0 fafb 	bl	80018cc <_kill>
 80112d6:	1c43      	adds	r3, r0, #1
 80112d8:	d102      	bne.n	80112e0 <_kill_r+0x1c>
 80112da:	682b      	ldr	r3, [r5, #0]
 80112dc:	b103      	cbz	r3, 80112e0 <_kill_r+0x1c>
 80112de:	6023      	str	r3, [r4, #0]
 80112e0:	bd38      	pop	{r3, r4, r5, pc}
 80112e2:	bf00      	nop
 80112e4:	20002aec 	.word	0x20002aec

080112e8 <_getpid_r>:
 80112e8:	f7f0 bae8 	b.w	80018bc <_getpid>

080112ec <_malloc_usable_size_r>:
 80112ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112f0:	1f18      	subs	r0, r3, #4
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	bfbc      	itt	lt
 80112f6:	580b      	ldrlt	r3, [r1, r0]
 80112f8:	18c0      	addlt	r0, r0, r3
 80112fa:	4770      	bx	lr

080112fc <_init>:
 80112fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112fe:	bf00      	nop
 8011300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011302:	bc08      	pop	{r3}
 8011304:	469e      	mov	lr, r3
 8011306:	4770      	bx	lr

08011308 <_fini>:
 8011308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130a:	bf00      	nop
 801130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801130e:	bc08      	pop	{r3}
 8011310:	469e      	mov	lr, r3
 8011312:	4770      	bx	lr
