
ZEDtoSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08009438  08009438  0000a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bec  08009bec  0000b098  2**0
                  CONTENTS
  4 .ARM          00000008  08009bec  08009bec  0000abec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bf4  08009bf4  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf4  08009bf4  0000abf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bf8  08009bf8  0000abf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08009bfc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b098  2**0
                  CONTENTS
 10 .bss          0000160c  20000098  20000098  0000b098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200016a4  200016a4  0000b098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113ee  00000000  00000000  0000b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e93  00000000  00000000  0001c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  0001f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9f  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024249  00000000  00000000  00020e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a9c  00000000  00000000  00045070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc362  00000000  00000000  0005ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126e6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004810  00000000  00000000  00126eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0012b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009420 	.word	0x08009420

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08009420 	.word	0x08009420

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <GPS_uart>:
	}

}

// Get GPS Uart data here and process
void GPS_uart(uint8_t *GPS_Buf) { //UART 1 cuz it is connected to ZED's UART 1
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	6078      	str	r0, [r7, #4]
	if (loggingActive) {  // Check if logging is active
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <GPS_uart+0x48>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d016      	beq.n	8000d8a <GPS_uart+0x3e>
//		SD_Card_write(GPS_Buf);
//		  UBX_NAV_POSLLH_Parsing(&GPS_Buf[0], &posllh);
//		  UBX_NAV_TIMEUTC_Parsing(&GPS_Buf[0], &time);
		UBX_NAV_PVT_Parsing(&GPS_Buf[0], &nav);
 8000d5c:	490e      	ldr	r1, [pc, #56]	@ (8000d98 <GPS_uart+0x4c>)
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f870 	bl	8000e44 <UBX_NAV_PVT_Parsing>
//		  printf("iTOW:%u\ttAcc:%u\t year:%u\n",time.length,time.CLASS,time.ID);
		  printf("ID:%i\tTime of Week:%i\thours:%i\tminutes:%i\tsecs:%i\n",nav.ID,nav.iTOW,nav.hour,nav.minute,nav.sec);
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <GPS_uart+0x4c>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	461c      	mov	r4, r3
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <GPS_uart+0x4c>)
 8000d6c:	6859      	ldr	r1, [r3, #4]
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <GPS_uart+0x4c>)
 8000d70:	6958      	ldr	r0, [r3, #20]
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <GPS_uart+0x4c>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <GPS_uart+0x4c>)
 8000d78:	69d2      	ldr	r2, [r2, #28]
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460a      	mov	r2, r1
 8000d82:	4621      	mov	r1, r4
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <GPS_uart+0x50>)
 8000d86:	f007 fa83 	bl	8008290 <iprintf>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd90      	pop	{r4, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000002c 	.word	0x2000002c
 8000d98:	200000b4 	.word	0x200000b4
 8000d9c:	08009438 	.word	0x08009438

08000da0 <send_msg>:

void send_msg(char *config) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	@ 0x50
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef uart2 = GPS_UART_define(); //to get the uart handle initialized in main
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fc69 	bl	8001684 <GPS_UART_define>
	if (strstr(config, "NMEA")) {
 8000db2:	491c      	ldr	r1, [pc, #112]	@ (8000e24 <send_msg+0x84>)
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f007 fbea 	bl	800858e <strstr>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00b      	beq.n	8000dd8 <send_msg+0x38>
		HAL_UART_Transmit(&uart2, NMEA_enable, 28, HAL_MAX_DELAY);
 8000dc0:	f107 0008 	add.w	r0, r7, #8
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	221c      	movs	r2, #28
 8000dca:	4917      	ldr	r1, [pc, #92]	@ (8000e28 <send_msg+0x88>)
 8000dcc:	f003 fa80 	bl	80042d0 <HAL_UART_Transmit>
		printf("\r\n Starting NMEA \r\n*---------------*\r\n");
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <send_msg+0x8c>)
 8000dd2:	f007 fac5 	bl	8008360 <puts>
	} else if (strstr(config, "ZDpoll")) {
		HAL_UART_Transmit(&uart2, ZDpoll, 8, HAL_MAX_DELAY);
//		printf("\r\n ZDA Monitor \r\n*---------------*\r\n");

	}
}
 8000dd6:	e021      	b.n	8000e1c <send_msg+0x7c>
	} else if (strstr(config, "UBX")) {
 8000dd8:	4915      	ldr	r1, [pc, #84]	@ (8000e30 <send_msg+0x90>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f007 fbd7 	bl	800858e <strstr>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00b      	beq.n	8000dfe <send_msg+0x5e>
		HAL_UART_Transmit(&uart2, MON_message, 8, HAL_MAX_DELAY);
 8000de6:	f107 0008 	add.w	r0, r7, #8
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2208      	movs	r2, #8
 8000df0:	4910      	ldr	r1, [pc, #64]	@ (8000e34 <send_msg+0x94>)
 8000df2:	f003 fa6d 	bl	80042d0 <HAL_UART_Transmit>
		printf("\r\n Monitor \r\n*---------------*\r\n");
 8000df6:	4810      	ldr	r0, [pc, #64]	@ (8000e38 <send_msg+0x98>)
 8000df8:	f007 fab2 	bl	8008360 <puts>
}
 8000dfc:	e00e      	b.n	8000e1c <send_msg+0x7c>
	} else if (strstr(config, "ZDpoll")) {
 8000dfe:	490f      	ldr	r1, [pc, #60]	@ (8000e3c <send_msg+0x9c>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f007 fbc4 	bl	800858e <strstr>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <send_msg+0x7c>
		HAL_UART_Transmit(&uart2, ZDpoll, 8, HAL_MAX_DELAY);
 8000e0c:	f107 0008 	add.w	r0, r7, #8
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	2208      	movs	r2, #8
 8000e16:	490a      	ldr	r1, [pc, #40]	@ (8000e40 <send_msg+0xa0>)
 8000e18:	f003 fa5a 	bl	80042d0 <HAL_UART_Transmit>
}
 8000e1c:	bf00      	nop
 8000e1e:	3750      	adds	r7, #80	@ 0x50
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	0800946c 	.word	0x0800946c
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	08009474 	.word	0x08009474
 8000e30:	0800949c 	.word	0x0800949c
 8000e34:	20000000 	.word	0x20000000
 8000e38:	080094a0 	.word	0x080094a0
 8000e3c:	080094c0 	.word	0x080094c0
 8000e40:	20000024 	.word	0x20000024

08000e44 <UBX_NAV_PVT_Parsing>:
	time->minute=data[23];
	time->sec=data[24];
}

void UBX_NAV_PVT_Parsing(unsigned char *data, NAV_PVT *nav)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	nav->CLASS = data[2];
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	789a      	ldrb	r2, [r3, #2]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	701a      	strb	r2, [r3, #0]
	nav->ID = data[3];
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	78da      	ldrb	r2, [r3, #3]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	705a      	strb	r2, [r3, #1]
	nav->length = data[4] | data[5]<<8;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3304      	adds	r3, #4
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3305      	adds	r3, #5
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	805a      	strh	r2, [r3, #2]

	nav->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3306      	adds	r3, #6
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3307      	adds	r3, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3308      	adds	r3, #8
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	041b      	lsls	r3, r3, #16
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3309      	adds	r3, #9
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
	nav->year = data[10] | data[11]<<8;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	330a      	adds	r3, #10
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	330b      	adds	r3, #11
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	609a      	str	r2, [r3, #8]
	nav->month=data[12];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	330c      	adds	r3, #12
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	60da      	str	r2, [r3, #12]
	nav->day=data[13];
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	330d      	adds	r3, #13
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	611a      	str	r2, [r3, #16]
	nav->hour=data[14];
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	330e      	adds	r3, #14
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	615a      	str	r2, [r3, #20]
	nav->minute=data[15];
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	330f      	adds	r3, #15
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	619a      	str	r2, [r3, #24]
	nav->sec=data[16];
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3310      	adds	r3, #16
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	61da      	str	r2, [r3, #28]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SD_Card_Init>:
DWORD FreeClusters;
uint32_t TotalSize, FreeSpace;
char RW_Buffer[200];

void SD_Card_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    FR_Status = f_mount(&FatFs, SDPath, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	492d      	ldr	r1, [pc, #180]	@ (8000fc4 <SD_Card_Init+0xbc>)
 8000f10:	482d      	ldr	r0, [pc, #180]	@ (8000fc8 <SD_Card_Init+0xc0>)
 8000f12:	f006 fe07 	bl	8007b24 <f_mount>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <SD_Card_Init+0xc4>)
 8000f1c:	701a      	strb	r2, [r3, #0]
    if (FR_Status != FR_OK)
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <SD_Card_Init+0xc4>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <SD_Card_Init+0x2a>
    {
      printf("Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <SD_Card_Init+0xc4>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4828      	ldr	r0, [pc, #160]	@ (8000fd0 <SD_Card_Init+0xc8>)
 8000f2e:	f007 f9af 	bl	8008290 <iprintf>
    }
    printf("SD Card Mounted Successfully! \r\n\n");
 8000f32:	4828      	ldr	r0, [pc, #160]	@ (8000fd4 <SD_Card_Init+0xcc>)
 8000f34:	f007 fa14 	bl	8008360 <puts>
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000f38:	4a27      	ldr	r2, [pc, #156]	@ (8000fd8 <SD_Card_Init+0xd0>)
 8000f3a:	4928      	ldr	r1, [pc, #160]	@ (8000fdc <SD_Card_Init+0xd4>)
 8000f3c:	4828      	ldr	r0, [pc, #160]	@ (8000fe0 <SD_Card_Init+0xd8>)
 8000f3e:	f006 ff0d 	bl	8007d5c <f_getfree>
	TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <SD_Card_Init+0xd0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4a23      	ldr	r2, [pc, #140]	@ (8000fd8 <SD_Card_Init+0xd0>)
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	8952      	ldrh	r2, [r2, #10]
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fad5 	bl	8000504 <__aeabi_ui2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <SD_Card_Init+0xdc>)
 8000f60:	f7ff fb4a 	bl	80005f8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fd56 	bl	8000a1c <__aeabi_d2uiz>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <SD_Card_Init+0xe0>)
 8000f74:	6013      	str	r3, [r2, #0]
	FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <SD_Card_Init+0xd0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	895b      	ldrh	r3, [r3, #10]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <SD_Card_Init+0xd4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fabc 	bl	8000504 <__aeabi_ui2d>
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <SD_Card_Init+0xdc>)
 8000f92:	f7ff fb31 	bl	80005f8 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd3d 	bl	8000a1c <__aeabi_d2uiz>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <SD_Card_Init+0xe4>)
 8000fa6:	6013      	str	r3, [r2, #0]
	printf("Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <SD_Card_Init+0xe0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <SD_Card_Init+0xe8>)
 8000fb0:	f007 f96e 	bl	8008290 <iprintf>
	printf("Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <SD_Card_Init+0xe4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <SD_Card_Init+0xec>)
 8000fbc:	f007 f968 	bl	8008290 <iprintf>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20001320 	.word	0x20001320
 8000fc8:	200000d4 	.word	0x200000d4
 8000fcc:	2000110c 	.word	0x2000110c
 8000fd0:	080094c8 	.word	0x080094c8
 8000fd4:	080094fc 	.word	0x080094fc
 8000fd8:	20001110 	.word	0x20001110
 8000fdc:	20001114 	.word	0x20001114
 8000fe0:	08009520 	.word	0x08009520
 8000fe4:	3fe00000 	.word	0x3fe00000
 8000fe8:	20001118 	.word	0x20001118
 8000fec:	2000111c 	.word	0x2000111c
 8000ff0:	08009524 	.word	0x08009524
 8000ff4:	08009544 	.word	0x08009544

08000ff8 <list_dir>:

	  }
}

int list_dir (const char *path)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	f2ad 7d44 	subw	sp, sp, #1860	@ 0x744
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8001004:	f2a3 733c 	subw	r3, r3, #1852	@ 0x73c
 8001008:	6018      	str	r0, [r3, #0]
    FRESULT res;
    DIR dir;
    FILINFO fno;
    int nfile, ndir;
    char TxBuffer[1000] = {0}; // Initialize TxBuffer with null terminators to handle string concatenation.
 800100a:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 800100e:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	3304      	adds	r3, #4
 8001018:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f007 fa9e 	bl	8008560 <memset>

    res = f_opendir(&dir, path);  /* Open the directory */
 8001024:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8001028:	f2a3 733c 	subw	r3, r3, #1852	@ 0x73c
 800102c:	f507 62e0 	add.w	r2, r7, #1792	@ 0x700
 8001030:	6819      	ldr	r1, [r3, #0]
 8001032:	4610      	mov	r0, r2
 8001034:	f006 fdbc 	bl	8007bb0 <f_opendir>
 8001038:	4603      	mov	r3, r0
 800103a:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
    if (res == FR_OK) {
 800103e:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 8001042:	2b00      	cmp	r3, #0
 8001044:	d177      	bne.n	8001136 <list_dir+0x13e>
        nfile = ndir = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 800104c:	f8d7 3738 	ldr.w	r3, [r7, #1848]	@ 0x738
 8001050:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
        for (;;) {
            res = f_readdir(&dir, &fno);  /* Read a directory item */
 8001054:	f507 62bd 	add.w	r2, r7, #1512	@ 0x5e8
 8001058:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fe3f 	bl	8007ce2 <f_readdir>
 8001064:	4603      	mov	r3, r0
 8001066:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Error or end of dir */
 800106a:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 800106e:	2b00      	cmp	r3, #0
 8001070:	d14e      	bne.n	8001110 <list_dir+0x118>
 8001072:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8001076:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800107a:	7d9b      	ldrb	r3, [r3, #22]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d047      	beq.n	8001110 <list_dir+0x118>

            char entry[500];  // Buffer to hold the current entry (either directory or file)

            if (fno.fattrib & AM_DIR) {  /* Directory */
 8001080:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8001084:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001088:	7a1b      	ldrb	r3, [r3, #8]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00f      	beq.n	80010b2 <list_dir+0xba>
                sprintf(entry, "   <DIR>   %s\n", fno.fname);
 8001092:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8001096:	f103 0216 	add.w	r2, r3, #22
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4930      	ldr	r1, [pc, #192]	@ (8001160 <list_dir+0x168>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 f965 	bl	8008370 <siprintf>
                ndir++;
 80010a6:	f8d7 3738 	ldr.w	r3, [r7, #1848]	@ 0x738
 80010aa:	3301      	adds	r3, #1
 80010ac:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 80010b0:	e011      	b.n	80010d6 <list_dir+0xde>
            } else {  /* File */
                sprintf(entry, "%10lu %s\n", fno.fsize, fno.fname);
 80010b2:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 80010b6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 80010c0:	3316      	adds	r3, #22
 80010c2:	f107 000c 	add.w	r0, r7, #12
 80010c6:	4927      	ldr	r1, [pc, #156]	@ (8001164 <list_dir+0x16c>)
 80010c8:	f007 f952 	bl	8008370 <siprintf>
                nfile++;
 80010cc:	f8d7 373c 	ldr.w	r3, [r7, #1852]	@ 0x73c
 80010d0:	3301      	adds	r3, #1
 80010d2:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
            }

            // Ensure there is enough space in TxBuffer before concatenation
            if (strlen(TxBuffer) + strlen(entry) < sizeof(TxBuffer)) {
 80010d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f878 	bl	80001d0 <strlen>
 80010e0:	4604      	mov	r4, r0
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f872 	bl	80001d0 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4423      	add	r3, r4
 80010f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f4:	d208      	bcs.n	8001108 <list_dir+0x110>
                strcat(TxBuffer, entry);
 80010f6:	f107 020c 	add.w	r2, r7, #12
 80010fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f007 fa35 	bl	8008570 <strcat>
        for (;;) {
 8001106:	e7a5      	b.n	8001054 <list_dir+0x5c>
            } else {
                printf("Buffer overflow risk: TxBuffer size exceeded.\n");
 8001108:	4817      	ldr	r0, [pc, #92]	@ (8001168 <list_dir+0x170>)
 800110a:	f007 f929 	bl	8008360 <puts>
                break;
 800110e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001110:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8001114:	4618      	mov	r0, r3
 8001116:	f006 fdbe 	bl	8007c96 <f_closedir>
        printf("List in directory:\n%s", TxBuffer);
 800111a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800111e:	4619      	mov	r1, r3
 8001120:	4812      	ldr	r0, [pc, #72]	@ (800116c <list_dir+0x174>)
 8001122:	f007 f8b5 	bl	8008290 <iprintf>
        printf("%d dirs, %d files.\n", ndir, nfile);
 8001126:	f8d7 273c 	ldr.w	r2, [r7, #1852]	@ 0x73c
 800112a:	f8d7 1738 	ldr.w	r1, [r7, #1848]	@ 0x738
 800112e:	4810      	ldr	r0, [pc, #64]	@ (8001170 <list_dir+0x178>)
 8001130:	f007 f8ae 	bl	8008290 <iprintf>
 8001134:	e009      	b.n	800114a <list_dir+0x152>
    } else {
        printf("Failed to open \"%s\". (%u)\n", path, res);
 8001136:	f897 2737 	ldrb.w	r2, [r7, #1847]	@ 0x737
 800113a:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 800113e:	f2a3 733c 	subw	r3, r3, #1852	@ 0x73c
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <list_dir+0x17c>)
 8001146:	f007 f8a3 	bl	8008290 <iprintf>
    }
    return strlen(TxBuffer);
 800114a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f83e 	bl	80001d0 <strlen>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	f207 7744 	addw	r7, r7, #1860	@ 0x744
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	080095c8 	.word	0x080095c8
 8001164:	080095d8 	.word	0x080095d8
 8001168:	080095e4 	.word	0x080095e4
 800116c:	08009614 	.word	0x08009614
 8001170:	0800962c 	.word	0x0800962c
 8001174:	08009640 	.word	0x08009640

08001178 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <HAL_UART_RxCpltCallback+0x44>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d114      	bne.n	80011b4 <HAL_UART_RxCpltCallback+0x3c>
		memcpy(GPS_Buf, UART2_rxBuf, 100);
 800118a:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <HAL_UART_RxCpltCallback+0x48>)
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_UART_RxCpltCallback+0x4c>)
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	2364      	movs	r3, #100	@ 0x64
 8001194:	461a      	mov	r2, r3
 8001196:	f007 fa84 	bl	80086a2 <memcpy>
		/*Can make this faster by switching buffers every callback rather than copying */
		if (HAL_UART_Receive_DMA(&huart2, UART2_rxBuf, 100) != HAL_OK) {
 800119a:	2264      	movs	r2, #100	@ 0x64
 800119c:	4909      	ldr	r1, [pc, #36]	@ (80011c4 <HAL_UART_RxCpltCallback+0x4c>)
 800119e:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <HAL_UART_RxCpltCallback+0x50>)
 80011a0:	f003 f921 	bl	80043e6 <HAL_UART_Receive_DMA>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_RxCpltCallback+0x36>
			Error_Handler();
 80011aa:	f000 faa7 	bl	80016fc <Error_Handler>
		}
//		printf((char*)GPS_Buf);
		GPS_uart(GPS_Buf);
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <HAL_UART_RxCpltCallback+0x48>)
 80011b0:	f7ff fdcc 	bl	8000d4c <GPS_uart>
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40004400 	.word	0x40004400
 80011c0:	200012b0 	.word	0x200012b0
 80011c4:	2000124c 	.word	0x2000124c
 80011c8:	200011a4 	.word	0x200011a4

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0c0      	sub	sp, #256	@ 0x100
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f000 fcfd 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f82d 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f000 f8ff 	bl	80013dc <MX_GPIO_Init>
  MX_DMA_Init();
 80011de:	f000 f8dd 	bl	800139c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80011e2:	f000 f891 	bl	8001308 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 80011e6:	f000 f8af 	bl	8001348 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80011ea:	f004 fb65 	bl	80058b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SD_Card_Init();
 80011ee:	f7ff fe8b 	bl	8000f08 <SD_Card_Init>
  char basePath[MAX_PATH_LENGTH] = "/";
 80011f2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80011f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011fa:	222f      	movs	r2, #47	@ 0x2f
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	3304      	adds	r3, #4
 8001200:	22fc      	movs	r2, #252	@ 0xfc
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f007 f9ab 	bl	8008560 <memset>
  list_dir (basePath);
 800120a:	463b      	mov	r3, r7
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fef3 	bl	8000ff8 <list_dir>
//  char filename[100] = "MyTextFile.txt";
  if (HAL_UART_Receive_DMA(&huart2, UART2_rxBuf, 100) != HAL_OK) {
 8001212:	2264      	movs	r2, #100	@ 0x64
 8001214:	4905      	ldr	r1, [pc, #20]	@ (800122c <main+0x60>)
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <main+0x64>)
 8001218:	f003 f8e5 	bl	80043e6 <HAL_UART_Receive_DMA>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <main+0x5c>
		Error_Handler();
 8001222:	f000 fa6b 	bl	80016fc <Error_Handler>
//  toggle_Log();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <main+0x5c>
 800122c:	2000124c 	.word	0x2000124c
 8001230:	200011a4 	.word	0x200011a4

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	@ 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	@ 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f007 f98c 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	@ (8001300 <SystemClock_Config+0xcc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	@ 0x40
 8001268:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <SystemClock_Config+0xcc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <SystemClock_Config+0xd0>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <SystemClock_Config+0xd0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a4:	2308      	movs	r3, #8
 80012a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80012a8:	2332      	movs	r3, #50	@ 0x32
 80012aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012b0:	2307      	movs	r3, #7
 80012b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fb89 	bl	80029d0 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c4:	f000 fa1a 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fdea 	bl	8002ec0 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012f2:	f000 fa03 	bl	80016fc <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	@ 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_SDIO_SD_Init+0x38>)
 800130e:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <MX_SDIO_SD_Init+0x3c>)
 8001310:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_SDIO_SD_Init+0x38>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_SDIO_SD_Init+0x38>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_SDIO_SD_Init+0x38>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_SDIO_SD_Init+0x38>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <MX_SDIO_SD_Init+0x38>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <MX_SDIO_SD_Init+0x38>)
 8001332:	2202      	movs	r2, #2
 8001334:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20001120 	.word	0x20001120
 8001344:	40012c00 	.word	0x40012c00

08001348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <MX_USART2_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001354:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001380:	f002 ff56 	bl	8004230 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 f9b7 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200011a4 	.word	0x200011a4
 8001398:	40004400 	.word	0x40004400

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <MX_DMA_Init+0x3c>)
 80013ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_DMA_Init+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2010      	movs	r0, #16
 80013c4:	f000 fd75 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013c8:	2010      	movs	r0, #16
 80013ca:	f000 fd8e 	bl	8001eea <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	@ 0x30
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b9d      	ldr	r3, [pc, #628]	@ (800166c <MX_GPIO_Init+0x290>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a9c      	ldr	r2, [pc, #624]	@ (800166c <MX_GPIO_Init+0x290>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b9a      	ldr	r3, [pc, #616]	@ (800166c <MX_GPIO_Init+0x290>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b96      	ldr	r3, [pc, #600]	@ (800166c <MX_GPIO_Init+0x290>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a95      	ldr	r2, [pc, #596]	@ (800166c <MX_GPIO_Init+0x290>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b93      	ldr	r3, [pc, #588]	@ (800166c <MX_GPIO_Init+0x290>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b8f      	ldr	r3, [pc, #572]	@ (800166c <MX_GPIO_Init+0x290>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a8e      	ldr	r2, [pc, #568]	@ (800166c <MX_GPIO_Init+0x290>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b8c      	ldr	r3, [pc, #560]	@ (800166c <MX_GPIO_Init+0x290>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b88      	ldr	r3, [pc, #544]	@ (800166c <MX_GPIO_Init+0x290>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a87      	ldr	r2, [pc, #540]	@ (800166c <MX_GPIO_Init+0x290>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b85      	ldr	r3, [pc, #532]	@ (800166c <MX_GPIO_Init+0x290>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b81      	ldr	r3, [pc, #516]	@ (800166c <MX_GPIO_Init+0x290>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a80      	ldr	r2, [pc, #512]	@ (800166c <MX_GPIO_Init+0x290>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b7e      	ldr	r3, [pc, #504]	@ (800166c <MX_GPIO_Init+0x290>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b7a      	ldr	r3, [pc, #488]	@ (800166c <MX_GPIO_Init+0x290>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a79      	ldr	r2, [pc, #484]	@ (800166c <MX_GPIO_Init+0x290>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b77      	ldr	r3, [pc, #476]	@ (800166c <MX_GPIO_Init+0x290>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2108      	movs	r1, #8
 800149e:	4874      	ldr	r0, [pc, #464]	@ (8001670 <MX_GPIO_Init+0x294>)
 80014a0:	f001 fa4a 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2101      	movs	r1, #1
 80014a8:	4872      	ldr	r0, [pc, #456]	@ (8001674 <MX_GPIO_Init+0x298>)
 80014aa:	f001 fa45 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ae:	2200      	movs	r2, #0
 80014b0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80014b4:	4870      	ldr	r0, [pc, #448]	@ (8001678 <MX_GPIO_Init+0x29c>)
 80014b6:	f001 fa3f 	bl	8002938 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014ba:	2308      	movs	r3, #8
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4867      	ldr	r0, [pc, #412]	@ (8001670 <MX_GPIO_Init+0x294>)
 80014d2:	f001 f895 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4861      	ldr	r0, [pc, #388]	@ (8001674 <MX_GPIO_Init+0x298>)
 80014ee:	f001 f887 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014f2:	2308      	movs	r3, #8
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001502:	2305      	movs	r3, #5
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	4859      	ldr	r0, [pc, #356]	@ (8001674 <MX_GPIO_Init+0x298>)
 800150e:	f001 f877 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001516:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800151a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4855      	ldr	r0, [pc, #340]	@ (800167c <MX_GPIO_Init+0x2a0>)
 8001528:	f001 f86a 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800152c:	2310      	movs	r3, #16
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800153c:	2306      	movs	r3, #6
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	484d      	ldr	r0, [pc, #308]	@ (800167c <MX_GPIO_Init+0x2a0>)
 8001548:	f001 f85a 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800154c:	23e0      	movs	r3, #224	@ 0xe0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155c:	2305      	movs	r3, #5
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4845      	ldr	r0, [pc, #276]	@ (800167c <MX_GPIO_Init+0x2a0>)
 8001568:	f001 f84a 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800156c:	2304      	movs	r3, #4
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4840      	ldr	r0, [pc, #256]	@ (8001680 <MX_GPIO_Init+0x2a4>)
 8001580:	f001 f83e 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001596:	2305      	movs	r3, #5
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4837      	ldr	r0, [pc, #220]	@ (8001680 <MX_GPIO_Init+0x2a4>)
 80015a2:	f001 f82d 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015a6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	482e      	ldr	r0, [pc, #184]	@ (8001678 <MX_GPIO_Init+0x29c>)
 80015c0:	f001 f81e 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80015c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4828      	ldr	r0, [pc, #160]	@ (800167c <MX_GPIO_Init+0x2a0>)
 80015da:	f001 f811 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80015de:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015f0:	230a      	movs	r3, #10
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4820      	ldr	r0, [pc, #128]	@ (800167c <MX_GPIO_Init+0x2a0>)
 80015fc:	f001 f800 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001600:	2320      	movs	r3, #32
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4819      	ldr	r0, [pc, #100]	@ (8001678 <MX_GPIO_Init+0x29c>)
 8001614:	f000 fff4 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SCL_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin;
 8001618:	2340      	movs	r3, #64	@ 0x40
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001628:	2304      	movs	r3, #4
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4813      	ldr	r0, [pc, #76]	@ (8001680 <MX_GPIO_Init+0x2a4>)
 8001634:	f000 ffe4 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001638:	2302      	movs	r3, #2
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800163c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4808      	ldr	r0, [pc, #32]	@ (8001670 <MX_GPIO_Init+0x294>)
 800164e:	f000 ffd7 	bl	8002600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2006      	movs	r0, #6
 8001658:	f000 fc2b 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800165c:	2006      	movs	r0, #6
 800165e:	f000 fc44 	bl	8001eea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	@ 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40021000 	.word	0x40021000
 8001674:	40020800 	.word	0x40020800
 8001678:	40020c00 	.word	0x40020c00
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400

08001684 <GPS_UART_define>:

/* USER CODE BEGIN 4 */
UART_HandleTypeDef GPS_UART_define() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	return huart2;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <GPS_UART_define+0x20>)
 8001690:	4618      	mov	r0, r3
 8001692:	4611      	mov	r1, r2
 8001694:	2348      	movs	r3, #72	@ 0x48
 8001696:	461a      	mov	r2, r3
 8001698:	f007 f803 	bl	80086a2 <memcpy>
}
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200011a4 	.word	0x200011a4

080016a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b09c      	sub	sp, #112	@ 0x70
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
	char config[100] = "ZDpoll";
 80016b2:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	6810      	ldr	r0, [r2, #0]
 80016ba:	6018      	str	r0, [r3, #0]
 80016bc:	8891      	ldrh	r1, [r2, #4]
 80016be:	7992      	ldrb	r2, [r2, #6]
 80016c0:	8099      	strh	r1, [r3, #4]
 80016c2:	719a      	strb	r2, [r3, #6]
 80016c4:	f107 0313 	add.w	r3, r7, #19
 80016c8:	225d      	movs	r2, #93	@ 0x5d
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f006 ff47 	bl	8008560 <memset>
	if(GPIO_Pin==B1_Pin){
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d109      	bne.n	80016ec <HAL_GPIO_EXTI_Callback+0x44>
		HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 80016d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016dc:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80016de:	f001 f944 	bl	800296a <HAL_GPIO_TogglePin>
		send_msg(config);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb5a 	bl	8000da0 <send_msg>
	}
}
 80016ec:	bf00      	nop
 80016ee:	3770      	adds	r7, #112	@ 0x70
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	080096f4 	.word	0x080096f4
 80016f8:	40020c00 	.word	0x40020c00

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <Error_Handler+0x8>

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <HAL_MspInit+0x4c>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <HAL_MspInit+0x4c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x4c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_MspInit+0x4c>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_MspInit+0x4c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001746:	2007      	movs	r0, #7
 8001748:	f000 fba8 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a31      	ldr	r2, [pc, #196]	@ (800183c <HAL_SD_MspInit+0xe4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d15b      	bne.n	8001832 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a2f      	ldr	r2, [pc, #188]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 8001784:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a28      	ldr	r2, [pc, #160]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <HAL_SD_MspInit+0xe8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d8:	2301      	movs	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017e0:	230c      	movs	r3, #12
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4816      	ldr	r0, [pc, #88]	@ (8001844 <HAL_SD_MspInit+0xec>)
 80017ec:	f000 ff08 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001802:	230c      	movs	r3, #12
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480d      	ldr	r0, [pc, #52]	@ (8001844 <HAL_SD_MspInit+0xec>)
 800180e:	f000 fef7 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001812:	2304      	movs	r3, #4
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001822:	230c      	movs	r3, #12
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4806      	ldr	r0, [pc, #24]	@ (8001848 <HAL_SD_MspInit+0xf0>)
 800182e:	f000 fee7 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	@ 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40012c00 	.word	0x40012c00
 8001840:	40023800 	.word	0x40023800
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00

0800184c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a30      	ldr	r2, [pc, #192]	@ (800192c <HAL_UART_MspInit+0xe0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d159      	bne.n	8001922 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <HAL_UART_MspInit+0xe4>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a2e      	ldr	r2, [pc, #184]	@ (8001930 <HAL_UART_MspInit+0xe4>)
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <HAL_UART_MspInit+0xe4>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <HAL_UART_MspInit+0xe4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <HAL_UART_MspInit+0xe4>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_UART_MspInit+0xe4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018a6:	230c      	movs	r3, #12
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b6:	2307      	movs	r3, #7
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	481c      	ldr	r0, [pc, #112]	@ (8001934 <HAL_UART_MspInit+0xe8>)
 80018c2:	f000 fe9d 	bl	8002600 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018c8:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <HAL_UART_MspInit+0xf0>)
 80018ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_UART_MspInit+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <HAL_UART_MspInit+0xec>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001906:	480c      	ldr	r0, [pc, #48]	@ (8001938 <HAL_UART_MspInit+0xec>)
 8001908:	f000 fb0a 	bl	8001f20 <HAL_DMA_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001912:	f7ff fef3 	bl	80016fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_UART_MspInit+0xec>)
 800191a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800191c:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <HAL_UART_MspInit+0xec>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40004400 	.word	0x40004400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	200011ec 	.word	0x200011ec
 800193c:	40026088 	.word	0x40026088

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <NMI_Handler+0x4>

08001948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <MemManage_Handler+0x4>

08001958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <UsageFault_Handler+0x4>

08001968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001996:	f000 f96d 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}

0800199e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 fffc 	bl	80029a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <DMA1_Stream5_IRQHandler+0x10>)
 80019b2:	f000 fbbb 	bl	800212c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200011ec 	.word	0x200011ec

080019c0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <ITM_SendChar+0x48>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <ITM_SendChar+0x48>)
 80019d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <ITM_SendChar+0x4c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <ITM_SendChar+0x4c>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80019e2:	bf00      	nop
 80019e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f8      	beq.n	80019e4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80019f2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	6013      	str	r3, [r2, #0]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000edfc 	.word	0xe000edfc
 8001a0c:	e0000e00 	.word	0xe0000e00

08001a10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
  }

  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e009      	b.n	8001a70 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ffab 	bl	80019c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf1      	blt.n	8001a5c <_write+0x12>
  }
  return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aaa:	605a      	str	r2, [r3, #4]
  return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_isatty>:

int _isatty(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f006 fd94 	bl	8008648 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20020000 	.word	0x20020000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	20001314 	.word	0x20001314
 8001b54:	200016a8 	.word	0x200016a8

08001b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b80:	f7ff ffea 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	@ (8001bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001baa:	f006 fd53 	bl	8008654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7ff fb0d 	bl	80011cc <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001bc0:	08009bfc 	.word	0x08009bfc
  ldr r2, =_sbss
 8001bc4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001bc8:	200016a4 	.word	0x200016a4

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>
	...

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <HAL_Init+0x40>)
 8001bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <HAL_Init+0x40>)
 8001be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_Init+0x40>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f94f 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fd80 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f967 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f92f 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	@ (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000030 	.word	0x20000030
 8001c6c:	20000038 	.word	0x20000038
 8001c70:	20000034 	.word	0x20000034

08001c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000038 	.word	0x20000038
 8001c98:	20001318 	.word	0x20001318

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20001318 	.word	0x20001318

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff ffee 	bl	8001c9c <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_Delay+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000038 	.word	0x20000038

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	@ (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	@ (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff feb6 	bl	8001c9c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e099      	b.n	8002070 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5c:	e00f      	b.n	8001f7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f5e:	f7ff fe9d 	bl	8001c9c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d908      	bls.n	8001f7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2203      	movs	r2, #3
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e078      	b.n	8002070 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e8      	bne.n	8001f5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <HAL_DMA_Init+0x158>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d107      	bne.n	8001fe8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f023 0307 	bic.w	r3, r3, #7
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	2b04      	cmp	r3, #4
 8002010:	d117      	bne.n	8002042 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fa6f 	bl	8002508 <DMA_CheckFifoParam>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2240      	movs	r2, #64	@ 0x40
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800203e:	2301      	movs	r3, #1
 8002040:	e016      	b.n	8002070 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa26 	bl	800249c <DMA_CalcBaseAndBitshift>
 8002050:	4603      	mov	r3, r0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002058:	223f      	movs	r2, #63	@ 0x3f
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	f010803f 	.word	0xf010803f

0800207c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_DMA_Start_IT+0x26>
 800209e:	2302      	movs	r3, #2
 80020a0:	e040      	b.n	8002124 <HAL_DMA_Start_IT+0xa8>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d12f      	bne.n	8002116 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f9b8 	bl	8002440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	223f      	movs	r2, #63	@ 0x3f
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0216 	orr.w	r2, r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e005      	b.n	8002122 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800211e:	2302      	movs	r3, #2
 8002120:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002122:	7dfb      	ldrb	r3, [r7, #23]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002138:	4b8e      	ldr	r3, [pc, #568]	@ (8002374 <HAL_DMA_IRQHandler+0x248>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a8e      	ldr	r2, [pc, #568]	@ (8002378 <HAL_DMA_IRQHandler+0x24c>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0a9b      	lsrs	r3, r3, #10
 8002144:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002156:	2208      	movs	r2, #8
 8002158:	409a      	lsls	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01a      	beq.n	8002198 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0204 	bic.w	r2, r2, #4
 800217e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002184:	2208      	movs	r2, #8
 8002186:	409a      	lsls	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	2201      	movs	r2, #1
 800219e:	409a      	lsls	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ba:	2201      	movs	r2, #1
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	2204      	movs	r2, #4
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2204      	movs	r2, #4
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	2210      	movs	r2, #16
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d043      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03c      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	2210      	movs	r2, #16
 8002228:	409a      	lsls	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d024      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
 800225a:	e01f      	b.n	800229c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01b      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
 800226c:	e016      	b.n	800229c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0208 	bic.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a0:	2220      	movs	r2, #32
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 808f 	beq.w	80023cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8087 	beq.w	80023cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	2220      	movs	r2, #32
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d136      	bne.n	8002344 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0216 	bic.w	r2, r2, #22
 80022e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_DMA_IRQHandler+0x1da>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0208 	bic.w	r2, r2, #8
 8002314:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231a:	223f      	movs	r2, #63	@ 0x3f
 800231c:	409a      	lsls	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002336:	2b00      	cmp	r3, #0
 8002338:	d07e      	beq.n	8002438 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
        }
        return;
 8002342:	e079      	b.n	8002438 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01d      	beq.n	800238e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002364:	2b00      	cmp	r3, #0
 8002366:	d031      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
 8002370:	e02c      	b.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
 8002372:	bf00      	nop
 8002374:	20000030 	.word	0x20000030
 8002378:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d023      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e01e      	b.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10f      	bne.n	80023bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0210 	bic.w	r2, r2, #16
 80023aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d032      	beq.n	800243a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d022      	beq.n	8002426 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2205      	movs	r2, #5
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3301      	adds	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d307      	bcc.n	8002414 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f2      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x2cc>
 8002412:	e000      	b.n	8002416 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002414:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
 8002436:	e000      	b.n	800243a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002438:	bf00      	nop
    }
  }
}
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800245c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b40      	cmp	r3, #64	@ 0x40
 800246c:	d108      	bne.n	8002480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800247e:	e007      	b.n	8002490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3b10      	subs	r3, #16
 80024ac:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <DMA_CalcBaseAndBitshift+0x64>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024b6:	4a13      	ldr	r2, [pc, #76]	@ (8002504 <DMA_CalcBaseAndBitshift+0x68>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d909      	bls.n	80024de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	@ 0x58
 80024dc:	e007      	b.n	80024ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	aaaaaaab 	.word	0xaaaaaaab
 8002504:	0800975c 	.word	0x0800975c

08002508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11f      	bne.n	8002562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d856      	bhi.n	80025d6 <DMA_CheckFifoParam+0xce>
 8002528:	a201      	add	r2, pc, #4	@ (adr r2, 8002530 <DMA_CheckFifoParam+0x28>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	08002553 	.word	0x08002553
 8002538:	08002541 	.word	0x08002541
 800253c:	080025d7 	.word	0x080025d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d046      	beq.n	80025da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e043      	b.n	80025da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800255a:	d140      	bne.n	80025de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e03d      	b.n	80025de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800256a:	d121      	bne.n	80025b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d837      	bhi.n	80025e2 <DMA_CheckFifoParam+0xda>
 8002572:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <DMA_CheckFifoParam+0x70>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	08002589 	.word	0x08002589
 800257c:	0800258f 	.word	0x0800258f
 8002580:	08002589 	.word	0x08002589
 8002584:	080025a1 	.word	0x080025a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e030      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d025      	beq.n	80025e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259e:	e022      	b.n	80025e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025a8:	d11f      	bne.n	80025ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ae:	e01c      	b.n	80025ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d903      	bls.n	80025be <DMA_CheckFifoParam+0xb6>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d003      	beq.n	80025c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025bc:	e018      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      break;
 80025c2:	e015      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      break;
 80025d4:	e00b      	b.n	80025ee <DMA_CheckFifoParam+0xe6>
      break;
 80025d6:	bf00      	nop
 80025d8:	e00a      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e008      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e006      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e004      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
    }
  } 
  
  return status; 
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e16b      	b.n	80028f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 815a 	bne.w	80028ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80b4 	beq.w	80028ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b60      	ldr	r3, [pc, #384]	@ (800290c <HAL_GPIO_Init+0x30c>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	4a5f      	ldr	r2, [pc, #380]	@ (800290c <HAL_GPIO_Init+0x30c>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002794:	6453      	str	r3, [r2, #68]	@ 0x44
 8002796:	4b5d      	ldr	r3, [pc, #372]	@ (800290c <HAL_GPIO_Init+0x30c>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002910 <HAL_GPIO_Init+0x310>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a52      	ldr	r2, [pc, #328]	@ (8002914 <HAL_GPIO_Init+0x314>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02b      	beq.n	8002826 <HAL_GPIO_Init+0x226>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a51      	ldr	r2, [pc, #324]	@ (8002918 <HAL_GPIO_Init+0x318>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d025      	beq.n	8002822 <HAL_GPIO_Init+0x222>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a50      	ldr	r2, [pc, #320]	@ (800291c <HAL_GPIO_Init+0x31c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01f      	beq.n	800281e <HAL_GPIO_Init+0x21e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002920 <HAL_GPIO_Init+0x320>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x21a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002924 <HAL_GPIO_Init+0x324>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x216>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002928 <HAL_GPIO_Init+0x328>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x212>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	@ (800292c <HAL_GPIO_Init+0x32c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4b      	ldr	r2, [pc, #300]	@ (8002930 <HAL_GPIO_Init+0x330>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x20a>
 8002806:	2307      	movs	r3, #7
 8002808:	e00e      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800280a:	2308      	movs	r3, #8
 800280c:	e00c      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800280e:	2306      	movs	r3, #6
 8002810:	e00a      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002812:	2305      	movs	r3, #5
 8002814:	e008      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002816:	2304      	movs	r3, #4
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800281a:	2303      	movs	r3, #3
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002826:	2300      	movs	r3, #0
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002838:	4935      	ldr	r1, [pc, #212]	@ (8002910 <HAL_GPIO_Init+0x310>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b3b      	ldr	r3, [pc, #236]	@ (8002934 <HAL_GPIO_Init+0x334>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286a:	4a32      	ldr	r2, [pc, #200]	@ (8002934 <HAL_GPIO_Init+0x334>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002870:	4b30      	ldr	r3, [pc, #192]	@ (8002934 <HAL_GPIO_Init+0x334>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002894:	4a27      	ldr	r2, [pc, #156]	@ (8002934 <HAL_GPIO_Init+0x334>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289a:	4b26      	ldr	r3, [pc, #152]	@ (8002934 <HAL_GPIO_Init+0x334>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028be:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <HAL_GPIO_Init+0x334>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <HAL_GPIO_Init+0x334>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e8:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <HAL_GPIO_Init+0x334>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	f67f ae90 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3724      	adds	r7, #36	@ 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40013800 	.word	0x40013800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40021400 	.word	0x40021400
 800292c:	40021800 	.word	0x40021800
 8002930:	40021c00 	.word	0x40021c00
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
 8002944:	4613      	mov	r3, r2
 8002946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002948:	787b      	ldrb	r3, [r7, #1]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002954:	e003      	b.n	800295e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	041a      	lsls	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800297c:	887a      	ldrh	r2, [r7, #2]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	041a      	lsls	r2, r3, #16
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43d9      	mvns	r1, r3
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	400b      	ands	r3, r1
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029aa:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029b6:	4a05      	ldr	r2, [pc, #20]	@ (80029cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fe72 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e267      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d075      	beq.n	8002ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ee:	4b88      	ldr	r3, [pc, #544]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d00c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4b85      	ldr	r3, [pc, #532]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d112      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a06:	4b82      	ldr	r3, [pc, #520]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	4b7e      	ldr	r3, [pc, #504]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05b      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x108>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d157      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e242      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x74>
 8002a36:	4b76      	ldr	r3, [pc, #472]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x98>
 8002a4e:	4b70      	ldr	r3, [pc, #448]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6f      	ldr	r2, [pc, #444]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a68:	4b69      	ldr	r3, [pc, #420]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a68      	ldr	r2, [pc, #416]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a65      	ldr	r2, [pc, #404]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff f908 	bl	8001c9c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f904 	bl	8001c9c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e207      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xc0>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f8f4 	bl	8001c9c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff f8f0 	bl	8001c9c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1f3      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b51      	ldr	r3, [pc, #324]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xe8>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b44      	ldr	r3, [pc, #272]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1c7      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4937      	ldr	r1, [pc, #220]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <HAL_RCC_OscConfig+0x244>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7ff f8a9 	bl	8001c9c <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7ff f8a5 	bl	8001c9c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1a8      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2b      	ldr	r3, [pc, #172]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4925      	ldr	r1, [pc, #148]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <HAL_RCC_OscConfig+0x244>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7ff f888 	bl	8001c9c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7ff f884 	bl	8001c9c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e187      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d036      	beq.n	8002c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCC_OscConfig+0x248>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7ff f868 	bl	8001c9c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7ff f864 	bl	8001c9c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e167      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x200>
 8002bee:	e01b      	b.n	8002c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_OscConfig+0x248>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f851 	bl	8001c9c <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	e00e      	b.n	8002c1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7ff f84d 	bl	8001c9c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d907      	bls.n	8002c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e150      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470000 	.word	0x42470000
 8002c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b88      	ldr	r3, [pc, #544]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ea      	bne.n	8002bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8097 	beq.w	8002d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b81      	ldr	r3, [pc, #516]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c56:	4b7a      	ldr	r3, [pc, #488]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b77      	ldr	r3, [pc, #476]	@ (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b74      	ldr	r3, [pc, #464]	@ (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a73      	ldr	r2, [pc, #460]	@ (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff f80d 	bl	8001c9c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7ff f809 	bl	8001c9c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e10c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b6a      	ldr	r3, [pc, #424]	@ (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x2ea>
 8002cac:	4b64      	ldr	r3, [pc, #400]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	4a63      	ldr	r2, [pc, #396]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x324>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x30c>
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cce:	4b5c      	ldr	r3, [pc, #368]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x324>
 8002cdc:	4b58      	ldr	r3, [pc, #352]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a57      	ldr	r2, [pc, #348]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce8:	4b55      	ldr	r3, [pc, #340]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a54      	ldr	r2, [pc, #336]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe ffce 	bl	8001c9c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe ffca 	bl	8001c9c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0cb      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	4b49      	ldr	r3, [pc, #292]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ee      	beq.n	8002d04 <HAL_RCC_OscConfig+0x334>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fe ffb8 	bl	8001c9c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe ffb4 	bl	8001c9c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0b5      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	4b3e      	ldr	r3, [pc, #248]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ee      	bne.n	8002d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	4a38      	ldr	r2, [pc, #224]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a1 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6e:	4b34      	ldr	r3, [pc, #208]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d05c      	beq.n	8002e34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d141      	bne.n	8002e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b31      	ldr	r3, [pc, #196]	@ (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe ff88 	bl	8001c9c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe ff84 	bl	8001c9c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e087      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b27      	ldr	r3, [pc, #156]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	491b      	ldr	r1, [pc, #108]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe ff5d 	bl	8001c9c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe ff59 	bl	8001c9c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e05c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x416>
 8002e04:	e054      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe ff46 	bl	8001c9c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe ff42 	bl	8001c9c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e045      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x444>
 8002e32:	e03d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e038      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <HAL_RCC_OscConfig+0x4ec>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d028      	beq.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d121      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d11a      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	3b01      	subs	r3, #1
 8002e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cc      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b68      	ldr	r3, [pc, #416]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d90c      	bls.n	8002efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b65      	ldr	r3, [pc, #404]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b8      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f14:	4b59      	ldr	r3, [pc, #356]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a58      	ldr	r2, [pc, #352]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f2c:	4b53      	ldr	r3, [pc, #332]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b50      	ldr	r3, [pc, #320]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	494d      	ldr	r1, [pc, #308]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d044      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d119      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e067      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b37      	ldr	r3, [pc, #220]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4934      	ldr	r1, [pc, #208]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fe fe74 	bl	8001c9c <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fe fe70 	bl	8001c9c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b2b      	ldr	r3, [pc, #172]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b25      	ldr	r3, [pc, #148]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d20c      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b22      	ldr	r3, [pc, #136]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e032      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4916      	ldr	r1, [pc, #88]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003032:	4b12      	ldr	r3, [pc, #72]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	490e      	ldr	r1, [pc, #56]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003046:	f000 f821 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fdd4 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00
 800307c:	40023800 	.word	0x40023800
 8003080:	08009744 	.word	0x08009744
 8003084:	20000030 	.word	0x20000030
 8003088:	20000034 	.word	0x20000034

0800308c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b094      	sub	sp, #80	@ 0x50
 8003092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	647b      	str	r3, [r7, #68]	@ 0x44
 8003098:	2300      	movs	r3, #0
 800309a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800309c:	2300      	movs	r3, #0
 800309e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a4:	4b79      	ldr	r3, [pc, #484]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d00d      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x40>
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	f200 80e1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030be:	e0db      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b73      	ldr	r3, [pc, #460]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80030c4:	e0db      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c6:	4b73      	ldr	r3, [pc, #460]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ca:	e0d8      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030cc:	4b6f      	ldr	r3, [pc, #444]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d6:	4b6d      	ldr	r3, [pc, #436]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	0159      	lsls	r1, r3, #5
 800310c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003110:	0150      	lsls	r0, r2, #5
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4621      	mov	r1, r4
 8003118:	1a51      	subs	r1, r2, r1
 800311a:	6139      	str	r1, [r7, #16]
 800311c:	4629      	mov	r1, r5
 800311e:	eb63 0301 	sbc.w	r3, r3, r1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003130:	4659      	mov	r1, fp
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313a:	4651      	mov	r1, sl
 800313c:	018a      	lsls	r2, r1, #6
 800313e:	4651      	mov	r1, sl
 8003140:	ebb2 0801 	subs.w	r8, r2, r1
 8003144:	4659      	mov	r1, fp
 8003146:	eb63 0901 	sbc.w	r9, r3, r1
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800315a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315e:	4690      	mov	r8, r2
 8003160:	4699      	mov	r9, r3
 8003162:	4623      	mov	r3, r4
 8003164:	eb18 0303 	adds.w	r3, r8, r3
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	462b      	mov	r3, r5
 800316c:	eb49 0303 	adc.w	r3, r9, r3
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317e:	4629      	mov	r1, r5
 8003180:	024b      	lsls	r3, r1, #9
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003188:	4621      	mov	r1, r4
 800318a:	024a      	lsls	r2, r1, #9
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800319c:	f7fd fc5e 	bl	8000a5c <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a8:	e058      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	2200      	movs	r2, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	4611      	mov	r1, r2
 80031b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	f04f 0000 	mov.w	r0, #0
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	0159      	lsls	r1, r3, #5
 80031d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d6:	0150      	lsls	r0, r2, #5
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4641      	mov	r1, r8
 80031de:	ebb2 0a01 	subs.w	sl, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003200:	eb63 050b 	sbc.w	r5, r3, fp
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	00eb      	lsls	r3, r5, #3
 800320e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	4614      	mov	r4, r2
 8003216:	461d      	mov	r5, r3
 8003218:	4643      	mov	r3, r8
 800321a:	18e3      	adds	r3, r4, r3
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	464b      	mov	r3, r9
 8003220:	eb45 0303 	adc.w	r3, r5, r3
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003246:	2200      	movs	r2, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	61fa      	str	r2, [r7, #28]
 800324c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003250:	f7fd fc04 	bl	8000a5c <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800326c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800326e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 800327a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003280:	4618      	mov	r0, r3
 8003282:	3750      	adds	r7, #80	@ 0x50
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00f42400 	.word	0x00f42400
 8003294:	007a1200 	.word	0x007a1200

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000030 	.word	0x20000030

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08009754 	.word	0x08009754

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08009754 	.word	0x08009754

08003300 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e022      	b.n	8003358 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d105      	bne.n	800332a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fe fa17 	bl	8001758 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2203      	movs	r2, #3
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f814 	bl	8003360 <HAL_SD_InitCard>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e00a      	b.n	8003358 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b08e      	sub	sp, #56	@ 0x38
 8003364:	af04      	add	r7, sp, #16
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800337c:	2376      	movs	r3, #118	@ 0x76
 800337e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681d      	ldr	r5, [r3, #0]
 8003384:	466c      	mov	r4, sp
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800338e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003392:	f107 0308 	add.w	r3, r7, #8
 8003396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003398:	4628      	mov	r0, r5
 800339a:	f001 fd5b 	bl	8004e54 <SDIO_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80033a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e04f      	b.n	8003450 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80033b0:	4b29      	ldr	r3, [pc, #164]	@ (8003458 <HAL_SD_InitCard+0xf8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fd93 	bl	8004ee6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80033c0:	4b25      	ldr	r3, [pc, #148]	@ (8003458 <HAL_SD_InitCard+0xf8>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80033c6:	2002      	movs	r0, #2
 80033c8:	f7fe fc74 	bl	8001cb4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fe79 	bl	80040c4 <SD_PowerON>
 80033d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02e      	b.n	8003450 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fd98 	bl	8003f28 <SD_InitCard>
 80033f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e01b      	b.n	8003450 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fdf2 	bl	800500a <SDMMC_CmdBlockLength>
 8003426:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00f      	beq.n	800344e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a0a      	ldr	r2, [pc, #40]	@ (800345c <HAL_SD_InitCard+0xfc>)
 8003434:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3728      	adds	r7, #40	@ 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bdb0      	pop	{r4, r5, r7, pc}
 8003458:	422580a0 	.word	0x422580a0
 800345c:	004005ff 	.word	0x004005ff

08003460 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b092      	sub	sp, #72	@ 0x48
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800346e:	f7fe fc15 	bl	8001c9c <HAL_GetTick>
 8003472:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d107      	bne.n	8003492 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e1c5      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 81b8 	bne.w	8003810 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80034a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	441a      	add	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d907      	bls.n	80034c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e1ac      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2203      	movs	r2, #3
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d002      	beq.n	80034e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	025b      	lsls	r3, r3, #9
 80034e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	025b      	lsls	r3, r3, #9
 80034ec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80034ee:	2390      	movs	r3, #144	@ 0x90
 80034f0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80034f2:	2302      	movs	r3, #2
 80034f4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80034fa:	2301      	movs	r3, #1
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f107 0214 	add.w	r2, r7, #20
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fd52 	bl	8004fb2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d90a      	bls.n	800352a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2202      	movs	r2, #2
 8003518:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fdb6 	bl	8005092 <SDMMC_CmdReadMultiBlock>
 8003526:	6478      	str	r0, [r7, #68]	@ 0x44
 8003528:	e009      	b.n	800353e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fd89 	bl	800504e <SDMMC_CmdReadSingleBlock>
 800353c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800353e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a7e      	ldr	r2, [pc, #504]	@ (8003744 <HAL_SD_ReadBlocks+0x2e4>)
 800354a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e159      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800356e:	e061      	b.n	8003634 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03c      	beq.n	80035f8 <HAL_SD_ReadBlocks+0x198>
 800357e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d039      	beq.n	80035f8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003584:	2300      	movs	r3, #0
 8003586:	643b      	str	r3, [r7, #64]	@ 0x40
 8003588:	e033      	b.n	80035f2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fc8b 	bl	8004eaa <SDIO_ReadFIFO>
 8003594:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	b2da      	uxtb	r2, r3
 800359a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800359e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a0:	3301      	adds	r3, #1
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80035a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a6:	3b01      	subs	r3, #1
 80035a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b6:	3301      	adds	r3, #1
 80035b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80035ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035bc:	3b01      	subs	r3, #1
 80035be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035cc:	3301      	adds	r3, #1
 80035ce:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80035d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d2:	3b01      	subs	r3, #1
 80035d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d8:	0e1b      	lsrs	r3, r3, #24
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e2:	3301      	adds	r3, #1
 80035e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	3b01      	subs	r3, #1
 80035ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	3301      	adds	r3, #1
 80035f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	d9c8      	bls.n	800358a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035f8:	f7fe fb50 	bl	8001c9c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003604:	429a      	cmp	r2, r3
 8003606:	d902      	bls.n	800360e <HAL_SD_ReadBlocks+0x1ae>
 8003608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360a:	2b00      	cmp	r3, #0
 800360c:	d112      	bne.n	8003634 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4c      	ldr	r2, [pc, #304]	@ (8003744 <HAL_SD_ReadBlocks+0x2e4>)
 8003614:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0f4      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800363a:	f240 332a 	movw	r3, #810	@ 0x32a
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d095      	beq.n	8003570 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d022      	beq.n	8003698 <HAL_SD_ReadBlocks+0x238>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d91f      	bls.n	8003698 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365c:	2b03      	cmp	r3, #3
 800365e:	d01b      	beq.n	8003698 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f001 fd7b 	bl	8005160 <SDMMC_CmdStopTransfer>
 800366a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800366c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a33      	ldr	r2, [pc, #204]	@ (8003744 <HAL_SD_ReadBlocks+0x2e4>)
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800367e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0c2      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_SD_ReadBlocks+0x254>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d012      	beq.n	80036da <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <HAL_SD_ReadBlocks+0x2e4>)
 80036ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	f043 0208 	orr.w	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0a1      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d012      	beq.n	800370e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a15      	ldr	r2, [pc, #84]	@ (8003744 <HAL_SD_ReadBlocks+0x2e4>)
 80036ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	f043 0202 	orr.w	r2, r3, #2
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e087      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d064      	beq.n	80037e6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a08      	ldr	r2, [pc, #32]	@ (8003744 <HAL_SD_ReadBlocks+0x2e4>)
 8003722:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06d      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
 8003742:	bf00      	nop
 8003744:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fbac 	bl	8004eaa <SDIO_ReadFIFO>
 8003752:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	b2da      	uxtb	r2, r3
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800375c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375e:	3301      	adds	r3, #1
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003764:	3b01      	subs	r3, #1
 8003766:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	b2da      	uxtb	r2, r3
 800376e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003770:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003774:	3301      	adds	r3, #1
 8003776:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377a:	3b01      	subs	r3, #1
 800377c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800377e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	b2da      	uxtb	r2, r3
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	3301      	adds	r3, #1
 800378c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800378e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003790:	3b01      	subs	r3, #1
 8003792:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003796:	0e1b      	lsrs	r3, r3, #24
 8003798:	b2da      	uxtb	r2, r3
 800379a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800379e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a0:	3301      	adds	r3, #1
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80037a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a6:	3b01      	subs	r3, #1
 80037a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80037aa:	f7fe fa77 	bl	8001c9c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d902      	bls.n	80037c0 <HAL_SD_ReadBlocks+0x360>
 80037ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d112      	bne.n	80037e6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a18      	ldr	r2, [pc, #96]	@ (8003828 <HAL_SD_ReadBlocks+0x3c8>)
 80037c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e01b      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_SD_ReadBlocks+0x39a>
 80037f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1a6      	bne.n	8003748 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003802:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e006      	b.n	800381e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3748      	adds	r7, #72	@ 0x48
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	004005ff 	.word	0x004005ff

0800382c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b092      	sub	sp, #72	@ 0x48
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800383a:	f7fe fa2f 	bl	8001c9c <HAL_GetTick>
 800383e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003852:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e16d      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 8160 	bne.w	8003b2c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	441a      	add	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387c:	429a      	cmp	r2, r3
 800387e:	d907      	bls.n	8003890 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e154      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2203      	movs	r2, #3
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	025b      	lsls	r3, r3, #9
 80038ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	025b      	lsls	r3, r3, #9
 80038b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80038ba:	2390      	movs	r3, #144	@ 0x90
 80038bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f107 0218 	add.w	r2, r7, #24
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fb6c 	bl	8004fb2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d90a      	bls.n	80038f6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fc14 	bl	800511a <SDMMC_CmdWriteMultiBlock>
 80038f2:	6478      	str	r0, [r7, #68]	@ 0x44
 80038f4:	e009      	b.n	800390a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2210      	movs	r2, #16
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fbe7 	bl	80050d6 <SDMMC_CmdWriteSingleBlock>
 8003908:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800390a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390c:	2b00      	cmp	r3, #0
 800390e:	d012      	beq.n	8003936 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a8b      	ldr	r2, [pc, #556]	@ (8003b44 <HAL_SD_WriteBlocks+0x318>)
 8003916:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800391c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800391e:	431a      	orrs	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e101      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800393a:	e065      	b.n	8003a08 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d040      	beq.n	80039cc <HAL_SD_WriteBlocks+0x1a0>
 800394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03d      	beq.n	80039cc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003950:	2300      	movs	r3, #0
 8003952:	643b      	str	r3, [r7, #64]	@ 0x40
 8003954:	e037      	b.n	80039c6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	3301      	adds	r3, #1
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003964:	3b01      	subs	r3, #1
 8003966:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	021a      	lsls	r2, r3, #8
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003976:	3301      	adds	r3, #1
 8003978:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800397a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397c:	3b01      	subs	r3, #1
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	041a      	lsls	r2, r3, #16
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	3301      	adds	r3, #1
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003994:	3b01      	subs	r3, #1
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	061a      	lsls	r2, r3, #24
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	3301      	adds	r3, #1
 80039a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80039aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ac:	3b01      	subs	r3, #1
 80039ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f107 0214 	add.w	r2, r7, #20
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fa82 	bl	8004ec4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80039c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c2:	3301      	adds	r3, #1
 80039c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	d9c4      	bls.n	8003956 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80039cc:	f7fe f966 	bl	8001c9c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80039d8:	429a      	cmp	r2, r3
 80039da:	d902      	bls.n	80039e2 <HAL_SD_WriteBlocks+0x1b6>
 80039dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d112      	bne.n	8003a08 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a57      	ldr	r2, [pc, #348]	@ (8003b44 <HAL_SD_WriteBlocks+0x318>)
 80039e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e098      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a0e:	f240 331a 	movw	r3, #794	@ 0x31a
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d091      	beq.n	800393c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d022      	beq.n	8003a6c <HAL_SD_WriteBlocks+0x240>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d91f      	bls.n	8003a6c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d01b      	beq.n	8003a6c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fb91 	bl	8005160 <SDMMC_CmdStopTransfer>
 8003a3e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b44 <HAL_SD_WriteBlocks+0x318>)
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e066      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_SD_WriteBlocks+0x25c>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d012      	beq.n	8003aae <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b44 <HAL_SD_WriteBlocks+0x318>)
 8003a8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	f043 0208 	orr.w	r2, r3, #8
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e045      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d012      	beq.n	8003ae2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	@ (8003b44 <HAL_SD_WriteBlocks+0x318>)
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	f043 0202 	orr.w	r2, r3, #2
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e02b      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a13      	ldr	r2, [pc, #76]	@ (8003b44 <HAL_SD_WriteBlocks+0x318>)
 8003af6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e011      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003b1e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e006      	b.n	8003b3a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3748      	adds	r7, #72	@ 0x48
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	004005ff 	.word	0x004005ff

08003b48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b56:	0f9b      	lsrs	r3, r3, #30
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b62:	0e9b      	lsrs	r3, r3, #26
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b74:	0e1b      	lsrs	r3, r3, #24
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba8:	0d1b      	lsrs	r3, r3, #20
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc6:	0bdb      	lsrs	r3, r3, #15
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd8:	0b9b      	lsrs	r3, r3, #14
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bfc:	0b1b      	lsrs	r3, r3, #12
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d163      	bne.n	8003ce0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1c:	009a      	lsls	r2, r3, #2
 8003c1e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003c28:	0f92      	lsrs	r2, r2, #30
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c34:	0edb      	lsrs	r3, r3, #27
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c46:	0e1b      	lsrs	r3, r3, #24
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c58:	0d5b      	lsrs	r3, r3, #21
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c6a:	0c9b      	lsrs	r3, r3, #18
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7c:	0bdb      	lsrs	r3, r3, #15
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	7e1b      	ldrb	r3, [r3, #24]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003caa:	fb03 f202 	mul.w	r2, r3, r2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	7a1b      	ldrb	r3, [r3, #8]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ccc:	0a52      	lsrs	r2, r2, #9
 8003cce:	fb03 f202 	mul.w	r2, r3, r2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cdc:	661a      	str	r2, [r3, #96]	@ 0x60
 8003cde:	e031      	b.n	8003d44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d11d      	bne.n	8003d24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf6:	0c1b      	lsrs	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	3301      	adds	r3, #1
 8003d04:	029a      	lsls	r2, r3, #10
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d18:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d22:	e00f      	b.n	8003d44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a58      	ldr	r2, [pc, #352]	@ (8003e8c <HAL_SD_GetCardCSD+0x344>)
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e09d      	b.n	8003e80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d48:	0b9b      	lsrs	r3, r3, #14
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d5a:	09db      	lsrs	r3, r3, #7
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7c:	0fdb      	lsrs	r3, r3, #31
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d88:	0f5b      	lsrs	r3, r3, #29
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	0e9b      	lsrs	r3, r3, #26
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dac:	0d9b      	lsrs	r3, r3, #22
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	0d5b      	lsrs	r3, r3, #21
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	0bdb      	lsrs	r3, r3, #15
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	0b9b      	lsrs	r3, r3, #14
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	0b5b      	lsrs	r3, r3, #13
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	0b1b      	lsrs	r3, r3, #12
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	004005ff 	.word	0x004005ff

08003e90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f970 	bl	80041e0 <SD_SendStatus>
 8003f00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	0a5b      	lsrs	r3, r3, #9
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003f1e:	693b      	ldr	r3, [r7, #16]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b094      	sub	sp, #80	@ 0x50
 8003f2c:	af04      	add	r7, sp, #16
 8003f2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003f30:	2301      	movs	r3, #1
 8003f32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 ffe2 	bl	8004f02 <SDIO_GetPowerState>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f44:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003f48:	e0b8      	b.n	80040bc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d02f      	beq.n	8003fb2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 f9c9 	bl	80052ee <SDMMC_CmdSendCID>
 8003f5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <SD_InitCard+0x40>
    {
      return errorstate;
 8003f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f66:	e0a9      	b.n	80040bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 f80c 	bl	8004f8c <SDIO_GetResponse>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2104      	movs	r1, #4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f803 	bl	8004f8c <SDIO_GetResponse>
 8003f86:	4602      	mov	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2108      	movs	r1, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fffa 	bl	8004f8c <SDIO_GetResponse>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	210c      	movs	r1, #12
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fff1 	bl	8004f8c <SDIO_GetResponse>
 8003faa:	4602      	mov	r2, r0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d00d      	beq.n	8003fd6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f107 020e 	add.w	r2, r7, #14
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f9cf 	bl	8005368 <SDMMC_CmdSetRelAdd>
 8003fca:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <SD_InitCard+0xae>
    {
      return errorstate;
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd4:	e072      	b.n	80040bc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d036      	beq.n	800404c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003fde:	89fb      	ldrh	r3, [r7, #14]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f001 f999 	bl	800532a <SDMMC_CmdSendCSD>
 8003ff8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004002:	e05b      	b.n	80040bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f000 ffbe 	bl	8004f8c <SDIO_GetResponse>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2104      	movs	r1, #4
 800401c:	4618      	mov	r0, r3
 800401e:	f000 ffb5 	bl	8004f8c <SDIO_GetResponse>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2108      	movs	r1, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f000 ffac 	bl	8004f8c <SDIO_GetResponse>
 8004034:	4602      	mov	r2, r0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	210c      	movs	r1, #12
 8004040:	4618      	mov	r0, r3
 8004042:	f000 ffa3 	bl	8004f8c <SDIO_GetResponse>
 8004046:	4602      	mov	r2, r0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2104      	movs	r1, #4
 8004052:	4618      	mov	r0, r3
 8004054:	f000 ff9a 	bl	8004f8c <SDIO_GetResponse>
 8004058:	4603      	mov	r3, r0
 800405a:	0d1a      	lsrs	r2, r3, #20
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fd6e 	bl	8003b48 <HAL_SD_GetCardCSD>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004072:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004076:	e021      	b.n	80040bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6819      	ldr	r1, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	041b      	lsls	r3, r3, #16
 8004082:	2200      	movs	r2, #0
 8004084:	461c      	mov	r4, r3
 8004086:	4615      	mov	r5, r2
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	4608      	mov	r0, r1
 800408e:	f001 f889 	bl	80051a4 <SDMMC_CmdSelDesel>
 8004092:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <SD_InitCard+0x176>
  {
    return errorstate;
 800409a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409c:	e00e      	b.n	80040bc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681d      	ldr	r5, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	466c      	mov	r4, sp
 80040a6:	f103 0210 	add.w	r2, r3, #16
 80040aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80040ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040b0:	3304      	adds	r3, #4
 80040b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b4:	4628      	mov	r0, r5
 80040b6:	f000 fecd 	bl	8004e54 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3740      	adds	r7, #64	@ 0x40
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdb0      	pop	{r4, r5, r7, pc}

080040c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 f884 	bl	80051ea <SDMMC_CmdGoIdleState>
 80040e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	e072      	b.n	80041d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 f897 	bl	8005226 <SDMMC_CmdOperCond>
 80040f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f001 f86d 	bl	80051ea <SDMMC_CmdGoIdleState>
 8004110:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e05b      	b.n	80041d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004126:	2b01      	cmp	r3, #1
 8004128:	d137      	bne.n	800419a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f001 f897 	bl	8005264 <SDMMC_CmdAppCommand>
 8004136:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02d      	beq.n	800419a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800413e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004142:	e047      	b.n	80041d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f001 f88a 	bl	8005264 <SDMMC_CmdAppCommand>
 8004150:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <SD_PowerON+0x98>
    {
      return errorstate;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	e03b      	b.n	80041d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	491e      	ldr	r1, [pc, #120]	@ (80041dc <SD_PowerON+0x118>)
 8004162:	4618      	mov	r0, r3
 8004164:	f001 f8a0 	bl	80052a8 <SDMMC_CmdAppOperCommand>
 8004168:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004170:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004174:	e02e      	b.n	80041d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 ff05 	bl	8004f8c <SDIO_GetResponse>
 8004182:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	0fdb      	lsrs	r3, r3, #31
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <SD_PowerON+0xcc>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <SD_PowerON+0xce>
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]

    count++;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3301      	adds	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d802      	bhi.n	80041aa <SD_PowerON+0xe6>
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0cc      	beq.n	8004144 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d902      	bls.n	80041ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80041b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041b8:	e00c      	b.n	80041d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80041ca:	e002      	b.n	80041d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	c1100000 	.word	0xc1100000

080041e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80041f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041f4:	e018      	b.n	8004228 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f001 f8d1 	bl	80053aa <SDMMC_CmdSendStatus>
 8004208:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	e009      	b.n	8004228 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f000 feb6 	bl	8004f8c <SDIO_GetResponse>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e042      	b.n	80042c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd faf8 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fb79 	bl	800496c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	@ 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d175      	bne.n	80043dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_UART_Transmit+0x2c>
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e06e      	b.n	80043de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2221      	movs	r2, #33	@ 0x21
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430e:	f7fd fcc5 	bl	8001c9c <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004328:	d108      	bne.n	800433c <HAL_UART_Transmit+0x6c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e003      	b.n	8004344 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004344:	e02e      	b.n	80043a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	@ 0x80
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f98b 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e03a      	b.n	80043de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3302      	adds	r3, #2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e007      	b.n	8004396 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	3301      	adds	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1cb      	bne.n	8004346 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	@ 0x40
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f957 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e006      	b.n	80043de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d112      	bne.n	8004426 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_UART_Receive_DMA+0x26>
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e00b      	b.n	8004428 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	461a      	mov	r2, r3
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f97f 	bl	8004720 <UART_Start_Receive_DMA>
 8004422:	4603      	mov	r3, r0
 8004424:	e000      	b.n	8004428 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b09c      	sub	sp, #112	@ 0x70
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d172      	bne.n	8004572 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800448c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448e:	2200      	movs	r2, #0
 8004490:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80044b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80044de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3314      	adds	r3, #20
 80044e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80044e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80044e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	623b      	str	r3, [r7, #32]
   return(result);
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004510:	663b      	str	r3, [r7, #96]	@ 0x60
 8004512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800451a:	633a      	str	r2, [r7, #48]	@ 0x30
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e5      	bne.n	80044fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800452e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	2b01      	cmp	r3, #1
 800453c:	d119      	bne.n	8004572 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	60fb      	str	r3, [r7, #12]
   return(result);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f023 0310 	bic.w	r3, r3, #16
 8004554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800455e:	61fa      	str	r2, [r7, #28]
 8004560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	617b      	str	r3, [r7, #20]
   return(result);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e5      	bne.n	800453e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004574:	2200      	movs	r2, #0
 8004576:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004582:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004584:	4619      	mov	r1, r3
 8004586:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004588:	f7ff ff66 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800458c:	e002      	b.n	8004594 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800458e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004590:	f7fc fdf2 	bl	8001178 <HAL_UART_RxCpltCallback>
}
 8004594:	bf00      	nop
 8004596:	3770      	adds	r7, #112	@ 0x70
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d108      	bne.n	80045ca <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045bc:	085b      	lsrs	r3, r3, #1
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4619      	mov	r1, r3
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ff48 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045c8:	e002      	b.n	80045d0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff ff30 	bl	8004430 <HAL_UART_RxHalfCpltCallback>
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f4:	2b80      	cmp	r3, #128	@ 0x80
 80045f6:	bf0c      	ite	eq
 80045f8:	2301      	moveq	r3, #1
 80045fa:	2300      	movne	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b21      	cmp	r3, #33	@ 0x21
 800460a:	d108      	bne.n	800461e <UART_DMAError+0x46>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2200      	movs	r2, #0
 8004616:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f000 f91b 	bl	8004854 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b22      	cmp	r3, #34	@ 0x22
 800463e:	d108      	bne.n	8004652 <UART_DMAError+0x7a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2200      	movs	r2, #0
 800464a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800464c:	68b8      	ldr	r0, [r7, #8]
 800464e:	f000 f929 	bl	80048a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f7ff fef0 	bl	8004444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467c:	e03b      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d037      	beq.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fd fb09 	bl	8001c9c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	6a3a      	ldr	r2, [r7, #32]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <UART_WaitOnFlagUntilTimeout+0x30>
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e03a      	b.n	8004716 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d023      	beq.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b80      	cmp	r3, #128	@ 0x80
 80046b2:	d020      	beq.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b40      	cmp	r3, #64	@ 0x40
 80046b8:	d01d      	beq.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d116      	bne.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f8e0 	bl	80048a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2208      	movs	r2, #8
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e00f      	b.n	8004716 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4013      	ands	r3, r2
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	429a      	cmp	r2, r3
 8004712:	d0b4      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b098      	sub	sp, #96	@ 0x60
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2222      	movs	r2, #34	@ 0x22
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474c:	4a3e      	ldr	r2, [pc, #248]	@ (8004848 <UART_Start_Receive_DMA+0x128>)
 800474e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	4a3d      	ldr	r2, [pc, #244]	@ (800484c <UART_Start_Receive_DMA+0x12c>)
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475c:	4a3c      	ldr	r2, [pc, #240]	@ (8004850 <UART_Start_Receive_DMA+0x130>)
 800475e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004764:	2200      	movs	r2, #0
 8004766:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004768:	f107 0308 	add.w	r3, r7, #8
 800476c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	f7fd fc7c 	bl	800207c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d019      	beq.n	80047d6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80047c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3314      	adds	r3, #20
 80047dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3314      	adds	r3, #20
 80047f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e5      	bne.n	80047d6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3314      	adds	r3, #20
 8004810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	617b      	str	r3, [r7, #20]
   return(result);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004820:	653b      	str	r3, [r7, #80]	@ 0x50
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800482a:	627a      	str	r2, [r7, #36]	@ 0x24
 800482c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6a39      	ldr	r1, [r7, #32]
 8004830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	61fb      	str	r3, [r7, #28]
   return(result);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3760      	adds	r7, #96	@ 0x60
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	08004471 	.word	0x08004471
 800484c:	0800459d 	.word	0x0800459d
 8004850:	080045d9 	.word	0x080045d9

08004854 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	@ 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	60bb      	str	r3, [r7, #8]
   return(result);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	61ba      	str	r2, [r7, #24]
 800487e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6979      	ldr	r1, [r7, #20]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	613b      	str	r3, [r7, #16]
   return(result);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004898:	bf00      	nop
 800489a:	3724      	adds	r7, #36	@ 0x24
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b095      	sub	sp, #84	@ 0x54
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80048ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d119      	bne.n	8004950 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	60bb      	str	r3, [r7, #8]
   return(result);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	647b      	str	r3, [r7, #68]	@ 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800493c:	61ba      	str	r2, [r7, #24]
 800493e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6979      	ldr	r1, [r7, #20]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	613b      	str	r3, [r7, #16]
   return(result);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800495e:	bf00      	nop
 8004960:	3754      	adds	r7, #84	@ 0x54
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800496c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004970:	b0c0      	sub	sp, #256	@ 0x100
 8004972:	af00      	add	r7, sp, #0
 8004974:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	68d9      	ldr	r1, [r3, #12]
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	ea40 0301 	orr.w	r3, r0, r1
 8004994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049c4:	f021 010c 	bic.w	r1, r1, #12
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049d2:	430b      	orrs	r3, r1
 80049d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e6:	6999      	ldr	r1, [r3, #24]
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	ea40 0301 	orr.w	r3, r0, r1
 80049f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004c38 <UART_SetConfig+0x2cc>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d005      	beq.n	8004a0c <UART_SetConfig+0xa0>
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b8d      	ldr	r3, [pc, #564]	@ (8004c3c <UART_SetConfig+0x2d0>)
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d104      	bne.n	8004a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a0c:	f7fe fc64 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004a10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a14:	e003      	b.n	8004a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a16:	f7fe fc4b 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8004a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a28:	f040 810c 	bne.w	8004c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a3e:	4622      	mov	r2, r4
 8004a40:	462b      	mov	r3, r5
 8004a42:	1891      	adds	r1, r2, r2
 8004a44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a46:	415b      	adcs	r3, r3
 8004a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a4e:	4621      	mov	r1, r4
 8004a50:	eb12 0801 	adds.w	r8, r2, r1
 8004a54:	4629      	mov	r1, r5
 8004a56:	eb43 0901 	adc.w	r9, r3, r1
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a6e:	4690      	mov	r8, r2
 8004a70:	4699      	mov	r9, r3
 8004a72:	4623      	mov	r3, r4
 8004a74:	eb18 0303 	adds.w	r3, r8, r3
 8004a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	eb49 0303 	adc.w	r3, r9, r3
 8004a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	18db      	adds	r3, r3, r3
 8004a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	eb42 0303 	adc.w	r3, r2, r3
 8004aa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ab0:	f7fb ffd4 	bl	8000a5c <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4b61      	ldr	r3, [pc, #388]	@ (8004c40 <UART_SetConfig+0x2d4>)
 8004aba:	fba3 2302 	umull	r2, r3, r3, r2
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	011c      	lsls	r4, r3, #4
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004acc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	1891      	adds	r1, r2, r2
 8004ada:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004adc:	415b      	adcs	r3, r3
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8004aea:	4649      	mov	r1, r9
 8004aec:	eb43 0b01 	adc.w	fp, r3, r1
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b04:	4692      	mov	sl, r2
 8004b06:	469b      	mov	fp, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b12:	464b      	mov	r3, r9
 8004b14:	eb4b 0303 	adc.w	r3, fp, r3
 8004b18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b30:	460b      	mov	r3, r1
 8004b32:	18db      	adds	r3, r3, r3
 8004b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b36:	4613      	mov	r3, r2
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b46:	f7fb ff89 	bl	8000a5c <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4b3b      	ldr	r3, [pc, #236]	@ (8004c40 <UART_SetConfig+0x2d4>)
 8004b52:	fba3 2301 	umull	r2, r3, r3, r1
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2264      	movs	r2, #100	@ 0x64
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	1acb      	subs	r3, r1, r3
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b66:	4b36      	ldr	r3, [pc, #216]	@ (8004c40 <UART_SetConfig+0x2d4>)
 8004b68:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b74:	441c      	add	r4, r3
 8004b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	1891      	adds	r1, r2, r2
 8004b8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b90:	415b      	adcs	r3, r3
 8004b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b98:	4641      	mov	r1, r8
 8004b9a:	1851      	adds	r1, r2, r1
 8004b9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	414b      	adcs	r3, r1
 8004ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	00cb      	lsls	r3, r1, #3
 8004bb4:	4651      	mov	r1, sl
 8004bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bba:	4651      	mov	r1, sl
 8004bbc:	00ca      	lsls	r2, r1, #3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bcc:	464b      	mov	r3, r9
 8004bce:	460a      	mov	r2, r1
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004be4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bec:	460b      	mov	r3, r1
 8004bee:	18db      	adds	r3, r3, r3
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	eb42 0303 	adc.w	r3, r2, r3
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c02:	f7fb ff2b 	bl	8000a5c <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <UART_SetConfig+0x2d4>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	@ 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	3332      	adds	r3, #50	@ 0x32
 8004c1e:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <UART_SetConfig+0x2d4>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 0207 	and.w	r2, r3, #7
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4422      	add	r2, r4
 8004c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c34:	e106      	b.n	8004e44 <UART_SetConfig+0x4d8>
 8004c36:	bf00      	nop
 8004c38:	40011000 	.word	0x40011000
 8004c3c:	40011400 	.word	0x40011400
 8004c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c56:	4642      	mov	r2, r8
 8004c58:	464b      	mov	r3, r9
 8004c5a:	1891      	adds	r1, r2, r2
 8004c5c:	6239      	str	r1, [r7, #32]
 8004c5e:	415b      	adcs	r3, r3
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c66:	4641      	mov	r1, r8
 8004c68:	1854      	adds	r4, r2, r1
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	eb43 0501 	adc.w	r5, r3, r1
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	00eb      	lsls	r3, r5, #3
 8004c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c7e:	00e2      	lsls	r2, r4, #3
 8004c80:	4614      	mov	r4, r2
 8004c82:	461d      	mov	r5, r3
 8004c84:	4643      	mov	r3, r8
 8004c86:	18e3      	adds	r3, r4, r3
 8004c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	eb45 0303 	adc.w	r3, r5, r3
 8004c92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ca2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	008b      	lsls	r3, r1, #2
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	008a      	lsls	r2, r1, #2
 8004cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cc4:	f7fb feca 	bl	8000a5c <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4b60      	ldr	r3, [pc, #384]	@ (8004e50 <UART_SetConfig+0x4e4>)
 8004cce:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	011c      	lsls	r4, r3, #4
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ce0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	61b9      	str	r1, [r7, #24]
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	1851      	adds	r1, r2, r1
 8004cfc:	6139      	str	r1, [r7, #16]
 8004cfe:	4649      	mov	r1, r9
 8004d00:	414b      	adcs	r3, r1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d10:	4659      	mov	r1, fp
 8004d12:	00cb      	lsls	r3, r1, #3
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	00ca      	lsls	r2, r1, #3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	4642      	mov	r2, r8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	460a      	mov	r2, r1
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d50:	4649      	mov	r1, r9
 8004d52:	008b      	lsls	r3, r1, #2
 8004d54:	4641      	mov	r1, r8
 8004d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	008a      	lsls	r2, r1, #2
 8004d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d62:	f7fb fe7b 	bl	8000a5c <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4b38      	ldr	r3, [pc, #224]	@ (8004e50 <UART_SetConfig+0x4e4>)
 8004d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2264      	movs	r2, #100	@ 0x64
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	1acb      	subs	r3, r1, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	@ 0x32
 8004d80:	4a33      	ldr	r2, [pc, #204]	@ (8004e50 <UART_SetConfig+0x4e4>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d8c:	441c      	add	r4, r3
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d92:	2200      	movs	r2, #0
 8004d94:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d96:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	1891      	adds	r1, r2, r2
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	415b      	adcs	r3, r3
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dac:	4641      	mov	r1, r8
 8004dae:	1851      	adds	r1, r2, r1
 8004db0:	6039      	str	r1, [r7, #0]
 8004db2:	4649      	mov	r1, r9
 8004db4:	414b      	adcs	r3, r1
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	00cb      	lsls	r3, r1, #3
 8004dc8:	4651      	mov	r1, sl
 8004dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dce:	4651      	mov	r1, sl
 8004dd0:	00ca      	lsls	r2, r1, #3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4642      	mov	r2, r8
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dde:	464b      	mov	r3, r9
 8004de0:	460a      	mov	r2, r1
 8004de2:	eb42 0303 	adc.w	r3, r2, r3
 8004de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e00:	4649      	mov	r1, r9
 8004e02:	008b      	lsls	r3, r1, #2
 8004e04:	4641      	mov	r1, r8
 8004e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	008a      	lsls	r2, r1, #2
 8004e0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e12:	f7fb fe23 	bl	8000a5c <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <UART_SetConfig+0x4e4>)
 8004e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	2164      	movs	r1, #100	@ 0x64
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	3332      	adds	r3, #50	@ 0x32
 8004e2e:	4a08      	ldr	r2, [pc, #32]	@ (8004e50 <UART_SetConfig+0x4e4>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f003 020f 	and.w	r2, r3, #15
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4422      	add	r2, r4
 8004e42:	609a      	str	r2, [r3, #8]
}
 8004e44:	bf00      	nop
 8004e46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e50:	51eb851f 	.word	0x51eb851f

08004e54 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e54:	b084      	sub	sp, #16
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	f107 001c 	add.w	r0, r7, #28
 8004e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004e6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004e6e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004e72:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004e76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004e7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004e7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004e8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	b004      	add	sp, #16
 8004ea8:	4770      	bx	lr

08004eaa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f3c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f42:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004f58:	f023 030f 	bic.w	r3, r3, #15
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	b2db      	uxtb	r3, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
}  
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fd8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004fde:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004fe4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0

}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005018:	2310      	movs	r3, #16
 800501a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800501c:	2340      	movs	r3, #64	@ 0x40
 800501e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005028:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800502a:	f107 0308 	add.w	r3, r7, #8
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff74 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503a:	2110      	movs	r1, #16
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9d7 	bl	80053f0 <SDMMC_GetCmdResp1>
 8005042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005044:	69fb      	ldr	r3, [r7, #28]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800505c:	2311      	movs	r3, #17
 800505e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005060:	2340      	movs	r3, #64	@ 0x40
 8005062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005068:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800506c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff52 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	2111      	movs	r1, #17
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f9b5 	bl	80053f0 <SDMMC_GetCmdResp1>
 8005086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005088:	69fb      	ldr	r3, [r7, #28]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b088      	sub	sp, #32
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050a0:	2312      	movs	r3, #18
 80050a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050a4:	2340      	movs	r3, #64	@ 0x40
 80050a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050b2:	f107 0308 	add.w	r3, r7, #8
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ff30 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80050be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c2:	2112      	movs	r1, #18
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f993 	bl	80053f0 <SDMMC_GetCmdResp1>
 80050ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050cc:	69fb      	ldr	r3, [r7, #28]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b088      	sub	sp, #32
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80050e4:	2318      	movs	r3, #24
 80050e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050e8:	2340      	movs	r3, #64	@ 0x40
 80050ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050f6:	f107 0308 	add.w	r3, r7, #8
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ff0e 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005106:	2118      	movs	r1, #24
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f971 	bl	80053f0 <SDMMC_GetCmdResp1>
 800510e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005110:	69fb      	ldr	r3, [r7, #28]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b088      	sub	sp, #32
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005128:	2319      	movs	r3, #25
 800512a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800512c:	2340      	movs	r3, #64	@ 0x40
 800512e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005138:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff feec 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514a:	2119      	movs	r1, #25
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f94f 	bl	80053f0 <SDMMC_GetCmdResp1>
 8005152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005154:	69fb      	ldr	r3, [r7, #28]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800516c:	230c      	movs	r3, #12
 800516e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005170:	2340      	movs	r3, #64	@ 0x40
 8005172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800517c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff feca 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800518a:	4a05      	ldr	r2, [pc, #20]	@ (80051a0 <SDMMC_CmdStopTransfer+0x40>)
 800518c:	210c      	movs	r1, #12
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f92e 	bl	80053f0 <SDMMC_GetCmdResp1>
 8005194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005196:	69fb      	ldr	r3, [r7, #28]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	05f5e100 	.word	0x05f5e100

080051a4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	@ 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80051b4:	2307      	movs	r3, #7
 80051b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051b8:	2340      	movs	r3, #64	@ 0x40
 80051ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051c4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	4619      	mov	r1, r3
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fea6 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80051d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d6:	2107      	movs	r1, #7
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f909 	bl	80053f0 <SDMMC_GetCmdResp1>
 80051de:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3728      	adds	r7, #40	@ 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b088      	sub	sp, #32
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fe85 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fb23 	bl	8005860 <SDMMC_GetCmdError>
 800521a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800521c:	69fb      	ldr	r3, [r7, #28]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b088      	sub	sp, #32
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800522e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005234:	2308      	movs	r3, #8
 8005236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005238:	2340      	movs	r3, #64	@ 0x40
 800523a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fe66 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fab6 	bl	80057c4 <SDMMC_GetCmdResp7>
 8005258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800525a:	69fb      	ldr	r3, [r7, #28]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005272:	2337      	movs	r3, #55	@ 0x37
 8005274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005276:	2340      	movs	r3, #64	@ 0x40
 8005278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800527e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005282:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005284:	f107 0308 	add.w	r3, r7, #8
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fe47 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005294:	2137      	movs	r1, #55	@ 0x37
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8aa 	bl	80053f0 <SDMMC_GetCmdResp1>
 800529c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800529e:	69fb      	ldr	r3, [r7, #28]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80052be:	2329      	movs	r3, #41	@ 0x29
 80052c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c2:	2340      	movs	r3, #64	@ 0x40
 80052c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fe21 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9bd 	bl	800565c <SDMMC_GetCmdResp3>
 80052e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052e4:	69fb      	ldr	r3, [r7, #28]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b088      	sub	sp, #32
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80052fa:	2302      	movs	r3, #2
 80052fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80052fe:	23c0      	movs	r3, #192	@ 0xc0
 8005300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800530a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800530c:	f107 0308 	add.w	r3, r7, #8
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fe03 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f957 	bl	80055cc <SDMMC_GetCmdResp2>
 800531e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005320:	69fb      	ldr	r3, [r7, #28]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b088      	sub	sp, #32
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005338:	2309      	movs	r3, #9
 800533a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800533c:	23c0      	movs	r3, #192	@ 0xc0
 800533e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005348:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff fde4 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f938 	bl	80055cc <SDMMC_GetCmdResp2>
 800535c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800535e:	69fb      	ldr	r3, [r7, #28]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005376:	2303      	movs	r3, #3
 8005378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800537a:	2340      	movs	r3, #64	@ 0x40
 800537c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005386:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fdc5 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	2103      	movs	r1, #3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f99d 	bl	80056d8 <SDMMC_GetCmdResp6>
 800539e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053a0:	69fb      	ldr	r3, [r7, #28]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b088      	sub	sp, #32
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80053b8:	230d      	movs	r3, #13
 80053ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053bc:	2340      	movs	r3, #64	@ 0x40
 80053be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fda4 	bl	8004f1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80053d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053da:	210d      	movs	r1, #13
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f807 	bl	80053f0 <SDMMC_GetCmdResp1>
 80053e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053e4:	69fb      	ldr	r3, [r7, #28]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	460b      	mov	r3, r1
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053fe:	4b70      	ldr	r3, [pc, #448]	@ (80055c0 <SDMMC_GetCmdResp1+0x1d0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a70      	ldr	r2, [pc, #448]	@ (80055c4 <SDMMC_GetCmdResp1+0x1d4>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	0a5a      	lsrs	r2, r3, #9
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	fb02 f303 	mul.w	r3, r2, r3
 8005410:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	61fa      	str	r2, [r7, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800541c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005420:	e0c9      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ef      	beq.n	8005412 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ea      	bne.n	8005412 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2204      	movs	r2, #4
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800544e:	2304      	movs	r3, #4
 8005450:	e0b1      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005464:	2301      	movs	r3, #1
 8005466:	e0a6      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	22c5      	movs	r2, #197	@ 0xc5
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff fd7f 	bl	8004f72 <SDIO_GetCommandResponse>
 8005474:	4603      	mov	r3, r0
 8005476:	461a      	mov	r2, r3
 8005478:	7afb      	ldrb	r3, [r7, #11]
 800547a:	4293      	cmp	r3, r2
 800547c:	d001      	beq.n	8005482 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800547e:	2301      	movs	r3, #1
 8005480:	e099      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005482:	2100      	movs	r1, #0
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff fd81 	bl	8004f8c <SDIO_GetResponse>
 800548a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4b4e      	ldr	r3, [pc, #312]	@ (80055c8 <SDMMC_GetCmdResp1+0x1d8>)
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005496:	2300      	movs	r3, #0
 8005498:	e08d      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	da02      	bge.n	80054a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80054a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054a4:	e087      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80054b0:	2340      	movs	r3, #64	@ 0x40
 80054b2:	e080      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	e079      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80054cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054d0:	e071      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80054dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054e0:	e069      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80054ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054f0:	e061      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80054fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005500:	e059      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800550c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005510:	e051      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800551c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005520:	e049      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800552c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005530:	e041      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800553c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005540:	e039      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800554c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005550:	e031      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800555c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005560:	e029      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800556c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005570:	e021      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800557c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005580:	e019      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800558c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005590:	e011      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800559c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80055a0:	e009      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80055ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80055b0:	e001      	b.n	80055b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000030 	.word	0x20000030
 80055c4:	10624dd3 	.word	0x10624dd3
 80055c8:	fdffe008 	.word	0xfdffe008

080055cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005654 <SDMMC_GetCmdResp2+0x88>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005658 <SDMMC_GetCmdResp2+0x8c>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	0a5b      	lsrs	r3, r3, #9
 80055e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e4:	fb02 f303 	mul.w	r3, r2, r3
 80055e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1e5a      	subs	r2, r3, #1
 80055ee:	60fa      	str	r2, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80055f8:	e026      	b.n	8005648 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ef      	beq.n	80055ea <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ea      	bne.n	80055ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2204      	movs	r2, #4
 8005624:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005626:	2304      	movs	r3, #4
 8005628:	e00e      	b.n	8005648 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800563c:	2301      	movs	r3, #1
 800563e:	e003      	b.n	8005648 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	22c5      	movs	r2, #197	@ 0xc5
 8005644:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	20000030 	.word	0x20000030
 8005658:	10624dd3 	.word	0x10624dd3

0800565c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005664:	4b1a      	ldr	r3, [pc, #104]	@ (80056d0 <SDMMC_GetCmdResp3+0x74>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <SDMMC_GetCmdResp3+0x78>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	0a5b      	lsrs	r3, r3, #9
 8005670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005674:	fb02 f303 	mul.w	r3, r2, r3
 8005678:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005684:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005688:	e01b      	b.n	80056c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0ef      	beq.n	800567a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ea      	bne.n	800567a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2204      	movs	r2, #4
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056b6:	2304      	movs	r3, #4
 80056b8:	e003      	b.n	80056c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	22c5      	movs	r2, #197	@ 0xc5
 80056be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000030 	.word	0x20000030
 80056d4:	10624dd3 	.word	0x10624dd3

080056d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	460b      	mov	r3, r1
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056e6:	4b35      	ldr	r3, [pc, #212]	@ (80057bc <SDMMC_GetCmdResp6+0xe4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a35      	ldr	r2, [pc, #212]	@ (80057c0 <SDMMC_GetCmdResp6+0xe8>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	0a5b      	lsrs	r3, r3, #9
 80056f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	1e5a      	subs	r2, r3, #1
 8005700:	61fa      	str	r2, [r7, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005706:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800570a:	e052      	b.n	80057b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005710:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0ef      	beq.n	80056fc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ea      	bne.n	80056fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2204      	movs	r2, #4
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005738:	2304      	movs	r3, #4
 800573a:	e03a      	b.n	80057b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800574e:	2301      	movs	r3, #1
 8005750:	e02f      	b.n	80057b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fc0d 	bl	8004f72 <SDIO_GetCommandResponse>
 8005758:	4603      	mov	r3, r0
 800575a:	461a      	mov	r2, r3
 800575c:	7afb      	ldrb	r3, [r7, #11]
 800575e:	4293      	cmp	r3, r2
 8005760:	d001      	beq.n	8005766 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005762:	2301      	movs	r3, #1
 8005764:	e025      	b.n	80057b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	22c5      	movs	r2, #197	@ 0xc5
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800576c:	2100      	movs	r1, #0
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fc0c 	bl	8004f8c <SDIO_GetResponse>
 8005774:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	0c1b      	lsrs	r3, r3, #16
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800578a:	2300      	movs	r3, #0
 800578c:	e011      	b.n	80057b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005798:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800579c:	e009      	b.n	80057b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80057a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057ac:	e001      	b.n	80057b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80057ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000030 	.word	0x20000030
 80057c0:	10624dd3 	.word	0x10624dd3

080057c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057cc:	4b22      	ldr	r3, [pc, #136]	@ (8005858 <SDMMC_GetCmdResp7+0x94>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a22      	ldr	r2, [pc, #136]	@ (800585c <SDMMC_GetCmdResp7+0x98>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	0a5b      	lsrs	r3, r3, #9
 80057d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1e5a      	subs	r2, r3, #1
 80057e6:	60fa      	str	r2, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80057f0:	e02c      	b.n	800584c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0ef      	beq.n	80057e2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ea      	bne.n	80057e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2204      	movs	r2, #4
 800581c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800581e:	2304      	movs	r3, #4
 8005820:	e014      	b.n	800584c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005834:	2301      	movs	r3, #1
 8005836:	e009      	b.n	800584c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2240      	movs	r2, #64	@ 0x40
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800584a:	2300      	movs	r3, #0
  
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	20000030 	.word	0x20000030
 800585c:	10624dd3 	.word	0x10624dd3

08005860 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005868:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <SDMMC_GetCmdError+0x50>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a11      	ldr	r2, [pc, #68]	@ (80058b4 <SDMMC_GetCmdError+0x54>)
 800586e:	fba2 2303 	umull	r2, r3, r2, r3
 8005872:	0a5b      	lsrs	r3, r3, #9
 8005874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005878:	fb02 f303 	mul.w	r3, r2, r3
 800587c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	60fa      	str	r2, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005888:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800588c:	e009      	b.n	80058a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f1      	beq.n	800587e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	22c5      	movs	r2, #197	@ 0xc5
 800589e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000030 	.word	0x20000030
 80058b4:	10624dd3 	.word	0x10624dd3

080058b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80058bc:	4904      	ldr	r1, [pc, #16]	@ (80058d0 <MX_FATFS_Init+0x18>)
 80058be:	4805      	ldr	r0, [pc, #20]	@ (80058d4 <MX_FATFS_Init+0x1c>)
 80058c0:	f002 fb4e 	bl	8007f60 <FATFS_LinkDriver>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	4b03      	ldr	r3, [pc, #12]	@ (80058d8 <MX_FATFS_Init+0x20>)
 80058ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20001320 	.word	0x20001320
 80058d4:	08009764 	.word	0x08009764
 80058d8:	2000131c 	.word	0x2000131c

080058dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80058e6:	f000 f86b 	bl	80059c0 <BSP_SD_IsDetected>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d001      	beq.n	80058f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e005      	b.n	8005900 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80058f4:	4804      	ldr	r0, [pc, #16]	@ (8005908 <BSP_SD_Init+0x2c>)
 80058f6:	f7fd fd03 	bl	8003300 <HAL_SD_Init>
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80058fe:	79fb      	ldrb	r3, [r7, #7]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20001120 	.word	0x20001120

0800590c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	4806      	ldr	r0, [pc, #24]	@ (8005944 <BSP_SD_ReadBlocks+0x38>)
 800592a:	f7fd fd99 	bl	8003460 <HAL_SD_ReadBlocks>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20001120 	.word	0x20001120

08005948 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	4806      	ldr	r0, [pc, #24]	@ (8005980 <BSP_SD_WriteBlocks+0x38>)
 8005966:	f7fd ff61 	bl	800382c <HAL_SD_WriteBlocks>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20001120 	.word	0x20001120

08005984 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005988:	4805      	ldr	r0, [pc, #20]	@ (80059a0 <BSP_SD_GetCardState+0x1c>)
 800598a:	f7fe faad 	bl	8003ee8 <HAL_SD_GetCardState>
 800598e:	4603      	mov	r3, r0
 8005990:	2b04      	cmp	r3, #4
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
}
 800599a:	4618      	mov	r0, r3
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20001120 	.word	0x20001120

080059a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4803      	ldr	r0, [pc, #12]	@ (80059bc <BSP_SD_GetCardInfo+0x18>)
 80059b0:	f7fe fa6e 	bl	8003e90 <HAL_SD_GetCardInfo>
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20001120 	.word	0x20001120

080059c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80059c6:	2301      	movs	r3, #1
 80059c8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	b2db      	uxtb	r3, r3
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80059e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <SD_CheckStatus+0x38>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80059ec:	f7ff ffca 	bl	8005984 <BSP_SD_GetCardState>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d107      	bne.n	8005a06 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80059f6:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <SD_CheckStatus+0x38>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	4b04      	ldr	r3, [pc, #16]	@ (8005a14 <SD_CheckStatus+0x38>)
 8005a04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005a06:	4b03      	ldr	r3, [pc, #12]	@ (8005a14 <SD_CheckStatus+0x38>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	b2db      	uxtb	r3, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000039 	.word	0x20000039

08005a18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005a22:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <SD_initialize+0x38>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005a28:	f7ff ff58 	bl	80058dc <BSP_SD_Init>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff ffd1 	bl	80059dc <SD_CheckStatus>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <SD_initialize+0x38>)
 8005a40:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005a42:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <SD_initialize+0x38>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b2db      	uxtb	r3, r3
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000039 	.word	0x20000039

08005a54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ffbb 	bl	80059dc <SD_CheckStatus>
 8005a66:	4603      	mov	r3, r0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	68b8      	ldr	r0, [r7, #8]
 8005a8e:	f7ff ff3d 	bl	800590c <BSP_SD_ReadBlocks>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d107      	bne.n	8005aa8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005a98:	bf00      	nop
 8005a9a:	f7ff ff73 	bl	8005984 <BSP_SD_GetCardState>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1fa      	bne.n	8005a9a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	4603      	mov	r3, r0
 8005ac0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	68b8      	ldr	r0, [r7, #8]
 8005ad0:	f7ff ff3a 	bl	8005948 <BSP_SD_WriteBlocks>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d107      	bne.n	8005aea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005ada:	bf00      	nop
 8005adc:	f7ff ff52 	bl	8005984 <BSP_SD_GetCardState>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1fa      	bne.n	8005adc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08c      	sub	sp, #48	@ 0x30
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	603a      	str	r2, [r7, #0]
 8005afe:	71fb      	strb	r3, [r7, #7]
 8005b00:	460b      	mov	r3, r1
 8005b02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <SD_ioctl+0xac>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <SD_ioctl+0x28>
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e03c      	b.n	8005b96 <SD_ioctl+0xa2>

  switch (cmd)
 8005b1c:	79bb      	ldrb	r3, [r7, #6]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d834      	bhi.n	8005b8c <SD_ioctl+0x98>
 8005b22:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <SD_ioctl+0x34>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b41 	.word	0x08005b41
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b73 	.word	0x08005b73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005b3e:	e028      	b.n	8005b92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b40:	f107 030c 	add.w	r3, r7, #12
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff2d 	bl	80059a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005b56:	e01c      	b.n	8005b92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff ff21 	bl	80059a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005b70:	e00f      	b.n	8005b92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b72:	f107 030c 	add.w	r3, r7, #12
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ff14 	bl	80059a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	0a5a      	lsrs	r2, r3, #9
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005b8a:	e002      	b.n	8005b92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005b92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3730      	adds	r7, #48	@ 0x30
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000039 	.word	0x20000039

08005ba4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	4a08      	ldr	r2, [pc, #32]	@ (8005bd4 <disk_status+0x30>)
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	79fa      	ldrb	r2, [r7, #7]
 8005bbc:	4905      	ldr	r1, [pc, #20]	@ (8005bd4 <disk_status+0x30>)
 8005bbe:	440a      	add	r2, r1
 8005bc0:	7a12      	ldrb	r2, [r2, #8]
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	2000154c 	.word	0x2000154c

08005bd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	4a0e      	ldr	r2, [pc, #56]	@ (8005c24 <disk_initialize+0x4c>)
 8005bea:	5cd3      	ldrb	r3, [r2, r3]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d114      	bne.n	8005c1a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8005c24 <disk_initialize+0x4c>)
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	79fa      	ldrb	r2, [r7, #7]
 8005bfe:	4909      	ldr	r1, [pc, #36]	@ (8005c24 <disk_initialize+0x4c>)
 8005c00:	440a      	add	r2, r1
 8005c02:	7a12      	ldrb	r2, [r2, #8]
 8005c04:	4610      	mov	r0, r2
 8005c06:	4798      	blx	r3
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	4a03      	ldr	r2, [pc, #12]	@ (8005c24 <disk_initialize+0x4c>)
 8005c16:	2101      	movs	r1, #1
 8005c18:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000154c 	.word	0x2000154c

08005c28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4603      	mov	r3, r0
 8005c36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c64 <disk_read+0x3c>)
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	689c      	ldr	r4, [r3, #8]
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	4a07      	ldr	r2, [pc, #28]	@ (8005c64 <disk_read+0x3c>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	7a18      	ldrb	r0, [r3, #8]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	47a0      	blx	r4
 8005c54:	4603      	mov	r3, r0
 8005c56:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd90      	pop	{r4, r7, pc}
 8005c62:	bf00      	nop
 8005c64:	2000154c 	.word	0x2000154c

08005c68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c68:	b590      	push	{r4, r7, lr}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca4 <disk_write+0x3c>)
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68dc      	ldr	r4, [r3, #12]
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	4a07      	ldr	r2, [pc, #28]	@ (8005ca4 <disk_write+0x3c>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	7a18      	ldrb	r0, [r3, #8]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	47a0      	blx	r4
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd90      	pop	{r4, r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	2000154c 	.word	0x2000154c

08005ca8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	603a      	str	r2, [r7, #0]
 8005cb2:	71fb      	strb	r3, [r7, #7]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	4a09      	ldr	r2, [pc, #36]	@ (8005ce0 <disk_ioctl+0x38>)
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	79fa      	ldrb	r2, [r7, #7]
 8005cc6:	4906      	ldr	r1, [pc, #24]	@ (8005ce0 <disk_ioctl+0x38>)
 8005cc8:	440a      	add	r2, r1
 8005cca:	7a10      	ldrb	r0, [r2, #8]
 8005ccc:	79b9      	ldrb	r1, [r7, #6]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	4798      	blx	r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	2000154c 	.word	0x2000154c

08005ce4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005cf4:	89fb      	ldrh	r3, [r7, #14]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	b21a      	sxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	b21b      	sxth	r3, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	b21b      	sxth	r3, r3
 8005d04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005d06:	89fb      	ldrh	r3, [r7, #14]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3303      	adds	r3, #3
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	3202      	adds	r2, #2
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	3201      	adds	r2, #1
 8005d3a:	7812      	ldrb	r2, [r2, #0]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	7812      	ldrb	r2, [r2, #0]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	887a      	ldrh	r2, [r7, #2]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	0a1b      	lsrs	r3, r3, #8
 8005d76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	887a      	ldrh	r2, [r7, #2]
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	0a1b      	lsrs	r3, r3, #8
 8005daa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	617a      	str	r2, [r7, #20]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f3      	bne.n	8005df8 <mem_set+0x10>
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005e1e:	b480      	push	{r7}
 8005e20:	b089      	sub	sp, #36	@ 0x24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	61fa      	str	r2, [r7, #28]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	61ba      	str	r2, [r7, #24]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	1acb      	subs	r3, r1, r3
 8005e4a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <mem_cmp+0x40>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0eb      	beq.n	8005e36 <mem_cmp+0x18>

	return r;
 8005e5e:	697b      	ldr	r3, [r7, #20]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3724      	adds	r7, #36	@ 0x24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e76:	e002      	b.n	8005e7e <chk_chr+0x12>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <chk_chr+0x26>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d1f2      	bne.n	8005e78 <chk_chr+0xc>
	return *str;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	781b      	ldrb	r3, [r3, #0]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e01f      	b.n	8005ef4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005eb4:	4a41      	ldr	r2, [pc, #260]	@ (8005fbc <inc_lock+0x118>)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4413      	add	r3, r2
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d113      	bne.n	8005eee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8005fbc <inc_lock+0x118>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	4413      	add	r3, r2
 8005ece:	3304      	adds	r3, #4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d109      	bne.n	8005eee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005eda:	4a38      	ldr	r2, [pc, #224]	@ (8005fbc <inc_lock+0x118>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d006      	beq.n	8005efc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d9dc      	bls.n	8005eb4 <inc_lock+0x10>
 8005efa:	e000      	b.n	8005efe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005efc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d132      	bne.n	8005f6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e002      	b.n	8005f10 <inc_lock+0x6c>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d806      	bhi.n	8005f24 <inc_lock+0x80>
 8005f16:	4a29      	ldr	r2, [pc, #164]	@ (8005fbc <inc_lock+0x118>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	4413      	add	r3, r2
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f2      	bne.n	8005f0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d101      	bne.n	8005f2e <inc_lock+0x8a>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e040      	b.n	8005fb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4922      	ldr	r1, [pc, #136]	@ (8005fbc <inc_lock+0x118>)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	440b      	add	r3, r1
 8005f3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	491e      	ldr	r1, [pc, #120]	@ (8005fbc <inc_lock+0x118>)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	440b      	add	r3, r1
 8005f48:	3304      	adds	r3, #4
 8005f4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	491a      	ldr	r1, [pc, #104]	@ (8005fbc <inc_lock+0x118>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	440b      	add	r3, r1
 8005f58:	3308      	adds	r3, #8
 8005f5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005f5c:	4a17      	ldr	r2, [pc, #92]	@ (8005fbc <inc_lock+0x118>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	4413      	add	r3, r2
 8005f64:	330c      	adds	r3, #12
 8005f66:	2200      	movs	r2, #0
 8005f68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <inc_lock+0xe0>
 8005f70:	4a12      	ldr	r2, [pc, #72]	@ (8005fbc <inc_lock+0x118>)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	4413      	add	r3, r2
 8005f78:	330c      	adds	r3, #12
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <inc_lock+0xe0>
 8005f80:	2300      	movs	r3, #0
 8005f82:	e015      	b.n	8005fb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d108      	bne.n	8005f9c <inc_lock+0xf8>
 8005f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005fbc <inc_lock+0x118>)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	4413      	add	r3, r2
 8005f92:	330c      	adds	r3, #12
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	e001      	b.n	8005fa0 <inc_lock+0xfc>
 8005f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fa0:	4906      	ldr	r1, [pc, #24]	@ (8005fbc <inc_lock+0x118>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	440b      	add	r3, r1
 8005fa8:	330c      	adds	r3, #12
 8005faa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3301      	adds	r3, #1
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	2000132c 	.word	0x2000132c

08005fc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d825      	bhi.n	8006020 <dec_lock+0x60>
		n = Files[i].ctr;
 8005fd4:	4a17      	ldr	r2, [pc, #92]	@ (8006034 <dec_lock+0x74>)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4413      	add	r3, r2
 8005fdc:	330c      	adds	r3, #12
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005fe2:	89fb      	ldrh	r3, [r7, #14]
 8005fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe8:	d101      	bne.n	8005fee <dec_lock+0x2e>
 8005fea:	2300      	movs	r3, #0
 8005fec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005fee:	89fb      	ldrh	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <dec_lock+0x3a>
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8006034 <dec_lock+0x74>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4413      	add	r3, r2
 8006002:	330c      	adds	r3, #12
 8006004:	89fa      	ldrh	r2, [r7, #14]
 8006006:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006008:	89fb      	ldrh	r3, [r7, #14]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <dec_lock+0x5a>
 800600e:	4a09      	ldr	r2, [pc, #36]	@ (8006034 <dec_lock+0x74>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	4413      	add	r3, r2
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	737b      	strb	r3, [r7, #13]
 800601e:	e001      	b.n	8006024 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006020:	2302      	movs	r3, #2
 8006022:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006024:	7b7b      	ldrb	r3, [r7, #13]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	2000132c 	.word	0x2000132c

08006038 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e010      	b.n	8006068 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006046:	4a0d      	ldr	r2, [pc, #52]	@ (800607c <clear_lock+0x44>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	4413      	add	r3, r2
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	429a      	cmp	r2, r3
 8006054:	d105      	bne.n	8006062 <clear_lock+0x2a>
 8006056:	4a09      	ldr	r2, [pc, #36]	@ (800607c <clear_lock+0x44>)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	4413      	add	r3, r2
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d9eb      	bls.n	8006046 <clear_lock+0xe>
	}
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	2000132c 	.word	0x2000132c

08006080 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	78db      	ldrb	r3, [r3, #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d034      	beq.n	80060fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006098:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7858      	ldrb	r0, [r3, #1]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80060a4:	2301      	movs	r3, #1
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	f7ff fdde 	bl	8005c68 <disk_write>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
 80060b6:	e022      	b.n	80060fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d217      	bcs.n	80060fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	789b      	ldrb	r3, [r3, #2]
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	e010      	b.n	80060f8 <sync_window+0x78>
					wsect += fs->fsize;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7858      	ldrb	r0, [r3, #1]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80060ea:	2301      	movs	r3, #1
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	f7ff fdbb 	bl	8005c68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d8eb      	bhi.n	80060d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d01b      	beq.n	8006158 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ffad 	bl	8006080 <sync_window>
 8006126:	4603      	mov	r3, r0
 8006128:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d113      	bne.n	8006158 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7858      	ldrb	r0, [r3, #1]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800613a:	2301      	movs	r3, #1
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	f7ff fd73 	bl	8005c28 <disk_read>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800614e:	2301      	movs	r3, #1
 8006150:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	3b02      	subs	r3, #2
 8006170:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	3b02      	subs	r3, #2
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d301      	bcc.n	8006182 <clust2sect+0x20>
 800617e:	2300      	movs	r3, #0
 8006180:	e008      	b.n	8006194 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	895b      	ldrh	r3, [r3, #10]
 8006186:	461a      	mov	r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	fb03 f202 	mul.w	r2, r3, r2
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006192:	4413      	add	r3, r2
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d904      	bls.n	80061c0 <get_fat+0x20>
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d302      	bcc.n	80061c6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	e0ba      	b.n	800633c <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80061c6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ca:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	f000 8082 	beq.w	80062da <get_fat+0x13a>
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	f300 80a6 	bgt.w	8006328 <get_fat+0x188>
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d002      	beq.n	80061e6 <get_fat+0x46>
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d055      	beq.n	8006290 <get_fat+0xf0>
 80061e4:	e0a0      	b.n	8006328 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	085b      	lsrs	r3, r3, #1
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	899b      	ldrh	r3, [r3, #12]
 80061fc:	4619      	mov	r1, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	fbb3 f3f1 	udiv	r3, r3, r1
 8006204:	4413      	add	r3, r2
 8006206:	4619      	mov	r1, r3
 8006208:	6938      	ldr	r0, [r7, #16]
 800620a:	f7ff ff7d 	bl	8006108 <move_window>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	f040 808c 	bne.w	800632e <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	60fa      	str	r2, [r7, #12]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	8992      	ldrh	r2, [r2, #12]
 8006220:	fbb3 f1f2 	udiv	r1, r3, r2
 8006224:	fb01 f202 	mul.w	r2, r1, r2
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006232:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	899b      	ldrh	r3, [r3, #12]
 800623c:	4619      	mov	r1, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	fbb3 f3f1 	udiv	r3, r3, r1
 8006244:	4413      	add	r3, r2
 8006246:	4619      	mov	r1, r3
 8006248:	6938      	ldr	r0, [r7, #16]
 800624a:	f7ff ff5d 	bl	8006108 <move_window>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d16e      	bne.n	8006332 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	899b      	ldrh	r3, [r3, #12]
 8006258:	461a      	mov	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006260:	fb01 f202 	mul.w	r2, r1, r2
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <get_fat+0xe6>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	e002      	b.n	800628c <get_fat+0xec>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628c:	617b      	str	r3, [r7, #20]
			break;
 800628e:	e055      	b.n	800633c <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	899b      	ldrh	r3, [r3, #12]
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	b29b      	uxth	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80062a4:	4413      	add	r3, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	6938      	ldr	r0, [r7, #16]
 80062aa:	f7ff ff2d 	bl	8006108 <move_window>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d140      	bne.n	8006336 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	8992      	ldrh	r2, [r2, #12]
 80062c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80062c6:	fb00 f202 	mul.w	r2, r0, r2
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	440b      	add	r3, r1
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fd08 	bl	8005ce4 <ld_word>
 80062d4:	4603      	mov	r3, r0
 80062d6:	617b      	str	r3, [r7, #20]
			break;
 80062d8:	e030      	b.n	800633c <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	899b      	ldrh	r3, [r3, #12]
 80062e2:	089b      	lsrs	r3, r3, #2
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	4619      	mov	r1, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ee:	4413      	add	r3, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	6938      	ldr	r0, [r7, #16]
 80062f4:	f7ff ff08 	bl	8006108 <move_window>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d11d      	bne.n	800633a <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	8992      	ldrh	r2, [r2, #12]
 800630c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006310:	fb00 f202 	mul.w	r2, r0, r2
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	440b      	add	r3, r1
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fcfb 	bl	8005d14 <ld_dword>
 800631e:	4603      	mov	r3, r0
 8006320:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006324:	617b      	str	r3, [r7, #20]
			break;
 8006326:	e009      	b.n	800633c <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e006      	b.n	800633c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800632e:	bf00      	nop
 8006330:	e004      	b.n	800633c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006332:	bf00      	nop
 8006334:	e002      	b.n	800633c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800633a:	bf00      	nop
		}
	}

	return val;
 800633c:	697b      	ldr	r3, [r7, #20]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006346:	b590      	push	{r4, r7, lr}
 8006348:	b089      	sub	sp, #36	@ 0x24
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006352:	2302      	movs	r3, #2
 8006354:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b01      	cmp	r3, #1
 800635a:	f240 8109 	bls.w	8006570 <put_fat+0x22a>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	f080 8103 	bcs.w	8006570 <put_fat+0x22a>
		switch (fs->fs_type) {
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b03      	cmp	r3, #3
 8006370:	f000 80b6 	beq.w	80064e0 <put_fat+0x19a>
 8006374:	2b03      	cmp	r3, #3
 8006376:	f300 80fb 	bgt.w	8006570 <put_fat+0x22a>
 800637a:	2b01      	cmp	r3, #1
 800637c:	d003      	beq.n	8006386 <put_fat+0x40>
 800637e:	2b02      	cmp	r3, #2
 8006380:	f000 8083 	beq.w	800648a <put_fat+0x144>
 8006384:	e0f4      	b.n	8006570 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4413      	add	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	899b      	ldrh	r3, [r3, #12]
 800639c:	4619      	mov	r1, r3
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80063a4:	4413      	add	r3, r2
 80063a6:	4619      	mov	r1, r3
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff fead 	bl	8006108 <move_window>
 80063ae:	4603      	mov	r3, r0
 80063b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063b2:	7ffb      	ldrb	r3, [r7, #31]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 80d4 	bne.w	8006562 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	61ba      	str	r2, [r7, #24]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	8992      	ldrh	r2, [r2, #12]
 80063ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80063ce:	fb00 f202 	mul.w	r2, r0, r2
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	440b      	add	r3, r1
 80063d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <put_fat+0xb8>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	b25a      	sxtb	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	e001      	b.n	8006402 <put_fat+0xbc>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	899b      	ldrh	r3, [r3, #12]
 8006414:	4619      	mov	r1, r3
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	fbb3 f3f1 	udiv	r3, r3, r1
 800641c:	4413      	add	r3, r2
 800641e:	4619      	mov	r1, r3
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7ff fe71 	bl	8006108 <move_window>
 8006426:	4603      	mov	r3, r0
 8006428:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 809a 	bne.w	8006566 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	899b      	ldrh	r3, [r3, #12]
 800643c:	461a      	mov	r2, r3
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	fbb3 f0f2 	udiv	r0, r3, r2
 8006444:	fb00 f202 	mul.w	r2, r0, r2
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	440b      	add	r3, r1
 800644c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <put_fat+0x11a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	091b      	lsrs	r3, r3, #4
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e00e      	b.n	800647e <put_fat+0x138>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b25b      	sxtb	r3, r3
 8006466:	f023 030f 	bic.w	r3, r3, #15
 800646a:	b25a      	sxtb	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	b25b      	sxtb	r3, r3
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	b25b      	sxtb	r3, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	b25b      	sxtb	r3, r3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	70da      	strb	r2, [r3, #3]
			break;
 8006488:	e072      	b.n	8006570 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	899b      	ldrh	r3, [r3, #12]
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	4619      	mov	r1, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	fbb3 f3f1 	udiv	r3, r3, r1
 800649e:	4413      	add	r3, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fe30 	bl	8006108 <move_window>
 80064a8:	4603      	mov	r3, r0
 80064aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064ac:	7ffb      	ldrb	r3, [r7, #31]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d15b      	bne.n	800656a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	8992      	ldrh	r2, [r2, #12]
 80064c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80064c4:	fb00 f202 	mul.w	r2, r0, r2
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	440b      	add	r3, r1
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	b292      	uxth	r2, r2
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fc41 	bl	8005d5a <st_word>
			fs->wflag = 1;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	70da      	strb	r2, [r3, #3]
			break;
 80064de:	e047      	b.n	8006570 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	899b      	ldrh	r3, [r3, #12]
 80064e8:	089b      	lsrs	r3, r3, #2
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	4619      	mov	r1, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80064f4:	4413      	add	r3, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fe05 	bl	8006108 <move_window>
 80064fe:	4603      	mov	r3, r0
 8006500:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006502:	7ffb      	ldrb	r3, [r7, #31]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d132      	bne.n	800656e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	8992      	ldrh	r2, [r2, #12]
 800651c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006520:	fb00 f202 	mul.w	r2, r0, r2
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	440b      	add	r3, r1
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fbf3 	bl	8005d14 <ld_dword>
 800652e:	4603      	mov	r3, r0
 8006530:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006534:	4323      	orrs	r3, r4
 8006536:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	8992      	ldrh	r2, [r2, #12]
 8006546:	fbb3 f0f2 	udiv	r0, r3, r2
 800654a:	fb00 f202 	mul.w	r2, r0, r2
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	440b      	add	r3, r1
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fc1b 	bl	8005d90 <st_dword>
			fs->wflag = 1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	70da      	strb	r2, [r3, #3]
			break;
 8006560:	e006      	b.n	8006570 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006562:	bf00      	nop
 8006564:	e004      	b.n	8006570 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006566:	bf00      	nop
 8006568:	e002      	b.n	8006570 <put_fat+0x22a>
			if (res != FR_OK) break;
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <put_fat+0x22a>
			if (res != FR_OK) break;
 800656e:	bf00      	nop
		}
	}
	return res;
 8006570:	7ffb      	ldrb	r3, [r7, #31]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3724      	adds	r7, #36	@ 0x24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd90      	pop	{r4, r7, pc}

0800657a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <create_chain+0x2c>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d31b      	bcc.n	80065de <create_chain+0x64>
 80065a6:	2301      	movs	r3, #1
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	e018      	b.n	80065de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fdf6 	bl	80061a0 <get_fat>
 80065b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d801      	bhi.n	80065c0 <create_chain+0x46>
 80065bc:	2301      	movs	r3, #1
 80065be:	e070      	b.n	80066a2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d101      	bne.n	80065cc <create_chain+0x52>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	e06a      	b.n	80066a2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d201      	bcs.n	80065da <create_chain+0x60>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	e063      	b.n	80066a2 <create_chain+0x128>
		scl = clst;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d307      	bcc.n	8006602 <create_chain+0x88>
				ncl = 2;
 80065f2:	2302      	movs	r3, #2
 80065f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d901      	bls.n	8006602 <create_chain+0x88>
 80065fe:	2300      	movs	r3, #0
 8006600:	e04f      	b.n	80066a2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006602:	69f9      	ldr	r1, [r7, #28]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff fdcb 	bl	80061a0 <get_fat>
 800660a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00e      	beq.n	8006630 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d003      	beq.n	8006620 <create_chain+0xa6>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d101      	bne.n	8006624 <create_chain+0xaa>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	e03e      	b.n	80066a2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	429a      	cmp	r2, r3
 800662a:	d1da      	bne.n	80065e2 <create_chain+0x68>
 800662c:	2300      	movs	r3, #0
 800662e:	e038      	b.n	80066a2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006630:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006632:	f04f 32ff 	mov.w	r2, #4294967295
 8006636:	69f9      	ldr	r1, [r7, #28]
 8006638:	6938      	ldr	r0, [r7, #16]
 800663a:	f7ff fe84 	bl	8006346 <put_fat>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <create_chain+0xe2>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d006      	beq.n	800665c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6938      	ldr	r0, [r7, #16]
 8006654:	f7ff fe77 	bl	8006346 <put_fat>
 8006658:	4603      	mov	r3, r0
 800665a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d116      	bne.n	8006690 <create_chain+0x116>
		fs->last_clst = ncl;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	3b02      	subs	r3, #2
 8006672:	429a      	cmp	r2, r3
 8006674:	d804      	bhi.n	8006680 <create_chain+0x106>
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	1e5a      	subs	r2, r3, #1
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	711a      	strb	r2, [r3, #4]
 800668e:	e007      	b.n	80066a0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d102      	bne.n	800669c <create_chain+0x122>
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	e000      	b.n	800669e <create_chain+0x124>
 800669c:	2301      	movs	r3, #1
 800669e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80066a0:	69fb      	ldr	r3, [r7, #28]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066c0:	d204      	bcs.n	80066cc <dir_sdi+0x22>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80066cc:	2302      	movs	r3, #2
 80066ce:	e071      	b.n	80067b4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <dir_sdi+0x46>
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d902      	bls.n	80066f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10c      	bne.n	8006710 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	8912      	ldrh	r2, [r2, #8]
 80066fe:	4293      	cmp	r3, r2
 8006700:	d301      	bcc.n	8006706 <dir_sdi+0x5c>
 8006702:	2302      	movs	r3, #2
 8006704:	e056      	b.n	80067b4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	61da      	str	r2, [r3, #28]
 800670e:	e02d      	b.n	800676c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	895b      	ldrh	r3, [r3, #10]
 8006714:	461a      	mov	r2, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	899b      	ldrh	r3, [r3, #12]
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006720:	e019      	b.n	8006756 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6979      	ldr	r1, [r7, #20]
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fd3a 	bl	80061a0 <get_fat>
 800672c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d101      	bne.n	800673a <dir_sdi+0x90>
 8006736:	2301      	movs	r3, #1
 8006738:	e03c      	b.n	80067b4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d904      	bls.n	800674a <dir_sdi+0xa0>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	429a      	cmp	r2, r3
 8006748:	d301      	bcc.n	800674e <dir_sdi+0xa4>
 800674a:	2302      	movs	r3, #2
 800674c:	e032      	b.n	80067b4 <dir_sdi+0x10a>
			ofs -= csz;
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	429a      	cmp	r2, r3
 800675c:	d2e1      	bcs.n	8006722 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f7ff fcfe 	bl	8006162 <clust2sect>
 8006766:	4602      	mov	r2, r0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <dir_sdi+0xd4>
 800677a:	2302      	movs	r3, #2
 800677c:	e01a      	b.n	80067b4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69da      	ldr	r2, [r3, #28]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	899b      	ldrh	r3, [r3, #12]
 8006786:	4619      	mov	r1, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	fbb3 f3f1 	udiv	r3, r3, r1
 800678e:	441a      	add	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	899b      	ldrh	r3, [r3, #12]
 800679e:	461a      	mov	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80067a6:	fb00 f202 	mul.w	r2, r0, r2
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	18ca      	adds	r2, r1, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	3320      	adds	r3, #32
 80067d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <dir_next+0x28>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067e2:	d301      	bcc.n	80067e8 <dir_next+0x2c>
 80067e4:	2304      	movs	r3, #4
 80067e6:	e0bb      	b.n	8006960 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	899b      	ldrh	r3, [r3, #12]
 80067ec:	461a      	mov	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80067f4:	fb01 f202 	mul.w	r2, r1, r2
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 809d 	bne.w	800693a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	8912      	ldrh	r2, [r2, #8]
 800681a:	4293      	cmp	r3, r2
 800681c:	f0c0 808d 	bcc.w	800693a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	61da      	str	r2, [r3, #28]
 8006826:	2304      	movs	r3, #4
 8006828:	e09a      	b.n	8006960 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	899b      	ldrh	r3, [r3, #12]
 800682e:	461a      	mov	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	fbb3 f3f2 	udiv	r3, r3, r2
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	8952      	ldrh	r2, [r2, #10]
 800683a:	3a01      	subs	r2, #1
 800683c:	4013      	ands	r3, r2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d17b      	bne.n	800693a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f7ff fca8 	bl	80061a0 <get_fat>
 8006850:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d801      	bhi.n	800685c <dir_next+0xa0>
 8006858:	2302      	movs	r3, #2
 800685a:	e081      	b.n	8006960 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d101      	bne.n	8006868 <dir_next+0xac>
 8006864:	2301      	movs	r3, #1
 8006866:	e07b      	b.n	8006960 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	429a      	cmp	r2, r3
 8006870:	d359      	bcc.n	8006926 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	61da      	str	r2, [r3, #28]
 800687e:	2304      	movs	r3, #4
 8006880:	e06e      	b.n	8006960 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7ff fe75 	bl	800657a <create_chain>
 8006890:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <dir_next+0xe0>
 8006898:	2307      	movs	r3, #7
 800689a:	e061      	b.n	8006960 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <dir_next+0xea>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e05c      	b.n	8006960 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d101      	bne.n	80068b2 <dir_next+0xf6>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e056      	b.n	8006960 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7ff fbe4 	bl	8006080 <sync_window>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <dir_next+0x106>
 80068be:	2301      	movs	r3, #1
 80068c0:	e04e      	b.n	8006960 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	899b      	ldrh	r3, [r3, #12]
 80068cc:	461a      	mov	r2, r3
 80068ce:	2100      	movs	r1, #0
 80068d0:	f7ff fa8a 	bl	8005de8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	6979      	ldr	r1, [r7, #20]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fc41 	bl	8006162 <clust2sect>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80068e6:	e012      	b.n	800690e <dir_next+0x152>
						fs->wflag = 1;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fbc6 	bl	8006080 <sync_window>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <dir_next+0x142>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e030      	b.n	8006960 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	3301      	adds	r3, #1
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	635a      	str	r2, [r3, #52]	@ 0x34
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	895b      	ldrh	r3, [r3, #10]
 8006912:	461a      	mov	r2, r3
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4293      	cmp	r3, r2
 8006918:	d3e6      	bcc.n	80068e8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad2      	subs	r2, r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800692c:	6979      	ldr	r1, [r7, #20]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff fc17 	bl	8006162 <clust2sect>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	899b      	ldrh	r3, [r3, #12]
 800694a:	461a      	mov	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006952:	fb00 f202 	mul.w	r2, r0, r2
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	18ca      	adds	r2, r1, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	331a      	adds	r3, #26
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff f9b4 	bl	8005ce4 <ld_word>
 800697c:	4603      	mov	r3, r0
 800697e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b03      	cmp	r3, #3
 8006986:	d109      	bne.n	800699c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f9a9 	bl	8005ce4 <ld_word>
 8006992:	4603      	mov	r3, r0
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800699c:	68fb      	ldr	r3, [r7, #12]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	331a      	adds	r3, #26
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff f994 	bl	8005ce4 <ld_word>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <cmp_lfn+0x1e>
 80069c2:	2300      	movs	r3, #0
 80069c4:	e059      	b.n	8006a7a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	4613      	mov	r3, r2
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069dc:	2301      	movs	r3, #1
 80069de:	81fb      	strh	r3, [r7, #14]
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	e033      	b.n	8006a4e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80069e6:	4a27      	ldr	r2, [pc, #156]	@ (8006a84 <cmp_lfn+0xdc>)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	4413      	add	r3, r2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff f975 	bl	8005ce4 <ld_word>
 80069fa:	4603      	mov	r3, r0
 80069fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80069fe:	89fb      	ldrh	r3, [r7, #14]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01a      	beq.n	8006a3a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a08:	d812      	bhi.n	8006a30 <cmp_lfn+0x88>
 8006a0a:	89bb      	ldrh	r3, [r7, #12]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 faf3 	bl	8007ff8 <ff_wtoupper>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461c      	mov	r4, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	617a      	str	r2, [r7, #20]
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 fae7 	bl	8007ff8 <ff_wtoupper>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d001      	beq.n	8006a34 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006a30:	2300      	movs	r3, #0
 8006a32:	e022      	b.n	8006a7a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006a34:	89bb      	ldrh	r3, [r7, #12]
 8006a36:	81fb      	strh	r3, [r7, #14]
 8006a38:	e006      	b.n	8006a48 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006a3a:	89bb      	ldrh	r3, [r7, #12]
 8006a3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d001      	beq.n	8006a48 <cmp_lfn+0xa0>
 8006a44:	2300      	movs	r3, #0
 8006a46:	e018      	b.n	8006a7a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	d9c8      	bls.n	80069e6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <cmp_lfn+0xd0>
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d008      	beq.n	8006a78 <cmp_lfn+0xd0>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <cmp_lfn+0xd0>
 8006a74:	2300      	movs	r3, #0
 8006a76:	e000      	b.n	8006a7a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006a78:	2301      	movs	r3, #1
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd90      	pop	{r4, r7, pc}
 8006a82:	bf00      	nop
 8006a84:	080097f8 	.word	0x080097f8

08006a88 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	331a      	adds	r3, #26
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff f924 	bl	8005ce4 <ld_word>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <pick_lfn+0x1e>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e04d      	b.n	8006b42 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aae:	1e5a      	subs	r2, r3, #1
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006abc:	2301      	movs	r3, #1
 8006abe:	81fb      	strh	r3, [r7, #14]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	e028      	b.n	8006b18 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006ac6:	4a21      	ldr	r2, [pc, #132]	@ (8006b4c <pick_lfn+0xc4>)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4413      	add	r3, r2
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff f905 	bl	8005ce4 <ld_word>
 8006ada:	4603      	mov	r3, r0
 8006adc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006ade:	89fb      	ldrh	r3, [r7, #14]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00f      	beq.n	8006b04 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2bfe      	cmp	r3, #254	@ 0xfe
 8006ae8:	d901      	bls.n	8006aee <pick_lfn+0x66>
 8006aea:	2300      	movs	r3, #0
 8006aec:	e029      	b.n	8006b42 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006aee:	89bb      	ldrh	r3, [r7, #12]
 8006af0:	81fb      	strh	r3, [r7, #14]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	617a      	str	r2, [r7, #20]
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	89fa      	ldrh	r2, [r7, #14]
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e006      	b.n	8006b12 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006b04:	89bb      	ldrh	r3, [r7, #12]
 8006b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d001      	beq.n	8006b12 <pick_lfn+0x8a>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e017      	b.n	8006b42 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3301      	adds	r3, #1
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	d9d3      	bls.n	8006ac6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2bfe      	cmp	r3, #254	@ 0xfe
 8006b2e:	d901      	bls.n	8006b34 <pick_lfn+0xac>
 8006b30:	2300      	movs	r3, #0
 8006b32:	e006      	b.n	8006b42 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006b40:	2301      	movs	r3, #1
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	080097f8 	.word	0x080097f8

08006b50 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006b5c:	230b      	movs	r3, #11
 8006b5e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	0852      	lsrs	r2, r2, #1
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	1c59      	adds	r1, r3, #1
 8006b70:	6079      	str	r1, [r7, #4]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	4413      	add	r3, r2
 8006b76:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1ed      	bne.n	8006b60 <sum_sfn+0x10>
	return sum;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006ba6:	23ff      	movs	r3, #255	@ 0xff
 8006ba8:	757b      	strb	r3, [r7, #21]
 8006baa:	23ff      	movs	r3, #255	@ 0xff
 8006bac:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006bae:	e081      	b.n	8006cb4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6938      	ldr	r0, [r7, #16]
 8006bb8:	f7ff faa6 	bl	8006108 <move_window>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d17c      	bne.n	8006cc0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006bce:	7dbb      	ldrb	r3, [r7, #22]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	75fb      	strb	r3, [r7, #23]
 8006bd8:	e077      	b.n	8006cca <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	330b      	adds	r3, #11
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7bfa      	ldrb	r2, [r7, #15]
 8006bec:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006bee:	7dbb      	ldrb	r3, [r7, #22]
 8006bf0:	2be5      	cmp	r3, #229	@ 0xe5
 8006bf2:	d00e      	beq.n	8006c12 <dir_read+0x80>
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
 8006bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bf8:	d00b      	beq.n	8006c12 <dir_read+0x80>
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	f023 0320 	bic.w	r3, r3, #32
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	bf0c      	ite	eq
 8006c04:	2301      	moveq	r3, #1
 8006c06:	2300      	movne	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d002      	beq.n	8006c18 <dir_read+0x86>
				ord = 0xFF;
 8006c12:	23ff      	movs	r3, #255	@ 0xff
 8006c14:	757b      	strb	r3, [r7, #21]
 8006c16:	e044      	b.n	8006ca2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	d12f      	bne.n	8006c7e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006c1e:	7dbb      	ldrb	r3, [r7, #22]
 8006c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00d      	beq.n	8006c44 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	7b5b      	ldrb	r3, [r3, #13]
 8006c2e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006c30:	7dbb      	ldrb	r3, [r7, #22]
 8006c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c36:	75bb      	strb	r3, [r7, #22]
 8006c38:	7dbb      	ldrb	r3, [r7, #22]
 8006c3a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695a      	ldr	r2, [r3, #20]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006c44:	7dba      	ldrb	r2, [r7, #22]
 8006c46:	7d7b      	ldrb	r3, [r7, #21]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d115      	bne.n	8006c78 <dir_read+0xe6>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	330d      	adds	r3, #13
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	7d3a      	ldrb	r2, [r7, #20]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d10e      	bne.n	8006c78 <dir_read+0xe6>
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	4619      	mov	r1, r3
 8006c64:	4610      	mov	r0, r2
 8006c66:	f7ff ff0f 	bl	8006a88 <pick_lfn>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <dir_read+0xe6>
 8006c70:	7d7b      	ldrb	r3, [r7, #21]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e000      	b.n	8006c7a <dir_read+0xe8>
 8006c78:	23ff      	movs	r3, #255	@ 0xff
 8006c7a:	757b      	strb	r3, [r7, #21]
 8006c7c:	e011      	b.n	8006ca2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006c7e:	7d7b      	ldrb	r3, [r7, #21]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <dir_read+0x106>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff ff61 	bl	8006b50 <sum_sfn>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	461a      	mov	r2, r3
 8006c92:	7d3b      	ldrb	r3, [r7, #20]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d015      	beq.n	8006cc4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8006ca0:	e010      	b.n	8006cc4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fd89 	bl	80067bc <dir_next>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <dir_read+0x136>
	while (dp->sect) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f47f af79 	bne.w	8006bb0 <dir_read+0x1e>
 8006cbe:	e004      	b.n	8006cca <dir_read+0x138>
		if (res != FR_OK) break;
 8006cc0:	bf00      	nop
 8006cc2:	e002      	b.n	8006cca <dir_read+0x138>
					break;
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <dir_read+0x138>
		if (res != FR_OK) break;
 8006cc8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <dir_read+0x144>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	61da      	str	r2, [r3, #28]
	return res;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006cee:	2100      	movs	r1, #0
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff fcda 	bl	80066aa <dir_sdi>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <dir_find+0x24>
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	e0a9      	b.n	8006e58 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d04:	23ff      	movs	r3, #255	@ 0xff
 8006d06:	753b      	strb	r3, [r7, #20]
 8006d08:	7d3b      	ldrb	r3, [r7, #20]
 8006d0a:	757b      	strb	r3, [r7, #21]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d12:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f7ff f9f4 	bl	8006108 <move_window>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 8090 	bne.w	8006e4c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d34:	7dbb      	ldrb	r3, [r7, #22]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <dir_find+0x60>
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	75fb      	strb	r3, [r7, #23]
 8006d3e:	e08a      	b.n	8006e56 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	330b      	adds	r3, #11
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7bfa      	ldrb	r2, [r7, #15]
 8006d52:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006d54:	7dbb      	ldrb	r3, [r7, #22]
 8006d56:	2be5      	cmp	r3, #229	@ 0xe5
 8006d58:	d007      	beq.n	8006d6a <dir_find+0x8a>
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <dir_find+0x98>
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d006      	beq.n	8006d78 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d6a:	23ff      	movs	r3, #255	@ 0xff
 8006d6c:	757b      	strb	r3, [r7, #21]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f04f 32ff 	mov.w	r2, #4294967295
 8006d74:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d76:	e05e      	b.n	8006e36 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b0f      	cmp	r3, #15
 8006d7c:	d136      	bne.n	8006dec <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d154      	bne.n	8006e36 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006d8c:	7dbb      	ldrb	r3, [r7, #22]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00d      	beq.n	8006db2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	7b5b      	ldrb	r3, [r3, #13]
 8006d9c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006d9e:	7dbb      	ldrb	r3, [r7, #22]
 8006da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da4:	75bb      	strb	r3, [r7, #22]
 8006da6:	7dbb      	ldrb	r3, [r7, #22]
 8006da8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006db2:	7dba      	ldrb	r2, [r7, #22]
 8006db4:	7d7b      	ldrb	r3, [r7, #21]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d115      	bne.n	8006de6 <dir_find+0x106>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	330d      	adds	r3, #13
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	7d3a      	ldrb	r2, [r7, #20]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d10e      	bne.n	8006de6 <dir_find+0x106>
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	f7ff fde8 	bl	80069a8 <cmp_lfn>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <dir_find+0x106>
 8006dde:	7d7b      	ldrb	r3, [r7, #21]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	e000      	b.n	8006de8 <dir_find+0x108>
 8006de6:	23ff      	movs	r3, #255	@ 0xff
 8006de8:	757b      	strb	r3, [r7, #21]
 8006dea:	e024      	b.n	8006e36 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006dec:	7d7b      	ldrb	r3, [r7, #21]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <dir_find+0x126>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff feaa 	bl	8006b50 <sum_sfn>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	7d3b      	ldrb	r3, [r7, #20]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d024      	beq.n	8006e50 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <dir_find+0x14a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a18      	ldr	r0, [r3, #32]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3324      	adds	r3, #36	@ 0x24
 8006e1c:	220b      	movs	r2, #11
 8006e1e:	4619      	mov	r1, r3
 8006e20:	f7fe fffd 	bl	8005e1e <mem_cmp>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d014      	beq.n	8006e54 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e2a:	23ff      	movs	r3, #255	@ 0xff
 8006e2c:	757b      	strb	r3, [r7, #21]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f04f 32ff 	mov.w	r2, #4294967295
 8006e34:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fcbf 	bl	80067bc <dir_next>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f43f af65 	beq.w	8006d14 <dir_find+0x34>
 8006e4a:	e004      	b.n	8006e56 <dir_find+0x176>
		if (res != FR_OK) break;
 8006e4c:	bf00      	nop
 8006e4e:	e002      	b.n	8006e56 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e50:	bf00      	nop
 8006e52:	e000      	b.n	8006e56 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e54:	bf00      	nop

	return res;
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80ca 	beq.w	8007014 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d032      	beq.n	8006ef0 <get_fileinfo+0x90>
			i = j = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006e92:	e01b      	b.n	8006ecc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006e94:	89fb      	ldrh	r3, [r7, #14]
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f871 	bl	8007f80 <ff_convert>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006ea2:	89fb      	ldrh	r3, [r7, #14]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <get_fileinfo+0x4e>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e01a      	b.n	8006ee4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2bfe      	cmp	r3, #254	@ 0xfe
 8006eb2:	d902      	bls.n	8006eba <get_fileinfo+0x5a>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	e014      	b.n	8006ee4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	61fa      	str	r2, [r7, #28]
 8006ec0:	89fa      	ldrh	r2, [r7, #14]
 8006ec2:	b2d1      	uxtb	r1, r2
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	460a      	mov	r2, r1
 8006eca:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	1c59      	adds	r1, r3, #1
 8006ed4:	61b9      	str	r1, [r7, #24]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	81fb      	strh	r3, [r7, #14]
 8006ede:	89fb      	ldrh	r3, [r7, #14]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1d7      	bne.n	8006e94 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3316      	adds	r3, #22
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	3316      	adds	r3, #22
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006f04:	e04d      	b.n	8006fa2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	1c59      	adds	r1, r3, #1
 8006f0e:	61f9      	str	r1, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d041      	beq.n	8006fa0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d101      	bne.n	8006f26 <get_fileinfo+0xc6>
 8006f22:	23e5      	movs	r3, #229	@ 0xe5
 8006f24:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	2b09      	cmp	r3, #9
 8006f2a:	d10f      	bne.n	8006f4c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8006f2c:	89bb      	ldrh	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d105      	bne.n	8006f3e <get_fileinfo+0xde>
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	4413      	add	r3, r2
 8006f38:	3316      	adds	r3, #22
 8006f3a:	222e      	movs	r2, #46	@ 0x2e
 8006f3c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	61ba      	str	r2, [r7, #24]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	4413      	add	r3, r2
 8006f48:	222e      	movs	r2, #46	@ 0x2e
 8006f4a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	4413      	add	r3, r2
 8006f52:	3309      	adds	r3, #9
 8006f54:	7dfa      	ldrb	r2, [r7, #23]
 8006f56:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006f58:	89bb      	ldrh	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d11c      	bne.n	8006f98 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b40      	cmp	r3, #64	@ 0x40
 8006f62:	d913      	bls.n	8006f8c <get_fileinfo+0x12c>
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b5a      	cmp	r3, #90	@ 0x5a
 8006f68:	d810      	bhi.n	8006f8c <get_fileinfo+0x12c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d901      	bls.n	8006f7e <get_fileinfo+0x11e>
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	e000      	b.n	8006f80 <get_fileinfo+0x120>
 8006f7e:	2308      	movs	r3, #8
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	3320      	adds	r3, #32
 8006f8a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	4413      	add	r3, r2
 8006f92:	3316      	adds	r3, #22
 8006f94:	7dfa      	ldrb	r2, [r7, #23]
 8006f96:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	e000      	b.n	8006fa2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006fa0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b0a      	cmp	r3, #10
 8006fa6:	d9ae      	bls.n	8006f06 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006fa8:	89bb      	ldrh	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10d      	bne.n	8006fca <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3316      	adds	r3, #22
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <get_fileinfo+0x16a>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	4413      	add	r3, r2
 8006fd0:	3309      	adds	r3, #9
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	7ada      	ldrb	r2, [r3, #11]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	331c      	adds	r3, #28
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fe94 	bl	8005d14 <ld_dword>
 8006fec:	4602      	mov	r2, r0
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	3316      	adds	r3, #22
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe fe8b 	bl	8005d14 <ld_dword>
 8006ffe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	b29a      	uxth	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	80da      	strh	r2, [r3, #6]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	b29a      	uxth	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	809a      	strh	r2, [r3, #4]
 8007012:	e000      	b.n	8007016 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007014:	bf00      	nop
}
 8007016:	3720      	adds	r7, #32
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	@ 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	61ba      	str	r2, [r7, #24]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800704a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800704c:	2b1f      	cmp	r3, #31
 800704e:	d940      	bls.n	80070d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007052:	2b2f      	cmp	r3, #47	@ 0x2f
 8007054:	d006      	beq.n	8007064 <create_name+0x48>
 8007056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007058:	2b5c      	cmp	r3, #92	@ 0x5c
 800705a:	d110      	bne.n	800707e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800705c:	e002      	b.n	8007064 <create_name+0x48>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	3301      	adds	r3, #1
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	4413      	add	r3, r2
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b2f      	cmp	r3, #47	@ 0x2f
 800706e:	d0f6      	beq.n	800705e <create_name+0x42>
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	4413      	add	r3, r2
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b5c      	cmp	r3, #92	@ 0x5c
 800707a:	d0f0      	beq.n	800705e <create_name+0x42>
			break;
 800707c:	e02a      	b.n	80070d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2bfe      	cmp	r3, #254	@ 0xfe
 8007082:	d901      	bls.n	8007088 <create_name+0x6c>
 8007084:	2306      	movs	r3, #6
 8007086:	e17d      	b.n	8007384 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007088:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800708a:	b2db      	uxtb	r3, r3
 800708c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800708e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007090:	2101      	movs	r1, #1
 8007092:	4618      	mov	r0, r3
 8007094:	f000 ff74 	bl	8007f80 <ff_convert>
 8007098:	4603      	mov	r3, r0
 800709a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800709c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <create_name+0x8a>
 80070a2:	2306      	movs	r3, #6
 80070a4:	e16e      	b.n	8007384 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80070a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80070aa:	d809      	bhi.n	80070c0 <create_name+0xa4>
 80070ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ae:	4619      	mov	r1, r3
 80070b0:	488d      	ldr	r0, [pc, #564]	@ (80072e8 <create_name+0x2cc>)
 80070b2:	f7fe fedb 	bl	8005e6c <chk_chr>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <create_name+0xa4>
 80070bc:	2306      	movs	r3, #6
 80070be:	e161      	b.n	8007384 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	617a      	str	r2, [r7, #20]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80070d0:	e7b4      	b.n	800703c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80070d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	441a      	add	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070e0:	2b1f      	cmp	r3, #31
 80070e2:	d801      	bhi.n	80070e8 <create_name+0xcc>
 80070e4:	2304      	movs	r3, #4
 80070e6:	e000      	b.n	80070ea <create_name+0xce>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070ee:	e011      	b.n	8007114 <create_name+0xf8>
		w = lfn[di - 1];
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80070f6:	3b01      	subs	r3, #1
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007104:	2b20      	cmp	r3, #32
 8007106:	d002      	beq.n	800710e <create_name+0xf2>
 8007108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800710a:	2b2e      	cmp	r3, #46	@ 0x2e
 800710c:	d106      	bne.n	800711c <create_name+0x100>
		di--;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	3b01      	subs	r3, #1
 8007112:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1ea      	bne.n	80070f0 <create_name+0xd4>
 800711a:	e000      	b.n	800711e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800711c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	2200      	movs	r2, #0
 8007128:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <create_name+0x118>
 8007130:	2306      	movs	r3, #6
 8007132:	e127      	b.n	8007384 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3324      	adds	r3, #36	@ 0x24
 8007138:	220b      	movs	r2, #11
 800713a:	2120      	movs	r1, #32
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fe53 	bl	8005de8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007142:	2300      	movs	r3, #0
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	e002      	b.n	800714e <create_name+0x132>
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	3301      	adds	r3, #1
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	2b20      	cmp	r3, #32
 800715a:	d0f5      	beq.n	8007148 <create_name+0x12c>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	2b2e      	cmp	r3, #46	@ 0x2e
 8007168:	d0ee      	beq.n	8007148 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <create_name+0x168>
 8007170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007174:	f043 0303 	orr.w	r3, r3, #3
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800717c:	e002      	b.n	8007184 <create_name+0x168>
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	3b01      	subs	r3, #1
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <create_name+0x182>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007190:	3b01      	subs	r3, #1
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	2b2e      	cmp	r3, #46	@ 0x2e
 800719c:	d1ef      	bne.n	800717e <create_name+0x162>

	i = b = 0; ni = 8;
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071a4:	2300      	movs	r3, #0
 80071a6:	623b      	str	r3, [r7, #32]
 80071a8:	2308      	movs	r3, #8
 80071aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	61ba      	str	r2, [r7, #24]
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80071bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8090 	beq.w	80072e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80071c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d006      	beq.n	80071d8 <create_name+0x1bc>
 80071ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80071ce:	d10a      	bne.n	80071e6 <create_name+0x1ca>
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d006      	beq.n	80071e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071dc:	f043 0303 	orr.w	r3, r3, #3
 80071e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071e4:	e07d      	b.n	80072e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80071e6:	6a3a      	ldr	r2, [r7, #32]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d203      	bcs.n	80071f6 <create_name+0x1da>
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d123      	bne.n	800723e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2b0b      	cmp	r3, #11
 80071fa:	d106      	bne.n	800720a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80071fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007200:	f043 0303 	orr.w	r3, r3, #3
 8007204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007208:	e075      	b.n	80072f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	429a      	cmp	r2, r3
 8007210:	d005      	beq.n	800721e <create_name+0x202>
 8007212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007216:	f043 0303 	orr.w	r3, r3, #3
 800721a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	429a      	cmp	r2, r3
 8007224:	d866      	bhi.n	80072f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	2308      	movs	r3, #8
 800722c:	623b      	str	r3, [r7, #32]
 800722e:	230b      	movs	r3, #11
 8007230:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007232:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800723c:	e051      	b.n	80072e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800723e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007240:	2b7f      	cmp	r3, #127	@ 0x7f
 8007242:	d914      	bls.n	800726e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fe99 	bl	8007f80 <ff_convert>
 800724e:	4603      	mov	r3, r0
 8007250:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007252:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <create_name+0x246>
 8007258:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800725a:	3b80      	subs	r3, #128	@ 0x80
 800725c:	4a23      	ldr	r2, [pc, #140]	@ (80072ec <create_name+0x2d0>)
 800725e:	5cd3      	ldrb	r3, [r2, r3]
 8007260:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007262:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007266:	f043 0302 	orr.w	r3, r3, #2
 800726a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800726e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d007      	beq.n	8007284 <create_name+0x268>
 8007274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007276:	4619      	mov	r1, r3
 8007278:	481d      	ldr	r0, [pc, #116]	@ (80072f0 <create_name+0x2d4>)
 800727a:	f7fe fdf7 	bl	8005e6c <chk_chr>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007284:	235f      	movs	r3, #95	@ 0x5f
 8007286:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800728c:	f043 0303 	orr.w	r3, r3, #3
 8007290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007294:	e01b      	b.n	80072ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007298:	2b40      	cmp	r3, #64	@ 0x40
 800729a:	d909      	bls.n	80072b0 <create_name+0x294>
 800729c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800729e:	2b5a      	cmp	r3, #90	@ 0x5a
 80072a0:	d806      	bhi.n	80072b0 <create_name+0x294>
					b |= 2;
 80072a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072a6:	f043 0302 	orr.w	r3, r3, #2
 80072aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80072ae:	e00e      	b.n	80072ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80072b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072b2:	2b60      	cmp	r3, #96	@ 0x60
 80072b4:	d90b      	bls.n	80072ce <create_name+0x2b2>
 80072b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80072ba:	d808      	bhi.n	80072ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80072bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80072c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072ca:	3b20      	subs	r3, #32
 80072cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	623a      	str	r2, [r7, #32]
 80072d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072d6:	b2d1      	uxtb	r1, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	460a      	mov	r2, r1
 80072de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80072e2:	e763      	b.n	80071ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80072e4:	bf00      	nop
 80072e6:	e006      	b.n	80072f6 <create_name+0x2da>
 80072e8:	080096fc 	.word	0x080096fc
 80072ec:	08009778 	.word	0x08009778
 80072f0:	08009708 	.word	0x08009708
			if (si > di) break;			/* No extension */
 80072f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072fc:	2be5      	cmp	r3, #229	@ 0xe5
 80072fe:	d103      	bne.n	8007308 <create_name+0x2ec>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2205      	movs	r2, #5
 8007304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	2b08      	cmp	r3, #8
 800730c:	d104      	bne.n	8007318 <create_name+0x2fc>
 800730e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800731c:	f003 030c 	and.w	r3, r3, #12
 8007320:	2b0c      	cmp	r3, #12
 8007322:	d005      	beq.n	8007330 <create_name+0x314>
 8007324:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	2b03      	cmp	r3, #3
 800732e:	d105      	bne.n	800733c <create_name+0x320>
 8007330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800733c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d117      	bne.n	8007378 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007348:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d105      	bne.n	8007360 <create_name+0x344>
 8007354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007358:	f043 0310 	orr.w	r3, r3, #16
 800735c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007364:	f003 030c 	and.w	r3, r3, #12
 8007368:	2b04      	cmp	r3, #4
 800736a:	d105      	bne.n	8007378 <create_name+0x35c>
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800737e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007382:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	@ 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80073a0:	e002      	b.n	80073a8 <follow_path+0x1c>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	3301      	adds	r3, #1
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80073ae:	d0f8      	beq.n	80073a2 <follow_path+0x16>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80073b6:	d0f4      	beq.n	80073a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b1f      	cmp	r3, #31
 80073c4:	d80a      	bhi.n	80073dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2280      	movs	r2, #128	@ 0x80
 80073ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80073ce:	2100      	movs	r1, #0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff f96a 	bl	80066aa <dir_sdi>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
 80073da:	e048      	b.n	800746e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073dc:	463b      	mov	r3, r7
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fe1b 	bl	800701c <create_name>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d139      	bne.n	8007464 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fc75 	bl	8006ce0 <dir_find>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007400:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b04      	cmp	r3, #4
 800740c:	d12c      	bne.n	8007468 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d127      	bne.n	8007468 <follow_path+0xdc>
 8007418:	2305      	movs	r3, #5
 800741a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800741c:	e024      	b.n	8007468 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d121      	bne.n	800746c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	799b      	ldrb	r3, [r3, #6]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007434:	2305      	movs	r3, #5
 8007436:	75fb      	strb	r3, [r7, #23]
 8007438:	e019      	b.n	800746e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	8992      	ldrh	r2, [r2, #12]
 8007448:	fbb3 f0f2 	udiv	r0, r3, r2
 800744c:	fb00 f202 	mul.w	r2, r0, r2
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	440b      	add	r3, r1
 8007454:	4619      	mov	r1, r3
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff fa86 	bl	8006968 <ld_clust>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007462:	e7bb      	b.n	80073dc <follow_path+0x50>
			if (res != FR_OK) break;
 8007464:	bf00      	nop
 8007466:	e002      	b.n	800746e <follow_path+0xe2>
				break;
 8007468:	bf00      	nop
 800746a:	e000      	b.n	800746e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800746c:	bf00      	nop
			}
		}
	}

	return res;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007480:	f04f 33ff 	mov.w	r3, #4294967295
 8007484:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d031      	beq.n	80074f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	e002      	b.n	800749c <get_ldnumber+0x24>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	3301      	adds	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b1f      	cmp	r3, #31
 80074a2:	d903      	bls.n	80074ac <get_ldnumber+0x34>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80074aa:	d1f4      	bne.n	8007496 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80074b2:	d11c      	bne.n	80074ee <get_ldnumber+0x76>
			tp = *path;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	60fa      	str	r2, [r7, #12]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	3b30      	subs	r3, #48	@ 0x30
 80074c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b09      	cmp	r3, #9
 80074ca:	d80e      	bhi.n	80074ea <get_ldnumber+0x72>
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d10a      	bne.n	80074ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d107      	bne.n	80074ea <get_ldnumber+0x72>
					vol = (int)i;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	3301      	adds	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	e002      	b.n	80074f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80074ee:	2300      	movs	r3, #0
 80074f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80074f2:	693b      	ldr	r3, [r7, #16]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	70da      	strb	r2, [r3, #3]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f04f 32ff 	mov.w	r2, #4294967295
 8007516:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fe fdf4 	bl	8006108 <move_window>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <check_fs+0x2a>
 8007526:	2304      	movs	r3, #4
 8007528:	e038      	b.n	800759c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3338      	adds	r3, #56	@ 0x38
 800752e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fbd6 	bl	8005ce4 <ld_word>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007540:	429a      	cmp	r2, r3
 8007542:	d001      	beq.n	8007548 <check_fs+0x48>
 8007544:	2303      	movs	r3, #3
 8007546:	e029      	b.n	800759c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800754e:	2be9      	cmp	r3, #233	@ 0xe9
 8007550:	d009      	beq.n	8007566 <check_fs+0x66>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007558:	2beb      	cmp	r3, #235	@ 0xeb
 800755a:	d11e      	bne.n	800759a <check_fs+0x9a>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007562:	2b90      	cmp	r3, #144	@ 0x90
 8007564:	d119      	bne.n	800759a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3338      	adds	r3, #56	@ 0x38
 800756a:	3336      	adds	r3, #54	@ 0x36
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fbd1 	bl	8005d14 <ld_dword>
 8007572:	4603      	mov	r3, r0
 8007574:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007578:	4a0a      	ldr	r2, [pc, #40]	@ (80075a4 <check_fs+0xa4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d101      	bne.n	8007582 <check_fs+0x82>
 800757e:	2300      	movs	r3, #0
 8007580:	e00c      	b.n	800759c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3338      	adds	r3, #56	@ 0x38
 8007586:	3352      	adds	r3, #82	@ 0x52
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fbc3 	bl	8005d14 <ld_dword>
 800758e:	4603      	mov	r3, r0
 8007590:	4a05      	ldr	r2, [pc, #20]	@ (80075a8 <check_fs+0xa8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d101      	bne.n	800759a <check_fs+0x9a>
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800759a:	2302      	movs	r3, #2
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	00544146 	.word	0x00544146
 80075a8:	33544146 	.word	0x33544146

080075ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b096      	sub	sp, #88	@ 0x58
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff ff59 	bl	8007478 <get_ldnumber>
 80075c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80075c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da01      	bge.n	80075d2 <find_volume+0x26>
 80075ce:	230b      	movs	r3, #11
 80075d0:	e265      	b.n	8007a9e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80075d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007850 <find_volume+0x2a4>)
 80075d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <find_volume+0x3a>
 80075e2:	230c      	movs	r3, #12
 80075e4:	e25b      	b.n	8007a9e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80075ec:	79fb      	ldrb	r3, [r7, #7]
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01a      	beq.n	8007632 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe facf 	bl	8005ba4 <disk_status>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800760c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10c      	bne.n	8007632 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <find_volume+0x82>
 800761e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800762a:	230a      	movs	r3, #10
 800762c:	e237      	b.n	8007a9e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800762e:	2300      	movs	r3, #0
 8007630:	e235      	b.n	8007a9e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763a:	b2da      	uxtb	r2, r3
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fac7 	bl	8005bd8 <disk_initialize>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800765c:	2303      	movs	r3, #3
 800765e:	e21e      	b.n	8007a9e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <find_volume+0xca>
 8007666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007672:	230a      	movs	r3, #10
 8007674:	e213      	b.n	8007a9e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	7858      	ldrb	r0, [r3, #1]
 800767a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767c:	330c      	adds	r3, #12
 800767e:	461a      	mov	r2, r3
 8007680:	2102      	movs	r1, #2
 8007682:	f7fe fb11 	bl	8005ca8 <disk_ioctl>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <find_volume+0xe4>
 800768c:	2301      	movs	r3, #1
 800768e:	e206      	b.n	8007a9e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007692:	899b      	ldrh	r3, [r3, #12]
 8007694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007698:	d80d      	bhi.n	80076b6 <find_volume+0x10a>
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	899b      	ldrh	r3, [r3, #12]
 800769e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a2:	d308      	bcc.n	80076b6 <find_volume+0x10a>
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	899b      	ldrh	r3, [r3, #12]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ac:	899b      	ldrh	r3, [r3, #12]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <find_volume+0x10e>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e1f1      	b.n	8007a9e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80076be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076c2:	f7ff ff1d 	bl	8007500 <check_fs>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80076cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d149      	bne.n	8007768 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076d4:	2300      	movs	r3, #0
 80076d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80076d8:	e01e      	b.n	8007718 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80076e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80076e8:	4413      	add	r3, r2
 80076ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	3304      	adds	r3, #4
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <find_volume+0x158>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	3308      	adds	r3, #8
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fb0a 	bl	8005d14 <ld_dword>
 8007700:	4602      	mov	r2, r0
 8007702:	e000      	b.n	8007706 <find_volume+0x15a>
 8007704:	2200      	movs	r2, #0
 8007706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	3358      	adds	r3, #88	@ 0x58
 800770c:	443b      	add	r3, r7
 800770e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007714:	3301      	adds	r3, #1
 8007716:	643b      	str	r3, [r7, #64]	@ 0x40
 8007718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800771a:	2b03      	cmp	r3, #3
 800771c:	d9dd      	bls.n	80076da <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800771e:	2300      	movs	r3, #0
 8007720:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <find_volume+0x182>
 8007728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800772a:	3b01      	subs	r3, #1
 800772c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800772e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	3358      	adds	r3, #88	@ 0x58
 8007734:	443b      	add	r3, r7
 8007736:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800773a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800773c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <find_volume+0x1a2>
 8007742:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007744:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007746:	f7ff fedb 	bl	8007500 <check_fs>
 800774a:	4603      	mov	r3, r0
 800774c:	e000      	b.n	8007750 <find_volume+0x1a4>
 800774e:	2303      	movs	r3, #3
 8007750:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007754:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007758:	2b01      	cmp	r3, #1
 800775a:	d905      	bls.n	8007768 <find_volume+0x1bc>
 800775c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800775e:	3301      	adds	r3, #1
 8007760:	643b      	str	r3, [r7, #64]	@ 0x40
 8007762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007764:	2b03      	cmp	r3, #3
 8007766:	d9e2      	bls.n	800772e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800776c:	2b04      	cmp	r3, #4
 800776e:	d101      	bne.n	8007774 <find_volume+0x1c8>
 8007770:	2301      	movs	r3, #1
 8007772:	e194      	b.n	8007a9e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007778:	2b01      	cmp	r3, #1
 800777a:	d901      	bls.n	8007780 <find_volume+0x1d4>
 800777c:	230d      	movs	r3, #13
 800777e:	e18e      	b.n	8007a9e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	3338      	adds	r3, #56	@ 0x38
 8007784:	330b      	adds	r3, #11
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe faac 	bl	8005ce4 <ld_word>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	899b      	ldrh	r3, [r3, #12]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <find_volume+0x1f0>
 8007798:	230d      	movs	r3, #13
 800779a:	e180      	b.n	8007a9e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	3338      	adds	r3, #56	@ 0x38
 80077a0:	3316      	adds	r3, #22
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fa9e 	bl	8005ce4 <ld_word>
 80077a8:	4603      	mov	r3, r0
 80077aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80077ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <find_volume+0x214>
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	3338      	adds	r3, #56	@ 0x38
 80077b6:	3324      	adds	r3, #36	@ 0x24
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fe faab 	bl	8005d14 <ld_dword>
 80077be:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077c4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	789b      	ldrb	r3, [r3, #2]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d005      	beq.n	80077e4 <find_volume+0x238>
 80077d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077da:	789b      	ldrb	r3, [r3, #2]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d001      	beq.n	80077e4 <find_volume+0x238>
 80077e0:	230d      	movs	r3, #13
 80077e2:	e15c      	b.n	8007a9e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80077e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e6:	789b      	ldrb	r3, [r3, #2]
 80077e8:	461a      	mov	r2, r3
 80077ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
 80077f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077f8:	461a      	mov	r2, r3
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	895b      	ldrh	r3, [r3, #10]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d008      	beq.n	8007818 <find_volume+0x26c>
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	895b      	ldrh	r3, [r3, #10]
 800780a:	461a      	mov	r2, r3
 800780c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780e:	895b      	ldrh	r3, [r3, #10]
 8007810:	3b01      	subs	r3, #1
 8007812:	4013      	ands	r3, r2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <find_volume+0x270>
 8007818:	230d      	movs	r3, #13
 800781a:	e140      	b.n	8007a9e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	3338      	adds	r3, #56	@ 0x38
 8007820:	3311      	adds	r3, #17
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fa5e 	bl	8005ce4 <ld_word>
 8007828:	4603      	mov	r3, r0
 800782a:	461a      	mov	r2, r3
 800782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	891b      	ldrh	r3, [r3, #8]
 8007834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007836:	8992      	ldrh	r2, [r2, #12]
 8007838:	0952      	lsrs	r2, r2, #5
 800783a:	b292      	uxth	r2, r2
 800783c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007840:	fb01 f202 	mul.w	r2, r1, r2
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <find_volume+0x2a8>
 800784c:	230d      	movs	r3, #13
 800784e:	e126      	b.n	8007a9e <find_volume+0x4f2>
 8007850:	20001324 	.word	0x20001324

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	3338      	adds	r3, #56	@ 0x38
 8007858:	3313      	adds	r3, #19
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fa42 	bl	8005ce4 <ld_word>
 8007860:	4603      	mov	r3, r0
 8007862:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <find_volume+0x2cc>
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	3338      	adds	r3, #56	@ 0x38
 800786e:	3320      	adds	r3, #32
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fa4f 	bl	8005d14 <ld_dword>
 8007876:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	3338      	adds	r3, #56	@ 0x38
 800787c:	330e      	adds	r3, #14
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fa30 	bl	8005ce4 <ld_word>
 8007884:	4603      	mov	r3, r0
 8007886:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007888:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <find_volume+0x2e6>
 800788e:	230d      	movs	r3, #13
 8007890:	e105      	b.n	8007a9e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007892:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007896:	4413      	add	r3, r2
 8007898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800789a:	8911      	ldrh	r1, [r2, #8]
 800789c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800789e:	8992      	ldrh	r2, [r2, #12]
 80078a0:	0952      	lsrs	r2, r2, #5
 80078a2:	b292      	uxth	r2, r2
 80078a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80078a8:	b292      	uxth	r2, r2
 80078aa:	4413      	add	r3, r2
 80078ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80078ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d201      	bcs.n	80078ba <find_volume+0x30e>
 80078b6:	230d      	movs	r3, #13
 80078b8:	e0f1      	b.n	8007a9e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80078ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078c2:	8952      	ldrh	r2, [r2, #10]
 80078c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <find_volume+0x328>
 80078d0:	230d      	movs	r3, #13
 80078d2:	e0e4      	b.n	8007a9e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80078d4:	2303      	movs	r3, #3
 80078d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d802      	bhi.n	80078ea <find_volume+0x33e>
 80078e4:	2302      	movs	r3, #2
 80078e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d802      	bhi.n	80078fa <find_volume+0x34e>
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007900:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007904:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007906:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007908:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800790a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800790c:	441a      	add	r2, r3
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007912:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	441a      	add	r2, r3
 8007918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800791c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007920:	2b03      	cmp	r3, #3
 8007922:	d11e      	bne.n	8007962 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	3338      	adds	r3, #56	@ 0x38
 8007928:	332a      	adds	r3, #42	@ 0x2a
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe f9da 	bl	8005ce4 <ld_word>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <find_volume+0x38e>
 8007936:	230d      	movs	r3, #13
 8007938:	e0b1      	b.n	8007a9e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	891b      	ldrh	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <find_volume+0x39a>
 8007942:	230d      	movs	r3, #13
 8007944:	e0ab      	b.n	8007a9e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007948:	3338      	adds	r3, #56	@ 0x38
 800794a:	332c      	adds	r3, #44	@ 0x2c
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe f9e1 	bl	8005d14 <ld_dword>
 8007952:	4602      	mov	r2, r0
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007960:	e01f      	b.n	80079a2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007964:	891b      	ldrh	r3, [r3, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <find_volume+0x3c2>
 800796a:	230d      	movs	r3, #13
 800796c:	e097      	b.n	8007a9e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007974:	441a      	add	r2, r3
 8007976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007978:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800797a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800797e:	2b02      	cmp	r3, #2
 8007980:	d103      	bne.n	800798a <find_volume+0x3de>
 8007982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	e00a      	b.n	80079a0 <find_volume+0x3f4>
 800798a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798c:	69da      	ldr	r2, [r3, #28]
 800798e:	4613      	mov	r3, r2
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	4413      	add	r3, r2
 8007994:	085a      	lsrs	r2, r3, #1
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80079a0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	899b      	ldrh	r3, [r3, #12]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ae:	440b      	add	r3, r1
 80079b0:	3b01      	subs	r3, #1
 80079b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079b4:	8989      	ldrh	r1, [r1, #12]
 80079b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d201      	bcs.n	80079c2 <find_volume+0x416>
 80079be:	230d      	movs	r3, #13
 80079c0:	e06d      	b.n	8007a9e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80079c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	619a      	str	r2, [r3, #24]
 80079ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	2280      	movs	r2, #128	@ 0x80
 80079d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80079d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d149      	bne.n	8007a74 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	3338      	adds	r3, #56	@ 0x38
 80079e4:	3330      	adds	r3, #48	@ 0x30
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe f97c 	bl	8005ce4 <ld_word>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d140      	bne.n	8007a74 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80079f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f4:	3301      	adds	r3, #1
 80079f6:	4619      	mov	r1, r3
 80079f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079fa:	f7fe fb85 	bl	8006108 <move_window>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d137      	bne.n	8007a74 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	2200      	movs	r2, #0
 8007a08:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0c:	3338      	adds	r3, #56	@ 0x38
 8007a0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe f966 	bl	8005ce4 <ld_word>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d127      	bne.n	8007a74 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a26:	3338      	adds	r3, #56	@ 0x38
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe f973 	bl	8005d14 <ld_dword>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa8 <find_volume+0x4fc>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d11e      	bne.n	8007a74 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	3338      	adds	r3, #56	@ 0x38
 8007a3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe f968 	bl	8005d14 <ld_dword>
 8007a44:	4603      	mov	r3, r0
 8007a46:	4a19      	ldr	r2, [pc, #100]	@ (8007aac <find_volume+0x500>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d113      	bne.n	8007a74 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4e:	3338      	adds	r3, #56	@ 0x38
 8007a50:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe f95d 	bl	8005d14 <ld_dword>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a62:	3338      	adds	r3, #56	@ 0x38
 8007a64:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe f953 	bl	8005d14 <ld_dword>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a72:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007a7a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab0 <find_volume+0x504>)
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <find_volume+0x504>)
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	4b09      	ldr	r3, [pc, #36]	@ (8007ab0 <find_volume+0x504>)
 8007a8a:	881a      	ldrh	r2, [r3, #0]
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	4a08      	ldr	r2, [pc, #32]	@ (8007ab4 <find_volume+0x508>)
 8007a94:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a98:	f7fe face 	bl	8006038 <clear_lock>
#endif
	return FR_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3758      	adds	r7, #88	@ 0x58
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	41615252 	.word	0x41615252
 8007aac:	61417272 	.word	0x61417272
 8007ab0:	20001328 	.word	0x20001328
 8007ab4:	2000134c 	.word	0x2000134c

08007ab8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007ac2:	2309      	movs	r3, #9
 8007ac4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01c      	beq.n	8007b06 <validate+0x4e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d018      	beq.n	8007b06 <validate+0x4e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d013      	beq.n	8007b06 <validate+0x4e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	889a      	ldrh	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d10c      	bne.n	8007b06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe f856 	bl	8005ba4 <disk_status>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <validate+0x4e>
			res = FR_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <validate+0x5a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	e000      	b.n	8007b14 <validate+0x5c>
 8007b12:	2300      	movs	r3, #0
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	6013      	str	r3, [r2, #0]
	return res;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007b36:	f107 0310 	add.w	r3, r7, #16
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff fc9c 	bl	8007478 <get_ldnumber>
 8007b40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da01      	bge.n	8007b4c <f_mount+0x28>
 8007b48:	230b      	movs	r3, #11
 8007b4a:	e02b      	b.n	8007ba4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007b4c:	4a17      	ldr	r2, [pc, #92]	@ (8007bac <f_mount+0x88>)
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007b5c:	69b8      	ldr	r0, [r7, #24]
 8007b5e:	f7fe fa6b 	bl	8006038 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	490d      	ldr	r1, [pc, #52]	@ (8007bac <f_mount+0x88>)
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <f_mount+0x66>
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d001      	beq.n	8007b8e <f_mount+0x6a>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e00a      	b.n	8007ba4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b8e:	f107 010c 	add.w	r1, r7, #12
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	2200      	movs	r2, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fd07 	bl	80075ac <find_volume>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20001324 	.word	0x20001324

08007bb0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <f_opendir+0x14>
 8007bc0:	2309      	movs	r3, #9
 8007bc2:	e064      	b.n	8007c8e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007bc8:	f107 010c 	add.w	r1, r7, #12
 8007bcc:	463b      	mov	r3, r7
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fceb 	bl	80075ac <find_volume>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d14f      	bne.n	8007c80 <f_opendir+0xd0>
		obj->fs = fs;
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fbce 	bl	800738c <follow_path>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d13d      	bne.n	8007c76 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007c00:	b25b      	sxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	db12      	blt.n	8007c2c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	799b      	ldrb	r3, [r3, #6]
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fe fea4 	bl	8006968 <ld_clust>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	609a      	str	r2, [r3, #8]
 8007c26:	e001      	b.n	8007c2c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007c28:	2305      	movs	r3, #5
 8007c2a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d121      	bne.n	8007c76 <f_opendir+0xc6>
				obj->id = fs->id;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88da      	ldrh	r2, [r3, #6]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7fe fd34 	bl	80066aa <dir_sdi>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d114      	bne.n	8007c76 <f_opendir+0xc6>
					if (obj->sclust) {
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007c54:	2100      	movs	r1, #0
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fe f924 	bl	8005ea4 <inc_lock>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <f_opendir+0xc6>
 8007c6a:	2312      	movs	r3, #18
 8007c6c:	75fb      	strb	r3, [r7, #23]
 8007c6e:	e002      	b.n	8007c76 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d101      	bne.n	8007c80 <f_opendir+0xd0>
 8007c7c:	2305      	movs	r3, #5
 8007c7e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <f_opendir+0xdc>
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f107 0208 	add.w	r2, r7, #8
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff ff06 	bl	8007ab8 <validate>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d110      	bne.n	8007cd8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d006      	beq.n	8007ccc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe f97c 	bl	8005fc0 <dec_lock>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f107 0208 	add.w	r2, r7, #8
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fedf 	bl	8007ab8 <validate>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d126      	bne.n	8007d52 <f_readdir+0x70>
		if (!fno) {
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d106      	bne.n	8007d18 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fe fccc 	bl	80066aa <dir_sdi>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]
 8007d16:	e01c      	b.n	8007d52 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fe ff39 	bl	8006b92 <dir_read>
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d101      	bne.n	8007d2e <f_readdir+0x4c>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10e      	bne.n	8007d52 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff f892 	bl	8006e60 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fe fd3c 	bl	80067bc <dir_next>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d101      	bne.n	8007d52 <f_readdir+0x70>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b092      	sub	sp, #72	@ 0x48
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007d68:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007d6c:	f107 030c 	add.w	r3, r7, #12
 8007d70:	2200      	movs	r2, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff fc1a 	bl	80075ac <find_volume>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8007d7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 8099 	bne.w	8007eba <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	3b02      	subs	r3, #2
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d804      	bhi.n	8007da6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	699a      	ldr	r2, [r3, #24]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	e089      	b.n	8007eba <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d128      	bne.n	8007e04 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007db2:	2302      	movs	r3, #2
 8007db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007dba:	f107 0314 	add.w	r3, r7, #20
 8007dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe f9ed 	bl	80061a0 <get_fat>
 8007dc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d103      	bne.n	8007dd8 <f_getfree+0x7c>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007dd6:	e063      	b.n	8007ea0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d103      	bne.n	8007de6 <f_getfree+0x8a>
 8007dde:	2302      	movs	r3, #2
 8007de0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007de4:	e05c      	b.n	8007ea0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <f_getfree+0x96>
 8007dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dee:	3301      	adds	r3, #1
 8007df0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df4:	3301      	adds	r3, #1
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d3db      	bcc.n	8007dba <f_getfree+0x5e>
 8007e02:	e04d      	b.n	8007ea0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e14:	2300      	movs	r3, #0
 8007e16:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d113      	bne.n	8007e46 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007e26:	4619      	mov	r1, r3
 8007e28:	f7fe f96e 	bl	8006108 <move_window>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007e32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d131      	bne.n	8007e9e <f_getfree+0x142>
							p = fs->win;
 8007e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3c:	3338      	adds	r3, #56	@ 0x38
 8007e3e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	899b      	ldrh	r3, [r3, #12]
 8007e44:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d10f      	bne.n	8007e6e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007e4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e50:	f7fd ff48 	bl	8005ce4 <ld_word>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <f_getfree+0x104>
 8007e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	3302      	adds	r3, #2
 8007e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	3b02      	subs	r3, #2
 8007e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6c:	e010      	b.n	8007e90 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007e6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e70:	f7fd ff50 	bl	8005d14 <ld_dword>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <f_getfree+0x128>
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e80:	3301      	adds	r3, #1
 8007e82:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e86:	3304      	adds	r3, #4
 8007e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e92:	3b01      	subs	r3, #1
 8007e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1bd      	bne.n	8007e18 <f_getfree+0xbc>
 8007e9c:	e000      	b.n	8007ea0 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007e9e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ea4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eaa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	791a      	ldrb	r2, [r3, #4]
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007eba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3748      	adds	r7, #72	@ 0x48
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ede:	4b1f      	ldr	r3, [pc, #124]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007ee0:	7a5b      	ldrb	r3, [r3, #9]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d131      	bne.n	8007f4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007eea:	7a5b      	ldrb	r3, [r3, #9]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ef6:	4b19      	ldr	r3, [pc, #100]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007ef8:	7a5b      	ldrb	r3, [r3, #9]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	4a17      	ldr	r2, [pc, #92]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f06:	4b15      	ldr	r3, [pc, #84]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007f08:	7a5b      	ldrb	r3, [r3, #9]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4b13      	ldr	r3, [pc, #76]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007f10:	4413      	add	r3, r2
 8007f12:	79fa      	ldrb	r2, [r7, #7]
 8007f14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f16:	4b11      	ldr	r3, [pc, #68]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007f18:	7a5b      	ldrb	r3, [r3, #9]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	b2d1      	uxtb	r1, r2
 8007f20:	4a0e      	ldr	r2, [pc, #56]	@ (8007f5c <FATFS_LinkDriverEx+0x94>)
 8007f22:	7251      	strb	r1, [r2, #9]
 8007f24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
 8007f28:	3330      	adds	r3, #48	@ 0x30
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	3301      	adds	r3, #1
 8007f34:	223a      	movs	r2, #58	@ 0x3a
 8007f36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	3302      	adds	r3, #2
 8007f3c:	222f      	movs	r2, #47	@ 0x2f
 8007f3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	3303      	adds	r3, #3
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	2000154c 	.word	0x2000154c

08007f60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff ffaa 	bl	8007ec8 <FATFS_LinkDriverEx>
 8007f74:	4603      	mov	r3, r0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f90:	d802      	bhi.n	8007f98 <ff_convert+0x18>
		c = chr;
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	81fb      	strh	r3, [r7, #14]
 8007f96:	e025      	b.n	8007fe4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	2bff      	cmp	r3, #255	@ 0xff
 8007fa2:	d805      	bhi.n	8007fb0 <ff_convert+0x30>
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	3b80      	subs	r3, #128	@ 0x80
 8007fa8:	4a12      	ldr	r2, [pc, #72]	@ (8007ff4 <ff_convert+0x74>)
 8007faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fae:	e000      	b.n	8007fb2 <ff_convert+0x32>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	81fb      	strh	r3, [r7, #14]
 8007fb4:	e016      	b.n	8007fe4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	81fb      	strh	r3, [r7, #14]
 8007fba:	e009      	b.n	8007fd0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007fbc:	89fb      	ldrh	r3, [r7, #14]
 8007fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007ff4 <ff_convert+0x74>)
 8007fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc4:	88fa      	ldrh	r2, [r7, #6]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d006      	beq.n	8007fd8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007fca:	89fb      	ldrh	r3, [r7, #14]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	81fb      	strh	r3, [r7, #14]
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
 8007fd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fd4:	d9f2      	bls.n	8007fbc <ff_convert+0x3c>
 8007fd6:	e000      	b.n	8007fda <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007fd8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007fda:	89fb      	ldrh	r3, [r7, #14]
 8007fdc:	3380      	adds	r3, #128	@ 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007fe4:	89fb      	ldrh	r3, [r7, #14]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	08009808 	.word	0x08009808

08007ff8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008008:	d201      	bcs.n	800800e <ff_wtoupper+0x16>
 800800a:	4b3e      	ldr	r3, [pc, #248]	@ (8008104 <ff_wtoupper+0x10c>)
 800800c:	e000      	b.n	8008010 <ff_wtoupper+0x18>
 800800e:	4b3e      	ldr	r3, [pc, #248]	@ (8008108 <ff_wtoupper+0x110>)
 8008010:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	1c9a      	adds	r2, r3, #2
 8008016:	617a      	str	r2, [r7, #20]
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800801c:	8a7b      	ldrh	r3, [r7, #18]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d068      	beq.n	80080f4 <ff_wtoupper+0xfc>
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	8a7b      	ldrh	r3, [r7, #18]
 8008026:	429a      	cmp	r2, r3
 8008028:	d364      	bcc.n	80080f4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	1c9a      	adds	r2, r3, #2
 800802e:	617a      	str	r2, [r7, #20]
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	823b      	strh	r3, [r7, #16]
 8008034:	8a3b      	ldrh	r3, [r7, #16]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	81fb      	strh	r3, [r7, #14]
 800803a:	8a3b      	ldrh	r3, [r7, #16]
 800803c:	b2db      	uxtb	r3, r3
 800803e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008040:	88fa      	ldrh	r2, [r7, #6]
 8008042:	8a79      	ldrh	r1, [r7, #18]
 8008044:	8a3b      	ldrh	r3, [r7, #16]
 8008046:	440b      	add	r3, r1
 8008048:	429a      	cmp	r2, r3
 800804a:	da49      	bge.n	80080e0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800804c:	89fb      	ldrh	r3, [r7, #14]
 800804e:	2b08      	cmp	r3, #8
 8008050:	d84f      	bhi.n	80080f2 <ff_wtoupper+0xfa>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <ff_wtoupper+0x60>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	0800807d 	.word	0x0800807d
 800805c:	0800808f 	.word	0x0800808f
 8008060:	080080a5 	.word	0x080080a5
 8008064:	080080ad 	.word	0x080080ad
 8008068:	080080b5 	.word	0x080080b5
 800806c:	080080bd 	.word	0x080080bd
 8008070:	080080c5 	.word	0x080080c5
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080d5 	.word	0x080080d5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800807c:	88fa      	ldrh	r2, [r7, #6]
 800807e:	8a7b      	ldrh	r3, [r7, #18]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4413      	add	r3, r2
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	80fb      	strh	r3, [r7, #6]
 800808c:	e027      	b.n	80080de <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800808e:	88fa      	ldrh	r2, [r7, #6]
 8008090:	8a7b      	ldrh	r3, [r7, #18]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	b29b      	uxth	r3, r3
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	b29b      	uxth	r3, r3
 800809c:	88fa      	ldrh	r2, [r7, #6]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	80fb      	strh	r3, [r7, #6]
 80080a2:	e01c      	b.n	80080de <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	3b10      	subs	r3, #16
 80080a8:	80fb      	strh	r3, [r7, #6]
 80080aa:	e018      	b.n	80080de <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	3b20      	subs	r3, #32
 80080b0:	80fb      	strh	r3, [r7, #6]
 80080b2:	e014      	b.n	80080de <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	3b30      	subs	r3, #48	@ 0x30
 80080b8:	80fb      	strh	r3, [r7, #6]
 80080ba:	e010      	b.n	80080de <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	3b1a      	subs	r3, #26
 80080c0:	80fb      	strh	r3, [r7, #6]
 80080c2:	e00c      	b.n	80080de <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	3308      	adds	r3, #8
 80080c8:	80fb      	strh	r3, [r7, #6]
 80080ca:	e008      	b.n	80080de <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	3b50      	subs	r3, #80	@ 0x50
 80080d0:	80fb      	strh	r3, [r7, #6]
 80080d2:	e004      	b.n	80080de <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80080da:	80fb      	strh	r3, [r7, #6]
 80080dc:	bf00      	nop
			}
			break;
 80080de:	e008      	b.n	80080f2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80080e0:	89fb      	ldrh	r3, [r7, #14]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d195      	bne.n	8008012 <ff_wtoupper+0x1a>
 80080e6:	8a3b      	ldrh	r3, [r7, #16]
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4413      	add	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80080f0:	e78f      	b.n	8008012 <ff_wtoupper+0x1a>
			break;
 80080f2:	bf00      	nop
	}

	return chr;
 80080f4:	88fb      	ldrh	r3, [r7, #6]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	08009908 	.word	0x08009908
 8008108:	08009afc 	.word	0x08009afc

0800810c <std>:
 800810c:	2300      	movs	r3, #0
 800810e:	b510      	push	{r4, lr}
 8008110:	4604      	mov	r4, r0
 8008112:	e9c0 3300 	strd	r3, r3, [r0]
 8008116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800811a:	6083      	str	r3, [r0, #8]
 800811c:	8181      	strh	r1, [r0, #12]
 800811e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008120:	81c2      	strh	r2, [r0, #14]
 8008122:	6183      	str	r3, [r0, #24]
 8008124:	4619      	mov	r1, r3
 8008126:	2208      	movs	r2, #8
 8008128:	305c      	adds	r0, #92	@ 0x5c
 800812a:	f000 fa19 	bl	8008560 <memset>
 800812e:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <std+0x58>)
 8008130:	6263      	str	r3, [r4, #36]	@ 0x24
 8008132:	4b0d      	ldr	r3, [pc, #52]	@ (8008168 <std+0x5c>)
 8008134:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008136:	4b0d      	ldr	r3, [pc, #52]	@ (800816c <std+0x60>)
 8008138:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800813a:	4b0d      	ldr	r3, [pc, #52]	@ (8008170 <std+0x64>)
 800813c:	6323      	str	r3, [r4, #48]	@ 0x30
 800813e:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <std+0x68>)
 8008140:	6224      	str	r4, [r4, #32]
 8008142:	429c      	cmp	r4, r3
 8008144:	d006      	beq.n	8008154 <std+0x48>
 8008146:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800814a:	4294      	cmp	r4, r2
 800814c:	d002      	beq.n	8008154 <std+0x48>
 800814e:	33d0      	adds	r3, #208	@ 0xd0
 8008150:	429c      	cmp	r4, r3
 8008152:	d105      	bne.n	8008160 <std+0x54>
 8008154:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815c:	f000 ba9e 	b.w	800869c <__retarget_lock_init_recursive>
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	080083b1 	.word	0x080083b1
 8008168:	080083d3 	.word	0x080083d3
 800816c:	0800840b 	.word	0x0800840b
 8008170:	0800842f 	.word	0x0800842f
 8008174:	20001558 	.word	0x20001558

08008178 <stdio_exit_handler>:
 8008178:	4a02      	ldr	r2, [pc, #8]	@ (8008184 <stdio_exit_handler+0xc>)
 800817a:	4903      	ldr	r1, [pc, #12]	@ (8008188 <stdio_exit_handler+0x10>)
 800817c:	4803      	ldr	r0, [pc, #12]	@ (800818c <stdio_exit_handler+0x14>)
 800817e:	f000 b869 	b.w	8008254 <_fwalk_sglue>
 8008182:	bf00      	nop
 8008184:	2000003c 	.word	0x2000003c
 8008188:	08009209 	.word	0x08009209
 800818c:	2000004c 	.word	0x2000004c

08008190 <cleanup_stdio>:
 8008190:	6841      	ldr	r1, [r0, #4]
 8008192:	4b0c      	ldr	r3, [pc, #48]	@ (80081c4 <cleanup_stdio+0x34>)
 8008194:	4299      	cmp	r1, r3
 8008196:	b510      	push	{r4, lr}
 8008198:	4604      	mov	r4, r0
 800819a:	d001      	beq.n	80081a0 <cleanup_stdio+0x10>
 800819c:	f001 f834 	bl	8009208 <_fflush_r>
 80081a0:	68a1      	ldr	r1, [r4, #8]
 80081a2:	4b09      	ldr	r3, [pc, #36]	@ (80081c8 <cleanup_stdio+0x38>)
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d002      	beq.n	80081ae <cleanup_stdio+0x1e>
 80081a8:	4620      	mov	r0, r4
 80081aa:	f001 f82d 	bl	8009208 <_fflush_r>
 80081ae:	68e1      	ldr	r1, [r4, #12]
 80081b0:	4b06      	ldr	r3, [pc, #24]	@ (80081cc <cleanup_stdio+0x3c>)
 80081b2:	4299      	cmp	r1, r3
 80081b4:	d004      	beq.n	80081c0 <cleanup_stdio+0x30>
 80081b6:	4620      	mov	r0, r4
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	f001 b824 	b.w	8009208 <_fflush_r>
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	20001558 	.word	0x20001558
 80081c8:	200015c0 	.word	0x200015c0
 80081cc:	20001628 	.word	0x20001628

080081d0 <global_stdio_init.part.0>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <global_stdio_init.part.0+0x30>)
 80081d4:	4c0b      	ldr	r4, [pc, #44]	@ (8008204 <global_stdio_init.part.0+0x34>)
 80081d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008208 <global_stdio_init.part.0+0x38>)
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	4620      	mov	r0, r4
 80081dc:	2200      	movs	r2, #0
 80081de:	2104      	movs	r1, #4
 80081e0:	f7ff ff94 	bl	800810c <std>
 80081e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081e8:	2201      	movs	r2, #1
 80081ea:	2109      	movs	r1, #9
 80081ec:	f7ff ff8e 	bl	800810c <std>
 80081f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081f4:	2202      	movs	r2, #2
 80081f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081fa:	2112      	movs	r1, #18
 80081fc:	f7ff bf86 	b.w	800810c <std>
 8008200:	20001690 	.word	0x20001690
 8008204:	20001558 	.word	0x20001558
 8008208:	08008179 	.word	0x08008179

0800820c <__sfp_lock_acquire>:
 800820c:	4801      	ldr	r0, [pc, #4]	@ (8008214 <__sfp_lock_acquire+0x8>)
 800820e:	f000 ba46 	b.w	800869e <__retarget_lock_acquire_recursive>
 8008212:	bf00      	nop
 8008214:	20001699 	.word	0x20001699

08008218 <__sfp_lock_release>:
 8008218:	4801      	ldr	r0, [pc, #4]	@ (8008220 <__sfp_lock_release+0x8>)
 800821a:	f000 ba41 	b.w	80086a0 <__retarget_lock_release_recursive>
 800821e:	bf00      	nop
 8008220:	20001699 	.word	0x20001699

08008224 <__sinit>:
 8008224:	b510      	push	{r4, lr}
 8008226:	4604      	mov	r4, r0
 8008228:	f7ff fff0 	bl	800820c <__sfp_lock_acquire>
 800822c:	6a23      	ldr	r3, [r4, #32]
 800822e:	b11b      	cbz	r3, 8008238 <__sinit+0x14>
 8008230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008234:	f7ff bff0 	b.w	8008218 <__sfp_lock_release>
 8008238:	4b04      	ldr	r3, [pc, #16]	@ (800824c <__sinit+0x28>)
 800823a:	6223      	str	r3, [r4, #32]
 800823c:	4b04      	ldr	r3, [pc, #16]	@ (8008250 <__sinit+0x2c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1f5      	bne.n	8008230 <__sinit+0xc>
 8008244:	f7ff ffc4 	bl	80081d0 <global_stdio_init.part.0>
 8008248:	e7f2      	b.n	8008230 <__sinit+0xc>
 800824a:	bf00      	nop
 800824c:	08008191 	.word	0x08008191
 8008250:	20001690 	.word	0x20001690

08008254 <_fwalk_sglue>:
 8008254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008258:	4607      	mov	r7, r0
 800825a:	4688      	mov	r8, r1
 800825c:	4614      	mov	r4, r2
 800825e:	2600      	movs	r6, #0
 8008260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008264:	f1b9 0901 	subs.w	r9, r9, #1
 8008268:	d505      	bpl.n	8008276 <_fwalk_sglue+0x22>
 800826a:	6824      	ldr	r4, [r4, #0]
 800826c:	2c00      	cmp	r4, #0
 800826e:	d1f7      	bne.n	8008260 <_fwalk_sglue+0xc>
 8008270:	4630      	mov	r0, r6
 8008272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008276:	89ab      	ldrh	r3, [r5, #12]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d907      	bls.n	800828c <_fwalk_sglue+0x38>
 800827c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008280:	3301      	adds	r3, #1
 8008282:	d003      	beq.n	800828c <_fwalk_sglue+0x38>
 8008284:	4629      	mov	r1, r5
 8008286:	4638      	mov	r0, r7
 8008288:	47c0      	blx	r8
 800828a:	4306      	orrs	r6, r0
 800828c:	3568      	adds	r5, #104	@ 0x68
 800828e:	e7e9      	b.n	8008264 <_fwalk_sglue+0x10>

08008290 <iprintf>:
 8008290:	b40f      	push	{r0, r1, r2, r3}
 8008292:	b507      	push	{r0, r1, r2, lr}
 8008294:	4906      	ldr	r1, [pc, #24]	@ (80082b0 <iprintf+0x20>)
 8008296:	ab04      	add	r3, sp, #16
 8008298:	6808      	ldr	r0, [r1, #0]
 800829a:	f853 2b04 	ldr.w	r2, [r3], #4
 800829e:	6881      	ldr	r1, [r0, #8]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	f000 fc87 	bl	8008bb4 <_vfiprintf_r>
 80082a6:	b003      	add	sp, #12
 80082a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr
 80082b0:	20000048 	.word	0x20000048

080082b4 <_puts_r>:
 80082b4:	6a03      	ldr	r3, [r0, #32]
 80082b6:	b570      	push	{r4, r5, r6, lr}
 80082b8:	6884      	ldr	r4, [r0, #8]
 80082ba:	4605      	mov	r5, r0
 80082bc:	460e      	mov	r6, r1
 80082be:	b90b      	cbnz	r3, 80082c4 <_puts_r+0x10>
 80082c0:	f7ff ffb0 	bl	8008224 <__sinit>
 80082c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082c6:	07db      	lsls	r3, r3, #31
 80082c8:	d405      	bmi.n	80082d6 <_puts_r+0x22>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	0598      	lsls	r0, r3, #22
 80082ce:	d402      	bmi.n	80082d6 <_puts_r+0x22>
 80082d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082d2:	f000 f9e4 	bl	800869e <__retarget_lock_acquire_recursive>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	0719      	lsls	r1, r3, #28
 80082da:	d502      	bpl.n	80082e2 <_puts_r+0x2e>
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d135      	bne.n	800834e <_puts_r+0x9a>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f8e5 	bl	80084b4 <__swsetup_r>
 80082ea:	b380      	cbz	r0, 800834e <_puts_r+0x9a>
 80082ec:	f04f 35ff 	mov.w	r5, #4294967295
 80082f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082f2:	07da      	lsls	r2, r3, #31
 80082f4:	d405      	bmi.n	8008302 <_puts_r+0x4e>
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	059b      	lsls	r3, r3, #22
 80082fa:	d402      	bmi.n	8008302 <_puts_r+0x4e>
 80082fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082fe:	f000 f9cf 	bl	80086a0 <__retarget_lock_release_recursive>
 8008302:	4628      	mov	r0, r5
 8008304:	bd70      	pop	{r4, r5, r6, pc}
 8008306:	2b00      	cmp	r3, #0
 8008308:	da04      	bge.n	8008314 <_puts_r+0x60>
 800830a:	69a2      	ldr	r2, [r4, #24]
 800830c:	429a      	cmp	r2, r3
 800830e:	dc17      	bgt.n	8008340 <_puts_r+0x8c>
 8008310:	290a      	cmp	r1, #10
 8008312:	d015      	beq.n	8008340 <_puts_r+0x8c>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	6022      	str	r2, [r4, #0]
 800831a:	7019      	strb	r1, [r3, #0]
 800831c:	68a3      	ldr	r3, [r4, #8]
 800831e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008322:	3b01      	subs	r3, #1
 8008324:	60a3      	str	r3, [r4, #8]
 8008326:	2900      	cmp	r1, #0
 8008328:	d1ed      	bne.n	8008306 <_puts_r+0x52>
 800832a:	2b00      	cmp	r3, #0
 800832c:	da11      	bge.n	8008352 <_puts_r+0x9e>
 800832e:	4622      	mov	r2, r4
 8008330:	210a      	movs	r1, #10
 8008332:	4628      	mov	r0, r5
 8008334:	f000 f87f 	bl	8008436 <__swbuf_r>
 8008338:	3001      	adds	r0, #1
 800833a:	d0d7      	beq.n	80082ec <_puts_r+0x38>
 800833c:	250a      	movs	r5, #10
 800833e:	e7d7      	b.n	80082f0 <_puts_r+0x3c>
 8008340:	4622      	mov	r2, r4
 8008342:	4628      	mov	r0, r5
 8008344:	f000 f877 	bl	8008436 <__swbuf_r>
 8008348:	3001      	adds	r0, #1
 800834a:	d1e7      	bne.n	800831c <_puts_r+0x68>
 800834c:	e7ce      	b.n	80082ec <_puts_r+0x38>
 800834e:	3e01      	subs	r6, #1
 8008350:	e7e4      	b.n	800831c <_puts_r+0x68>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	6022      	str	r2, [r4, #0]
 8008358:	220a      	movs	r2, #10
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	e7ee      	b.n	800833c <_puts_r+0x88>
	...

08008360 <puts>:
 8008360:	4b02      	ldr	r3, [pc, #8]	@ (800836c <puts+0xc>)
 8008362:	4601      	mov	r1, r0
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	f7ff bfa5 	b.w	80082b4 <_puts_r>
 800836a:	bf00      	nop
 800836c:	20000048 	.word	0x20000048

08008370 <siprintf>:
 8008370:	b40e      	push	{r1, r2, r3}
 8008372:	b500      	push	{lr}
 8008374:	b09c      	sub	sp, #112	@ 0x70
 8008376:	ab1d      	add	r3, sp, #116	@ 0x74
 8008378:	9002      	str	r0, [sp, #8]
 800837a:	9006      	str	r0, [sp, #24]
 800837c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008380:	4809      	ldr	r0, [pc, #36]	@ (80083a8 <siprintf+0x38>)
 8008382:	9107      	str	r1, [sp, #28]
 8008384:	9104      	str	r1, [sp, #16]
 8008386:	4909      	ldr	r1, [pc, #36]	@ (80083ac <siprintf+0x3c>)
 8008388:	f853 2b04 	ldr.w	r2, [r3], #4
 800838c:	9105      	str	r1, [sp, #20]
 800838e:	6800      	ldr	r0, [r0, #0]
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	a902      	add	r1, sp, #8
 8008394:	f000 fae8 	bl	8008968 <_svfiprintf_r>
 8008398:	9b02      	ldr	r3, [sp, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	b01c      	add	sp, #112	@ 0x70
 80083a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a4:	b003      	add	sp, #12
 80083a6:	4770      	bx	lr
 80083a8:	20000048 	.word	0x20000048
 80083ac:	ffff0208 	.word	0xffff0208

080083b0 <__sread>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	460c      	mov	r4, r1
 80083b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b8:	f000 f922 	bl	8008600 <_read_r>
 80083bc:	2800      	cmp	r0, #0
 80083be:	bfab      	itete	ge
 80083c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083c2:	89a3      	ldrhlt	r3, [r4, #12]
 80083c4:	181b      	addge	r3, r3, r0
 80083c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083ca:	bfac      	ite	ge
 80083cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083ce:	81a3      	strhlt	r3, [r4, #12]
 80083d0:	bd10      	pop	{r4, pc}

080083d2 <__swrite>:
 80083d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d6:	461f      	mov	r7, r3
 80083d8:	898b      	ldrh	r3, [r1, #12]
 80083da:	05db      	lsls	r3, r3, #23
 80083dc:	4605      	mov	r5, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	4616      	mov	r6, r2
 80083e2:	d505      	bpl.n	80083f0 <__swrite+0x1e>
 80083e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e8:	2302      	movs	r3, #2
 80083ea:	2200      	movs	r2, #0
 80083ec:	f000 f8f6 	bl	80085dc <_lseek_r>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	4632      	mov	r2, r6
 80083fe:	463b      	mov	r3, r7
 8008400:	4628      	mov	r0, r5
 8008402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008406:	f000 b90d 	b.w	8008624 <_write_r>

0800840a <__sseek>:
 800840a:	b510      	push	{r4, lr}
 800840c:	460c      	mov	r4, r1
 800840e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008412:	f000 f8e3 	bl	80085dc <_lseek_r>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	bf15      	itete	ne
 800841c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800841e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008426:	81a3      	strheq	r3, [r4, #12]
 8008428:	bf18      	it	ne
 800842a:	81a3      	strhne	r3, [r4, #12]
 800842c:	bd10      	pop	{r4, pc}

0800842e <__sclose>:
 800842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008432:	f000 b8c3 	b.w	80085bc <_close_r>

08008436 <__swbuf_r>:
 8008436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008438:	460e      	mov	r6, r1
 800843a:	4614      	mov	r4, r2
 800843c:	4605      	mov	r5, r0
 800843e:	b118      	cbz	r0, 8008448 <__swbuf_r+0x12>
 8008440:	6a03      	ldr	r3, [r0, #32]
 8008442:	b90b      	cbnz	r3, 8008448 <__swbuf_r+0x12>
 8008444:	f7ff feee 	bl	8008224 <__sinit>
 8008448:	69a3      	ldr	r3, [r4, #24]
 800844a:	60a3      	str	r3, [r4, #8]
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	071a      	lsls	r2, r3, #28
 8008450:	d501      	bpl.n	8008456 <__swbuf_r+0x20>
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	b943      	cbnz	r3, 8008468 <__swbuf_r+0x32>
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f000 f82b 	bl	80084b4 <__swsetup_r>
 800845e:	b118      	cbz	r0, 8008468 <__swbuf_r+0x32>
 8008460:	f04f 37ff 	mov.w	r7, #4294967295
 8008464:	4638      	mov	r0, r7
 8008466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	6922      	ldr	r2, [r4, #16]
 800846c:	1a98      	subs	r0, r3, r2
 800846e:	6963      	ldr	r3, [r4, #20]
 8008470:	b2f6      	uxtb	r6, r6
 8008472:	4283      	cmp	r3, r0
 8008474:	4637      	mov	r7, r6
 8008476:	dc05      	bgt.n	8008484 <__swbuf_r+0x4e>
 8008478:	4621      	mov	r1, r4
 800847a:	4628      	mov	r0, r5
 800847c:	f000 fec4 	bl	8009208 <_fflush_r>
 8008480:	2800      	cmp	r0, #0
 8008482:	d1ed      	bne.n	8008460 <__swbuf_r+0x2a>
 8008484:	68a3      	ldr	r3, [r4, #8]
 8008486:	3b01      	subs	r3, #1
 8008488:	60a3      	str	r3, [r4, #8]
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	6022      	str	r2, [r4, #0]
 8008490:	701e      	strb	r6, [r3, #0]
 8008492:	6962      	ldr	r2, [r4, #20]
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	429a      	cmp	r2, r3
 8008498:	d004      	beq.n	80084a4 <__swbuf_r+0x6e>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	07db      	lsls	r3, r3, #31
 800849e:	d5e1      	bpl.n	8008464 <__swbuf_r+0x2e>
 80084a0:	2e0a      	cmp	r6, #10
 80084a2:	d1df      	bne.n	8008464 <__swbuf_r+0x2e>
 80084a4:	4621      	mov	r1, r4
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 feae 	bl	8009208 <_fflush_r>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d0d9      	beq.n	8008464 <__swbuf_r+0x2e>
 80084b0:	e7d6      	b.n	8008460 <__swbuf_r+0x2a>
	...

080084b4 <__swsetup_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4b29      	ldr	r3, [pc, #164]	@ (800855c <__swsetup_r+0xa8>)
 80084b8:	4605      	mov	r5, r0
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	460c      	mov	r4, r1
 80084be:	b118      	cbz	r0, 80084c8 <__swsetup_r+0x14>
 80084c0:	6a03      	ldr	r3, [r0, #32]
 80084c2:	b90b      	cbnz	r3, 80084c8 <__swsetup_r+0x14>
 80084c4:	f7ff feae 	bl	8008224 <__sinit>
 80084c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084cc:	0719      	lsls	r1, r3, #28
 80084ce:	d422      	bmi.n	8008516 <__swsetup_r+0x62>
 80084d0:	06da      	lsls	r2, r3, #27
 80084d2:	d407      	bmi.n	80084e4 <__swsetup_r+0x30>
 80084d4:	2209      	movs	r2, #9
 80084d6:	602a      	str	r2, [r5, #0]
 80084d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	f04f 30ff 	mov.w	r0, #4294967295
 80084e2:	e033      	b.n	800854c <__swsetup_r+0x98>
 80084e4:	0758      	lsls	r0, r3, #29
 80084e6:	d512      	bpl.n	800850e <__swsetup_r+0x5a>
 80084e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084ea:	b141      	cbz	r1, 80084fe <__swsetup_r+0x4a>
 80084ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d002      	beq.n	80084fa <__swsetup_r+0x46>
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 f8e3 	bl	80086c0 <_free_r>
 80084fa:	2300      	movs	r3, #0
 80084fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	2300      	movs	r3, #0
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f043 0308 	orr.w	r3, r3, #8
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	6923      	ldr	r3, [r4, #16]
 8008518:	b94b      	cbnz	r3, 800852e <__swsetup_r+0x7a>
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008524:	d003      	beq.n	800852e <__swsetup_r+0x7a>
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f000 febb 	bl	80092a4 <__smakebuf_r>
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	f013 0201 	ands.w	r2, r3, #1
 8008536:	d00a      	beq.n	800854e <__swsetup_r+0x9a>
 8008538:	2200      	movs	r2, #0
 800853a:	60a2      	str	r2, [r4, #8]
 800853c:	6962      	ldr	r2, [r4, #20]
 800853e:	4252      	negs	r2, r2
 8008540:	61a2      	str	r2, [r4, #24]
 8008542:	6922      	ldr	r2, [r4, #16]
 8008544:	b942      	cbnz	r2, 8008558 <__swsetup_r+0xa4>
 8008546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800854a:	d1c5      	bne.n	80084d8 <__swsetup_r+0x24>
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	0799      	lsls	r1, r3, #30
 8008550:	bf58      	it	pl
 8008552:	6962      	ldrpl	r2, [r4, #20]
 8008554:	60a2      	str	r2, [r4, #8]
 8008556:	e7f4      	b.n	8008542 <__swsetup_r+0x8e>
 8008558:	2000      	movs	r0, #0
 800855a:	e7f7      	b.n	800854c <__swsetup_r+0x98>
 800855c:	20000048 	.word	0x20000048

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <strcat>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4602      	mov	r2, r0
 8008574:	7814      	ldrb	r4, [r2, #0]
 8008576:	4613      	mov	r3, r2
 8008578:	3201      	adds	r2, #1
 800857a:	2c00      	cmp	r4, #0
 800857c:	d1fa      	bne.n	8008574 <strcat+0x4>
 800857e:	3b01      	subs	r3, #1
 8008580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008584:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008588:	2a00      	cmp	r2, #0
 800858a:	d1f9      	bne.n	8008580 <strcat+0x10>
 800858c:	bd10      	pop	{r4, pc}

0800858e <strstr>:
 800858e:	780a      	ldrb	r2, [r1, #0]
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	b96a      	cbnz	r2, 80085b0 <strstr+0x22>
 8008594:	bd70      	pop	{r4, r5, r6, pc}
 8008596:	429a      	cmp	r2, r3
 8008598:	d109      	bne.n	80085ae <strstr+0x20>
 800859a:	460c      	mov	r4, r1
 800859c:	4605      	mov	r5, r0
 800859e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0f6      	beq.n	8008594 <strstr+0x6>
 80085a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80085aa:	429e      	cmp	r6, r3
 80085ac:	d0f7      	beq.n	800859e <strstr+0x10>
 80085ae:	3001      	adds	r0, #1
 80085b0:	7803      	ldrb	r3, [r0, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1ef      	bne.n	8008596 <strstr+0x8>
 80085b6:	4618      	mov	r0, r3
 80085b8:	e7ec      	b.n	8008594 <strstr+0x6>
	...

080085bc <_close_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d06      	ldr	r5, [pc, #24]	@ (80085d8 <_close_r+0x1c>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f9 fa5b 	bl	8001a82 <_close>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_close_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_close_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20001694 	.word	0x20001694

080085dc <_lseek_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d07      	ldr	r5, [pc, #28]	@ (80085fc <_lseek_r+0x20>)
 80085e0:	4604      	mov	r4, r0
 80085e2:	4608      	mov	r0, r1
 80085e4:	4611      	mov	r1, r2
 80085e6:	2200      	movs	r2, #0
 80085e8:	602a      	str	r2, [r5, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f7f9 fa70 	bl	8001ad0 <_lseek>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_lseek_r+0x1e>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_lseek_r+0x1e>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20001694 	.word	0x20001694

08008600 <_read_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d07      	ldr	r5, [pc, #28]	@ (8008620 <_read_r+0x20>)
 8008604:	4604      	mov	r4, r0
 8008606:	4608      	mov	r0, r1
 8008608:	4611      	mov	r1, r2
 800860a:	2200      	movs	r2, #0
 800860c:	602a      	str	r2, [r5, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	f7f9 f9fe 	bl	8001a10 <_read>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_read_r+0x1e>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_read_r+0x1e>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20001694 	.word	0x20001694

08008624 <_write_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d07      	ldr	r5, [pc, #28]	@ (8008644 <_write_r+0x20>)
 8008628:	4604      	mov	r4, r0
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	2200      	movs	r2, #0
 8008630:	602a      	str	r2, [r5, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	f7f9 fa09 	bl	8001a4a <_write>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_write_r+0x1e>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_write_r+0x1e>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20001694 	.word	0x20001694

08008648 <__errno>:
 8008648:	4b01      	ldr	r3, [pc, #4]	@ (8008650 <__errno+0x8>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000048 	.word	0x20000048

08008654 <__libc_init_array>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	4d0d      	ldr	r5, [pc, #52]	@ (800868c <__libc_init_array+0x38>)
 8008658:	4c0d      	ldr	r4, [pc, #52]	@ (8008690 <__libc_init_array+0x3c>)
 800865a:	1b64      	subs	r4, r4, r5
 800865c:	10a4      	asrs	r4, r4, #2
 800865e:	2600      	movs	r6, #0
 8008660:	42a6      	cmp	r6, r4
 8008662:	d109      	bne.n	8008678 <__libc_init_array+0x24>
 8008664:	4d0b      	ldr	r5, [pc, #44]	@ (8008694 <__libc_init_array+0x40>)
 8008666:	4c0c      	ldr	r4, [pc, #48]	@ (8008698 <__libc_init_array+0x44>)
 8008668:	f000 feda 	bl	8009420 <_init>
 800866c:	1b64      	subs	r4, r4, r5
 800866e:	10a4      	asrs	r4, r4, #2
 8008670:	2600      	movs	r6, #0
 8008672:	42a6      	cmp	r6, r4
 8008674:	d105      	bne.n	8008682 <__libc_init_array+0x2e>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	f855 3b04 	ldr.w	r3, [r5], #4
 800867c:	4798      	blx	r3
 800867e:	3601      	adds	r6, #1
 8008680:	e7ee      	b.n	8008660 <__libc_init_array+0xc>
 8008682:	f855 3b04 	ldr.w	r3, [r5], #4
 8008686:	4798      	blx	r3
 8008688:	3601      	adds	r6, #1
 800868a:	e7f2      	b.n	8008672 <__libc_init_array+0x1e>
 800868c:	08009bf4 	.word	0x08009bf4
 8008690:	08009bf4 	.word	0x08009bf4
 8008694:	08009bf4 	.word	0x08009bf4
 8008698:	08009bf8 	.word	0x08009bf8

0800869c <__retarget_lock_init_recursive>:
 800869c:	4770      	bx	lr

0800869e <__retarget_lock_acquire_recursive>:
 800869e:	4770      	bx	lr

080086a0 <__retarget_lock_release_recursive>:
 80086a0:	4770      	bx	lr

080086a2 <memcpy>:
 80086a2:	440a      	add	r2, r1
 80086a4:	4291      	cmp	r1, r2
 80086a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80086aa:	d100      	bne.n	80086ae <memcpy+0xc>
 80086ac:	4770      	bx	lr
 80086ae:	b510      	push	{r4, lr}
 80086b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b8:	4291      	cmp	r1, r2
 80086ba:	d1f9      	bne.n	80086b0 <memcpy+0xe>
 80086bc:	bd10      	pop	{r4, pc}
	...

080086c0 <_free_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4605      	mov	r5, r0
 80086c4:	2900      	cmp	r1, #0
 80086c6:	d041      	beq.n	800874c <_free_r+0x8c>
 80086c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086cc:	1f0c      	subs	r4, r1, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfb8      	it	lt
 80086d2:	18e4      	addlt	r4, r4, r3
 80086d4:	f000 f8e0 	bl	8008898 <__malloc_lock>
 80086d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008750 <_free_r+0x90>)
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	b933      	cbnz	r3, 80086ec <_free_r+0x2c>
 80086de:	6063      	str	r3, [r4, #4]
 80086e0:	6014      	str	r4, [r2, #0]
 80086e2:	4628      	mov	r0, r5
 80086e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e8:	f000 b8dc 	b.w	80088a4 <__malloc_unlock>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d908      	bls.n	8008702 <_free_r+0x42>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	1821      	adds	r1, r4, r0
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf01      	itttt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	1809      	addeq	r1, r1, r0
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	e7ed      	b.n	80086de <_free_r+0x1e>
 8008702:	461a      	mov	r2, r3
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	b10b      	cbz	r3, 800870c <_free_r+0x4c>
 8008708:	42a3      	cmp	r3, r4
 800870a:	d9fa      	bls.n	8008702 <_free_r+0x42>
 800870c:	6811      	ldr	r1, [r2, #0]
 800870e:	1850      	adds	r0, r2, r1
 8008710:	42a0      	cmp	r0, r4
 8008712:	d10b      	bne.n	800872c <_free_r+0x6c>
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	4401      	add	r1, r0
 8008718:	1850      	adds	r0, r2, r1
 800871a:	4283      	cmp	r3, r0
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	d1e0      	bne.n	80086e2 <_free_r+0x22>
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	6053      	str	r3, [r2, #4]
 8008726:	4408      	add	r0, r1
 8008728:	6010      	str	r0, [r2, #0]
 800872a:	e7da      	b.n	80086e2 <_free_r+0x22>
 800872c:	d902      	bls.n	8008734 <_free_r+0x74>
 800872e:	230c      	movs	r3, #12
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	e7d6      	b.n	80086e2 <_free_r+0x22>
 8008734:	6820      	ldr	r0, [r4, #0]
 8008736:	1821      	adds	r1, r4, r0
 8008738:	428b      	cmp	r3, r1
 800873a:	bf04      	itt	eq
 800873c:	6819      	ldreq	r1, [r3, #0]
 800873e:	685b      	ldreq	r3, [r3, #4]
 8008740:	6063      	str	r3, [r4, #4]
 8008742:	bf04      	itt	eq
 8008744:	1809      	addeq	r1, r1, r0
 8008746:	6021      	streq	r1, [r4, #0]
 8008748:	6054      	str	r4, [r2, #4]
 800874a:	e7ca      	b.n	80086e2 <_free_r+0x22>
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	bf00      	nop
 8008750:	200016a0 	.word	0x200016a0

08008754 <sbrk_aligned>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	4e0f      	ldr	r6, [pc, #60]	@ (8008794 <sbrk_aligned+0x40>)
 8008758:	460c      	mov	r4, r1
 800875a:	6831      	ldr	r1, [r6, #0]
 800875c:	4605      	mov	r5, r0
 800875e:	b911      	cbnz	r1, 8008766 <sbrk_aligned+0x12>
 8008760:	f000 fe18 	bl	8009394 <_sbrk_r>
 8008764:	6030      	str	r0, [r6, #0]
 8008766:	4621      	mov	r1, r4
 8008768:	4628      	mov	r0, r5
 800876a:	f000 fe13 	bl	8009394 <_sbrk_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d103      	bne.n	800877a <sbrk_aligned+0x26>
 8008772:	f04f 34ff 	mov.w	r4, #4294967295
 8008776:	4620      	mov	r0, r4
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	1cc4      	adds	r4, r0, #3
 800877c:	f024 0403 	bic.w	r4, r4, #3
 8008780:	42a0      	cmp	r0, r4
 8008782:	d0f8      	beq.n	8008776 <sbrk_aligned+0x22>
 8008784:	1a21      	subs	r1, r4, r0
 8008786:	4628      	mov	r0, r5
 8008788:	f000 fe04 	bl	8009394 <_sbrk_r>
 800878c:	3001      	adds	r0, #1
 800878e:	d1f2      	bne.n	8008776 <sbrk_aligned+0x22>
 8008790:	e7ef      	b.n	8008772 <sbrk_aligned+0x1e>
 8008792:	bf00      	nop
 8008794:	2000169c 	.word	0x2000169c

08008798 <_malloc_r>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	1ccd      	adds	r5, r1, #3
 800879e:	f025 0503 	bic.w	r5, r5, #3
 80087a2:	3508      	adds	r5, #8
 80087a4:	2d0c      	cmp	r5, #12
 80087a6:	bf38      	it	cc
 80087a8:	250c      	movcc	r5, #12
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	4606      	mov	r6, r0
 80087ae:	db01      	blt.n	80087b4 <_malloc_r+0x1c>
 80087b0:	42a9      	cmp	r1, r5
 80087b2:	d904      	bls.n	80087be <_malloc_r+0x26>
 80087b4:	230c      	movs	r3, #12
 80087b6:	6033      	str	r3, [r6, #0]
 80087b8:	2000      	movs	r0, #0
 80087ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008894 <_malloc_r+0xfc>
 80087c2:	f000 f869 	bl	8008898 <__malloc_lock>
 80087c6:	f8d8 3000 	ldr.w	r3, [r8]
 80087ca:	461c      	mov	r4, r3
 80087cc:	bb44      	cbnz	r4, 8008820 <_malloc_r+0x88>
 80087ce:	4629      	mov	r1, r5
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff ffbf 	bl	8008754 <sbrk_aligned>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	4604      	mov	r4, r0
 80087da:	d158      	bne.n	800888e <_malloc_r+0xf6>
 80087dc:	f8d8 4000 	ldr.w	r4, [r8]
 80087e0:	4627      	mov	r7, r4
 80087e2:	2f00      	cmp	r7, #0
 80087e4:	d143      	bne.n	800886e <_malloc_r+0xd6>
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	d04b      	beq.n	8008882 <_malloc_r+0xea>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	4639      	mov	r1, r7
 80087ee:	4630      	mov	r0, r6
 80087f0:	eb04 0903 	add.w	r9, r4, r3
 80087f4:	f000 fdce 	bl	8009394 <_sbrk_r>
 80087f8:	4581      	cmp	r9, r0
 80087fa:	d142      	bne.n	8008882 <_malloc_r+0xea>
 80087fc:	6821      	ldr	r1, [r4, #0]
 80087fe:	1a6d      	subs	r5, r5, r1
 8008800:	4629      	mov	r1, r5
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ffa6 	bl	8008754 <sbrk_aligned>
 8008808:	3001      	adds	r0, #1
 800880a:	d03a      	beq.n	8008882 <_malloc_r+0xea>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	442b      	add	r3, r5
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	f8d8 3000 	ldr.w	r3, [r8]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	bb62      	cbnz	r2, 8008874 <_malloc_r+0xdc>
 800881a:	f8c8 7000 	str.w	r7, [r8]
 800881e:	e00f      	b.n	8008840 <_malloc_r+0xa8>
 8008820:	6822      	ldr	r2, [r4, #0]
 8008822:	1b52      	subs	r2, r2, r5
 8008824:	d420      	bmi.n	8008868 <_malloc_r+0xd0>
 8008826:	2a0b      	cmp	r2, #11
 8008828:	d917      	bls.n	800885a <_malloc_r+0xc2>
 800882a:	1961      	adds	r1, r4, r5
 800882c:	42a3      	cmp	r3, r4
 800882e:	6025      	str	r5, [r4, #0]
 8008830:	bf18      	it	ne
 8008832:	6059      	strne	r1, [r3, #4]
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	bf08      	it	eq
 8008838:	f8c8 1000 	streq.w	r1, [r8]
 800883c:	5162      	str	r2, [r4, r5]
 800883e:	604b      	str	r3, [r1, #4]
 8008840:	4630      	mov	r0, r6
 8008842:	f000 f82f 	bl	80088a4 <__malloc_unlock>
 8008846:	f104 000b 	add.w	r0, r4, #11
 800884a:	1d23      	adds	r3, r4, #4
 800884c:	f020 0007 	bic.w	r0, r0, #7
 8008850:	1ac2      	subs	r2, r0, r3
 8008852:	bf1c      	itt	ne
 8008854:	1a1b      	subne	r3, r3, r0
 8008856:	50a3      	strne	r3, [r4, r2]
 8008858:	e7af      	b.n	80087ba <_malloc_r+0x22>
 800885a:	6862      	ldr	r2, [r4, #4]
 800885c:	42a3      	cmp	r3, r4
 800885e:	bf0c      	ite	eq
 8008860:	f8c8 2000 	streq.w	r2, [r8]
 8008864:	605a      	strne	r2, [r3, #4]
 8008866:	e7eb      	b.n	8008840 <_malloc_r+0xa8>
 8008868:	4623      	mov	r3, r4
 800886a:	6864      	ldr	r4, [r4, #4]
 800886c:	e7ae      	b.n	80087cc <_malloc_r+0x34>
 800886e:	463c      	mov	r4, r7
 8008870:	687f      	ldr	r7, [r7, #4]
 8008872:	e7b6      	b.n	80087e2 <_malloc_r+0x4a>
 8008874:	461a      	mov	r2, r3
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	42a3      	cmp	r3, r4
 800887a:	d1fb      	bne.n	8008874 <_malloc_r+0xdc>
 800887c:	2300      	movs	r3, #0
 800887e:	6053      	str	r3, [r2, #4]
 8008880:	e7de      	b.n	8008840 <_malloc_r+0xa8>
 8008882:	230c      	movs	r3, #12
 8008884:	6033      	str	r3, [r6, #0]
 8008886:	4630      	mov	r0, r6
 8008888:	f000 f80c 	bl	80088a4 <__malloc_unlock>
 800888c:	e794      	b.n	80087b8 <_malloc_r+0x20>
 800888e:	6005      	str	r5, [r0, #0]
 8008890:	e7d6      	b.n	8008840 <_malloc_r+0xa8>
 8008892:	bf00      	nop
 8008894:	200016a0 	.word	0x200016a0

08008898 <__malloc_lock>:
 8008898:	4801      	ldr	r0, [pc, #4]	@ (80088a0 <__malloc_lock+0x8>)
 800889a:	f7ff bf00 	b.w	800869e <__retarget_lock_acquire_recursive>
 800889e:	bf00      	nop
 80088a0:	20001698 	.word	0x20001698

080088a4 <__malloc_unlock>:
 80088a4:	4801      	ldr	r0, [pc, #4]	@ (80088ac <__malloc_unlock+0x8>)
 80088a6:	f7ff befb 	b.w	80086a0 <__retarget_lock_release_recursive>
 80088aa:	bf00      	nop
 80088ac:	20001698 	.word	0x20001698

080088b0 <__ssputs_r>:
 80088b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b4:	688e      	ldr	r6, [r1, #8]
 80088b6:	461f      	mov	r7, r3
 80088b8:	42be      	cmp	r6, r7
 80088ba:	680b      	ldr	r3, [r1, #0]
 80088bc:	4682      	mov	sl, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	4690      	mov	r8, r2
 80088c2:	d82d      	bhi.n	8008920 <__ssputs_r+0x70>
 80088c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088cc:	d026      	beq.n	800891c <__ssputs_r+0x6c>
 80088ce:	6965      	ldr	r5, [r4, #20]
 80088d0:	6909      	ldr	r1, [r1, #16]
 80088d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088d6:	eba3 0901 	sub.w	r9, r3, r1
 80088da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088de:	1c7b      	adds	r3, r7, #1
 80088e0:	444b      	add	r3, r9
 80088e2:	106d      	asrs	r5, r5, #1
 80088e4:	429d      	cmp	r5, r3
 80088e6:	bf38      	it	cc
 80088e8:	461d      	movcc	r5, r3
 80088ea:	0553      	lsls	r3, r2, #21
 80088ec:	d527      	bpl.n	800893e <__ssputs_r+0x8e>
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7ff ff52 	bl	8008798 <_malloc_r>
 80088f4:	4606      	mov	r6, r0
 80088f6:	b360      	cbz	r0, 8008952 <__ssputs_r+0xa2>
 80088f8:	6921      	ldr	r1, [r4, #16]
 80088fa:	464a      	mov	r2, r9
 80088fc:	f7ff fed1 	bl	80086a2 <memcpy>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	6126      	str	r6, [r4, #16]
 800890e:	6165      	str	r5, [r4, #20]
 8008910:	444e      	add	r6, r9
 8008912:	eba5 0509 	sub.w	r5, r5, r9
 8008916:	6026      	str	r6, [r4, #0]
 8008918:	60a5      	str	r5, [r4, #8]
 800891a:	463e      	mov	r6, r7
 800891c:	42be      	cmp	r6, r7
 800891e:	d900      	bls.n	8008922 <__ssputs_r+0x72>
 8008920:	463e      	mov	r6, r7
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	4632      	mov	r2, r6
 8008926:	4641      	mov	r1, r8
 8008928:	f000 fcf8 	bl	800931c <memmove>
 800892c:	68a3      	ldr	r3, [r4, #8]
 800892e:	1b9b      	subs	r3, r3, r6
 8008930:	60a3      	str	r3, [r4, #8]
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	4433      	add	r3, r6
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	2000      	movs	r0, #0
 800893a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893e:	462a      	mov	r2, r5
 8008940:	f000 fd38 	bl	80093b4 <_realloc_r>
 8008944:	4606      	mov	r6, r0
 8008946:	2800      	cmp	r0, #0
 8008948:	d1e0      	bne.n	800890c <__ssputs_r+0x5c>
 800894a:	6921      	ldr	r1, [r4, #16]
 800894c:	4650      	mov	r0, sl
 800894e:	f7ff feb7 	bl	80086c0 <_free_r>
 8008952:	230c      	movs	r3, #12
 8008954:	f8ca 3000 	str.w	r3, [sl]
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	e7e9      	b.n	800893a <__ssputs_r+0x8a>
	...

08008968 <_svfiprintf_r>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	4698      	mov	r8, r3
 800896e:	898b      	ldrh	r3, [r1, #12]
 8008970:	061b      	lsls	r3, r3, #24
 8008972:	b09d      	sub	sp, #116	@ 0x74
 8008974:	4607      	mov	r7, r0
 8008976:	460d      	mov	r5, r1
 8008978:	4614      	mov	r4, r2
 800897a:	d510      	bpl.n	800899e <_svfiprintf_r+0x36>
 800897c:	690b      	ldr	r3, [r1, #16]
 800897e:	b973      	cbnz	r3, 800899e <_svfiprintf_r+0x36>
 8008980:	2140      	movs	r1, #64	@ 0x40
 8008982:	f7ff ff09 	bl	8008798 <_malloc_r>
 8008986:	6028      	str	r0, [r5, #0]
 8008988:	6128      	str	r0, [r5, #16]
 800898a:	b930      	cbnz	r0, 800899a <_svfiprintf_r+0x32>
 800898c:	230c      	movs	r3, #12
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	b01d      	add	sp, #116	@ 0x74
 8008996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899a:	2340      	movs	r3, #64	@ 0x40
 800899c:	616b      	str	r3, [r5, #20]
 800899e:	2300      	movs	r3, #0
 80089a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089a2:	2320      	movs	r3, #32
 80089a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ac:	2330      	movs	r3, #48	@ 0x30
 80089ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b4c <_svfiprintf_r+0x1e4>
 80089b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089b6:	f04f 0901 	mov.w	r9, #1
 80089ba:	4623      	mov	r3, r4
 80089bc:	469a      	mov	sl, r3
 80089be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089c2:	b10a      	cbz	r2, 80089c8 <_svfiprintf_r+0x60>
 80089c4:	2a25      	cmp	r2, #37	@ 0x25
 80089c6:	d1f9      	bne.n	80089bc <_svfiprintf_r+0x54>
 80089c8:	ebba 0b04 	subs.w	fp, sl, r4
 80089cc:	d00b      	beq.n	80089e6 <_svfiprintf_r+0x7e>
 80089ce:	465b      	mov	r3, fp
 80089d0:	4622      	mov	r2, r4
 80089d2:	4629      	mov	r1, r5
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff ff6b 	bl	80088b0 <__ssputs_r>
 80089da:	3001      	adds	r0, #1
 80089dc:	f000 80a7 	beq.w	8008b2e <_svfiprintf_r+0x1c6>
 80089e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089e2:	445a      	add	r2, fp
 80089e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80089e6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 809f 	beq.w	8008b2e <_svfiprintf_r+0x1c6>
 80089f0:	2300      	movs	r3, #0
 80089f2:	f04f 32ff 	mov.w	r2, #4294967295
 80089f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089fa:	f10a 0a01 	add.w	sl, sl, #1
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	9307      	str	r3, [sp, #28]
 8008a02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a06:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a08:	4654      	mov	r4, sl
 8008a0a:	2205      	movs	r2, #5
 8008a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a10:	484e      	ldr	r0, [pc, #312]	@ (8008b4c <_svfiprintf_r+0x1e4>)
 8008a12:	f7f7 fbe5 	bl	80001e0 <memchr>
 8008a16:	9a04      	ldr	r2, [sp, #16]
 8008a18:	b9d8      	cbnz	r0, 8008a52 <_svfiprintf_r+0xea>
 8008a1a:	06d0      	lsls	r0, r2, #27
 8008a1c:	bf44      	itt	mi
 8008a1e:	2320      	movmi	r3, #32
 8008a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a24:	0711      	lsls	r1, r2, #28
 8008a26:	bf44      	itt	mi
 8008a28:	232b      	movmi	r3, #43	@ 0x2b
 8008a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a34:	d015      	beq.n	8008a62 <_svfiprintf_r+0xfa>
 8008a36:	9a07      	ldr	r2, [sp, #28]
 8008a38:	4654      	mov	r4, sl
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	f04f 0c0a 	mov.w	ip, #10
 8008a40:	4621      	mov	r1, r4
 8008a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a46:	3b30      	subs	r3, #48	@ 0x30
 8008a48:	2b09      	cmp	r3, #9
 8008a4a:	d94b      	bls.n	8008ae4 <_svfiprintf_r+0x17c>
 8008a4c:	b1b0      	cbz	r0, 8008a7c <_svfiprintf_r+0x114>
 8008a4e:	9207      	str	r2, [sp, #28]
 8008a50:	e014      	b.n	8008a7c <_svfiprintf_r+0x114>
 8008a52:	eba0 0308 	sub.w	r3, r0, r8
 8008a56:	fa09 f303 	lsl.w	r3, r9, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	46a2      	mov	sl, r4
 8008a60:	e7d2      	b.n	8008a08 <_svfiprintf_r+0xa0>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	9103      	str	r1, [sp, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	bfbb      	ittet	lt
 8008a6e:	425b      	neglt	r3, r3
 8008a70:	f042 0202 	orrlt.w	r2, r2, #2
 8008a74:	9307      	strge	r3, [sp, #28]
 8008a76:	9307      	strlt	r3, [sp, #28]
 8008a78:	bfb8      	it	lt
 8008a7a:	9204      	strlt	r2, [sp, #16]
 8008a7c:	7823      	ldrb	r3, [r4, #0]
 8008a7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a80:	d10a      	bne.n	8008a98 <_svfiprintf_r+0x130>
 8008a82:	7863      	ldrb	r3, [r4, #1]
 8008a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a86:	d132      	bne.n	8008aee <_svfiprintf_r+0x186>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	1d1a      	adds	r2, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	9203      	str	r2, [sp, #12]
 8008a90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a94:	3402      	adds	r4, #2
 8008a96:	9305      	str	r3, [sp, #20]
 8008a98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b5c <_svfiprintf_r+0x1f4>
 8008a9c:	7821      	ldrb	r1, [r4, #0]
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	4650      	mov	r0, sl
 8008aa2:	f7f7 fb9d 	bl	80001e0 <memchr>
 8008aa6:	b138      	cbz	r0, 8008ab8 <_svfiprintf_r+0x150>
 8008aa8:	9b04      	ldr	r3, [sp, #16]
 8008aaa:	eba0 000a 	sub.w	r0, r0, sl
 8008aae:	2240      	movs	r2, #64	@ 0x40
 8008ab0:	4082      	lsls	r2, r0
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	3401      	adds	r4, #1
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008abc:	4824      	ldr	r0, [pc, #144]	@ (8008b50 <_svfiprintf_r+0x1e8>)
 8008abe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	f7f7 fb8c 	bl	80001e0 <memchr>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d036      	beq.n	8008b3a <_svfiprintf_r+0x1d2>
 8008acc:	4b21      	ldr	r3, [pc, #132]	@ (8008b54 <_svfiprintf_r+0x1ec>)
 8008ace:	bb1b      	cbnz	r3, 8008b18 <_svfiprintf_r+0x1b0>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	3307      	adds	r3, #7
 8008ad4:	f023 0307 	bic.w	r3, r3, #7
 8008ad8:	3308      	adds	r3, #8
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ade:	4433      	add	r3, r6
 8008ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae2:	e76a      	b.n	80089ba <_svfiprintf_r+0x52>
 8008ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ae8:	460c      	mov	r4, r1
 8008aea:	2001      	movs	r0, #1
 8008aec:	e7a8      	b.n	8008a40 <_svfiprintf_r+0xd8>
 8008aee:	2300      	movs	r3, #0
 8008af0:	3401      	adds	r4, #1
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	4619      	mov	r1, r3
 8008af6:	f04f 0c0a 	mov.w	ip, #10
 8008afa:	4620      	mov	r0, r4
 8008afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b00:	3a30      	subs	r2, #48	@ 0x30
 8008b02:	2a09      	cmp	r2, #9
 8008b04:	d903      	bls.n	8008b0e <_svfiprintf_r+0x1a6>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0c6      	beq.n	8008a98 <_svfiprintf_r+0x130>
 8008b0a:	9105      	str	r1, [sp, #20]
 8008b0c:	e7c4      	b.n	8008a98 <_svfiprintf_r+0x130>
 8008b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b12:	4604      	mov	r4, r0
 8008b14:	2301      	movs	r3, #1
 8008b16:	e7f0      	b.n	8008afa <_svfiprintf_r+0x192>
 8008b18:	ab03      	add	r3, sp, #12
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b58 <_svfiprintf_r+0x1f0>)
 8008b20:	a904      	add	r1, sp, #16
 8008b22:	4638      	mov	r0, r7
 8008b24:	f3af 8000 	nop.w
 8008b28:	1c42      	adds	r2, r0, #1
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	d1d6      	bne.n	8008adc <_svfiprintf_r+0x174>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	065b      	lsls	r3, r3, #25
 8008b32:	f53f af2d 	bmi.w	8008990 <_svfiprintf_r+0x28>
 8008b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b38:	e72c      	b.n	8008994 <_svfiprintf_r+0x2c>
 8008b3a:	ab03      	add	r3, sp, #12
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	462a      	mov	r2, r5
 8008b40:	4b05      	ldr	r3, [pc, #20]	@ (8008b58 <_svfiprintf_r+0x1f0>)
 8008b42:	a904      	add	r1, sp, #16
 8008b44:	4638      	mov	r0, r7
 8008b46:	f000 f9bb 	bl	8008ec0 <_printf_i>
 8008b4a:	e7ed      	b.n	8008b28 <_svfiprintf_r+0x1c0>
 8008b4c:	08009bb8 	.word	0x08009bb8
 8008b50:	08009bc2 	.word	0x08009bc2
 8008b54:	00000000 	.word	0x00000000
 8008b58:	080088b1 	.word	0x080088b1
 8008b5c:	08009bbe 	.word	0x08009bbe

08008b60 <__sfputc_r>:
 8008b60:	6893      	ldr	r3, [r2, #8]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	b410      	push	{r4}
 8008b68:	6093      	str	r3, [r2, #8]
 8008b6a:	da08      	bge.n	8008b7e <__sfputc_r+0x1e>
 8008b6c:	6994      	ldr	r4, [r2, #24]
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	db01      	blt.n	8008b76 <__sfputc_r+0x16>
 8008b72:	290a      	cmp	r1, #10
 8008b74:	d103      	bne.n	8008b7e <__sfputc_r+0x1e>
 8008b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b7a:	f7ff bc5c 	b.w	8008436 <__swbuf_r>
 8008b7e:	6813      	ldr	r3, [r2, #0]
 8008b80:	1c58      	adds	r0, r3, #1
 8008b82:	6010      	str	r0, [r2, #0]
 8008b84:	7019      	strb	r1, [r3, #0]
 8008b86:	4608      	mov	r0, r1
 8008b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <__sfputs_r>:
 8008b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b90:	4606      	mov	r6, r0
 8008b92:	460f      	mov	r7, r1
 8008b94:	4614      	mov	r4, r2
 8008b96:	18d5      	adds	r5, r2, r3
 8008b98:	42ac      	cmp	r4, r5
 8008b9a:	d101      	bne.n	8008ba0 <__sfputs_r+0x12>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e007      	b.n	8008bb0 <__sfputs_r+0x22>
 8008ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba4:	463a      	mov	r2, r7
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7ff ffda 	bl	8008b60 <__sfputc_r>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d1f3      	bne.n	8008b98 <__sfputs_r+0xa>
 8008bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bb4 <_vfiprintf_r>:
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	460d      	mov	r5, r1
 8008bba:	b09d      	sub	sp, #116	@ 0x74
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	4698      	mov	r8, r3
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	b118      	cbz	r0, 8008bcc <_vfiprintf_r+0x18>
 8008bc4:	6a03      	ldr	r3, [r0, #32]
 8008bc6:	b90b      	cbnz	r3, 8008bcc <_vfiprintf_r+0x18>
 8008bc8:	f7ff fb2c 	bl	8008224 <__sinit>
 8008bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bce:	07d9      	lsls	r1, r3, #31
 8008bd0:	d405      	bmi.n	8008bde <_vfiprintf_r+0x2a>
 8008bd2:	89ab      	ldrh	r3, [r5, #12]
 8008bd4:	059a      	lsls	r2, r3, #22
 8008bd6:	d402      	bmi.n	8008bde <_vfiprintf_r+0x2a>
 8008bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bda:	f7ff fd60 	bl	800869e <__retarget_lock_acquire_recursive>
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	071b      	lsls	r3, r3, #28
 8008be2:	d501      	bpl.n	8008be8 <_vfiprintf_r+0x34>
 8008be4:	692b      	ldr	r3, [r5, #16]
 8008be6:	b99b      	cbnz	r3, 8008c10 <_vfiprintf_r+0x5c>
 8008be8:	4629      	mov	r1, r5
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7ff fc62 	bl	80084b4 <__swsetup_r>
 8008bf0:	b170      	cbz	r0, 8008c10 <_vfiprintf_r+0x5c>
 8008bf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bf4:	07dc      	lsls	r4, r3, #31
 8008bf6:	d504      	bpl.n	8008c02 <_vfiprintf_r+0x4e>
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfc:	b01d      	add	sp, #116	@ 0x74
 8008bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	0598      	lsls	r0, r3, #22
 8008c06:	d4f7      	bmi.n	8008bf8 <_vfiprintf_r+0x44>
 8008c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c0a:	f7ff fd49 	bl	80086a0 <__retarget_lock_release_recursive>
 8008c0e:	e7f3      	b.n	8008bf8 <_vfiprintf_r+0x44>
 8008c10:	2300      	movs	r3, #0
 8008c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c14:	2320      	movs	r3, #32
 8008c16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c1e:	2330      	movs	r3, #48	@ 0x30
 8008c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008dd0 <_vfiprintf_r+0x21c>
 8008c24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	469a      	mov	sl, r3
 8008c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c34:	b10a      	cbz	r2, 8008c3a <_vfiprintf_r+0x86>
 8008c36:	2a25      	cmp	r2, #37	@ 0x25
 8008c38:	d1f9      	bne.n	8008c2e <_vfiprintf_r+0x7a>
 8008c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c3e:	d00b      	beq.n	8008c58 <_vfiprintf_r+0xa4>
 8008c40:	465b      	mov	r3, fp
 8008c42:	4622      	mov	r2, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ffa1 	bl	8008b8e <__sfputs_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f000 80a7 	beq.w	8008da0 <_vfiprintf_r+0x1ec>
 8008c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c54:	445a      	add	r2, fp
 8008c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c58:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 809f 	beq.w	8008da0 <_vfiprintf_r+0x1ec>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f04f 32ff 	mov.w	r2, #4294967295
 8008c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6c:	f10a 0a01 	add.w	sl, sl, #1
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	9307      	str	r3, [sp, #28]
 8008c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c7a:	4654      	mov	r4, sl
 8008c7c:	2205      	movs	r2, #5
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	4853      	ldr	r0, [pc, #332]	@ (8008dd0 <_vfiprintf_r+0x21c>)
 8008c84:	f7f7 faac 	bl	80001e0 <memchr>
 8008c88:	9a04      	ldr	r2, [sp, #16]
 8008c8a:	b9d8      	cbnz	r0, 8008cc4 <_vfiprintf_r+0x110>
 8008c8c:	06d1      	lsls	r1, r2, #27
 8008c8e:	bf44      	itt	mi
 8008c90:	2320      	movmi	r3, #32
 8008c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c96:	0713      	lsls	r3, r2, #28
 8008c98:	bf44      	itt	mi
 8008c9a:	232b      	movmi	r3, #43	@ 0x2b
 8008c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca6:	d015      	beq.n	8008cd4 <_vfiprintf_r+0x120>
 8008ca8:	9a07      	ldr	r2, [sp, #28]
 8008caa:	4654      	mov	r4, sl
 8008cac:	2000      	movs	r0, #0
 8008cae:	f04f 0c0a 	mov.w	ip, #10
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb8:	3b30      	subs	r3, #48	@ 0x30
 8008cba:	2b09      	cmp	r3, #9
 8008cbc:	d94b      	bls.n	8008d56 <_vfiprintf_r+0x1a2>
 8008cbe:	b1b0      	cbz	r0, 8008cee <_vfiprintf_r+0x13a>
 8008cc0:	9207      	str	r2, [sp, #28]
 8008cc2:	e014      	b.n	8008cee <_vfiprintf_r+0x13a>
 8008cc4:	eba0 0308 	sub.w	r3, r0, r8
 8008cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	46a2      	mov	sl, r4
 8008cd2:	e7d2      	b.n	8008c7a <_vfiprintf_r+0xc6>
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	1d19      	adds	r1, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	9103      	str	r1, [sp, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfbb      	ittet	lt
 8008ce0:	425b      	neglt	r3, r3
 8008ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce6:	9307      	strge	r3, [sp, #28]
 8008ce8:	9307      	strlt	r3, [sp, #28]
 8008cea:	bfb8      	it	lt
 8008cec:	9204      	strlt	r2, [sp, #16]
 8008cee:	7823      	ldrb	r3, [r4, #0]
 8008cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cf2:	d10a      	bne.n	8008d0a <_vfiprintf_r+0x156>
 8008cf4:	7863      	ldrb	r3, [r4, #1]
 8008cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cf8:	d132      	bne.n	8008d60 <_vfiprintf_r+0x1ac>
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	1d1a      	adds	r2, r3, #4
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	9203      	str	r2, [sp, #12]
 8008d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d06:	3402      	adds	r4, #2
 8008d08:	9305      	str	r3, [sp, #20]
 8008d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008de0 <_vfiprintf_r+0x22c>
 8008d0e:	7821      	ldrb	r1, [r4, #0]
 8008d10:	2203      	movs	r2, #3
 8008d12:	4650      	mov	r0, sl
 8008d14:	f7f7 fa64 	bl	80001e0 <memchr>
 8008d18:	b138      	cbz	r0, 8008d2a <_vfiprintf_r+0x176>
 8008d1a:	9b04      	ldr	r3, [sp, #16]
 8008d1c:	eba0 000a 	sub.w	r0, r0, sl
 8008d20:	2240      	movs	r2, #64	@ 0x40
 8008d22:	4082      	lsls	r2, r0
 8008d24:	4313      	orrs	r3, r2
 8008d26:	3401      	adds	r4, #1
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2e:	4829      	ldr	r0, [pc, #164]	@ (8008dd4 <_vfiprintf_r+0x220>)
 8008d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d34:	2206      	movs	r2, #6
 8008d36:	f7f7 fa53 	bl	80001e0 <memchr>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d03f      	beq.n	8008dbe <_vfiprintf_r+0x20a>
 8008d3e:	4b26      	ldr	r3, [pc, #152]	@ (8008dd8 <_vfiprintf_r+0x224>)
 8008d40:	bb1b      	cbnz	r3, 8008d8a <_vfiprintf_r+0x1d6>
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	3307      	adds	r3, #7
 8008d46:	f023 0307 	bic.w	r3, r3, #7
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	9303      	str	r3, [sp, #12]
 8008d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d50:	443b      	add	r3, r7
 8008d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d54:	e76a      	b.n	8008c2c <_vfiprintf_r+0x78>
 8008d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	2001      	movs	r0, #1
 8008d5e:	e7a8      	b.n	8008cb2 <_vfiprintf_r+0xfe>
 8008d60:	2300      	movs	r3, #0
 8008d62:	3401      	adds	r4, #1
 8008d64:	9305      	str	r3, [sp, #20]
 8008d66:	4619      	mov	r1, r3
 8008d68:	f04f 0c0a 	mov.w	ip, #10
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d72:	3a30      	subs	r2, #48	@ 0x30
 8008d74:	2a09      	cmp	r2, #9
 8008d76:	d903      	bls.n	8008d80 <_vfiprintf_r+0x1cc>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0c6      	beq.n	8008d0a <_vfiprintf_r+0x156>
 8008d7c:	9105      	str	r1, [sp, #20]
 8008d7e:	e7c4      	b.n	8008d0a <_vfiprintf_r+0x156>
 8008d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d84:	4604      	mov	r4, r0
 8008d86:	2301      	movs	r3, #1
 8008d88:	e7f0      	b.n	8008d6c <_vfiprintf_r+0x1b8>
 8008d8a:	ab03      	add	r3, sp, #12
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4b12      	ldr	r3, [pc, #72]	@ (8008ddc <_vfiprintf_r+0x228>)
 8008d92:	a904      	add	r1, sp, #16
 8008d94:	4630      	mov	r0, r6
 8008d96:	f3af 8000 	nop.w
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	1c78      	adds	r0, r7, #1
 8008d9e:	d1d6      	bne.n	8008d4e <_vfiprintf_r+0x19a>
 8008da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008da2:	07d9      	lsls	r1, r3, #31
 8008da4:	d405      	bmi.n	8008db2 <_vfiprintf_r+0x1fe>
 8008da6:	89ab      	ldrh	r3, [r5, #12]
 8008da8:	059a      	lsls	r2, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_vfiprintf_r+0x1fe>
 8008dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dae:	f7ff fc77 	bl	80086a0 <__retarget_lock_release_recursive>
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	065b      	lsls	r3, r3, #25
 8008db6:	f53f af1f 	bmi.w	8008bf8 <_vfiprintf_r+0x44>
 8008dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dbc:	e71e      	b.n	8008bfc <_vfiprintf_r+0x48>
 8008dbe:	ab03      	add	r3, sp, #12
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4b05      	ldr	r3, [pc, #20]	@ (8008ddc <_vfiprintf_r+0x228>)
 8008dc6:	a904      	add	r1, sp, #16
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f000 f879 	bl	8008ec0 <_printf_i>
 8008dce:	e7e4      	b.n	8008d9a <_vfiprintf_r+0x1e6>
 8008dd0:	08009bb8 	.word	0x08009bb8
 8008dd4:	08009bc2 	.word	0x08009bc2
 8008dd8:	00000000 	.word	0x00000000
 8008ddc:	08008b8f 	.word	0x08008b8f
 8008de0:	08009bbe 	.word	0x08009bbe

08008de4 <_printf_common>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	4616      	mov	r6, r2
 8008dea:	4698      	mov	r8, r3
 8008dec:	688a      	ldr	r2, [r1, #8]
 8008dee:	690b      	ldr	r3, [r1, #16]
 8008df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008df4:	4293      	cmp	r3, r2
 8008df6:	bfb8      	it	lt
 8008df8:	4613      	movlt	r3, r2
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e00:	4607      	mov	r7, r0
 8008e02:	460c      	mov	r4, r1
 8008e04:	b10a      	cbz	r2, 8008e0a <_printf_common+0x26>
 8008e06:	3301      	adds	r3, #1
 8008e08:	6033      	str	r3, [r6, #0]
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	0699      	lsls	r1, r3, #26
 8008e0e:	bf42      	ittt	mi
 8008e10:	6833      	ldrmi	r3, [r6, #0]
 8008e12:	3302      	addmi	r3, #2
 8008e14:	6033      	strmi	r3, [r6, #0]
 8008e16:	6825      	ldr	r5, [r4, #0]
 8008e18:	f015 0506 	ands.w	r5, r5, #6
 8008e1c:	d106      	bne.n	8008e2c <_printf_common+0x48>
 8008e1e:	f104 0a19 	add.w	sl, r4, #25
 8008e22:	68e3      	ldr	r3, [r4, #12]
 8008e24:	6832      	ldr	r2, [r6, #0]
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	42ab      	cmp	r3, r5
 8008e2a:	dc26      	bgt.n	8008e7a <_printf_common+0x96>
 8008e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e30:	6822      	ldr	r2, [r4, #0]
 8008e32:	3b00      	subs	r3, #0
 8008e34:	bf18      	it	ne
 8008e36:	2301      	movne	r3, #1
 8008e38:	0692      	lsls	r2, r2, #26
 8008e3a:	d42b      	bmi.n	8008e94 <_printf_common+0xb0>
 8008e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e40:	4641      	mov	r1, r8
 8008e42:	4638      	mov	r0, r7
 8008e44:	47c8      	blx	r9
 8008e46:	3001      	adds	r0, #1
 8008e48:	d01e      	beq.n	8008e88 <_printf_common+0xa4>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	6922      	ldr	r2, [r4, #16]
 8008e4e:	f003 0306 	and.w	r3, r3, #6
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	bf02      	ittt	eq
 8008e56:	68e5      	ldreq	r5, [r4, #12]
 8008e58:	6833      	ldreq	r3, [r6, #0]
 8008e5a:	1aed      	subeq	r5, r5, r3
 8008e5c:	68a3      	ldr	r3, [r4, #8]
 8008e5e:	bf0c      	ite	eq
 8008e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e64:	2500      	movne	r5, #0
 8008e66:	4293      	cmp	r3, r2
 8008e68:	bfc4      	itt	gt
 8008e6a:	1a9b      	subgt	r3, r3, r2
 8008e6c:	18ed      	addgt	r5, r5, r3
 8008e6e:	2600      	movs	r6, #0
 8008e70:	341a      	adds	r4, #26
 8008e72:	42b5      	cmp	r5, r6
 8008e74:	d11a      	bne.n	8008eac <_printf_common+0xc8>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e008      	b.n	8008e8c <_printf_common+0xa8>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4652      	mov	r2, sl
 8008e7e:	4641      	mov	r1, r8
 8008e80:	4638      	mov	r0, r7
 8008e82:	47c8      	blx	r9
 8008e84:	3001      	adds	r0, #1
 8008e86:	d103      	bne.n	8008e90 <_printf_common+0xac>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	3501      	adds	r5, #1
 8008e92:	e7c6      	b.n	8008e22 <_printf_common+0x3e>
 8008e94:	18e1      	adds	r1, r4, r3
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	2030      	movs	r0, #48	@ 0x30
 8008e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e9e:	4422      	add	r2, r4
 8008ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	e7c7      	b.n	8008e3c <_printf_common+0x58>
 8008eac:	2301      	movs	r3, #1
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4641      	mov	r1, r8
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	47c8      	blx	r9
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d0e6      	beq.n	8008e88 <_printf_common+0xa4>
 8008eba:	3601      	adds	r6, #1
 8008ebc:	e7d9      	b.n	8008e72 <_printf_common+0x8e>
	...

08008ec0 <_printf_i>:
 8008ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	7e0f      	ldrb	r7, [r1, #24]
 8008ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ec8:	2f78      	cmp	r7, #120	@ 0x78
 8008eca:	4691      	mov	r9, r2
 8008ecc:	4680      	mov	r8, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	469a      	mov	sl, r3
 8008ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ed6:	d807      	bhi.n	8008ee8 <_printf_i+0x28>
 8008ed8:	2f62      	cmp	r7, #98	@ 0x62
 8008eda:	d80a      	bhi.n	8008ef2 <_printf_i+0x32>
 8008edc:	2f00      	cmp	r7, #0
 8008ede:	f000 80d2 	beq.w	8009086 <_printf_i+0x1c6>
 8008ee2:	2f58      	cmp	r7, #88	@ 0x58
 8008ee4:	f000 80b9 	beq.w	800905a <_printf_i+0x19a>
 8008ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ef0:	e03a      	b.n	8008f68 <_printf_i+0xa8>
 8008ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ef6:	2b15      	cmp	r3, #21
 8008ef8:	d8f6      	bhi.n	8008ee8 <_printf_i+0x28>
 8008efa:	a101      	add	r1, pc, #4	@ (adr r1, 8008f00 <_printf_i+0x40>)
 8008efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f00:	08008f59 	.word	0x08008f59
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008ee9 	.word	0x08008ee9
 8008f0c:	08008ee9 	.word	0x08008ee9
 8008f10:	08008ee9 	.word	0x08008ee9
 8008f14:	08008ee9 	.word	0x08008ee9
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008ee9 	.word	0x08008ee9
 8008f20:	08008ee9 	.word	0x08008ee9
 8008f24:	08008ee9 	.word	0x08008ee9
 8008f28:	08008ee9 	.word	0x08008ee9
 8008f2c:	0800906d 	.word	0x0800906d
 8008f30:	08008f97 	.word	0x08008f97
 8008f34:	08009027 	.word	0x08009027
 8008f38:	08008ee9 	.word	0x08008ee9
 8008f3c:	08008ee9 	.word	0x08008ee9
 8008f40:	0800908f 	.word	0x0800908f
 8008f44:	08008ee9 	.word	0x08008ee9
 8008f48:	08008f97 	.word	0x08008f97
 8008f4c:	08008ee9 	.word	0x08008ee9
 8008f50:	08008ee9 	.word	0x08008ee9
 8008f54:	0800902f 	.word	0x0800902f
 8008f58:	6833      	ldr	r3, [r6, #0]
 8008f5a:	1d1a      	adds	r2, r3, #4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6032      	str	r2, [r6, #0]
 8008f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e09d      	b.n	80090a8 <_printf_i+0x1e8>
 8008f6c:	6833      	ldr	r3, [r6, #0]
 8008f6e:	6820      	ldr	r0, [r4, #0]
 8008f70:	1d19      	adds	r1, r3, #4
 8008f72:	6031      	str	r1, [r6, #0]
 8008f74:	0606      	lsls	r6, r0, #24
 8008f76:	d501      	bpl.n	8008f7c <_printf_i+0xbc>
 8008f78:	681d      	ldr	r5, [r3, #0]
 8008f7a:	e003      	b.n	8008f84 <_printf_i+0xc4>
 8008f7c:	0645      	lsls	r5, r0, #25
 8008f7e:	d5fb      	bpl.n	8008f78 <_printf_i+0xb8>
 8008f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f84:	2d00      	cmp	r5, #0
 8008f86:	da03      	bge.n	8008f90 <_printf_i+0xd0>
 8008f88:	232d      	movs	r3, #45	@ 0x2d
 8008f8a:	426d      	negs	r5, r5
 8008f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f90:	4859      	ldr	r0, [pc, #356]	@ (80090f8 <_printf_i+0x238>)
 8008f92:	230a      	movs	r3, #10
 8008f94:	e011      	b.n	8008fba <_printf_i+0xfa>
 8008f96:	6821      	ldr	r1, [r4, #0]
 8008f98:	6833      	ldr	r3, [r6, #0]
 8008f9a:	0608      	lsls	r0, r1, #24
 8008f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fa0:	d402      	bmi.n	8008fa8 <_printf_i+0xe8>
 8008fa2:	0649      	lsls	r1, r1, #25
 8008fa4:	bf48      	it	mi
 8008fa6:	b2ad      	uxthmi	r5, r5
 8008fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008faa:	4853      	ldr	r0, [pc, #332]	@ (80090f8 <_printf_i+0x238>)
 8008fac:	6033      	str	r3, [r6, #0]
 8008fae:	bf14      	ite	ne
 8008fb0:	230a      	movne	r3, #10
 8008fb2:	2308      	moveq	r3, #8
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fba:	6866      	ldr	r6, [r4, #4]
 8008fbc:	60a6      	str	r6, [r4, #8]
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	bfa2      	ittt	ge
 8008fc2:	6821      	ldrge	r1, [r4, #0]
 8008fc4:	f021 0104 	bicge.w	r1, r1, #4
 8008fc8:	6021      	strge	r1, [r4, #0]
 8008fca:	b90d      	cbnz	r5, 8008fd0 <_printf_i+0x110>
 8008fcc:	2e00      	cmp	r6, #0
 8008fce:	d04b      	beq.n	8009068 <_printf_i+0x1a8>
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8008fda:	5dc7      	ldrb	r7, [r0, r7]
 8008fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fe0:	462f      	mov	r7, r5
 8008fe2:	42bb      	cmp	r3, r7
 8008fe4:	460d      	mov	r5, r1
 8008fe6:	d9f4      	bls.n	8008fd2 <_printf_i+0x112>
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d10b      	bne.n	8009004 <_printf_i+0x144>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	07df      	lsls	r7, r3, #31
 8008ff0:	d508      	bpl.n	8009004 <_printf_i+0x144>
 8008ff2:	6923      	ldr	r3, [r4, #16]
 8008ff4:	6861      	ldr	r1, [r4, #4]
 8008ff6:	4299      	cmp	r1, r3
 8008ff8:	bfde      	ittt	le
 8008ffa:	2330      	movle	r3, #48	@ 0x30
 8008ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009000:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009004:	1b92      	subs	r2, r2, r6
 8009006:	6122      	str	r2, [r4, #16]
 8009008:	f8cd a000 	str.w	sl, [sp]
 800900c:	464b      	mov	r3, r9
 800900e:	aa03      	add	r2, sp, #12
 8009010:	4621      	mov	r1, r4
 8009012:	4640      	mov	r0, r8
 8009014:	f7ff fee6 	bl	8008de4 <_printf_common>
 8009018:	3001      	adds	r0, #1
 800901a:	d14a      	bne.n	80090b2 <_printf_i+0x1f2>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	b004      	add	sp, #16
 8009022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	f043 0320 	orr.w	r3, r3, #32
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	4833      	ldr	r0, [pc, #204]	@ (80090fc <_printf_i+0x23c>)
 8009030:	2778      	movs	r7, #120	@ 0x78
 8009032:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	6831      	ldr	r1, [r6, #0]
 800903a:	061f      	lsls	r7, r3, #24
 800903c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009040:	d402      	bmi.n	8009048 <_printf_i+0x188>
 8009042:	065f      	lsls	r7, r3, #25
 8009044:	bf48      	it	mi
 8009046:	b2ad      	uxthmi	r5, r5
 8009048:	6031      	str	r1, [r6, #0]
 800904a:	07d9      	lsls	r1, r3, #31
 800904c:	bf44      	itt	mi
 800904e:	f043 0320 	orrmi.w	r3, r3, #32
 8009052:	6023      	strmi	r3, [r4, #0]
 8009054:	b11d      	cbz	r5, 800905e <_printf_i+0x19e>
 8009056:	2310      	movs	r3, #16
 8009058:	e7ac      	b.n	8008fb4 <_printf_i+0xf4>
 800905a:	4827      	ldr	r0, [pc, #156]	@ (80090f8 <_printf_i+0x238>)
 800905c:	e7e9      	b.n	8009032 <_printf_i+0x172>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	f023 0320 	bic.w	r3, r3, #32
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	e7f6      	b.n	8009056 <_printf_i+0x196>
 8009068:	4616      	mov	r6, r2
 800906a:	e7bd      	b.n	8008fe8 <_printf_i+0x128>
 800906c:	6833      	ldr	r3, [r6, #0]
 800906e:	6825      	ldr	r5, [r4, #0]
 8009070:	6961      	ldr	r1, [r4, #20]
 8009072:	1d18      	adds	r0, r3, #4
 8009074:	6030      	str	r0, [r6, #0]
 8009076:	062e      	lsls	r6, r5, #24
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	d501      	bpl.n	8009080 <_printf_i+0x1c0>
 800907c:	6019      	str	r1, [r3, #0]
 800907e:	e002      	b.n	8009086 <_printf_i+0x1c6>
 8009080:	0668      	lsls	r0, r5, #25
 8009082:	d5fb      	bpl.n	800907c <_printf_i+0x1bc>
 8009084:	8019      	strh	r1, [r3, #0]
 8009086:	2300      	movs	r3, #0
 8009088:	6123      	str	r3, [r4, #16]
 800908a:	4616      	mov	r6, r2
 800908c:	e7bc      	b.n	8009008 <_printf_i+0x148>
 800908e:	6833      	ldr	r3, [r6, #0]
 8009090:	1d1a      	adds	r2, r3, #4
 8009092:	6032      	str	r2, [r6, #0]
 8009094:	681e      	ldr	r6, [r3, #0]
 8009096:	6862      	ldr	r2, [r4, #4]
 8009098:	2100      	movs	r1, #0
 800909a:	4630      	mov	r0, r6
 800909c:	f7f7 f8a0 	bl	80001e0 <memchr>
 80090a0:	b108      	cbz	r0, 80090a6 <_printf_i+0x1e6>
 80090a2:	1b80      	subs	r0, r0, r6
 80090a4:	6060      	str	r0, [r4, #4]
 80090a6:	6863      	ldr	r3, [r4, #4]
 80090a8:	6123      	str	r3, [r4, #16]
 80090aa:	2300      	movs	r3, #0
 80090ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090b0:	e7aa      	b.n	8009008 <_printf_i+0x148>
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	4632      	mov	r2, r6
 80090b6:	4649      	mov	r1, r9
 80090b8:	4640      	mov	r0, r8
 80090ba:	47d0      	blx	sl
 80090bc:	3001      	adds	r0, #1
 80090be:	d0ad      	beq.n	800901c <_printf_i+0x15c>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	079b      	lsls	r3, r3, #30
 80090c4:	d413      	bmi.n	80090ee <_printf_i+0x22e>
 80090c6:	68e0      	ldr	r0, [r4, #12]
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	4298      	cmp	r0, r3
 80090cc:	bfb8      	it	lt
 80090ce:	4618      	movlt	r0, r3
 80090d0:	e7a6      	b.n	8009020 <_printf_i+0x160>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4632      	mov	r2, r6
 80090d6:	4649      	mov	r1, r9
 80090d8:	4640      	mov	r0, r8
 80090da:	47d0      	blx	sl
 80090dc:	3001      	adds	r0, #1
 80090de:	d09d      	beq.n	800901c <_printf_i+0x15c>
 80090e0:	3501      	adds	r5, #1
 80090e2:	68e3      	ldr	r3, [r4, #12]
 80090e4:	9903      	ldr	r1, [sp, #12]
 80090e6:	1a5b      	subs	r3, r3, r1
 80090e8:	42ab      	cmp	r3, r5
 80090ea:	dcf2      	bgt.n	80090d2 <_printf_i+0x212>
 80090ec:	e7eb      	b.n	80090c6 <_printf_i+0x206>
 80090ee:	2500      	movs	r5, #0
 80090f0:	f104 0619 	add.w	r6, r4, #25
 80090f4:	e7f5      	b.n	80090e2 <_printf_i+0x222>
 80090f6:	bf00      	nop
 80090f8:	08009bc9 	.word	0x08009bc9
 80090fc:	08009bda 	.word	0x08009bda

08009100 <__sflush_r>:
 8009100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009108:	0716      	lsls	r6, r2, #28
 800910a:	4605      	mov	r5, r0
 800910c:	460c      	mov	r4, r1
 800910e:	d454      	bmi.n	80091ba <__sflush_r+0xba>
 8009110:	684b      	ldr	r3, [r1, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	dc02      	bgt.n	800911c <__sflush_r+0x1c>
 8009116:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	dd48      	ble.n	80091ae <__sflush_r+0xae>
 800911c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800911e:	2e00      	cmp	r6, #0
 8009120:	d045      	beq.n	80091ae <__sflush_r+0xae>
 8009122:	2300      	movs	r3, #0
 8009124:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009128:	682f      	ldr	r7, [r5, #0]
 800912a:	6a21      	ldr	r1, [r4, #32]
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	d030      	beq.n	8009192 <__sflush_r+0x92>
 8009130:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	0759      	lsls	r1, r3, #29
 8009136:	d505      	bpl.n	8009144 <__sflush_r+0x44>
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	1ad2      	subs	r2, r2, r3
 800913c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800913e:	b10b      	cbz	r3, 8009144 <__sflush_r+0x44>
 8009140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	2300      	movs	r3, #0
 8009146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009148:	6a21      	ldr	r1, [r4, #32]
 800914a:	4628      	mov	r0, r5
 800914c:	47b0      	blx	r6
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	d106      	bne.n	8009162 <__sflush_r+0x62>
 8009154:	6829      	ldr	r1, [r5, #0]
 8009156:	291d      	cmp	r1, #29
 8009158:	d82b      	bhi.n	80091b2 <__sflush_r+0xb2>
 800915a:	4a2a      	ldr	r2, [pc, #168]	@ (8009204 <__sflush_r+0x104>)
 800915c:	410a      	asrs	r2, r1
 800915e:	07d6      	lsls	r6, r2, #31
 8009160:	d427      	bmi.n	80091b2 <__sflush_r+0xb2>
 8009162:	2200      	movs	r2, #0
 8009164:	6062      	str	r2, [r4, #4]
 8009166:	04d9      	lsls	r1, r3, #19
 8009168:	6922      	ldr	r2, [r4, #16]
 800916a:	6022      	str	r2, [r4, #0]
 800916c:	d504      	bpl.n	8009178 <__sflush_r+0x78>
 800916e:	1c42      	adds	r2, r0, #1
 8009170:	d101      	bne.n	8009176 <__sflush_r+0x76>
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	b903      	cbnz	r3, 8009178 <__sflush_r+0x78>
 8009176:	6560      	str	r0, [r4, #84]	@ 0x54
 8009178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800917a:	602f      	str	r7, [r5, #0]
 800917c:	b1b9      	cbz	r1, 80091ae <__sflush_r+0xae>
 800917e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009182:	4299      	cmp	r1, r3
 8009184:	d002      	beq.n	800918c <__sflush_r+0x8c>
 8009186:	4628      	mov	r0, r5
 8009188:	f7ff fa9a 	bl	80086c0 <_free_r>
 800918c:	2300      	movs	r3, #0
 800918e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009190:	e00d      	b.n	80091ae <__sflush_r+0xae>
 8009192:	2301      	movs	r3, #1
 8009194:	4628      	mov	r0, r5
 8009196:	47b0      	blx	r6
 8009198:	4602      	mov	r2, r0
 800919a:	1c50      	adds	r0, r2, #1
 800919c:	d1c9      	bne.n	8009132 <__sflush_r+0x32>
 800919e:	682b      	ldr	r3, [r5, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0c6      	beq.n	8009132 <__sflush_r+0x32>
 80091a4:	2b1d      	cmp	r3, #29
 80091a6:	d001      	beq.n	80091ac <__sflush_r+0xac>
 80091a8:	2b16      	cmp	r3, #22
 80091aa:	d11e      	bne.n	80091ea <__sflush_r+0xea>
 80091ac:	602f      	str	r7, [r5, #0]
 80091ae:	2000      	movs	r0, #0
 80091b0:	e022      	b.n	80091f8 <__sflush_r+0xf8>
 80091b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091b6:	b21b      	sxth	r3, r3
 80091b8:	e01b      	b.n	80091f2 <__sflush_r+0xf2>
 80091ba:	690f      	ldr	r7, [r1, #16]
 80091bc:	2f00      	cmp	r7, #0
 80091be:	d0f6      	beq.n	80091ae <__sflush_r+0xae>
 80091c0:	0793      	lsls	r3, r2, #30
 80091c2:	680e      	ldr	r6, [r1, #0]
 80091c4:	bf08      	it	eq
 80091c6:	694b      	ldreq	r3, [r1, #20]
 80091c8:	600f      	str	r7, [r1, #0]
 80091ca:	bf18      	it	ne
 80091cc:	2300      	movne	r3, #0
 80091ce:	eba6 0807 	sub.w	r8, r6, r7
 80091d2:	608b      	str	r3, [r1, #8]
 80091d4:	f1b8 0f00 	cmp.w	r8, #0
 80091d8:	dde9      	ble.n	80091ae <__sflush_r+0xae>
 80091da:	6a21      	ldr	r1, [r4, #32]
 80091dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091de:	4643      	mov	r3, r8
 80091e0:	463a      	mov	r2, r7
 80091e2:	4628      	mov	r0, r5
 80091e4:	47b0      	blx	r6
 80091e6:	2800      	cmp	r0, #0
 80091e8:	dc08      	bgt.n	80091fc <__sflush_r+0xfc>
 80091ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fc:	4407      	add	r7, r0
 80091fe:	eba8 0800 	sub.w	r8, r8, r0
 8009202:	e7e7      	b.n	80091d4 <__sflush_r+0xd4>
 8009204:	dfbffffe 	.word	0xdfbffffe

08009208 <_fflush_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	4605      	mov	r5, r0
 800920e:	460c      	mov	r4, r1
 8009210:	b913      	cbnz	r3, 8009218 <_fflush_r+0x10>
 8009212:	2500      	movs	r5, #0
 8009214:	4628      	mov	r0, r5
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	b118      	cbz	r0, 8009222 <_fflush_r+0x1a>
 800921a:	6a03      	ldr	r3, [r0, #32]
 800921c:	b90b      	cbnz	r3, 8009222 <_fflush_r+0x1a>
 800921e:	f7ff f801 	bl	8008224 <__sinit>
 8009222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f3      	beq.n	8009212 <_fflush_r+0xa>
 800922a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800922c:	07d0      	lsls	r0, r2, #31
 800922e:	d404      	bmi.n	800923a <_fflush_r+0x32>
 8009230:	0599      	lsls	r1, r3, #22
 8009232:	d402      	bmi.n	800923a <_fflush_r+0x32>
 8009234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009236:	f7ff fa32 	bl	800869e <__retarget_lock_acquire_recursive>
 800923a:	4628      	mov	r0, r5
 800923c:	4621      	mov	r1, r4
 800923e:	f7ff ff5f 	bl	8009100 <__sflush_r>
 8009242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009244:	07da      	lsls	r2, r3, #31
 8009246:	4605      	mov	r5, r0
 8009248:	d4e4      	bmi.n	8009214 <_fflush_r+0xc>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	059b      	lsls	r3, r3, #22
 800924e:	d4e1      	bmi.n	8009214 <_fflush_r+0xc>
 8009250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009252:	f7ff fa25 	bl	80086a0 <__retarget_lock_release_recursive>
 8009256:	e7dd      	b.n	8009214 <_fflush_r+0xc>

08009258 <__swhatbuf_r>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	460c      	mov	r4, r1
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	2900      	cmp	r1, #0
 8009262:	b096      	sub	sp, #88	@ 0x58
 8009264:	4615      	mov	r5, r2
 8009266:	461e      	mov	r6, r3
 8009268:	da0d      	bge.n	8009286 <__swhatbuf_r+0x2e>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009270:	f04f 0100 	mov.w	r1, #0
 8009274:	bf14      	ite	ne
 8009276:	2340      	movne	r3, #64	@ 0x40
 8009278:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800927c:	2000      	movs	r0, #0
 800927e:	6031      	str	r1, [r6, #0]
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	b016      	add	sp, #88	@ 0x58
 8009284:	bd70      	pop	{r4, r5, r6, pc}
 8009286:	466a      	mov	r2, sp
 8009288:	f000 f862 	bl	8009350 <_fstat_r>
 800928c:	2800      	cmp	r0, #0
 800928e:	dbec      	blt.n	800926a <__swhatbuf_r+0x12>
 8009290:	9901      	ldr	r1, [sp, #4]
 8009292:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009296:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800929a:	4259      	negs	r1, r3
 800929c:	4159      	adcs	r1, r3
 800929e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092a2:	e7eb      	b.n	800927c <__swhatbuf_r+0x24>

080092a4 <__smakebuf_r>:
 80092a4:	898b      	ldrh	r3, [r1, #12]
 80092a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a8:	079d      	lsls	r5, r3, #30
 80092aa:	4606      	mov	r6, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	d507      	bpl.n	80092c0 <__smakebuf_r+0x1c>
 80092b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	2301      	movs	r3, #1
 80092ba:	6163      	str	r3, [r4, #20]
 80092bc:	b003      	add	sp, #12
 80092be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c0:	ab01      	add	r3, sp, #4
 80092c2:	466a      	mov	r2, sp
 80092c4:	f7ff ffc8 	bl	8009258 <__swhatbuf_r>
 80092c8:	9f00      	ldr	r7, [sp, #0]
 80092ca:	4605      	mov	r5, r0
 80092cc:	4639      	mov	r1, r7
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff fa62 	bl	8008798 <_malloc_r>
 80092d4:	b948      	cbnz	r0, 80092ea <__smakebuf_r+0x46>
 80092d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092da:	059a      	lsls	r2, r3, #22
 80092dc:	d4ee      	bmi.n	80092bc <__smakebuf_r+0x18>
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	f043 0302 	orr.w	r3, r3, #2
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	e7e2      	b.n	80092b0 <__smakebuf_r+0xc>
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	6020      	str	r0, [r4, #0]
 80092ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	9b01      	ldr	r3, [sp, #4]
 80092f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092fa:	b15b      	cbz	r3, 8009314 <__smakebuf_r+0x70>
 80092fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009300:	4630      	mov	r0, r6
 8009302:	f000 f837 	bl	8009374 <_isatty_r>
 8009306:	b128      	cbz	r0, 8009314 <__smakebuf_r+0x70>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	f043 0301 	orr.w	r3, r3, #1
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	431d      	orrs	r5, r3
 8009318:	81a5      	strh	r5, [r4, #12]
 800931a:	e7cf      	b.n	80092bc <__smakebuf_r+0x18>

0800931c <memmove>:
 800931c:	4288      	cmp	r0, r1
 800931e:	b510      	push	{r4, lr}
 8009320:	eb01 0402 	add.w	r4, r1, r2
 8009324:	d902      	bls.n	800932c <memmove+0x10>
 8009326:	4284      	cmp	r4, r0
 8009328:	4623      	mov	r3, r4
 800932a:	d807      	bhi.n	800933c <memmove+0x20>
 800932c:	1e43      	subs	r3, r0, #1
 800932e:	42a1      	cmp	r1, r4
 8009330:	d008      	beq.n	8009344 <memmove+0x28>
 8009332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800933a:	e7f8      	b.n	800932e <memmove+0x12>
 800933c:	4402      	add	r2, r0
 800933e:	4601      	mov	r1, r0
 8009340:	428a      	cmp	r2, r1
 8009342:	d100      	bne.n	8009346 <memmove+0x2a>
 8009344:	bd10      	pop	{r4, pc}
 8009346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800934a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800934e:	e7f7      	b.n	8009340 <memmove+0x24>

08009350 <_fstat_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	@ (8009370 <_fstat_r+0x20>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	f7f8 fb9c 	bl	8001a9a <_fstat>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d102      	bne.n	800936c <_fstat_r+0x1c>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b103      	cbz	r3, 800936c <_fstat_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	bf00      	nop
 8009370:	20001694 	.word	0x20001694

08009374 <_isatty_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d06      	ldr	r5, [pc, #24]	@ (8009390 <_isatty_r+0x1c>)
 8009378:	2300      	movs	r3, #0
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7f8 fb9b 	bl	8001aba <_isatty>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_isatty_r+0x1a>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_isatty_r+0x1a>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20001694 	.word	0x20001694

08009394 <_sbrk_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d06      	ldr	r5, [pc, #24]	@ (80093b0 <_sbrk_r+0x1c>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	602b      	str	r3, [r5, #0]
 80093a0:	f7f8 fba4 	bl	8001aec <_sbrk>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d102      	bne.n	80093ae <_sbrk_r+0x1a>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b103      	cbz	r3, 80093ae <_sbrk_r+0x1a>
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	20001694 	.word	0x20001694

080093b4 <_realloc_r>:
 80093b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b8:	4680      	mov	r8, r0
 80093ba:	4615      	mov	r5, r2
 80093bc:	460c      	mov	r4, r1
 80093be:	b921      	cbnz	r1, 80093ca <_realloc_r+0x16>
 80093c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	4611      	mov	r1, r2
 80093c6:	f7ff b9e7 	b.w	8008798 <_malloc_r>
 80093ca:	b92a      	cbnz	r2, 80093d8 <_realloc_r+0x24>
 80093cc:	f7ff f978 	bl	80086c0 <_free_r>
 80093d0:	2400      	movs	r4, #0
 80093d2:	4620      	mov	r0, r4
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d8:	f000 f81a 	bl	8009410 <_malloc_usable_size_r>
 80093dc:	4285      	cmp	r5, r0
 80093de:	4606      	mov	r6, r0
 80093e0:	d802      	bhi.n	80093e8 <_realloc_r+0x34>
 80093e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093e6:	d8f4      	bhi.n	80093d2 <_realloc_r+0x1e>
 80093e8:	4629      	mov	r1, r5
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7ff f9d4 	bl	8008798 <_malloc_r>
 80093f0:	4607      	mov	r7, r0
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0ec      	beq.n	80093d0 <_realloc_r+0x1c>
 80093f6:	42b5      	cmp	r5, r6
 80093f8:	462a      	mov	r2, r5
 80093fa:	4621      	mov	r1, r4
 80093fc:	bf28      	it	cs
 80093fe:	4632      	movcs	r2, r6
 8009400:	f7ff f94f 	bl	80086a2 <memcpy>
 8009404:	4621      	mov	r1, r4
 8009406:	4640      	mov	r0, r8
 8009408:	f7ff f95a 	bl	80086c0 <_free_r>
 800940c:	463c      	mov	r4, r7
 800940e:	e7e0      	b.n	80093d2 <_realloc_r+0x1e>

08009410 <_malloc_usable_size_r>:
 8009410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009414:	1f18      	subs	r0, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfbc      	itt	lt
 800941a:	580b      	ldrlt	r3, [r1, r0]
 800941c:	18c0      	addlt	r0, r0, r3
 800941e:	4770      	bx	lr

08009420 <_init>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr

0800942c <_fini>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr
